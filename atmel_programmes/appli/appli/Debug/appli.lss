
appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001198  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00001198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  20000070  00001208  00020070  2**2
                  ALLOC
  3 .stack        00002000  200000e0  00001278  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001709f  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000241c  00000000  00000000  00037190  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000024f3  00000000  00000000  000395ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000330  00000000  00000000  0003ba9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002e8  00000000  00000000  0003bdcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017eaf  00000000  00000000  0003c0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007b77  00000000  00000000  00053f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088006  00000000  00000000  0005badd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000008e8  00000000  00000000  000e3ae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 20 00 20 19 01 00 00 15 01 00 00 15 01 00 00     . . ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00001198 	.word	0x00001198

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00001198 	.word	0x00001198
     10c:	00001198 	.word	0x00001198
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00001198 	.word	0x00001198
     1c8:	20000000 	.word	0x20000000
     1cc:	20000070 	.word	0x20000070
     1d0:	20000004 	.word	0x20000004
     1d4:	20000070 	.word	0x20000070
     1d8:	200000e0 	.word	0x200000e0
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00000f1d 	.word	0x00000f1d
     1f8:	00000b1d 	.word	0x00000b1d

000001fc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     1fc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     1fe:	2000      	movs	r0, #0
     200:	4b08      	ldr	r3, [pc, #32]	; (224 <delay_init+0x28>)
     202:	4798      	blx	r3
     204:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     206:	4c08      	ldr	r4, [pc, #32]	; (228 <delay_init+0x2c>)
     208:	21fa      	movs	r1, #250	; 0xfa
     20a:	0089      	lsls	r1, r1, #2
     20c:	47a0      	blx	r4
     20e:	4b07      	ldr	r3, [pc, #28]	; (22c <delay_init+0x30>)
     210:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     212:	4907      	ldr	r1, [pc, #28]	; (230 <delay_init+0x34>)
     214:	0028      	movs	r0, r5
     216:	47a0      	blx	r4
     218:	4b06      	ldr	r3, [pc, #24]	; (234 <delay_init+0x38>)
     21a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     21c:	2205      	movs	r2, #5
     21e:	4b06      	ldr	r3, [pc, #24]	; (238 <delay_init+0x3c>)
     220:	601a      	str	r2, [r3, #0]
}
     222:	bd70      	pop	{r4, r5, r6, pc}
     224:	00000849 	.word	0x00000849
     228:	00000bdd 	.word	0x00000bdd
     22c:	20000000 	.word	0x20000000
     230:	000f4240 	.word	0x000f4240
     234:	20000004 	.word	0x20000004
     238:	e000e010 	.word	0xe000e010

0000023c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     23c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     23e:	4b08      	ldr	r3, [pc, #32]	; (260 <delay_cycles_us+0x24>)
     240:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     242:	4a08      	ldr	r2, [pc, #32]	; (264 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     244:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     246:	2180      	movs	r1, #128	; 0x80
     248:	0249      	lsls	r1, r1, #9
	while (n--) {
     24a:	3801      	subs	r0, #1
     24c:	d307      	bcc.n	25e <delay_cycles_us+0x22>
	if (n > 0) {
     24e:	2c00      	cmp	r4, #0
     250:	d0fb      	beq.n	24a <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     252:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     254:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     256:	6813      	ldr	r3, [r2, #0]
     258:	420b      	tst	r3, r1
     25a:	d0fc      	beq.n	256 <delay_cycles_us+0x1a>
     25c:	e7f5      	b.n	24a <delay_cycles_us+0xe>
	}
}
     25e:	bd30      	pop	{r4, r5, pc}
     260:	20000004 	.word	0x20000004
     264:	e000e010 	.word	0xe000e010

00000268 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     268:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     26a:	4b08      	ldr	r3, [pc, #32]	; (28c <delay_cycles_ms+0x24>)
     26c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     26e:	4a08      	ldr	r2, [pc, #32]	; (290 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     270:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     272:	2180      	movs	r1, #128	; 0x80
     274:	0249      	lsls	r1, r1, #9
	while (n--) {
     276:	3801      	subs	r0, #1
     278:	d307      	bcc.n	28a <delay_cycles_ms+0x22>
	if (n > 0) {
     27a:	2c00      	cmp	r4, #0
     27c:	d0fb      	beq.n	276 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     27e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     280:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     282:	6813      	ldr	r3, [r2, #0]
     284:	420b      	tst	r3, r1
     286:	d0fc      	beq.n	282 <delay_cycles_ms+0x1a>
     288:	e7f5      	b.n	276 <delay_cycles_ms+0xe>
	}
}
     28a:	bd30      	pop	{r4, r5, pc}
     28c:	20000000 	.word	0x20000000
     290:	e000e010 	.word	0xe000e010

00000294 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     294:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     296:	7a98      	ldrb	r0, [r3, #10]
     298:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     29a:	4770      	bx	lr

0000029c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     29c:	b570      	push	{r4, r5, r6, lr}
     29e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     2a0:	6806      	ldr	r6, [r0, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     2a2:	4d05      	ldr	r5, [pc, #20]	; (2b8 <rtc_count_enable+0x1c>)
     2a4:	0020      	movs	r0, r4
     2a6:	47a8      	blx	r5
     2a8:	2800      	cmp	r0, #0
     2aa:	d1fb      	bne.n	2a4 <rtc_count_enable+0x8>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     2ac:	8833      	ldrh	r3, [r6, #0]
     2ae:	2202      	movs	r2, #2
     2b0:	4313      	orrs	r3, r2
     2b2:	8033      	strh	r3, [r6, #0]
}
     2b4:	bd70      	pop	{r4, r5, r6, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	00000295 	.word	0x00000295

000002bc <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     2bc:	b570      	push	{r4, r5, r6, lr}
     2be:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     2c0:	6806      	ldr	r6, [r0, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     2c2:	4d06      	ldr	r5, [pc, #24]	; (2dc <rtc_count_disable+0x20>)
     2c4:	0020      	movs	r0, r4
     2c6:	47a8      	blx	r5
     2c8:	2800      	cmp	r0, #0
     2ca:	d1fb      	bne.n	2c4 <rtc_count_disable+0x8>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     2cc:	23c1      	movs	r3, #193	; 0xc1
     2ce:	71b3      	strb	r3, [r6, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     2d0:	7233      	strb	r3, [r6, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     2d2:	8833      	ldrh	r3, [r6, #0]
     2d4:	2202      	movs	r2, #2
     2d6:	4393      	bics	r3, r2
     2d8:	8033      	strh	r3, [r6, #0]
}
     2da:	bd70      	pop	{r4, r5, r6, pc}
     2dc:	00000295 	.word	0x00000295

000002e0 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     2e0:	b570      	push	{r4, r5, r6, lr}
     2e2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     2e4:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     2e6:	4b06      	ldr	r3, [pc, #24]	; (300 <rtc_count_reset+0x20>)
     2e8:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
     2ea:	4d06      	ldr	r5, [pc, #24]	; (304 <rtc_count_reset+0x24>)
     2ec:	0020      	movs	r0, r4
     2ee:	47a8      	blx	r5
     2f0:	2800      	cmp	r0, #0
     2f2:	d1fb      	bne.n	2ec <rtc_count_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     2f4:	8833      	ldrh	r3, [r6, #0]
     2f6:	2201      	movs	r2, #1
     2f8:	4313      	orrs	r3, r2
     2fa:	8033      	strh	r3, [r6, #0]
}
     2fc:	bd70      	pop	{r4, r5, r6, pc}
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	000002bd 	.word	0x000002bd
     304:	00000295 	.word	0x00000295

00000308 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     308:	b5f0      	push	{r4, r5, r6, r7, lr}
     30a:	b083      	sub	sp, #12
     30c:	0004      	movs	r4, r0
     30e:	9101      	str	r1, [sp, #4]
     310:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     312:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     314:	4f11      	ldr	r7, [pc, #68]	; (35c <rtc_count_set_compare+0x54>)
     316:	0020      	movs	r0, r4
     318:	47b8      	blx	r7
     31a:	2800      	cmp	r0, #0
     31c:	d1fb      	bne.n	316 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     31e:	7923      	ldrb	r3, [r4, #4]
     320:	2b00      	cmp	r3, #0
     322:	d00a      	beq.n	33a <rtc_count_set_compare+0x32>
     324:	2b01      	cmp	r3, #1
     326:	d116      	bne.n	356 <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     328:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     32a:	2d01      	cmp	r5, #1
     32c:	d814      	bhi.n	358 <rtc_count_set_compare+0x50>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     32e:	3506      	adds	r5, #6
     330:	00ad      	lsls	r5, r5, #2
     332:	9b01      	ldr	r3, [sp, #4]
     334:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     336:	2000      	movs	r0, #0
			break;
     338:	e00e      	b.n	358 <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
     33a:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     33c:	2d02      	cmp	r5, #2
     33e:	d80b      	bhi.n	358 <rtc_count_set_compare+0x50>
			if (comp_value > 0xffff) {
     340:	4b07      	ldr	r3, [pc, #28]	; (360 <rtc_count_set_compare+0x58>)
     342:	9a01      	ldr	r2, [sp, #4]
     344:	429a      	cmp	r2, r3
     346:	d807      	bhi.n	358 <rtc_count_set_compare+0x50>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     348:	466b      	mov	r3, sp
     34a:	889b      	ldrh	r3, [r3, #4]
     34c:	350c      	adds	r5, #12
     34e:	006d      	lsls	r5, r5, #1
     350:	53ab      	strh	r3, [r5, r6]
	return STATUS_OK;
     352:	2000      	movs	r0, #0
			break;
     354:	e000      	b.n	358 <rtc_count_set_compare+0x50>
			return STATUS_ERR_BAD_FORMAT;
     356:	201a      	movs	r0, #26
}
     358:	b003      	add	sp, #12
     35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     35c:	00000295 	.word	0x00000295
     360:	0000ffff 	.word	0x0000ffff

00000364 <rtc_count_init>:
{
     364:	b5f0      	push	{r4, r5, r6, r7, lr}
     366:	b083      	sub	sp, #12
     368:	0004      	movs	r4, r0
     36a:	0016      	movs	r6, r2
	module->hw = hw;
     36c:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     36e:	4a30      	ldr	r2, [pc, #192]	; (430 <rtc_count_init+0xcc>)
     370:	6993      	ldr	r3, [r2, #24]
     372:	2120      	movs	r1, #32
     374:	430b      	orrs	r3, r1
     376:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     378:	a901      	add	r1, sp, #4
     37a:	2302      	movs	r3, #2
     37c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     37e:	2004      	movs	r0, #4
     380:	4b2c      	ldr	r3, [pc, #176]	; (434 <rtc_count_init+0xd0>)
     382:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     384:	2004      	movs	r0, #4
     386:	4b2c      	ldr	r3, [pc, #176]	; (438 <rtc_count_init+0xd4>)
     388:	4798      	blx	r3
	rtc_count_reset(module);
     38a:	0020      	movs	r0, r4
     38c:	4b2b      	ldr	r3, [pc, #172]	; (43c <rtc_count_init+0xd8>)
     38e:	4798      	blx	r3
	module->mode                = config->mode;
     390:	78b3      	ldrb	r3, [r6, #2]
     392:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     394:	7933      	ldrb	r3, [r6, #4]
     396:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
     398:	4b29      	ldr	r3, [pc, #164]	; (440 <rtc_count_init+0xdc>)
     39a:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     39c:	6827      	ldr	r7, [r4, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     39e:	8833      	ldrh	r3, [r6, #0]
     3a0:	803b      	strh	r3, [r7, #0]
	switch (config->mode) {
     3a2:	78b3      	ldrb	r3, [r6, #2]
     3a4:	2b00      	cmp	r3, #0
     3a6:	d026      	beq.n	3f6 <rtc_count_init+0x92>
			return STATUS_ERR_INVALID_ARG;
     3a8:	2017      	movs	r0, #23
	switch (config->mode) {
     3aa:	2b01      	cmp	r3, #1
     3ac:	d121      	bne.n	3f2 <rtc_count_init+0x8e>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     3ae:	883b      	ldrh	r3, [r7, #0]
     3b0:	b29b      	uxth	r3, r3
     3b2:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     3b4:	78f3      	ldrb	r3, [r6, #3]
     3b6:	2b00      	cmp	r3, #0
     3b8:	d003      	beq.n	3c2 <rtc_count_init+0x5e>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     3ba:	883b      	ldrh	r3, [r7, #0]
     3bc:	2280      	movs	r2, #128	; 0x80
     3be:	4313      	orrs	r3, r2
     3c0:	803b      	strh	r3, [r7, #0]
				while (rtc_count_is_syncing(module)) {
     3c2:	4d20      	ldr	r5, [pc, #128]	; (444 <rtc_count_init+0xe0>)
     3c4:	0020      	movs	r0, r4
     3c6:	47a8      	blx	r5
     3c8:	2800      	cmp	r0, #0
     3ca:	d1fb      	bne.n	3c4 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     3cc:	2200      	movs	r2, #0
     3ce:	68b1      	ldr	r1, [r6, #8]
     3d0:	0020      	movs	r0, r4
     3d2:	4b1d      	ldr	r3, [pc, #116]	; (448 <rtc_count_init+0xe4>)
     3d4:	4798      	blx	r3
	if (config->continuously_update) {
     3d6:	7933      	ldrb	r3, [r6, #4]
	return STATUS_OK;
     3d8:	2000      	movs	r0, #0
	if (config->continuously_update) {
     3da:	2b00      	cmp	r3, #0
     3dc:	d009      	beq.n	3f2 <rtc_count_init+0x8e>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     3de:	887b      	ldrh	r3, [r7, #2]
     3e0:	2280      	movs	r2, #128	; 0x80
     3e2:	01d2      	lsls	r2, r2, #7
     3e4:	4313      	orrs	r3, r2
     3e6:	807b      	strh	r3, [r7, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
     3e8:	887b      	ldrh	r3, [r7, #2]
     3ea:	2280      	movs	r2, #128	; 0x80
     3ec:	0212      	lsls	r2, r2, #8
     3ee:	4313      	orrs	r3, r2
     3f0:	807b      	strh	r3, [r7, #2]
}
     3f2:	b003      	add	sp, #12
     3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     3f6:	883b      	ldrh	r3, [r7, #0]
     3f8:	2204      	movs	r2, #4
     3fa:	4313      	orrs	r3, r2
     3fc:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     3fe:	78f3      	ldrb	r3, [r6, #3]
				return STATUS_ERR_INVALID_ARG;
     400:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     402:	2b00      	cmp	r3, #0
     404:	d1f5      	bne.n	3f2 <rtc_count_init+0x8e>
				while (rtc_count_is_syncing(module)) {
     406:	4d0f      	ldr	r5, [pc, #60]	; (444 <rtc_count_init+0xe0>)
     408:	0020      	movs	r0, r4
     40a:	47a8      	blx	r5
     40c:	2800      	cmp	r0, #0
     40e:	d1fb      	bne.n	408 <rtc_count_init+0xa4>
				rtc_count_set_compare(module, config->compare_values[i],
     410:	2200      	movs	r2, #0
     412:	68b1      	ldr	r1, [r6, #8]
     414:	0020      	movs	r0, r4
     416:	4b0c      	ldr	r3, [pc, #48]	; (448 <rtc_count_init+0xe4>)
     418:	4798      	blx	r3
				while (rtc_count_is_syncing(module)) {
     41a:	4d0a      	ldr	r5, [pc, #40]	; (444 <rtc_count_init+0xe0>)
     41c:	0020      	movs	r0, r4
     41e:	47a8      	blx	r5
     420:	2800      	cmp	r0, #0
     422:	d1fb      	bne.n	41c <rtc_count_init+0xb8>
				rtc_count_set_compare(module, config->compare_values[i],
     424:	2201      	movs	r2, #1
     426:	68f1      	ldr	r1, [r6, #12]
     428:	0020      	movs	r0, r4
     42a:	4b07      	ldr	r3, [pc, #28]	; (448 <rtc_count_init+0xe4>)
     42c:	4798      	blx	r3
     42e:	e7d2      	b.n	3d6 <rtc_count_init+0x72>
     430:	40000400 	.word	0x40000400
     434:	00000961 	.word	0x00000961
     438:	000008d5 	.word	0x000008d5
     43c:	000002e1 	.word	0x000002e1
     440:	200000b8 	.word	0x200000b8
     444:	00000295 	.word	0x00000295
     448:	00000309 	.word	0x00000309

0000044c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     44c:	4b0c      	ldr	r3, [pc, #48]	; (480 <cpu_irq_enter_critical+0x34>)
     44e:	681b      	ldr	r3, [r3, #0]
     450:	2b00      	cmp	r3, #0
     452:	d106      	bne.n	462 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     454:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     458:	2b00      	cmp	r3, #0
     45a:	d007      	beq.n	46c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     45c:	2200      	movs	r2, #0
     45e:	4b09      	ldr	r3, [pc, #36]	; (484 <cpu_irq_enter_critical+0x38>)
     460:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     462:	4a07      	ldr	r2, [pc, #28]	; (480 <cpu_irq_enter_critical+0x34>)
     464:	6813      	ldr	r3, [r2, #0]
     466:	3301      	adds	r3, #1
     468:	6013      	str	r3, [r2, #0]
}
     46a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     46c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     46e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     472:	2200      	movs	r2, #0
     474:	4b04      	ldr	r3, [pc, #16]	; (488 <cpu_irq_enter_critical+0x3c>)
     476:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     478:	3201      	adds	r2, #1
     47a:	4b02      	ldr	r3, [pc, #8]	; (484 <cpu_irq_enter_critical+0x38>)
     47c:	701a      	strb	r2, [r3, #0]
     47e:	e7f0      	b.n	462 <cpu_irq_enter_critical+0x16>
     480:	2000008c 	.word	0x2000008c
     484:	20000090 	.word	0x20000090
     488:	20000008 	.word	0x20000008

0000048c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     48c:	4b08      	ldr	r3, [pc, #32]	; (4b0 <cpu_irq_leave_critical+0x24>)
     48e:	681a      	ldr	r2, [r3, #0]
     490:	3a01      	subs	r2, #1
     492:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     494:	681b      	ldr	r3, [r3, #0]
     496:	2b00      	cmp	r3, #0
     498:	d109      	bne.n	4ae <cpu_irq_leave_critical+0x22>
     49a:	4b06      	ldr	r3, [pc, #24]	; (4b4 <cpu_irq_leave_critical+0x28>)
     49c:	781b      	ldrb	r3, [r3, #0]
     49e:	2b00      	cmp	r3, #0
     4a0:	d005      	beq.n	4ae <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     4a2:	2201      	movs	r2, #1
     4a4:	4b04      	ldr	r3, [pc, #16]	; (4b8 <cpu_irq_leave_critical+0x2c>)
     4a6:	701a      	strb	r2, [r3, #0]
     4a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     4ac:	b662      	cpsie	i
	}
}
     4ae:	4770      	bx	lr
     4b0:	2000008c 	.word	0x2000008c
     4b4:	20000090 	.word	0x20000090
     4b8:	20000008 	.word	0x20000008

000004bc <system_board_init>:




void system_board_init(void)
{
     4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4be:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     4c0:	ac01      	add	r4, sp, #4
     4c2:	2501      	movs	r5, #1
     4c4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     4c6:	2700      	movs	r7, #0
     4c8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     4ca:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     4cc:	0021      	movs	r1, r4
     4ce:	2013      	movs	r0, #19
     4d0:	4e06      	ldr	r6, [pc, #24]	; (4ec <system_board_init+0x30>)
     4d2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     4d4:	2280      	movs	r2, #128	; 0x80
     4d6:	0312      	lsls	r2, r2, #12
     4d8:	4b05      	ldr	r3, [pc, #20]	; (4f0 <system_board_init+0x34>)
     4da:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     4dc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     4de:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     4e0:	0021      	movs	r1, r4
     4e2:	201c      	movs	r0, #28
     4e4:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     4e6:	b003      	add	sp, #12
     4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	000004f5 	.word	0x000004f5
     4f0:	41004400 	.word	0x41004400

000004f4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4f4:	b500      	push	{lr}
     4f6:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4f8:	ab01      	add	r3, sp, #4
     4fa:	2280      	movs	r2, #128	; 0x80
     4fc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4fe:	780a      	ldrb	r2, [r1, #0]
     500:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     502:	784a      	ldrb	r2, [r1, #1]
     504:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     506:	788a      	ldrb	r2, [r1, #2]
     508:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     50a:	0019      	movs	r1, r3
     50c:	4b01      	ldr	r3, [pc, #4]	; (514 <port_pin_set_config+0x20>)
     50e:	4798      	blx	r3
}
     510:	b003      	add	sp, #12
     512:	bd00      	pop	{pc}
     514:	00000a59 	.word	0x00000a59

00000518 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     518:	b510      	push	{r4, lr}
	switch (clock_source) {
     51a:	2808      	cmp	r0, #8
     51c:	d803      	bhi.n	526 <system_clock_source_get_hz+0xe>
     51e:	0080      	lsls	r0, r0, #2
     520:	4b1c      	ldr	r3, [pc, #112]	; (594 <system_clock_source_get_hz+0x7c>)
     522:	581b      	ldr	r3, [r3, r0]
     524:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     526:	2000      	movs	r0, #0
     528:	e032      	b.n	590 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     52a:	4b1b      	ldr	r3, [pc, #108]	; (598 <system_clock_source_get_hz+0x80>)
     52c:	6918      	ldr	r0, [r3, #16]
     52e:	e02f      	b.n	590 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     530:	4b1a      	ldr	r3, [pc, #104]	; (59c <system_clock_source_get_hz+0x84>)
     532:	6a1b      	ldr	r3, [r3, #32]
     534:	059b      	lsls	r3, r3, #22
     536:	0f9b      	lsrs	r3, r3, #30
     538:	4819      	ldr	r0, [pc, #100]	; (5a0 <system_clock_source_get_hz+0x88>)
     53a:	40d8      	lsrs	r0, r3
     53c:	e028      	b.n	590 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     53e:	4b16      	ldr	r3, [pc, #88]	; (598 <system_clock_source_get_hz+0x80>)
     540:	6958      	ldr	r0, [r3, #20]
     542:	e025      	b.n	590 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     544:	4b14      	ldr	r3, [pc, #80]	; (598 <system_clock_source_get_hz+0x80>)
     546:	681b      	ldr	r3, [r3, #0]
			return 0;
     548:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     54a:	079b      	lsls	r3, r3, #30
     54c:	d520      	bpl.n	590 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     54e:	4913      	ldr	r1, [pc, #76]	; (59c <system_clock_source_get_hz+0x84>)
     550:	2210      	movs	r2, #16
     552:	68cb      	ldr	r3, [r1, #12]
     554:	421a      	tst	r2, r3
     556:	d0fc      	beq.n	552 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     558:	4b0f      	ldr	r3, [pc, #60]	; (598 <system_clock_source_get_hz+0x80>)
     55a:	681a      	ldr	r2, [r3, #0]
     55c:	2324      	movs	r3, #36	; 0x24
     55e:	4013      	ands	r3, r2
     560:	2b04      	cmp	r3, #4
     562:	d001      	beq.n	568 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     564:	480f      	ldr	r0, [pc, #60]	; (5a4 <system_clock_source_get_hz+0x8c>)
     566:	e013      	b.n	590 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     568:	2000      	movs	r0, #0
     56a:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <system_clock_source_get_hz+0x90>)
     56c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     56e:	4b0a      	ldr	r3, [pc, #40]	; (598 <system_clock_source_get_hz+0x80>)
     570:	689b      	ldr	r3, [r3, #8]
     572:	041b      	lsls	r3, r3, #16
     574:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     576:	4358      	muls	r0, r3
     578:	e00a      	b.n	590 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     57a:	2350      	movs	r3, #80	; 0x50
     57c:	4a07      	ldr	r2, [pc, #28]	; (59c <system_clock_source_get_hz+0x84>)
     57e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     580:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     582:	075b      	lsls	r3, r3, #29
     584:	d504      	bpl.n	590 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     586:	4b04      	ldr	r3, [pc, #16]	; (598 <system_clock_source_get_hz+0x80>)
     588:	68d8      	ldr	r0, [r3, #12]
     58a:	e001      	b.n	590 <system_clock_source_get_hz+0x78>
		return 32768UL;
     58c:	2080      	movs	r0, #128	; 0x80
     58e:	0200      	lsls	r0, r0, #8
	}
}
     590:	bd10      	pop	{r4, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	00001130 	.word	0x00001130
     598:	20000094 	.word	0x20000094
     59c:	40000800 	.word	0x40000800
     5a0:	007a1200 	.word	0x007a1200
     5a4:	02dc6c00 	.word	0x02dc6c00
     5a8:	0000097d 	.word	0x0000097d

000005ac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     5ac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     5ae:	490c      	ldr	r1, [pc, #48]	; (5e0 <system_clock_source_osc8m_set_config+0x34>)
     5b0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     5b2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     5b4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     5b6:	7840      	ldrb	r0, [r0, #1]
     5b8:	2201      	movs	r2, #1
     5ba:	4010      	ands	r0, r2
     5bc:	0180      	lsls	r0, r0, #6
     5be:	2640      	movs	r6, #64	; 0x40
     5c0:	43b3      	bics	r3, r6
     5c2:	4303      	orrs	r3, r0
     5c4:	402a      	ands	r2, r5
     5c6:	01d2      	lsls	r2, r2, #7
     5c8:	2080      	movs	r0, #128	; 0x80
     5ca:	4383      	bics	r3, r0
     5cc:	4313      	orrs	r3, r2
     5ce:	2203      	movs	r2, #3
     5d0:	4022      	ands	r2, r4
     5d2:	0212      	lsls	r2, r2, #8
     5d4:	4803      	ldr	r0, [pc, #12]	; (5e4 <system_clock_source_osc8m_set_config+0x38>)
     5d6:	4003      	ands	r3, r0
     5d8:	4313      	orrs	r3, r2
     5da:	620b      	str	r3, [r1, #32]
}
     5dc:	bd70      	pop	{r4, r5, r6, pc}
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	40000800 	.word	0x40000800
     5e4:	fffffcff 	.word	0xfffffcff

000005e8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     5e8:	2808      	cmp	r0, #8
     5ea:	d803      	bhi.n	5f4 <system_clock_source_enable+0xc>
     5ec:	0080      	lsls	r0, r0, #2
     5ee:	4b25      	ldr	r3, [pc, #148]	; (684 <system_clock_source_enable+0x9c>)
     5f0:	581b      	ldr	r3, [r3, r0]
     5f2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     5f4:	2017      	movs	r0, #23
     5f6:	e044      	b.n	682 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     5f8:	4a23      	ldr	r2, [pc, #140]	; (688 <system_clock_source_enable+0xa0>)
     5fa:	6a13      	ldr	r3, [r2, #32]
     5fc:	2102      	movs	r1, #2
     5fe:	430b      	orrs	r3, r1
     600:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     602:	2000      	movs	r0, #0
     604:	e03d      	b.n	682 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     606:	4a20      	ldr	r2, [pc, #128]	; (688 <system_clock_source_enable+0xa0>)
     608:	6993      	ldr	r3, [r2, #24]
     60a:	2102      	movs	r1, #2
     60c:	430b      	orrs	r3, r1
     60e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     610:	2000      	movs	r0, #0
		break;
     612:	e036      	b.n	682 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     614:	4a1c      	ldr	r2, [pc, #112]	; (688 <system_clock_source_enable+0xa0>)
     616:	8a13      	ldrh	r3, [r2, #16]
     618:	2102      	movs	r1, #2
     61a:	430b      	orrs	r3, r1
     61c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     61e:	2000      	movs	r0, #0
		break;
     620:	e02f      	b.n	682 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     622:	4a19      	ldr	r2, [pc, #100]	; (688 <system_clock_source_enable+0xa0>)
     624:	8a93      	ldrh	r3, [r2, #20]
     626:	2102      	movs	r1, #2
     628:	430b      	orrs	r3, r1
     62a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     62c:	2000      	movs	r0, #0
		break;
     62e:	e028      	b.n	682 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     630:	4916      	ldr	r1, [pc, #88]	; (68c <system_clock_source_enable+0xa4>)
     632:	680b      	ldr	r3, [r1, #0]
     634:	2202      	movs	r2, #2
     636:	4313      	orrs	r3, r2
     638:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     63a:	4b13      	ldr	r3, [pc, #76]	; (688 <system_clock_source_enable+0xa0>)
     63c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     63e:	0019      	movs	r1, r3
     640:	320e      	adds	r2, #14
     642:	68cb      	ldr	r3, [r1, #12]
     644:	421a      	tst	r2, r3
     646:	d0fc      	beq.n	642 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     648:	4a10      	ldr	r2, [pc, #64]	; (68c <system_clock_source_enable+0xa4>)
     64a:	6891      	ldr	r1, [r2, #8]
     64c:	4b0e      	ldr	r3, [pc, #56]	; (688 <system_clock_source_enable+0xa0>)
     64e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     650:	6852      	ldr	r2, [r2, #4]
     652:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     654:	2200      	movs	r2, #0
     656:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     658:	0019      	movs	r1, r3
     65a:	3210      	adds	r2, #16
     65c:	68cb      	ldr	r3, [r1, #12]
     65e:	421a      	tst	r2, r3
     660:	d0fc      	beq.n	65c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     662:	4b0a      	ldr	r3, [pc, #40]	; (68c <system_clock_source_enable+0xa4>)
     664:	681b      	ldr	r3, [r3, #0]
     666:	b29b      	uxth	r3, r3
     668:	4a07      	ldr	r2, [pc, #28]	; (688 <system_clock_source_enable+0xa0>)
     66a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     66c:	2000      	movs	r0, #0
     66e:	e008      	b.n	682 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     670:	4905      	ldr	r1, [pc, #20]	; (688 <system_clock_source_enable+0xa0>)
     672:	2244      	movs	r2, #68	; 0x44
     674:	5c8b      	ldrb	r3, [r1, r2]
     676:	2002      	movs	r0, #2
     678:	4303      	orrs	r3, r0
     67a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     67c:	2000      	movs	r0, #0
		break;
     67e:	e000      	b.n	682 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     680:	2000      	movs	r0, #0
}
     682:	4770      	bx	lr
     684:	00001154 	.word	0x00001154
     688:	40000800 	.word	0x40000800
     68c:	20000094 	.word	0x20000094

00000690 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     690:	b530      	push	{r4, r5, lr}
     692:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     694:	22c2      	movs	r2, #194	; 0xc2
     696:	00d2      	lsls	r2, r2, #3
     698:	4b1a      	ldr	r3, [pc, #104]	; (704 <system_clock_init+0x74>)
     69a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     69c:	4a1a      	ldr	r2, [pc, #104]	; (708 <system_clock_init+0x78>)
     69e:	6853      	ldr	r3, [r2, #4]
     6a0:	211e      	movs	r1, #30
     6a2:	438b      	bics	r3, r1
     6a4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     6a6:	2301      	movs	r3, #1
     6a8:	466a      	mov	r2, sp
     6aa:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     6ac:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     6ae:	4d17      	ldr	r5, [pc, #92]	; (70c <system_clock_init+0x7c>)
     6b0:	b2e0      	uxtb	r0, r4
     6b2:	4669      	mov	r1, sp
     6b4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     6b6:	3401      	adds	r4, #1
     6b8:	2c25      	cmp	r4, #37	; 0x25
     6ba:	d1f9      	bne.n	6b0 <system_clock_init+0x20>
	config->run_in_standby  = false;
     6bc:	a803      	add	r0, sp, #12
     6be:	2400      	movs	r4, #0
     6c0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     6c2:	2501      	movs	r5, #1
     6c4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     6c6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     6c8:	4b11      	ldr	r3, [pc, #68]	; (710 <system_clock_init+0x80>)
     6ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     6cc:	2006      	movs	r0, #6
     6ce:	4b11      	ldr	r3, [pc, #68]	; (714 <system_clock_init+0x84>)
     6d0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     6d2:	4b11      	ldr	r3, [pc, #68]	; (718 <system_clock_init+0x88>)
     6d4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     6d6:	4b11      	ldr	r3, [pc, #68]	; (71c <system_clock_init+0x8c>)
     6d8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     6da:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     6dc:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     6de:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     6e0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     6e2:	466b      	mov	r3, sp
     6e4:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     6e6:	2306      	movs	r3, #6
     6e8:	466a      	mov	r2, sp
     6ea:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     6ec:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     6ee:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     6f0:	4669      	mov	r1, sp
     6f2:	2000      	movs	r0, #0
     6f4:	4b0a      	ldr	r3, [pc, #40]	; (720 <system_clock_init+0x90>)
     6f6:	4798      	blx	r3
     6f8:	2000      	movs	r0, #0
     6fa:	4b0a      	ldr	r3, [pc, #40]	; (724 <system_clock_init+0x94>)
     6fc:	4798      	blx	r3
#endif
}
     6fe:	b005      	add	sp, #20
     700:	bd30      	pop	{r4, r5, pc}
     702:	46c0      	nop			; (mov r8, r8)
     704:	40000800 	.word	0x40000800
     708:	41004000 	.word	0x41004000
     70c:	00000961 	.word	0x00000961
     710:	000005ad 	.word	0x000005ad
     714:	000005e9 	.word	0x000005e9
     718:	00000729 	.word	0x00000729
     71c:	40000400 	.word	0x40000400
     720:	0000074d 	.word	0x0000074d
     724:	00000805 	.word	0x00000805

00000728 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     728:	4a06      	ldr	r2, [pc, #24]	; (744 <system_gclk_init+0x1c>)
     72a:	6993      	ldr	r3, [r2, #24]
     72c:	2108      	movs	r1, #8
     72e:	430b      	orrs	r3, r1
     730:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     732:	2201      	movs	r2, #1
     734:	4b04      	ldr	r3, [pc, #16]	; (748 <system_gclk_init+0x20>)
     736:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     738:	0019      	movs	r1, r3
     73a:	780b      	ldrb	r3, [r1, #0]
     73c:	4213      	tst	r3, r2
     73e:	d1fc      	bne.n	73a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     740:	4770      	bx	lr
     742:	46c0      	nop			; (mov r8, r8)
     744:	40000400 	.word	0x40000400
     748:	40000c00 	.word	0x40000c00

0000074c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     74c:	b570      	push	{r4, r5, r6, lr}
     74e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     750:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     752:	780d      	ldrb	r5, [r1, #0]
     754:	022d      	lsls	r5, r5, #8
     756:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     758:	784b      	ldrb	r3, [r1, #1]
     75a:	2b00      	cmp	r3, #0
     75c:	d002      	beq.n	764 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     75e:	2380      	movs	r3, #128	; 0x80
     760:	02db      	lsls	r3, r3, #11
     762:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     764:	7a4b      	ldrb	r3, [r1, #9]
     766:	2b00      	cmp	r3, #0
     768:	d002      	beq.n	770 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     76a:	2380      	movs	r3, #128	; 0x80
     76c:	031b      	lsls	r3, r3, #12
     76e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     770:	6848      	ldr	r0, [r1, #4]
     772:	2801      	cmp	r0, #1
     774:	d910      	bls.n	798 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     776:	1e43      	subs	r3, r0, #1
     778:	4218      	tst	r0, r3
     77a:	d134      	bne.n	7e6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     77c:	2802      	cmp	r0, #2
     77e:	d930      	bls.n	7e2 <system_gclk_gen_set_config+0x96>
     780:	2302      	movs	r3, #2
     782:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     784:	3201      	adds	r2, #1
						mask <<= 1) {
     786:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     788:	4298      	cmp	r0, r3
     78a:	d8fb      	bhi.n	784 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     78c:	0212      	lsls	r2, r2, #8
     78e:	4332      	orrs	r2, r6
     790:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     792:	2380      	movs	r3, #128	; 0x80
     794:	035b      	lsls	r3, r3, #13
     796:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     798:	7a0b      	ldrb	r3, [r1, #8]
     79a:	2b00      	cmp	r3, #0
     79c:	d002      	beq.n	7a4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     79e:	2380      	movs	r3, #128	; 0x80
     7a0:	039b      	lsls	r3, r3, #14
     7a2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7a4:	4a13      	ldr	r2, [pc, #76]	; (7f4 <system_gclk_gen_set_config+0xa8>)
     7a6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     7a8:	b25b      	sxtb	r3, r3
     7aa:	2b00      	cmp	r3, #0
     7ac:	dbfb      	blt.n	7a6 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     7ae:	4b12      	ldr	r3, [pc, #72]	; (7f8 <system_gclk_gen_set_config+0xac>)
     7b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     7b2:	4b12      	ldr	r3, [pc, #72]	; (7fc <system_gclk_gen_set_config+0xb0>)
     7b4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7b6:	4a0f      	ldr	r2, [pc, #60]	; (7f4 <system_gclk_gen_set_config+0xa8>)
     7b8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     7ba:	b25b      	sxtb	r3, r3
     7bc:	2b00      	cmp	r3, #0
     7be:	dbfb      	blt.n	7b8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     7c0:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <system_gclk_gen_set_config+0xa8>)
     7c2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7c4:	001a      	movs	r2, r3
     7c6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     7c8:	b25b      	sxtb	r3, r3
     7ca:	2b00      	cmp	r3, #0
     7cc:	dbfb      	blt.n	7c6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     7ce:	4a09      	ldr	r2, [pc, #36]	; (7f4 <system_gclk_gen_set_config+0xa8>)
     7d0:	6853      	ldr	r3, [r2, #4]
     7d2:	2180      	movs	r1, #128	; 0x80
     7d4:	0249      	lsls	r1, r1, #9
     7d6:	400b      	ands	r3, r1
     7d8:	431d      	orrs	r5, r3
     7da:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     7dc:	4b08      	ldr	r3, [pc, #32]	; (800 <system_gclk_gen_set_config+0xb4>)
     7de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     7e0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     7e2:	2200      	movs	r2, #0
     7e4:	e7d2      	b.n	78c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     7e6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     7e8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     7ea:	2380      	movs	r3, #128	; 0x80
     7ec:	029b      	lsls	r3, r3, #10
     7ee:	431d      	orrs	r5, r3
     7f0:	e7d2      	b.n	798 <system_gclk_gen_set_config+0x4c>
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	40000c00 	.word	0x40000c00
     7f8:	0000044d 	.word	0x0000044d
     7fc:	40000c08 	.word	0x40000c08
     800:	0000048d 	.word	0x0000048d

00000804 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     804:	b510      	push	{r4, lr}
     806:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     808:	4a0b      	ldr	r2, [pc, #44]	; (838 <system_gclk_gen_enable+0x34>)
     80a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     80c:	b25b      	sxtb	r3, r3
     80e:	2b00      	cmp	r3, #0
     810:	dbfb      	blt.n	80a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     812:	4b0a      	ldr	r3, [pc, #40]	; (83c <system_gclk_gen_enable+0x38>)
     814:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     816:	4b0a      	ldr	r3, [pc, #40]	; (840 <system_gclk_gen_enable+0x3c>)
     818:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     81a:	4a07      	ldr	r2, [pc, #28]	; (838 <system_gclk_gen_enable+0x34>)
     81c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     81e:	b25b      	sxtb	r3, r3
     820:	2b00      	cmp	r3, #0
     822:	dbfb      	blt.n	81c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     824:	4a04      	ldr	r2, [pc, #16]	; (838 <system_gclk_gen_enable+0x34>)
     826:	6851      	ldr	r1, [r2, #4]
     828:	2380      	movs	r3, #128	; 0x80
     82a:	025b      	lsls	r3, r3, #9
     82c:	430b      	orrs	r3, r1
     82e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     830:	4b04      	ldr	r3, [pc, #16]	; (844 <system_gclk_gen_enable+0x40>)
     832:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     834:	bd10      	pop	{r4, pc}
     836:	46c0      	nop			; (mov r8, r8)
     838:	40000c00 	.word	0x40000c00
     83c:	0000044d 	.word	0x0000044d
     840:	40000c04 	.word	0x40000c04
     844:	0000048d 	.word	0x0000048d

00000848 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     848:	b570      	push	{r4, r5, r6, lr}
     84a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     84c:	4a1a      	ldr	r2, [pc, #104]	; (8b8 <system_gclk_gen_get_hz+0x70>)
     84e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     850:	b25b      	sxtb	r3, r3
     852:	2b00      	cmp	r3, #0
     854:	dbfb      	blt.n	84e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     856:	4b19      	ldr	r3, [pc, #100]	; (8bc <system_gclk_gen_get_hz+0x74>)
     858:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     85a:	4b19      	ldr	r3, [pc, #100]	; (8c0 <system_gclk_gen_get_hz+0x78>)
     85c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     85e:	4a16      	ldr	r2, [pc, #88]	; (8b8 <system_gclk_gen_get_hz+0x70>)
     860:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     862:	b25b      	sxtb	r3, r3
     864:	2b00      	cmp	r3, #0
     866:	dbfb      	blt.n	860 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     868:	4e13      	ldr	r6, [pc, #76]	; (8b8 <system_gclk_gen_get_hz+0x70>)
     86a:	6870      	ldr	r0, [r6, #4]
     86c:	04c0      	lsls	r0, r0, #19
     86e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     870:	4b14      	ldr	r3, [pc, #80]	; (8c4 <system_gclk_gen_get_hz+0x7c>)
     872:	4798      	blx	r3
     874:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     876:	4b12      	ldr	r3, [pc, #72]	; (8c0 <system_gclk_gen_get_hz+0x78>)
     878:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     87a:	6876      	ldr	r6, [r6, #4]
     87c:	02f6      	lsls	r6, r6, #11
     87e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     880:	4b11      	ldr	r3, [pc, #68]	; (8c8 <system_gclk_gen_get_hz+0x80>)
     882:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     884:	4a0c      	ldr	r2, [pc, #48]	; (8b8 <system_gclk_gen_get_hz+0x70>)
     886:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     888:	b25b      	sxtb	r3, r3
     88a:	2b00      	cmp	r3, #0
     88c:	dbfb      	blt.n	886 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     88e:	4b0a      	ldr	r3, [pc, #40]	; (8b8 <system_gclk_gen_get_hz+0x70>)
     890:	689c      	ldr	r4, [r3, #8]
     892:	0224      	lsls	r4, r4, #8
     894:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     896:	4b0d      	ldr	r3, [pc, #52]	; (8cc <system_gclk_gen_get_hz+0x84>)
     898:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     89a:	2e00      	cmp	r6, #0
     89c:	d107      	bne.n	8ae <system_gclk_gen_get_hz+0x66>
     89e:	2c01      	cmp	r4, #1
     8a0:	d907      	bls.n	8b2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     8a2:	0021      	movs	r1, r4
     8a4:	0028      	movs	r0, r5
     8a6:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <system_gclk_gen_get_hz+0x88>)
     8a8:	4798      	blx	r3
     8aa:	0005      	movs	r5, r0
     8ac:	e001      	b.n	8b2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     8ae:	3401      	adds	r4, #1
     8b0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     8b2:	0028      	movs	r0, r5
     8b4:	bd70      	pop	{r4, r5, r6, pc}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	40000c00 	.word	0x40000c00
     8bc:	0000044d 	.word	0x0000044d
     8c0:	40000c04 	.word	0x40000c04
     8c4:	00000519 	.word	0x00000519
     8c8:	40000c08 	.word	0x40000c08
     8cc:	0000048d 	.word	0x0000048d
     8d0:	00000bdd 	.word	0x00000bdd

000008d4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     8d4:	b510      	push	{r4, lr}
     8d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     8d8:	4b06      	ldr	r3, [pc, #24]	; (8f4 <system_gclk_chan_enable+0x20>)
     8da:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     8dc:	4b06      	ldr	r3, [pc, #24]	; (8f8 <system_gclk_chan_enable+0x24>)
     8de:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     8e0:	4a06      	ldr	r2, [pc, #24]	; (8fc <system_gclk_chan_enable+0x28>)
     8e2:	8853      	ldrh	r3, [r2, #2]
     8e4:	2180      	movs	r1, #128	; 0x80
     8e6:	01c9      	lsls	r1, r1, #7
     8e8:	430b      	orrs	r3, r1
     8ea:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     8ec:	4b04      	ldr	r3, [pc, #16]	; (900 <system_gclk_chan_enable+0x2c>)
     8ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     8f0:	bd10      	pop	{r4, pc}
     8f2:	46c0      	nop			; (mov r8, r8)
     8f4:	0000044d 	.word	0x0000044d
     8f8:	40000c02 	.word	0x40000c02
     8fc:	40000c00 	.word	0x40000c00
     900:	0000048d 	.word	0x0000048d

00000904 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     904:	b510      	push	{r4, lr}
     906:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     908:	4b0f      	ldr	r3, [pc, #60]	; (948 <system_gclk_chan_disable+0x44>)
     90a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     90c:	4b0f      	ldr	r3, [pc, #60]	; (94c <system_gclk_chan_disable+0x48>)
     90e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     910:	4a0f      	ldr	r2, [pc, #60]	; (950 <system_gclk_chan_disable+0x4c>)
     912:	8853      	ldrh	r3, [r2, #2]
     914:	051b      	lsls	r3, r3, #20
     916:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     918:	8853      	ldrh	r3, [r2, #2]
     91a:	490e      	ldr	r1, [pc, #56]	; (954 <system_gclk_chan_disable+0x50>)
     91c:	400b      	ands	r3, r1
     91e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     920:	8853      	ldrh	r3, [r2, #2]
     922:	490d      	ldr	r1, [pc, #52]	; (958 <system_gclk_chan_disable+0x54>)
     924:	400b      	ands	r3, r1
     926:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     928:	0011      	movs	r1, r2
     92a:	2280      	movs	r2, #128	; 0x80
     92c:	01d2      	lsls	r2, r2, #7
     92e:	884b      	ldrh	r3, [r1, #2]
     930:	4213      	tst	r3, r2
     932:	d1fc      	bne.n	92e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     934:	4906      	ldr	r1, [pc, #24]	; (950 <system_gclk_chan_disable+0x4c>)
     936:	884a      	ldrh	r2, [r1, #2]
     938:	0203      	lsls	r3, r0, #8
     93a:	4806      	ldr	r0, [pc, #24]	; (954 <system_gclk_chan_disable+0x50>)
     93c:	4002      	ands	r2, r0
     93e:	4313      	orrs	r3, r2
     940:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     942:	4b06      	ldr	r3, [pc, #24]	; (95c <system_gclk_chan_disable+0x58>)
     944:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     946:	bd10      	pop	{r4, pc}
     948:	0000044d 	.word	0x0000044d
     94c:	40000c02 	.word	0x40000c02
     950:	40000c00 	.word	0x40000c00
     954:	fffff0ff 	.word	0xfffff0ff
     958:	ffffbfff 	.word	0xffffbfff
     95c:	0000048d 	.word	0x0000048d

00000960 <system_gclk_chan_set_config>:
{
     960:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     962:	780c      	ldrb	r4, [r1, #0]
     964:	0224      	lsls	r4, r4, #8
     966:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     968:	4b02      	ldr	r3, [pc, #8]	; (974 <system_gclk_chan_set_config+0x14>)
     96a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     96c:	b2a4      	uxth	r4, r4
     96e:	4b02      	ldr	r3, [pc, #8]	; (978 <system_gclk_chan_set_config+0x18>)
     970:	805c      	strh	r4, [r3, #2]
}
     972:	bd10      	pop	{r4, pc}
     974:	00000905 	.word	0x00000905
     978:	40000c00 	.word	0x40000c00

0000097c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     97c:	b510      	push	{r4, lr}
     97e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     980:	4b06      	ldr	r3, [pc, #24]	; (99c <system_gclk_chan_get_hz+0x20>)
     982:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     984:	4b06      	ldr	r3, [pc, #24]	; (9a0 <system_gclk_chan_get_hz+0x24>)
     986:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     988:	4b06      	ldr	r3, [pc, #24]	; (9a4 <system_gclk_chan_get_hz+0x28>)
     98a:	885c      	ldrh	r4, [r3, #2]
     98c:	0524      	lsls	r4, r4, #20
     98e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     990:	4b05      	ldr	r3, [pc, #20]	; (9a8 <system_gclk_chan_get_hz+0x2c>)
     992:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     994:	0020      	movs	r0, r4
     996:	4b05      	ldr	r3, [pc, #20]	; (9ac <system_gclk_chan_get_hz+0x30>)
     998:	4798      	blx	r3
}
     99a:	bd10      	pop	{r4, pc}
     99c:	0000044d 	.word	0x0000044d
     9a0:	40000c02 	.word	0x40000c02
     9a4:	40000c00 	.word	0x40000c00
     9a8:	0000048d 	.word	0x0000048d
     9ac:	00000849 	.word	0x00000849

000009b0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     9b0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     9b2:	78d3      	ldrb	r3, [r2, #3]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d135      	bne.n	a24 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     9b8:	7813      	ldrb	r3, [r2, #0]
     9ba:	2b80      	cmp	r3, #128	; 0x80
     9bc:	d029      	beq.n	a12 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     9be:	061b      	lsls	r3, r3, #24
     9c0:	2480      	movs	r4, #128	; 0x80
     9c2:	0264      	lsls	r4, r4, #9
     9c4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     9c6:	7854      	ldrb	r4, [r2, #1]
     9c8:	2502      	movs	r5, #2
     9ca:	43ac      	bics	r4, r5
     9cc:	d106      	bne.n	9dc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     9ce:	7894      	ldrb	r4, [r2, #2]
     9d0:	2c00      	cmp	r4, #0
     9d2:	d120      	bne.n	a16 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     9d4:	2480      	movs	r4, #128	; 0x80
     9d6:	02a4      	lsls	r4, r4, #10
     9d8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     9da:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     9dc:	7854      	ldrb	r4, [r2, #1]
     9de:	3c01      	subs	r4, #1
     9e0:	2c01      	cmp	r4, #1
     9e2:	d91c      	bls.n	a1e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     9e4:	040d      	lsls	r5, r1, #16
     9e6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     9e8:	24a0      	movs	r4, #160	; 0xa0
     9ea:	05e4      	lsls	r4, r4, #23
     9ec:	432c      	orrs	r4, r5
     9ee:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     9f0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     9f2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     9f4:	24d0      	movs	r4, #208	; 0xd0
     9f6:	0624      	lsls	r4, r4, #24
     9f8:	432c      	orrs	r4, r5
     9fa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     9fc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     9fe:	78d4      	ldrb	r4, [r2, #3]
     a00:	2c00      	cmp	r4, #0
     a02:	d122      	bne.n	a4a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     a04:	035b      	lsls	r3, r3, #13
     a06:	d51c      	bpl.n	a42 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     a08:	7893      	ldrb	r3, [r2, #2]
     a0a:	2b01      	cmp	r3, #1
     a0c:	d01e      	beq.n	a4c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     a0e:	6141      	str	r1, [r0, #20]
     a10:	e017      	b.n	a42 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     a12:	2300      	movs	r3, #0
     a14:	e7d7      	b.n	9c6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     a16:	24c0      	movs	r4, #192	; 0xc0
     a18:	02e4      	lsls	r4, r4, #11
     a1a:	4323      	orrs	r3, r4
     a1c:	e7dd      	b.n	9da <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     a1e:	4c0d      	ldr	r4, [pc, #52]	; (a54 <_system_pinmux_config+0xa4>)
     a20:	4023      	ands	r3, r4
     a22:	e7df      	b.n	9e4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     a24:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     a26:	040c      	lsls	r4, r1, #16
     a28:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     a2a:	23a0      	movs	r3, #160	; 0xa0
     a2c:	05db      	lsls	r3, r3, #23
     a2e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a30:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     a32:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     a34:	23d0      	movs	r3, #208	; 0xd0
     a36:	061b      	lsls	r3, r3, #24
     a38:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a3a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     a3c:	78d3      	ldrb	r3, [r2, #3]
     a3e:	2b00      	cmp	r3, #0
     a40:	d103      	bne.n	a4a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     a42:	7853      	ldrb	r3, [r2, #1]
     a44:	3b01      	subs	r3, #1
     a46:	2b01      	cmp	r3, #1
     a48:	d902      	bls.n	a50 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     a4a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     a4c:	6181      	str	r1, [r0, #24]
     a4e:	e7f8      	b.n	a42 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     a50:	6081      	str	r1, [r0, #8]
}
     a52:	e7fa      	b.n	a4a <_system_pinmux_config+0x9a>
     a54:	fffbffff 	.word	0xfffbffff

00000a58 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     a58:	b510      	push	{r4, lr}
     a5a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a5c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a5e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a60:	2900      	cmp	r1, #0
     a62:	d104      	bne.n	a6e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     a64:	0943      	lsrs	r3, r0, #5
     a66:	01db      	lsls	r3, r3, #7
     a68:	4905      	ldr	r1, [pc, #20]	; (a80 <system_pinmux_pin_set_config+0x28>)
     a6a:	468c      	mov	ip, r1
     a6c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     a6e:	241f      	movs	r4, #31
     a70:	4020      	ands	r0, r4
     a72:	2101      	movs	r1, #1
     a74:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     a76:	0018      	movs	r0, r3
     a78:	4b02      	ldr	r3, [pc, #8]	; (a84 <system_pinmux_pin_set_config+0x2c>)
     a7a:	4798      	blx	r3
}
     a7c:	bd10      	pop	{r4, pc}
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	41004400 	.word	0x41004400
     a84:	000009b1 	.word	0x000009b1

00000a88 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     a88:	4770      	bx	lr
	...

00000a8c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     a8c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <system_init+0x18>)
     a90:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     a92:	4b05      	ldr	r3, [pc, #20]	; (aa8 <system_init+0x1c>)
     a94:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     a96:	4b05      	ldr	r3, [pc, #20]	; (aac <system_init+0x20>)
     a98:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     a9a:	4b05      	ldr	r3, [pc, #20]	; (ab0 <system_init+0x24>)
     a9c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     a9e:	4b05      	ldr	r3, [pc, #20]	; (ab4 <system_init+0x28>)
     aa0:	4798      	blx	r3
}
     aa2:	bd10      	pop	{r4, pc}
     aa4:	00000691 	.word	0x00000691
     aa8:	000004bd 	.word	0x000004bd
     aac:	00000a89 	.word	0x00000a89
     ab0:	00000a89 	.word	0x00000a89
     ab4:	00000a89 	.word	0x00000a89

00000ab8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     ab8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     aba:	4a06      	ldr	r2, [pc, #24]	; (ad4 <_sbrk+0x1c>)
     abc:	6812      	ldr	r2, [r2, #0]
     abe:	2a00      	cmp	r2, #0
     ac0:	d004      	beq.n	acc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     ac2:	4a04      	ldr	r2, [pc, #16]	; (ad4 <_sbrk+0x1c>)
     ac4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     ac6:	18c3      	adds	r3, r0, r3
     ac8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
     aca:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     acc:	4902      	ldr	r1, [pc, #8]	; (ad8 <_sbrk+0x20>)
     ace:	4a01      	ldr	r2, [pc, #4]	; (ad4 <_sbrk+0x1c>)
     ad0:	6011      	str	r1, [r2, #0]
     ad2:	e7f6      	b.n	ac2 <_sbrk+0xa>
     ad4:	200000ac 	.word	0x200000ac
     ad8:	200020e0 	.word	0x200020e0

00000adc <configure_rtc_count>:
#define TIMEOUT_BIS 30

struct rtc_module rtc_instance;

void configure_rtc_count(void)
{
     adc:	b510      	push	{r4, lr}
     ade:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
     ae0:	2300      	movs	r3, #0
     ae2:	466a      	mov	r2, sp
     ae4:	70d3      	strb	r3, [r2, #3]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
     ae6:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	config_rtc_count.prescaler = RTC_COUNT_PRESCALER_DIV_1;
     ae8:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode = RTC_COUNT_MODE_16BIT;
     aea:	7093      	strb	r3, [r2, #2]
	#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config_rtc_count.continuously_update = true;
     aec:	2301      	movs	r3, #1
     aee:	7113      	strb	r3, [r2, #4]
	#endif
	config_rtc_count.compare_values[0] = 1000;
     af0:	23fa      	movs	r3, #250	; 0xfa
     af2:	009b      	lsls	r3, r3, #2
     af4:	9302      	str	r3, [sp, #8]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
     af6:	4c05      	ldr	r4, [pc, #20]	; (b0c <configure_rtc_count+0x30>)
     af8:	4905      	ldr	r1, [pc, #20]	; (b10 <configure_rtc_count+0x34>)
     afa:	0020      	movs	r0, r4
     afc:	4b05      	ldr	r3, [pc, #20]	; (b14 <configure_rtc_count+0x38>)
     afe:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
     b00:	0020      	movs	r0, r4
     b02:	4b05      	ldr	r3, [pc, #20]	; (b18 <configure_rtc_count+0x3c>)
     b04:	4798      	blx	r3
}
     b06:	b004      	add	sp, #16
     b08:	bd10      	pop	{r4, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	200000bc 	.word	0x200000bc
     b10:	40001400 	.word	0x40001400
     b14:	00000365 	.word	0x00000365
     b18:	0000029d 	.word	0x0000029d

00000b1c <main>:
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
}


int main (void)
{
     b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b1e:	46ce      	mov	lr, r9
     b20:	b500      	push	{lr}
     b22:	b082      	sub	sp, #8
	system_init();
     b24:	4b21      	ldr	r3, [pc, #132]	; (bac <main+0x90>)
     b26:	4798      	blx	r3
	delay_init();
     b28:	4b21      	ldr	r3, [pc, #132]	; (bb0 <main+0x94>)
     b2a:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
     b2c:	a901      	add	r1, sp, #4
     b2e:	2301      	movs	r3, #1
     b30:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     b32:	2200      	movs	r2, #0
     b34:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     b36:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     b38:	2013      	movs	r0, #19
     b3a:	4b1e      	ldr	r3, [pc, #120]	; (bb4 <main+0x98>)
     b3c:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     b3e:	2280      	movs	r2, #128	; 0x80
     b40:	0312      	lsls	r2, r2, #12
     b42:	4b1d      	ldr	r3, [pc, #116]	; (bb8 <main+0x9c>)
     b44:	619a      	str	r2, [r3, #24]
	config_led();
	configure_rtc_count();
     b46:	4b1d      	ldr	r3, [pc, #116]	; (bbc <main+0xa0>)
     b48:	4798      	blx	r3
	//rtc_count_set_period(&rtc_instance, 2000);
	
	srand(2);
     b4a:	2002      	movs	r0, #2
     b4c:	4b1c      	ldr	r3, [pc, #112]	; (bc0 <main+0xa4>)
     b4e:	4798      	blx	r3
	
	delay_ms(5000);
     b50:	481c      	ldr	r0, [pc, #112]	; (bc4 <main+0xa8>)
     b52:	4b1d      	ldr	r3, [pc, #116]	; (bc8 <main+0xac>)
     b54:	4798      	blx	r3
     b56:	240a      	movs	r4, #10
	} else {
		port_base->OUTCLR.reg = pin_mask;
     b58:	4e17      	ldr	r6, [pc, #92]	; (bb8 <main+0x9c>)
     b5a:	2780      	movs	r7, #128	; 0x80
     b5c:	033f      	lsls	r7, r7, #12
     b5e:	46b9      	mov	r9, r7
	//uint16_t random_number = (rand() % 500) + 500;
	
	for (uint8_t i = 0; i < 10; i++)
	{
		 port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		 delay_ms((rand() % 3000) + 50);
     b60:	4d1a      	ldr	r5, [pc, #104]	; (bcc <main+0xb0>)
     b62:	e00b      	b.n	b7c <main+0x60>
     b64:	2001      	movs	r0, #1
     b66:	4b1a      	ldr	r3, [pc, #104]	; (bd0 <main+0xb4>)
     b68:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     b6a:	61b7      	str	r7, [r6, #24]
		 port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
		 delay_ms(500);
     b6c:	20fa      	movs	r0, #250	; 0xfa
     b6e:	0040      	lsls	r0, r0, #1
     b70:	4b15      	ldr	r3, [pc, #84]	; (bc8 <main+0xac>)
     b72:	4798      	blx	r3
     b74:	3c01      	subs	r4, #1
     b76:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 10; i++)
     b78:	2c00      	cmp	r4, #0
     b7a:	d011      	beq.n	ba0 <main+0x84>
		port_base->OUTCLR.reg = pin_mask;
     b7c:	464b      	mov	r3, r9
     b7e:	6173      	str	r3, [r6, #20]
		 delay_ms((rand() % 3000) + 50);
     b80:	47a8      	blx	r5
     b82:	4914      	ldr	r1, [pc, #80]	; (bd4 <main+0xb8>)
     b84:	4b14      	ldr	r3, [pc, #80]	; (bd8 <main+0xbc>)
     b86:	4798      	blx	r3
     b88:	3132      	adds	r1, #50	; 0x32
     b8a:	d0eb      	beq.n	b64 <main+0x48>
     b8c:	4b0f      	ldr	r3, [pc, #60]	; (bcc <main+0xb0>)
     b8e:	4798      	blx	r3
     b90:	4910      	ldr	r1, [pc, #64]	; (bd4 <main+0xb8>)
     b92:	4b11      	ldr	r3, [pc, #68]	; (bd8 <main+0xbc>)
     b94:	4798      	blx	r3
     b96:	3132      	adds	r1, #50	; 0x32
     b98:	0008      	movs	r0, r1
     b9a:	4b0b      	ldr	r3, [pc, #44]	; (bc8 <main+0xac>)
     b9c:	4798      	blx	r3
     b9e:	e7e4      	b.n	b6a <main+0x4e>
				*/
				
			//}
		//}
	//}
}
     ba0:	2000      	movs	r0, #0
     ba2:	b002      	add	sp, #8
     ba4:	bc04      	pop	{r2}
     ba6:	4691      	mov	r9, r2
     ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	00000a8d 	.word	0x00000a8d
     bb0:	000001fd 	.word	0x000001fd
     bb4:	000004f5 	.word	0x000004f5
     bb8:	41004400 	.word	0x41004400
     bbc:	00000add 	.word	0x00000add
     bc0:	00000f65 	.word	0x00000f65
     bc4:	00001388 	.word	0x00001388
     bc8:	00000269 	.word	0x00000269
     bcc:	00000fc1 	.word	0x00000fc1
     bd0:	0000023d 	.word	0x0000023d
     bd4:	00000bb8 	.word	0x00000bb8
     bd8:	00000ebd 	.word	0x00000ebd

00000bdc <__udivsi3>:
     bdc:	2200      	movs	r2, #0
     bde:	0843      	lsrs	r3, r0, #1
     be0:	428b      	cmp	r3, r1
     be2:	d374      	bcc.n	cce <__udivsi3+0xf2>
     be4:	0903      	lsrs	r3, r0, #4
     be6:	428b      	cmp	r3, r1
     be8:	d35f      	bcc.n	caa <__udivsi3+0xce>
     bea:	0a03      	lsrs	r3, r0, #8
     bec:	428b      	cmp	r3, r1
     bee:	d344      	bcc.n	c7a <__udivsi3+0x9e>
     bf0:	0b03      	lsrs	r3, r0, #12
     bf2:	428b      	cmp	r3, r1
     bf4:	d328      	bcc.n	c48 <__udivsi3+0x6c>
     bf6:	0c03      	lsrs	r3, r0, #16
     bf8:	428b      	cmp	r3, r1
     bfa:	d30d      	bcc.n	c18 <__udivsi3+0x3c>
     bfc:	22ff      	movs	r2, #255	; 0xff
     bfe:	0209      	lsls	r1, r1, #8
     c00:	ba12      	rev	r2, r2
     c02:	0c03      	lsrs	r3, r0, #16
     c04:	428b      	cmp	r3, r1
     c06:	d302      	bcc.n	c0e <__udivsi3+0x32>
     c08:	1212      	asrs	r2, r2, #8
     c0a:	0209      	lsls	r1, r1, #8
     c0c:	d065      	beq.n	cda <__udivsi3+0xfe>
     c0e:	0b03      	lsrs	r3, r0, #12
     c10:	428b      	cmp	r3, r1
     c12:	d319      	bcc.n	c48 <__udivsi3+0x6c>
     c14:	e000      	b.n	c18 <__udivsi3+0x3c>
     c16:	0a09      	lsrs	r1, r1, #8
     c18:	0bc3      	lsrs	r3, r0, #15
     c1a:	428b      	cmp	r3, r1
     c1c:	d301      	bcc.n	c22 <__udivsi3+0x46>
     c1e:	03cb      	lsls	r3, r1, #15
     c20:	1ac0      	subs	r0, r0, r3
     c22:	4152      	adcs	r2, r2
     c24:	0b83      	lsrs	r3, r0, #14
     c26:	428b      	cmp	r3, r1
     c28:	d301      	bcc.n	c2e <__udivsi3+0x52>
     c2a:	038b      	lsls	r3, r1, #14
     c2c:	1ac0      	subs	r0, r0, r3
     c2e:	4152      	adcs	r2, r2
     c30:	0b43      	lsrs	r3, r0, #13
     c32:	428b      	cmp	r3, r1
     c34:	d301      	bcc.n	c3a <__udivsi3+0x5e>
     c36:	034b      	lsls	r3, r1, #13
     c38:	1ac0      	subs	r0, r0, r3
     c3a:	4152      	adcs	r2, r2
     c3c:	0b03      	lsrs	r3, r0, #12
     c3e:	428b      	cmp	r3, r1
     c40:	d301      	bcc.n	c46 <__udivsi3+0x6a>
     c42:	030b      	lsls	r3, r1, #12
     c44:	1ac0      	subs	r0, r0, r3
     c46:	4152      	adcs	r2, r2
     c48:	0ac3      	lsrs	r3, r0, #11
     c4a:	428b      	cmp	r3, r1
     c4c:	d301      	bcc.n	c52 <__udivsi3+0x76>
     c4e:	02cb      	lsls	r3, r1, #11
     c50:	1ac0      	subs	r0, r0, r3
     c52:	4152      	adcs	r2, r2
     c54:	0a83      	lsrs	r3, r0, #10
     c56:	428b      	cmp	r3, r1
     c58:	d301      	bcc.n	c5e <__udivsi3+0x82>
     c5a:	028b      	lsls	r3, r1, #10
     c5c:	1ac0      	subs	r0, r0, r3
     c5e:	4152      	adcs	r2, r2
     c60:	0a43      	lsrs	r3, r0, #9
     c62:	428b      	cmp	r3, r1
     c64:	d301      	bcc.n	c6a <__udivsi3+0x8e>
     c66:	024b      	lsls	r3, r1, #9
     c68:	1ac0      	subs	r0, r0, r3
     c6a:	4152      	adcs	r2, r2
     c6c:	0a03      	lsrs	r3, r0, #8
     c6e:	428b      	cmp	r3, r1
     c70:	d301      	bcc.n	c76 <__udivsi3+0x9a>
     c72:	020b      	lsls	r3, r1, #8
     c74:	1ac0      	subs	r0, r0, r3
     c76:	4152      	adcs	r2, r2
     c78:	d2cd      	bcs.n	c16 <__udivsi3+0x3a>
     c7a:	09c3      	lsrs	r3, r0, #7
     c7c:	428b      	cmp	r3, r1
     c7e:	d301      	bcc.n	c84 <__udivsi3+0xa8>
     c80:	01cb      	lsls	r3, r1, #7
     c82:	1ac0      	subs	r0, r0, r3
     c84:	4152      	adcs	r2, r2
     c86:	0983      	lsrs	r3, r0, #6
     c88:	428b      	cmp	r3, r1
     c8a:	d301      	bcc.n	c90 <__udivsi3+0xb4>
     c8c:	018b      	lsls	r3, r1, #6
     c8e:	1ac0      	subs	r0, r0, r3
     c90:	4152      	adcs	r2, r2
     c92:	0943      	lsrs	r3, r0, #5
     c94:	428b      	cmp	r3, r1
     c96:	d301      	bcc.n	c9c <__udivsi3+0xc0>
     c98:	014b      	lsls	r3, r1, #5
     c9a:	1ac0      	subs	r0, r0, r3
     c9c:	4152      	adcs	r2, r2
     c9e:	0903      	lsrs	r3, r0, #4
     ca0:	428b      	cmp	r3, r1
     ca2:	d301      	bcc.n	ca8 <__udivsi3+0xcc>
     ca4:	010b      	lsls	r3, r1, #4
     ca6:	1ac0      	subs	r0, r0, r3
     ca8:	4152      	adcs	r2, r2
     caa:	08c3      	lsrs	r3, r0, #3
     cac:	428b      	cmp	r3, r1
     cae:	d301      	bcc.n	cb4 <__udivsi3+0xd8>
     cb0:	00cb      	lsls	r3, r1, #3
     cb2:	1ac0      	subs	r0, r0, r3
     cb4:	4152      	adcs	r2, r2
     cb6:	0883      	lsrs	r3, r0, #2
     cb8:	428b      	cmp	r3, r1
     cba:	d301      	bcc.n	cc0 <__udivsi3+0xe4>
     cbc:	008b      	lsls	r3, r1, #2
     cbe:	1ac0      	subs	r0, r0, r3
     cc0:	4152      	adcs	r2, r2
     cc2:	0843      	lsrs	r3, r0, #1
     cc4:	428b      	cmp	r3, r1
     cc6:	d301      	bcc.n	ccc <__udivsi3+0xf0>
     cc8:	004b      	lsls	r3, r1, #1
     cca:	1ac0      	subs	r0, r0, r3
     ccc:	4152      	adcs	r2, r2
     cce:	1a41      	subs	r1, r0, r1
     cd0:	d200      	bcs.n	cd4 <__udivsi3+0xf8>
     cd2:	4601      	mov	r1, r0
     cd4:	4152      	adcs	r2, r2
     cd6:	4610      	mov	r0, r2
     cd8:	4770      	bx	lr
     cda:	e7ff      	b.n	cdc <__udivsi3+0x100>
     cdc:	b501      	push	{r0, lr}
     cde:	2000      	movs	r0, #0
     ce0:	f000 f8f0 	bl	ec4 <__aeabi_idiv0>
     ce4:	bd02      	pop	{r1, pc}
     ce6:	46c0      	nop			; (mov r8, r8)

00000ce8 <__aeabi_uidivmod>:
     ce8:	2900      	cmp	r1, #0
     cea:	d0f7      	beq.n	cdc <__udivsi3+0x100>
     cec:	e776      	b.n	bdc <__udivsi3>
     cee:	4770      	bx	lr

00000cf0 <__divsi3>:
     cf0:	4603      	mov	r3, r0
     cf2:	430b      	orrs	r3, r1
     cf4:	d47f      	bmi.n	df6 <__divsi3+0x106>
     cf6:	2200      	movs	r2, #0
     cf8:	0843      	lsrs	r3, r0, #1
     cfa:	428b      	cmp	r3, r1
     cfc:	d374      	bcc.n	de8 <__divsi3+0xf8>
     cfe:	0903      	lsrs	r3, r0, #4
     d00:	428b      	cmp	r3, r1
     d02:	d35f      	bcc.n	dc4 <__divsi3+0xd4>
     d04:	0a03      	lsrs	r3, r0, #8
     d06:	428b      	cmp	r3, r1
     d08:	d344      	bcc.n	d94 <__divsi3+0xa4>
     d0a:	0b03      	lsrs	r3, r0, #12
     d0c:	428b      	cmp	r3, r1
     d0e:	d328      	bcc.n	d62 <__divsi3+0x72>
     d10:	0c03      	lsrs	r3, r0, #16
     d12:	428b      	cmp	r3, r1
     d14:	d30d      	bcc.n	d32 <__divsi3+0x42>
     d16:	22ff      	movs	r2, #255	; 0xff
     d18:	0209      	lsls	r1, r1, #8
     d1a:	ba12      	rev	r2, r2
     d1c:	0c03      	lsrs	r3, r0, #16
     d1e:	428b      	cmp	r3, r1
     d20:	d302      	bcc.n	d28 <__divsi3+0x38>
     d22:	1212      	asrs	r2, r2, #8
     d24:	0209      	lsls	r1, r1, #8
     d26:	d065      	beq.n	df4 <__divsi3+0x104>
     d28:	0b03      	lsrs	r3, r0, #12
     d2a:	428b      	cmp	r3, r1
     d2c:	d319      	bcc.n	d62 <__divsi3+0x72>
     d2e:	e000      	b.n	d32 <__divsi3+0x42>
     d30:	0a09      	lsrs	r1, r1, #8
     d32:	0bc3      	lsrs	r3, r0, #15
     d34:	428b      	cmp	r3, r1
     d36:	d301      	bcc.n	d3c <__divsi3+0x4c>
     d38:	03cb      	lsls	r3, r1, #15
     d3a:	1ac0      	subs	r0, r0, r3
     d3c:	4152      	adcs	r2, r2
     d3e:	0b83      	lsrs	r3, r0, #14
     d40:	428b      	cmp	r3, r1
     d42:	d301      	bcc.n	d48 <__divsi3+0x58>
     d44:	038b      	lsls	r3, r1, #14
     d46:	1ac0      	subs	r0, r0, r3
     d48:	4152      	adcs	r2, r2
     d4a:	0b43      	lsrs	r3, r0, #13
     d4c:	428b      	cmp	r3, r1
     d4e:	d301      	bcc.n	d54 <__divsi3+0x64>
     d50:	034b      	lsls	r3, r1, #13
     d52:	1ac0      	subs	r0, r0, r3
     d54:	4152      	adcs	r2, r2
     d56:	0b03      	lsrs	r3, r0, #12
     d58:	428b      	cmp	r3, r1
     d5a:	d301      	bcc.n	d60 <__divsi3+0x70>
     d5c:	030b      	lsls	r3, r1, #12
     d5e:	1ac0      	subs	r0, r0, r3
     d60:	4152      	adcs	r2, r2
     d62:	0ac3      	lsrs	r3, r0, #11
     d64:	428b      	cmp	r3, r1
     d66:	d301      	bcc.n	d6c <__divsi3+0x7c>
     d68:	02cb      	lsls	r3, r1, #11
     d6a:	1ac0      	subs	r0, r0, r3
     d6c:	4152      	adcs	r2, r2
     d6e:	0a83      	lsrs	r3, r0, #10
     d70:	428b      	cmp	r3, r1
     d72:	d301      	bcc.n	d78 <__divsi3+0x88>
     d74:	028b      	lsls	r3, r1, #10
     d76:	1ac0      	subs	r0, r0, r3
     d78:	4152      	adcs	r2, r2
     d7a:	0a43      	lsrs	r3, r0, #9
     d7c:	428b      	cmp	r3, r1
     d7e:	d301      	bcc.n	d84 <__divsi3+0x94>
     d80:	024b      	lsls	r3, r1, #9
     d82:	1ac0      	subs	r0, r0, r3
     d84:	4152      	adcs	r2, r2
     d86:	0a03      	lsrs	r3, r0, #8
     d88:	428b      	cmp	r3, r1
     d8a:	d301      	bcc.n	d90 <__divsi3+0xa0>
     d8c:	020b      	lsls	r3, r1, #8
     d8e:	1ac0      	subs	r0, r0, r3
     d90:	4152      	adcs	r2, r2
     d92:	d2cd      	bcs.n	d30 <__divsi3+0x40>
     d94:	09c3      	lsrs	r3, r0, #7
     d96:	428b      	cmp	r3, r1
     d98:	d301      	bcc.n	d9e <__divsi3+0xae>
     d9a:	01cb      	lsls	r3, r1, #7
     d9c:	1ac0      	subs	r0, r0, r3
     d9e:	4152      	adcs	r2, r2
     da0:	0983      	lsrs	r3, r0, #6
     da2:	428b      	cmp	r3, r1
     da4:	d301      	bcc.n	daa <__divsi3+0xba>
     da6:	018b      	lsls	r3, r1, #6
     da8:	1ac0      	subs	r0, r0, r3
     daa:	4152      	adcs	r2, r2
     dac:	0943      	lsrs	r3, r0, #5
     dae:	428b      	cmp	r3, r1
     db0:	d301      	bcc.n	db6 <__divsi3+0xc6>
     db2:	014b      	lsls	r3, r1, #5
     db4:	1ac0      	subs	r0, r0, r3
     db6:	4152      	adcs	r2, r2
     db8:	0903      	lsrs	r3, r0, #4
     dba:	428b      	cmp	r3, r1
     dbc:	d301      	bcc.n	dc2 <__divsi3+0xd2>
     dbe:	010b      	lsls	r3, r1, #4
     dc0:	1ac0      	subs	r0, r0, r3
     dc2:	4152      	adcs	r2, r2
     dc4:	08c3      	lsrs	r3, r0, #3
     dc6:	428b      	cmp	r3, r1
     dc8:	d301      	bcc.n	dce <__divsi3+0xde>
     dca:	00cb      	lsls	r3, r1, #3
     dcc:	1ac0      	subs	r0, r0, r3
     dce:	4152      	adcs	r2, r2
     dd0:	0883      	lsrs	r3, r0, #2
     dd2:	428b      	cmp	r3, r1
     dd4:	d301      	bcc.n	dda <__divsi3+0xea>
     dd6:	008b      	lsls	r3, r1, #2
     dd8:	1ac0      	subs	r0, r0, r3
     dda:	4152      	adcs	r2, r2
     ddc:	0843      	lsrs	r3, r0, #1
     dde:	428b      	cmp	r3, r1
     de0:	d301      	bcc.n	de6 <__divsi3+0xf6>
     de2:	004b      	lsls	r3, r1, #1
     de4:	1ac0      	subs	r0, r0, r3
     de6:	4152      	adcs	r2, r2
     de8:	1a41      	subs	r1, r0, r1
     dea:	d200      	bcs.n	dee <__divsi3+0xfe>
     dec:	4601      	mov	r1, r0
     dee:	4152      	adcs	r2, r2
     df0:	4610      	mov	r0, r2
     df2:	4770      	bx	lr
     df4:	e05d      	b.n	eb2 <__divsi3+0x1c2>
     df6:	0fca      	lsrs	r2, r1, #31
     df8:	d000      	beq.n	dfc <__divsi3+0x10c>
     dfa:	4249      	negs	r1, r1
     dfc:	1003      	asrs	r3, r0, #32
     dfe:	d300      	bcc.n	e02 <__divsi3+0x112>
     e00:	4240      	negs	r0, r0
     e02:	4053      	eors	r3, r2
     e04:	2200      	movs	r2, #0
     e06:	469c      	mov	ip, r3
     e08:	0903      	lsrs	r3, r0, #4
     e0a:	428b      	cmp	r3, r1
     e0c:	d32d      	bcc.n	e6a <__divsi3+0x17a>
     e0e:	0a03      	lsrs	r3, r0, #8
     e10:	428b      	cmp	r3, r1
     e12:	d312      	bcc.n	e3a <__divsi3+0x14a>
     e14:	22fc      	movs	r2, #252	; 0xfc
     e16:	0189      	lsls	r1, r1, #6
     e18:	ba12      	rev	r2, r2
     e1a:	0a03      	lsrs	r3, r0, #8
     e1c:	428b      	cmp	r3, r1
     e1e:	d30c      	bcc.n	e3a <__divsi3+0x14a>
     e20:	0189      	lsls	r1, r1, #6
     e22:	1192      	asrs	r2, r2, #6
     e24:	428b      	cmp	r3, r1
     e26:	d308      	bcc.n	e3a <__divsi3+0x14a>
     e28:	0189      	lsls	r1, r1, #6
     e2a:	1192      	asrs	r2, r2, #6
     e2c:	428b      	cmp	r3, r1
     e2e:	d304      	bcc.n	e3a <__divsi3+0x14a>
     e30:	0189      	lsls	r1, r1, #6
     e32:	d03a      	beq.n	eaa <__divsi3+0x1ba>
     e34:	1192      	asrs	r2, r2, #6
     e36:	e000      	b.n	e3a <__divsi3+0x14a>
     e38:	0989      	lsrs	r1, r1, #6
     e3a:	09c3      	lsrs	r3, r0, #7
     e3c:	428b      	cmp	r3, r1
     e3e:	d301      	bcc.n	e44 <__divsi3+0x154>
     e40:	01cb      	lsls	r3, r1, #7
     e42:	1ac0      	subs	r0, r0, r3
     e44:	4152      	adcs	r2, r2
     e46:	0983      	lsrs	r3, r0, #6
     e48:	428b      	cmp	r3, r1
     e4a:	d301      	bcc.n	e50 <__divsi3+0x160>
     e4c:	018b      	lsls	r3, r1, #6
     e4e:	1ac0      	subs	r0, r0, r3
     e50:	4152      	adcs	r2, r2
     e52:	0943      	lsrs	r3, r0, #5
     e54:	428b      	cmp	r3, r1
     e56:	d301      	bcc.n	e5c <__divsi3+0x16c>
     e58:	014b      	lsls	r3, r1, #5
     e5a:	1ac0      	subs	r0, r0, r3
     e5c:	4152      	adcs	r2, r2
     e5e:	0903      	lsrs	r3, r0, #4
     e60:	428b      	cmp	r3, r1
     e62:	d301      	bcc.n	e68 <__divsi3+0x178>
     e64:	010b      	lsls	r3, r1, #4
     e66:	1ac0      	subs	r0, r0, r3
     e68:	4152      	adcs	r2, r2
     e6a:	08c3      	lsrs	r3, r0, #3
     e6c:	428b      	cmp	r3, r1
     e6e:	d301      	bcc.n	e74 <__divsi3+0x184>
     e70:	00cb      	lsls	r3, r1, #3
     e72:	1ac0      	subs	r0, r0, r3
     e74:	4152      	adcs	r2, r2
     e76:	0883      	lsrs	r3, r0, #2
     e78:	428b      	cmp	r3, r1
     e7a:	d301      	bcc.n	e80 <__divsi3+0x190>
     e7c:	008b      	lsls	r3, r1, #2
     e7e:	1ac0      	subs	r0, r0, r3
     e80:	4152      	adcs	r2, r2
     e82:	d2d9      	bcs.n	e38 <__divsi3+0x148>
     e84:	0843      	lsrs	r3, r0, #1
     e86:	428b      	cmp	r3, r1
     e88:	d301      	bcc.n	e8e <__divsi3+0x19e>
     e8a:	004b      	lsls	r3, r1, #1
     e8c:	1ac0      	subs	r0, r0, r3
     e8e:	4152      	adcs	r2, r2
     e90:	1a41      	subs	r1, r0, r1
     e92:	d200      	bcs.n	e96 <__divsi3+0x1a6>
     e94:	4601      	mov	r1, r0
     e96:	4663      	mov	r3, ip
     e98:	4152      	adcs	r2, r2
     e9a:	105b      	asrs	r3, r3, #1
     e9c:	4610      	mov	r0, r2
     e9e:	d301      	bcc.n	ea4 <__divsi3+0x1b4>
     ea0:	4240      	negs	r0, r0
     ea2:	2b00      	cmp	r3, #0
     ea4:	d500      	bpl.n	ea8 <__divsi3+0x1b8>
     ea6:	4249      	negs	r1, r1
     ea8:	4770      	bx	lr
     eaa:	4663      	mov	r3, ip
     eac:	105b      	asrs	r3, r3, #1
     eae:	d300      	bcc.n	eb2 <__divsi3+0x1c2>
     eb0:	4240      	negs	r0, r0
     eb2:	b501      	push	{r0, lr}
     eb4:	2000      	movs	r0, #0
     eb6:	f000 f805 	bl	ec4 <__aeabi_idiv0>
     eba:	bd02      	pop	{r1, pc}

00000ebc <__aeabi_idivmod>:
     ebc:	2900      	cmp	r1, #0
     ebe:	d0f8      	beq.n	eb2 <__divsi3+0x1c2>
     ec0:	e716      	b.n	cf0 <__divsi3>
     ec2:	4770      	bx	lr

00000ec4 <__aeabi_idiv0>:
     ec4:	4770      	bx	lr
     ec6:	46c0      	nop			; (mov r8, r8)

00000ec8 <__aeabi_lmul>:
     ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eca:	46ce      	mov	lr, r9
     ecc:	4647      	mov	r7, r8
     ece:	0415      	lsls	r5, r2, #16
     ed0:	0c2d      	lsrs	r5, r5, #16
     ed2:	002e      	movs	r6, r5
     ed4:	b580      	push	{r7, lr}
     ed6:	0407      	lsls	r7, r0, #16
     ed8:	0c14      	lsrs	r4, r2, #16
     eda:	0c3f      	lsrs	r7, r7, #16
     edc:	4699      	mov	r9, r3
     ede:	0c03      	lsrs	r3, r0, #16
     ee0:	437e      	muls	r6, r7
     ee2:	435d      	muls	r5, r3
     ee4:	4367      	muls	r7, r4
     ee6:	4363      	muls	r3, r4
     ee8:	197f      	adds	r7, r7, r5
     eea:	0c34      	lsrs	r4, r6, #16
     eec:	19e4      	adds	r4, r4, r7
     eee:	469c      	mov	ip, r3
     ef0:	42a5      	cmp	r5, r4
     ef2:	d903      	bls.n	efc <__aeabi_lmul+0x34>
     ef4:	2380      	movs	r3, #128	; 0x80
     ef6:	025b      	lsls	r3, r3, #9
     ef8:	4698      	mov	r8, r3
     efa:	44c4      	add	ip, r8
     efc:	464b      	mov	r3, r9
     efe:	4351      	muls	r1, r2
     f00:	4343      	muls	r3, r0
     f02:	0436      	lsls	r6, r6, #16
     f04:	0c36      	lsrs	r6, r6, #16
     f06:	0c25      	lsrs	r5, r4, #16
     f08:	0424      	lsls	r4, r4, #16
     f0a:	4465      	add	r5, ip
     f0c:	19a4      	adds	r4, r4, r6
     f0e:	1859      	adds	r1, r3, r1
     f10:	1949      	adds	r1, r1, r5
     f12:	0020      	movs	r0, r4
     f14:	bc0c      	pop	{r2, r3}
     f16:	4690      	mov	r8, r2
     f18:	4699      	mov	r9, r3
     f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f1c <__libc_init_array>:
     f1c:	b570      	push	{r4, r5, r6, lr}
     f1e:	2600      	movs	r6, #0
     f20:	4d0c      	ldr	r5, [pc, #48]	; (f54 <__libc_init_array+0x38>)
     f22:	4c0d      	ldr	r4, [pc, #52]	; (f58 <__libc_init_array+0x3c>)
     f24:	1b64      	subs	r4, r4, r5
     f26:	10a4      	asrs	r4, r4, #2
     f28:	42a6      	cmp	r6, r4
     f2a:	d109      	bne.n	f40 <__libc_init_array+0x24>
     f2c:	2600      	movs	r6, #0
     f2e:	f000 f923 	bl	1178 <_init>
     f32:	4d0a      	ldr	r5, [pc, #40]	; (f5c <__libc_init_array+0x40>)
     f34:	4c0a      	ldr	r4, [pc, #40]	; (f60 <__libc_init_array+0x44>)
     f36:	1b64      	subs	r4, r4, r5
     f38:	10a4      	asrs	r4, r4, #2
     f3a:	42a6      	cmp	r6, r4
     f3c:	d105      	bne.n	f4a <__libc_init_array+0x2e>
     f3e:	bd70      	pop	{r4, r5, r6, pc}
     f40:	00b3      	lsls	r3, r6, #2
     f42:	58eb      	ldr	r3, [r5, r3]
     f44:	4798      	blx	r3
     f46:	3601      	adds	r6, #1
     f48:	e7ee      	b.n	f28 <__libc_init_array+0xc>
     f4a:	00b3      	lsls	r3, r6, #2
     f4c:	58eb      	ldr	r3, [r5, r3]
     f4e:	4798      	blx	r3
     f50:	3601      	adds	r6, #1
     f52:	e7f2      	b.n	f3a <__libc_init_array+0x1e>
     f54:	00001184 	.word	0x00001184
     f58:	00001184 	.word	0x00001184
     f5c:	00001184 	.word	0x00001184
     f60:	00001188 	.word	0x00001188

00000f64 <srand>:
     f64:	4b10      	ldr	r3, [pc, #64]	; (fa8 <srand+0x44>)
     f66:	b570      	push	{r4, r5, r6, lr}
     f68:	681c      	ldr	r4, [r3, #0]
     f6a:	0005      	movs	r5, r0
     f6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     f6e:	2b00      	cmp	r3, #0
     f70:	d115      	bne.n	f9e <srand+0x3a>
     f72:	2018      	movs	r0, #24
     f74:	f000 f860 	bl	1038 <malloc>
     f78:	4b0c      	ldr	r3, [pc, #48]	; (fac <srand+0x48>)
     f7a:	63a0      	str	r0, [r4, #56]	; 0x38
     f7c:	8003      	strh	r3, [r0, #0]
     f7e:	4b0c      	ldr	r3, [pc, #48]	; (fb0 <srand+0x4c>)
     f80:	2201      	movs	r2, #1
     f82:	8043      	strh	r3, [r0, #2]
     f84:	4b0b      	ldr	r3, [pc, #44]	; (fb4 <srand+0x50>)
     f86:	8083      	strh	r3, [r0, #4]
     f88:	4b0b      	ldr	r3, [pc, #44]	; (fb8 <srand+0x54>)
     f8a:	80c3      	strh	r3, [r0, #6]
     f8c:	4b0b      	ldr	r3, [pc, #44]	; (fbc <srand+0x58>)
     f8e:	8103      	strh	r3, [r0, #8]
     f90:	2305      	movs	r3, #5
     f92:	8143      	strh	r3, [r0, #10]
     f94:	3306      	adds	r3, #6
     f96:	8183      	strh	r3, [r0, #12]
     f98:	2300      	movs	r3, #0
     f9a:	6102      	str	r2, [r0, #16]
     f9c:	6143      	str	r3, [r0, #20]
     f9e:	2200      	movs	r2, #0
     fa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     fa2:	611d      	str	r5, [r3, #16]
     fa4:	615a      	str	r2, [r3, #20]
     fa6:	bd70      	pop	{r4, r5, r6, pc}
     fa8:	2000000c 	.word	0x2000000c
     fac:	0000330e 	.word	0x0000330e
     fb0:	ffffabcd 	.word	0xffffabcd
     fb4:	00001234 	.word	0x00001234
     fb8:	ffffe66d 	.word	0xffffe66d
     fbc:	ffffdeec 	.word	0xffffdeec

00000fc0 <rand>:
     fc0:	4b15      	ldr	r3, [pc, #84]	; (1018 <rand+0x58>)
     fc2:	b510      	push	{r4, lr}
     fc4:	681c      	ldr	r4, [r3, #0]
     fc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     fc8:	2b00      	cmp	r3, #0
     fca:	d115      	bne.n	ff8 <rand+0x38>
     fcc:	2018      	movs	r0, #24
     fce:	f000 f833 	bl	1038 <malloc>
     fd2:	4b12      	ldr	r3, [pc, #72]	; (101c <rand+0x5c>)
     fd4:	63a0      	str	r0, [r4, #56]	; 0x38
     fd6:	8003      	strh	r3, [r0, #0]
     fd8:	4b11      	ldr	r3, [pc, #68]	; (1020 <rand+0x60>)
     fda:	2201      	movs	r2, #1
     fdc:	8043      	strh	r3, [r0, #2]
     fde:	4b11      	ldr	r3, [pc, #68]	; (1024 <rand+0x64>)
     fe0:	8083      	strh	r3, [r0, #4]
     fe2:	4b11      	ldr	r3, [pc, #68]	; (1028 <rand+0x68>)
     fe4:	80c3      	strh	r3, [r0, #6]
     fe6:	4b11      	ldr	r3, [pc, #68]	; (102c <rand+0x6c>)
     fe8:	8103      	strh	r3, [r0, #8]
     fea:	2305      	movs	r3, #5
     fec:	8143      	strh	r3, [r0, #10]
     fee:	3306      	adds	r3, #6
     ff0:	8183      	strh	r3, [r0, #12]
     ff2:	2300      	movs	r3, #0
     ff4:	6102      	str	r2, [r0, #16]
     ff6:	6143      	str	r3, [r0, #20]
     ff8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
     ffa:	4a0d      	ldr	r2, [pc, #52]	; (1030 <rand+0x70>)
     ffc:	6920      	ldr	r0, [r4, #16]
     ffe:	6961      	ldr	r1, [r4, #20]
    1000:	4b0c      	ldr	r3, [pc, #48]	; (1034 <rand+0x74>)
    1002:	f7ff ff61 	bl	ec8 <__aeabi_lmul>
    1006:	2201      	movs	r2, #1
    1008:	2300      	movs	r3, #0
    100a:	1880      	adds	r0, r0, r2
    100c:	4159      	adcs	r1, r3
    100e:	6120      	str	r0, [r4, #16]
    1010:	6161      	str	r1, [r4, #20]
    1012:	0048      	lsls	r0, r1, #1
    1014:	0840      	lsrs	r0, r0, #1
    1016:	bd10      	pop	{r4, pc}
    1018:	2000000c 	.word	0x2000000c
    101c:	0000330e 	.word	0x0000330e
    1020:	ffffabcd 	.word	0xffffabcd
    1024:	00001234 	.word	0x00001234
    1028:	ffffe66d 	.word	0xffffe66d
    102c:	ffffdeec 	.word	0xffffdeec
    1030:	4c957f2d 	.word	0x4c957f2d
    1034:	5851f42d 	.word	0x5851f42d

00001038 <malloc>:
    1038:	b510      	push	{r4, lr}
    103a:	4b03      	ldr	r3, [pc, #12]	; (1048 <malloc+0x10>)
    103c:	0001      	movs	r1, r0
    103e:	6818      	ldr	r0, [r3, #0]
    1040:	f000 f804 	bl	104c <_malloc_r>
    1044:	bd10      	pop	{r4, pc}
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	2000000c 	.word	0x2000000c

0000104c <_malloc_r>:
    104c:	2303      	movs	r3, #3
    104e:	b570      	push	{r4, r5, r6, lr}
    1050:	1ccd      	adds	r5, r1, #3
    1052:	439d      	bics	r5, r3
    1054:	3508      	adds	r5, #8
    1056:	0006      	movs	r6, r0
    1058:	2d0c      	cmp	r5, #12
    105a:	d21e      	bcs.n	109a <_malloc_r+0x4e>
    105c:	250c      	movs	r5, #12
    105e:	42a9      	cmp	r1, r5
    1060:	d81d      	bhi.n	109e <_malloc_r+0x52>
    1062:	0030      	movs	r0, r6
    1064:	f000 f862 	bl	112c <__malloc_lock>
    1068:	4a25      	ldr	r2, [pc, #148]	; (1100 <_malloc_r+0xb4>)
    106a:	6814      	ldr	r4, [r2, #0]
    106c:	0021      	movs	r1, r4
    106e:	2900      	cmp	r1, #0
    1070:	d119      	bne.n	10a6 <_malloc_r+0x5a>
    1072:	4c24      	ldr	r4, [pc, #144]	; (1104 <_malloc_r+0xb8>)
    1074:	6823      	ldr	r3, [r4, #0]
    1076:	2b00      	cmp	r3, #0
    1078:	d103      	bne.n	1082 <_malloc_r+0x36>
    107a:	0030      	movs	r0, r6
    107c:	f000 f844 	bl	1108 <_sbrk_r>
    1080:	6020      	str	r0, [r4, #0]
    1082:	0029      	movs	r1, r5
    1084:	0030      	movs	r0, r6
    1086:	f000 f83f 	bl	1108 <_sbrk_r>
    108a:	1c43      	adds	r3, r0, #1
    108c:	d12c      	bne.n	10e8 <_malloc_r+0x9c>
    108e:	230c      	movs	r3, #12
    1090:	0030      	movs	r0, r6
    1092:	6033      	str	r3, [r6, #0]
    1094:	f000 f84b 	bl	112e <__malloc_unlock>
    1098:	e003      	b.n	10a2 <_malloc_r+0x56>
    109a:	2d00      	cmp	r5, #0
    109c:	dadf      	bge.n	105e <_malloc_r+0x12>
    109e:	230c      	movs	r3, #12
    10a0:	6033      	str	r3, [r6, #0]
    10a2:	2000      	movs	r0, #0
    10a4:	bd70      	pop	{r4, r5, r6, pc}
    10a6:	680b      	ldr	r3, [r1, #0]
    10a8:	1b5b      	subs	r3, r3, r5
    10aa:	d41a      	bmi.n	10e2 <_malloc_r+0x96>
    10ac:	2b0b      	cmp	r3, #11
    10ae:	d903      	bls.n	10b8 <_malloc_r+0x6c>
    10b0:	600b      	str	r3, [r1, #0]
    10b2:	18cc      	adds	r4, r1, r3
    10b4:	6025      	str	r5, [r4, #0]
    10b6:	e003      	b.n	10c0 <_malloc_r+0x74>
    10b8:	428c      	cmp	r4, r1
    10ba:	d10e      	bne.n	10da <_malloc_r+0x8e>
    10bc:	6863      	ldr	r3, [r4, #4]
    10be:	6013      	str	r3, [r2, #0]
    10c0:	0030      	movs	r0, r6
    10c2:	f000 f834 	bl	112e <__malloc_unlock>
    10c6:	0020      	movs	r0, r4
    10c8:	2207      	movs	r2, #7
    10ca:	300b      	adds	r0, #11
    10cc:	1d23      	adds	r3, r4, #4
    10ce:	4390      	bics	r0, r2
    10d0:	1ac3      	subs	r3, r0, r3
    10d2:	d0e7      	beq.n	10a4 <_malloc_r+0x58>
    10d4:	425a      	negs	r2, r3
    10d6:	50e2      	str	r2, [r4, r3]
    10d8:	e7e4      	b.n	10a4 <_malloc_r+0x58>
    10da:	684b      	ldr	r3, [r1, #4]
    10dc:	6063      	str	r3, [r4, #4]
    10de:	000c      	movs	r4, r1
    10e0:	e7ee      	b.n	10c0 <_malloc_r+0x74>
    10e2:	000c      	movs	r4, r1
    10e4:	6849      	ldr	r1, [r1, #4]
    10e6:	e7c2      	b.n	106e <_malloc_r+0x22>
    10e8:	2303      	movs	r3, #3
    10ea:	1cc4      	adds	r4, r0, #3
    10ec:	439c      	bics	r4, r3
    10ee:	42a0      	cmp	r0, r4
    10f0:	d0e0      	beq.n	10b4 <_malloc_r+0x68>
    10f2:	1a21      	subs	r1, r4, r0
    10f4:	0030      	movs	r0, r6
    10f6:	f000 f807 	bl	1108 <_sbrk_r>
    10fa:	1c43      	adds	r3, r0, #1
    10fc:	d1da      	bne.n	10b4 <_malloc_r+0x68>
    10fe:	e7c6      	b.n	108e <_malloc_r+0x42>
    1100:	200000b0 	.word	0x200000b0
    1104:	200000b4 	.word	0x200000b4

00001108 <_sbrk_r>:
    1108:	2300      	movs	r3, #0
    110a:	b570      	push	{r4, r5, r6, lr}
    110c:	4c06      	ldr	r4, [pc, #24]	; (1128 <_sbrk_r+0x20>)
    110e:	0005      	movs	r5, r0
    1110:	0008      	movs	r0, r1
    1112:	6023      	str	r3, [r4, #0]
    1114:	f7ff fcd0 	bl	ab8 <_sbrk>
    1118:	1c43      	adds	r3, r0, #1
    111a:	d103      	bne.n	1124 <_sbrk_r+0x1c>
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	2b00      	cmp	r3, #0
    1120:	d000      	beq.n	1124 <_sbrk_r+0x1c>
    1122:	602b      	str	r3, [r5, #0]
    1124:	bd70      	pop	{r4, r5, r6, pc}
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	200000dc 	.word	0x200000dc

0000112c <__malloc_lock>:
    112c:	4770      	bx	lr

0000112e <__malloc_unlock>:
    112e:	4770      	bx	lr
    1130:	0000052a 	.word	0x0000052a
    1134:	00000526 	.word	0x00000526
    1138:	00000526 	.word	0x00000526
    113c:	0000058c 	.word	0x0000058c
    1140:	0000058c 	.word	0x0000058c
    1144:	0000053e 	.word	0x0000053e
    1148:	00000530 	.word	0x00000530
    114c:	00000544 	.word	0x00000544
    1150:	0000057a 	.word	0x0000057a
    1154:	00000614 	.word	0x00000614
    1158:	000005f4 	.word	0x000005f4
    115c:	000005f4 	.word	0x000005f4
    1160:	00000680 	.word	0x00000680
    1164:	00000606 	.word	0x00000606
    1168:	00000622 	.word	0x00000622
    116c:	000005f8 	.word	0x000005f8
    1170:	00000630 	.word	0x00000630
    1174:	00000670 	.word	0x00000670

00001178 <_init>:
    1178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    117e:	bc08      	pop	{r3}
    1180:	469e      	mov	lr, r3
    1182:	4770      	bx	lr

00001184 <__init_array_start>:
    1184:	000000dd 	.word	0x000000dd

00001188 <_fini>:
    1188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    118e:	bc08      	pop	{r3}
    1190:	469e      	mov	lr, r3
    1192:	4770      	bx	lr

00001194 <__fini_array_start>:
    1194:	000000b5 	.word	0x000000b5
