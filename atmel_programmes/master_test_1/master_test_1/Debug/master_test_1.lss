
master_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d7c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00002d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  20000018  00002d94  00020018  2**2
                  ALLOC
  3 .stack        00002000  20000070  00002dec  00020018  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  6 .debug_info   00019afb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025c6  00000000  00000000  00039b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000034bc  00000000  00000000  0003c15a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000328  00000000  00000000  0003f616  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002e0  00000000  00000000  0003f93e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017b8e  00000000  00000000  0003fc1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000085bc  00000000  00000000  000577ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00087b79  00000000  00000000  0005fd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000008f0  00000000  00000000  000e78e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 20 00 20 19 01 00 00 15 01 00 00 15 01 00 00     p . ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000018 	.word	0x20000018
      d4:	00000000 	.word	0x00000000
      d8:	00002d7c 	.word	0x00002d7c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000001c 	.word	0x2000001c
     108:	00002d7c 	.word	0x00002d7c
     10c:	00002d7c 	.word	0x00002d7c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00002d7c 	.word	0x00002d7c
     1c8:	20000000 	.word	0x20000000
     1cc:	20000018 	.word	0x20000018
     1d0:	20000004 	.word	0x20000004
     1d4:	20000018 	.word	0x20000018
     1d8:	20000070 	.word	0x20000070
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00002c29 	.word	0x00002c29
     1f8:	000010dd 	.word	0x000010dd

000001fc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     1fc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     1fe:	2000      	movs	r0, #0
     200:	4b08      	ldr	r3, [pc, #32]	; (224 <delay_init+0x28>)
     202:	4798      	blx	r3
     204:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     206:	4c08      	ldr	r4, [pc, #32]	; (228 <delay_init+0x2c>)
     208:	21fa      	movs	r1, #250	; 0xfa
     20a:	0089      	lsls	r1, r1, #2
     20c:	47a0      	blx	r4
     20e:	4b07      	ldr	r3, [pc, #28]	; (22c <delay_init+0x30>)
     210:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     212:	4907      	ldr	r1, [pc, #28]	; (230 <delay_init+0x34>)
     214:	0028      	movs	r0, r5
     216:	47a0      	blx	r4
     218:	4b06      	ldr	r3, [pc, #24]	; (234 <delay_init+0x38>)
     21a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     21c:	2205      	movs	r2, #5
     21e:	4b06      	ldr	r3, [pc, #24]	; (238 <delay_init+0x3c>)
     220:	601a      	str	r2, [r3, #0]
}
     222:	bd70      	pop	{r4, r5, r6, pc}
     224:	00000e6d 	.word	0x00000e6d
     228:	00001249 	.word	0x00001249
     22c:	20000000 	.word	0x20000000
     230:	000f4240 	.word	0x000f4240
     234:	20000004 	.word	0x20000004
     238:	e000e010 	.word	0xe000e010

0000023c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     23c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     23e:	4b08      	ldr	r3, [pc, #32]	; (260 <delay_cycles_ms+0x24>)
     240:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     242:	4a08      	ldr	r2, [pc, #32]	; (264 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     244:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     246:	2180      	movs	r1, #128	; 0x80
     248:	0249      	lsls	r1, r1, #9
	while (n--) {
     24a:	3801      	subs	r0, #1
     24c:	d307      	bcc.n	25e <delay_cycles_ms+0x22>
	if (n > 0) {
     24e:	2c00      	cmp	r4, #0
     250:	d0fb      	beq.n	24a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     252:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     254:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     256:	6813      	ldr	r3, [r2, #0]
     258:	420b      	tst	r3, r1
     25a:	d0fc      	beq.n	256 <delay_cycles_ms+0x1a>
     25c:	e7f5      	b.n	24a <delay_cycles_ms+0xe>
	}
}
     25e:	bd30      	pop	{r4, r5, pc}
     260:	20000000 	.word	0x20000000
     264:	e000e010 	.word	0xe000e010

00000268 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     268:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     26a:	2207      	movs	r2, #7
     26c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     26e:	421a      	tst	r2, r3
     270:	d1fc      	bne.n	26c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     272:	4770      	bx	lr

00000274 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     274:	b5f0      	push	{r4, r5, r6, r7, lr}
     276:	46d6      	mov	lr, sl
     278:	464f      	mov	r7, r9
     27a:	4646      	mov	r6, r8
     27c:	b5c0      	push	{r6, r7, lr}
     27e:	b08a      	sub	sp, #40	; 0x28
     280:	0006      	movs	r6, r0
     282:	000f      	movs	r7, r1
     284:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     286:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     288:	0008      	movs	r0, r1
     28a:	4b97      	ldr	r3, [pc, #604]	; (4e8 <i2c_master_init+0x274>)
     28c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     28e:	4a97      	ldr	r2, [pc, #604]	; (4ec <i2c_master_init+0x278>)
     290:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     292:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     294:	2301      	movs	r3, #1
     296:	40ab      	lsls	r3, r5
     298:	430b      	orrs	r3, r1
     29a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     29c:	a909      	add	r1, sp, #36	; 0x24
     29e:	7b23      	ldrb	r3, [r4, #12]
     2a0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     2a2:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     2a4:	b2c5      	uxtb	r5, r0
     2a6:	0028      	movs	r0, r5
     2a8:	4b91      	ldr	r3, [pc, #580]	; (4f0 <i2c_master_init+0x27c>)
     2aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     2ac:	0028      	movs	r0, r5
     2ae:	4b91      	ldr	r3, [pc, #580]	; (4f4 <i2c_master_init+0x280>)
     2b0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     2b2:	7b20      	ldrb	r0, [r4, #12]
     2b4:	2100      	movs	r1, #0
     2b6:	4b90      	ldr	r3, [pc, #576]	; (4f8 <i2c_master_init+0x284>)
     2b8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     2ba:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     2bc:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     2be:	079b      	lsls	r3, r3, #30
     2c0:	d505      	bpl.n	2ce <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     2c2:	b00a      	add	sp, #40	; 0x28
     2c4:	bc1c      	pop	{r2, r3, r4}
     2c6:	4690      	mov	r8, r2
     2c8:	4699      	mov	r9, r3
     2ca:	46a2      	mov	sl, r4
     2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     2ce:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     2d0:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     2d2:	07db      	lsls	r3, r3, #31
     2d4:	d4f5      	bmi.n	2c2 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     2d6:	2314      	movs	r3, #20
     2d8:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2da:	6833      	ldr	r3, [r6, #0]
     2dc:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     2de:	0018      	movs	r0, r3
     2e0:	4b81      	ldr	r3, [pc, #516]	; (4e8 <i2c_master_init+0x274>)
     2e2:	4798      	blx	r3
     2e4:	0005      	movs	r5, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2e6:	2380      	movs	r3, #128	; 0x80
     2e8:	aa08      	add	r2, sp, #32
     2ea:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2ec:	2300      	movs	r3, #0
     2ee:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2f0:	2201      	movs	r2, #1
     2f2:	a908      	add	r1, sp, #32
     2f4:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     2f6:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     2f8:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     2fa:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     2fc:	2800      	cmp	r0, #0
     2fe:	d100      	bne.n	302 <i2c_master_init+0x8e>
     300:	e0af      	b.n	462 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     302:	ab08      	add	r3, sp, #32
     304:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     306:	2302      	movs	r3, #2
     308:	aa08      	add	r2, sp, #32
     30a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     30c:	0c00      	lsrs	r0, r0, #16
     30e:	b2c0      	uxtb	r0, r0
     310:	0011      	movs	r1, r2
     312:	4b7a      	ldr	r3, [pc, #488]	; (4fc <i2c_master_init+0x288>)
     314:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     316:	2f00      	cmp	r7, #0
     318:	d100      	bne.n	31c <i2c_master_init+0xa8>
     31a:	e0a7      	b.n	46c <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     31c:	ab08      	add	r3, sp, #32
     31e:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     320:	2302      	movs	r3, #2
     322:	aa08      	add	r2, sp, #32
     324:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     326:	0c3f      	lsrs	r7, r7, #16
     328:	b2f8      	uxtb	r0, r7
     32a:	0011      	movs	r1, r2
     32c:	4b73      	ldr	r3, [pc, #460]	; (4fc <i2c_master_init+0x288>)
     32e:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     330:	8aa3      	ldrh	r3, [r4, #20]
     332:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     334:	8ae3      	ldrh	r3, [r4, #22]
     336:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     338:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     33a:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     33c:	2b00      	cmp	r3, #0
     33e:	d104      	bne.n	34a <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     340:	4b6f      	ldr	r3, [pc, #444]	; (500 <i2c_master_init+0x28c>)
     342:	789b      	ldrb	r3, [r3, #2]
     344:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     346:	0fdb      	lsrs	r3, r3, #31
     348:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     34a:	68a1      	ldr	r1, [r4, #8]
     34c:	6923      	ldr	r3, [r4, #16]
     34e:	430b      	orrs	r3, r1
     350:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     352:	2224      	movs	r2, #36	; 0x24
     354:	5ca2      	ldrb	r2, [r4, r2]
     356:	2a00      	cmp	r2, #0
     358:	d002      	beq.n	360 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     35a:	2280      	movs	r2, #128	; 0x80
     35c:	05d2      	lsls	r2, r2, #23
     35e:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     360:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     362:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     364:	222c      	movs	r2, #44	; 0x2c
     366:	5ca2      	ldrb	r2, [r4, r2]
     368:	2a00      	cmp	r2, #0
     36a:	d103      	bne.n	374 <i2c_master_init+0x100>
     36c:	2280      	movs	r2, #128	; 0x80
     36e:	0492      	lsls	r2, r2, #18
     370:	4291      	cmp	r1, r2
     372:	d102      	bne.n	37a <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     374:	2280      	movs	r2, #128	; 0x80
     376:	0512      	lsls	r2, r2, #20
     378:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     37a:	222d      	movs	r2, #45	; 0x2d
     37c:	5ca2      	ldrb	r2, [r4, r2]
     37e:	2a00      	cmp	r2, #0
     380:	d002      	beq.n	388 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     382:	2280      	movs	r2, #128	; 0x80
     384:	0412      	lsls	r2, r2, #16
     386:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     388:	222e      	movs	r2, #46	; 0x2e
     38a:	5ca2      	ldrb	r2, [r4, r2]
     38c:	2a00      	cmp	r2, #0
     38e:	d002      	beq.n	396 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     390:	2280      	movs	r2, #128	; 0x80
     392:	03d2      	lsls	r2, r2, #15
     394:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     396:	4642      	mov	r2, r8
     398:	6812      	ldr	r2, [r2, #0]
     39a:	4313      	orrs	r3, r2
     39c:	4642      	mov	r2, r8
     39e:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	005b      	lsls	r3, r3, #1
     3a4:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     3a6:	0028      	movs	r0, r5
     3a8:	3014      	adds	r0, #20
     3aa:	b2c0      	uxtb	r0, r0
     3ac:	4b55      	ldr	r3, [pc, #340]	; (504 <i2c_master_init+0x290>)
     3ae:	4798      	blx	r3
     3b0:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     3b2:	23fa      	movs	r3, #250	; 0xfa
     3b4:	009b      	lsls	r3, r3, #2
     3b6:	6822      	ldr	r2, [r4, #0]
     3b8:	435a      	muls	r2, r3
     3ba:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3bc:	6863      	ldr	r3, [r4, #4]
     3be:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     3c0:	4d51      	ldr	r5, [pc, #324]	; (508 <i2c_master_init+0x294>)
     3c2:	47a8      	blx	r5
     3c4:	9000      	str	r0, [sp, #0]
     3c6:	9101      	str	r1, [sp, #4]
     3c8:	464b      	mov	r3, r9
     3ca:	0058      	lsls	r0, r3, #1
     3cc:	47a8      	blx	r5
     3ce:	9002      	str	r0, [sp, #8]
     3d0:	9103      	str	r1, [sp, #12]
     3d2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     3d4:	47a8      	blx	r5
     3d6:	9004      	str	r0, [sp, #16]
     3d8:	9105      	str	r1, [sp, #20]
     3da:	4f4c      	ldr	r7, [pc, #304]	; (50c <i2c_master_init+0x298>)
     3dc:	4a4c      	ldr	r2, [pc, #304]	; (510 <i2c_master_init+0x29c>)
     3de:	4b4d      	ldr	r3, [pc, #308]	; (514 <i2c_master_init+0x2a0>)
     3e0:	9800      	ldr	r0, [sp, #0]
     3e2:	9901      	ldr	r1, [sp, #4]
     3e4:	47b8      	blx	r7
     3e6:	0002      	movs	r2, r0
     3e8:	000b      	movs	r3, r1
     3ea:	9804      	ldr	r0, [sp, #16]
     3ec:	9905      	ldr	r1, [sp, #20]
     3ee:	47b8      	blx	r7
     3f0:	4e49      	ldr	r6, [pc, #292]	; (518 <i2c_master_init+0x2a4>)
     3f2:	2200      	movs	r2, #0
     3f4:	4b49      	ldr	r3, [pc, #292]	; (51c <i2c_master_init+0x2a8>)
     3f6:	47b0      	blx	r6
     3f8:	9004      	str	r0, [sp, #16]
     3fa:	9105      	str	r1, [sp, #20]
     3fc:	4648      	mov	r0, r9
     3fe:	47a8      	blx	r5
     400:	0002      	movs	r2, r0
     402:	000b      	movs	r3, r1
     404:	9804      	ldr	r0, [sp, #16]
     406:	9905      	ldr	r1, [sp, #20]
     408:	47b8      	blx	r7
     40a:	0002      	movs	r2, r0
     40c:	000b      	movs	r3, r1
     40e:	4d44      	ldr	r5, [pc, #272]	; (520 <i2c_master_init+0x2ac>)
     410:	9800      	ldr	r0, [sp, #0]
     412:	9901      	ldr	r1, [sp, #4]
     414:	47a8      	blx	r5
     416:	9a02      	ldr	r2, [sp, #8]
     418:	9b03      	ldr	r3, [sp, #12]
     41a:	47b0      	blx	r6
     41c:	2200      	movs	r2, #0
     41e:	4b41      	ldr	r3, [pc, #260]	; (524 <i2c_master_init+0x2b0>)
     420:	47a8      	blx	r5
     422:	9a02      	ldr	r2, [sp, #8]
     424:	9b03      	ldr	r3, [sp, #12]
     426:	4d40      	ldr	r5, [pc, #256]	; (528 <i2c_master_init+0x2b4>)
     428:	47a8      	blx	r5
     42a:	4b40      	ldr	r3, [pc, #256]	; (52c <i2c_master_init+0x2b8>)
     42c:	4798      	blx	r3
     42e:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     430:	2380      	movs	r3, #128	; 0x80
     432:	049b      	lsls	r3, r3, #18
     434:	68a2      	ldr	r2, [r4, #8]
     436:	429a      	cmp	r2, r3
     438:	d01e      	beq.n	478 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     43a:	0003      	movs	r3, r0
     43c:	2040      	movs	r0, #64	; 0x40
     43e:	2dff      	cmp	r5, #255	; 0xff
     440:	d900      	bls.n	444 <i2c_master_init+0x1d0>
     442:	e73e      	b.n	2c2 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     444:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     446:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     448:	25ff      	movs	r5, #255	; 0xff
     44a:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     44c:	0624      	lsls	r4, r4, #24
     44e:	4325      	orrs	r5, r4
     450:	0400      	lsls	r0, r0, #16
     452:	23ff      	movs	r3, #255	; 0xff
     454:	041b      	lsls	r3, r3, #16
     456:	4018      	ands	r0, r3
     458:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     45a:	4643      	mov	r3, r8
     45c:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     45e:	2000      	movs	r0, #0
     460:	e72f      	b.n	2c2 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     462:	2100      	movs	r1, #0
     464:	4640      	mov	r0, r8
     466:	4b32      	ldr	r3, [pc, #200]	; (530 <i2c_master_init+0x2bc>)
     468:	4798      	blx	r3
     46a:	e74a      	b.n	302 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     46c:	2101      	movs	r1, #1
     46e:	4640      	mov	r0, r8
     470:	4b2f      	ldr	r3, [pc, #188]	; (530 <i2c_master_init+0x2bc>)
     472:	4798      	blx	r3
     474:	0007      	movs	r7, r0
     476:	e751      	b.n	31c <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     478:	26fa      	movs	r6, #250	; 0xfa
     47a:	00b6      	lsls	r6, r6, #2
     47c:	4653      	mov	r3, sl
     47e:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     480:	9800      	ldr	r0, [sp, #0]
     482:	9901      	ldr	r1, [sp, #4]
     484:	0002      	movs	r2, r0
     486:	000b      	movs	r3, r1
     488:	4c23      	ldr	r4, [pc, #140]	; (518 <i2c_master_init+0x2a4>)
     48a:	47a0      	blx	r4
     48c:	9000      	str	r0, [sp, #0]
     48e:	9101      	str	r1, [sp, #4]
     490:	0030      	movs	r0, r6
     492:	4b1d      	ldr	r3, [pc, #116]	; (508 <i2c_master_init+0x294>)
     494:	4798      	blx	r3
     496:	2200      	movs	r2, #0
     498:	4b26      	ldr	r3, [pc, #152]	; (534 <i2c_master_init+0x2c0>)
     49a:	47b8      	blx	r7
     49c:	0002      	movs	r2, r0
     49e:	000b      	movs	r3, r1
     4a0:	9800      	ldr	r0, [sp, #0]
     4a2:	9901      	ldr	r1, [sp, #4]
     4a4:	4c20      	ldr	r4, [pc, #128]	; (528 <i2c_master_init+0x2b4>)
     4a6:	47a0      	blx	r4
     4a8:	2200      	movs	r2, #0
     4aa:	4b1e      	ldr	r3, [pc, #120]	; (524 <i2c_master_init+0x2b0>)
     4ac:	4c1c      	ldr	r4, [pc, #112]	; (520 <i2c_master_init+0x2ac>)
     4ae:	47a0      	blx	r4
     4b0:	4b1e      	ldr	r3, [pc, #120]	; (52c <i2c_master_init+0x2b8>)
     4b2:	4798      	blx	r3
     4b4:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     4b6:	d00c      	beq.n	4d2 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     4b8:	0031      	movs	r1, r6
     4ba:	9807      	ldr	r0, [sp, #28]
     4bc:	4b1e      	ldr	r3, [pc, #120]	; (538 <i2c_master_init+0x2c4>)
     4be:	4798      	blx	r3
     4c0:	3802      	subs	r0, #2
     4c2:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4c4:	002b      	movs	r3, r5
     4c6:	2dff      	cmp	r5, #255	; 0xff
     4c8:	d80c      	bhi.n	4e4 <i2c_master_init+0x270>
     4ca:	28ff      	cmp	r0, #255	; 0xff
     4cc:	d9bc      	bls.n	448 <i2c_master_init+0x1d4>
     4ce:	2040      	movs	r0, #64	; 0x40
     4d0:	e6f7      	b.n	2c2 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     4d2:	0071      	lsls	r1, r6, #1
     4d4:	1e48      	subs	r0, r1, #1
     4d6:	9b07      	ldr	r3, [sp, #28]
     4d8:	469c      	mov	ip, r3
     4da:	4460      	add	r0, ip
     4dc:	4b16      	ldr	r3, [pc, #88]	; (538 <i2c_master_init+0x2c4>)
     4de:	4798      	blx	r3
     4e0:	3801      	subs	r0, #1
     4e2:	e7ef      	b.n	4c4 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4e4:	2040      	movs	r0, #64	; 0x40
     4e6:	e6ec      	b.n	2c2 <i2c_master_init+0x4e>
     4e8:	00000a39 	.word	0x00000a39
     4ec:	40000400 	.word	0x40000400
     4f0:	00000f85 	.word	0x00000f85
     4f4:	00000ef9 	.word	0x00000ef9
     4f8:	00000875 	.word	0x00000875
     4fc:	0000107d 	.word	0x0000107d
     500:	41002000 	.word	0x41002000
     504:	00000fa1 	.word	0x00000fa1
     508:	00002b7d 	.word	0x00002b7d
     50c:	00001fe9 	.word	0x00001fe9
     510:	e826d695 	.word	0xe826d695
     514:	3e112e0b 	.word	0x3e112e0b
     518:	00001361 	.word	0x00001361
     51c:	40240000 	.word	0x40240000
     520:	000024e9 	.word	0x000024e9
     524:	3ff00000 	.word	0x3ff00000
     528:	00001981 	.word	0x00001981
     52c:	00002b15 	.word	0x00002b15
     530:	000008c1 	.word	0x000008c1
     534:	40080000 	.word	0x40080000
     538:	00001249 	.word	0x00001249

0000053c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     53c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     53e:	7e1a      	ldrb	r2, [r3, #24]
     540:	0792      	lsls	r2, r2, #30
     542:	d507      	bpl.n	554 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     544:	2202      	movs	r2, #2
     546:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     548:	8b5b      	ldrh	r3, [r3, #26]
     54a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     54c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     54e:	17db      	asrs	r3, r3, #31
     550:	4018      	ands	r0, r3
}
     552:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     554:	8b5a      	ldrh	r2, [r3, #26]
     556:	0752      	lsls	r2, r2, #29
     558:	d506      	bpl.n	568 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     55a:	6859      	ldr	r1, [r3, #4]
     55c:	22c0      	movs	r2, #192	; 0xc0
     55e:	0292      	lsls	r2, r2, #10
     560:	430a      	orrs	r2, r1
     562:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     564:	2018      	movs	r0, #24
     566:	e7f4      	b.n	552 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     568:	2000      	movs	r0, #0
     56a:	e7f2      	b.n	552 <_i2c_master_address_response+0x16>

0000056c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     56c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     56e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     570:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     572:	2401      	movs	r4, #1
     574:	2502      	movs	r5, #2
     576:	7e11      	ldrb	r1, [r2, #24]
     578:	4221      	tst	r1, r4
     57a:	d10b      	bne.n	594 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     57c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     57e:	4229      	tst	r1, r5
     580:	d106      	bne.n	590 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     582:	3301      	adds	r3, #1
     584:	b29b      	uxth	r3, r3
     586:	8901      	ldrh	r1, [r0, #8]
     588:	4299      	cmp	r1, r3
     58a:	d8f4      	bhi.n	576 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     58c:	2012      	movs	r0, #18
     58e:	e002      	b.n	596 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     590:	2000      	movs	r0, #0
     592:	e000      	b.n	596 <_i2c_master_wait_for_bus+0x2a>
     594:	2000      	movs	r0, #0
}
     596:	bd30      	pop	{r4, r5, pc}

00000598 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     598:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     59a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     59c:	6862      	ldr	r2, [r4, #4]
     59e:	2380      	movs	r3, #128	; 0x80
     5a0:	02db      	lsls	r3, r3, #11
     5a2:	4313      	orrs	r3, r2
     5a4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     5a6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     5a8:	4b02      	ldr	r3, [pc, #8]	; (5b4 <_i2c_master_send_hs_master_code+0x1c>)
     5aa:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     5ac:	2301      	movs	r3, #1
     5ae:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     5b0:	bd10      	pop	{r4, pc}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	0000056d 	.word	0x0000056d

000005b8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ba:	46de      	mov	lr, fp
     5bc:	4657      	mov	r7, sl
     5be:	464e      	mov	r6, r9
     5c0:	4645      	mov	r5, r8
     5c2:	b5e0      	push	{r5, r6, r7, lr}
     5c4:	b083      	sub	sp, #12
     5c6:	0006      	movs	r6, r0
     5c8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5ca:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     5cc:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     5ce:	682b      	ldr	r3, [r5, #0]
     5d0:	011b      	lsls	r3, r3, #4
     5d2:	0fdb      	lsrs	r3, r3, #31
     5d4:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     5d6:	7a4b      	ldrb	r3, [r1, #9]
     5d8:	2b00      	cmp	r3, #0
     5da:	d12b      	bne.n	634 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5dc:	686b      	ldr	r3, [r5, #4]
     5de:	4a58      	ldr	r2, [pc, #352]	; (740 <_i2c_master_read_packet+0x188>)
     5e0:	4013      	ands	r3, r2
     5e2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     5e4:	464b      	mov	r3, r9
     5e6:	7a1b      	ldrb	r3, [r3, #8]
     5e8:	2b00      	cmp	r3, #0
     5ea:	d127      	bne.n	63c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     5ec:	464b      	mov	r3, r9
     5ee:	881b      	ldrh	r3, [r3, #0]
     5f0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     5f2:	464a      	mov	r2, r9
     5f4:	7a52      	ldrb	r2, [r2, #9]
     5f6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     5f8:	4313      	orrs	r3, r2
     5fa:	2201      	movs	r2, #1
     5fc:	4313      	orrs	r3, r2
     5fe:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     600:	0030      	movs	r0, r6
     602:	4b50      	ldr	r3, [pc, #320]	; (744 <_i2c_master_read_packet+0x18c>)
     604:	4798      	blx	r3
     606:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     608:	4653      	mov	r3, sl
     60a:	2b00      	cmp	r3, #0
     60c:	d003      	beq.n	616 <_i2c_master_read_packet+0x5e>
     60e:	464b      	mov	r3, r9
     610:	885b      	ldrh	r3, [r3, #2]
     612:	2b01      	cmp	r3, #1
     614:	d03b      	beq.n	68e <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     616:	686b      	ldr	r3, [r5, #4]
     618:	4a49      	ldr	r2, [pc, #292]	; (740 <_i2c_master_read_packet+0x188>)
     61a:	4013      	ands	r3, r2
     61c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     61e:	9b01      	ldr	r3, [sp, #4]
     620:	2b00      	cmp	r3, #0
     622:	d03a      	beq.n	69a <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     624:	9801      	ldr	r0, [sp, #4]
     626:	b003      	add	sp, #12
     628:	bc3c      	pop	{r2, r3, r4, r5}
     62a:	4690      	mov	r8, r2
     62c:	4699      	mov	r9, r3
     62e:	46a2      	mov	sl, r4
     630:	46ab      	mov	fp, r5
     632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     634:	7a89      	ldrb	r1, [r1, #10]
     636:	4b44      	ldr	r3, [pc, #272]	; (748 <_i2c_master_read_packet+0x190>)
     638:	4798      	blx	r3
     63a:	e7cf      	b.n	5dc <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     63c:	464b      	mov	r3, r9
     63e:	881b      	ldrh	r3, [r3, #0]
     640:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     642:	464a      	mov	r2, r9
     644:	7a52      	ldrb	r2, [r2, #9]
     646:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     648:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     64a:	2280      	movs	r2, #128	; 0x80
     64c:	0212      	lsls	r2, r2, #8
     64e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     650:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     652:	0030      	movs	r0, r6
     654:	4b3b      	ldr	r3, [pc, #236]	; (744 <_i2c_master_read_packet+0x18c>)
     656:	4798      	blx	r3
     658:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     65a:	686b      	ldr	r3, [r5, #4]
     65c:	4a38      	ldr	r2, [pc, #224]	; (740 <_i2c_master_read_packet+0x188>)
     65e:	4013      	ands	r3, r2
     660:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     662:	2800      	cmp	r0, #0
     664:	d1de      	bne.n	624 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     666:	0030      	movs	r0, r6
     668:	4b38      	ldr	r3, [pc, #224]	; (74c <_i2c_master_read_packet+0x194>)
     66a:	4798      	blx	r3
     66c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     66e:	2800      	cmp	r0, #0
     670:	d1d8      	bne.n	624 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     672:	464b      	mov	r3, r9
     674:	881b      	ldrh	r3, [r3, #0]
     676:	0a1b      	lsrs	r3, r3, #8
     678:	2278      	movs	r2, #120	; 0x78
     67a:	4313      	orrs	r3, r2
     67c:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     67e:	464a      	mov	r2, r9
     680:	7a52      	ldrb	r2, [r2, #9]
     682:	0392      	lsls	r2, r2, #14
     684:	2101      	movs	r1, #1
     686:	430a      	orrs	r2, r1
     688:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     68a:	626b      	str	r3, [r5, #36]	; 0x24
     68c:	e7b8      	b.n	600 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     68e:	686a      	ldr	r2, [r5, #4]
     690:	2380      	movs	r3, #128	; 0x80
     692:	02db      	lsls	r3, r3, #11
     694:	4313      	orrs	r3, r2
     696:	606b      	str	r3, [r5, #4]
     698:	e7c1      	b.n	61e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     69a:	0030      	movs	r0, r6
     69c:	4b2b      	ldr	r3, [pc, #172]	; (74c <_i2c_master_read_packet+0x194>)
     69e:	4798      	blx	r3
     6a0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     6a2:	2800      	cmp	r0, #0
     6a4:	d1be      	bne.n	624 <_i2c_master_read_packet+0x6c>
     6a6:	3c01      	subs	r4, #1
     6a8:	b2a4      	uxth	r4, r4
     6aa:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     6ac:	4b28      	ldr	r3, [pc, #160]	; (750 <_i2c_master_read_packet+0x198>)
     6ae:	469b      	mov	fp, r3
     6b0:	e015      	b.n	6de <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     6b2:	2c01      	cmp	r4, #1
     6b4:	d020      	beq.n	6f8 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     6b6:	0030      	movs	r0, r6
     6b8:	4b26      	ldr	r3, [pc, #152]	; (754 <_i2c_master_read_packet+0x19c>)
     6ba:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     6bc:	4643      	mov	r3, r8
     6be:	1c5f      	adds	r7, r3, #1
     6c0:	b2bf      	uxth	r7, r7
     6c2:	2328      	movs	r3, #40	; 0x28
     6c4:	5ceb      	ldrb	r3, [r5, r3]
     6c6:	464a      	mov	r2, r9
     6c8:	6852      	ldr	r2, [r2, #4]
     6ca:	4641      	mov	r1, r8
     6cc:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     6ce:	0030      	movs	r0, r6
     6d0:	4b1c      	ldr	r3, [pc, #112]	; (744 <_i2c_master_read_packet+0x18c>)
     6d2:	4798      	blx	r3
     6d4:	3c01      	subs	r4, #1
     6d6:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     6d8:	2800      	cmp	r0, #0
     6da:	d115      	bne.n	708 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     6dc:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     6de:	455c      	cmp	r4, fp
     6e0:	d014      	beq.n	70c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6e2:	8b6b      	ldrh	r3, [r5, #26]
     6e4:	069b      	lsls	r3, r3, #26
     6e6:	d527      	bpl.n	738 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     6e8:	7af3      	ldrb	r3, [r6, #11]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d0e3      	beq.n	6b6 <_i2c_master_read_packet+0xfe>
     6ee:	4653      	mov	r3, sl
     6f0:	2b00      	cmp	r3, #0
     6f2:	d1de      	bne.n	6b2 <_i2c_master_read_packet+0xfa>
     6f4:	2c00      	cmp	r4, #0
     6f6:	d1de      	bne.n	6b6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6f8:	686a      	ldr	r2, [r5, #4]
     6fa:	2380      	movs	r3, #128	; 0x80
     6fc:	02db      	lsls	r3, r3, #11
     6fe:	4313      	orrs	r3, r2
     700:	606b      	str	r3, [r5, #4]
     702:	3c01      	subs	r4, #1
     704:	b2a4      	uxth	r4, r4
     706:	e7ea      	b.n	6de <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     708:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     70a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     70c:	7ab3      	ldrb	r3, [r6, #10]
     70e:	2b00      	cmp	r3, #0
     710:	d109      	bne.n	726 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     712:	0030      	movs	r0, r6
     714:	4b0f      	ldr	r3, [pc, #60]	; (754 <_i2c_master_read_packet+0x19c>)
     716:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     718:	2328      	movs	r3, #40	; 0x28
     71a:	5cea      	ldrb	r2, [r5, r3]
     71c:	464b      	mov	r3, r9
     71e:	685b      	ldr	r3, [r3, #4]
     720:	4641      	mov	r1, r8
     722:	545a      	strb	r2, [r3, r1]
     724:	e77e      	b.n	624 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     726:	0030      	movs	r0, r6
     728:	4b0a      	ldr	r3, [pc, #40]	; (754 <_i2c_master_read_packet+0x19c>)
     72a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     72c:	686a      	ldr	r2, [r5, #4]
     72e:	23c0      	movs	r3, #192	; 0xc0
     730:	029b      	lsls	r3, r3, #10
     732:	4313      	orrs	r3, r2
     734:	606b      	str	r3, [r5, #4]
     736:	e7ec      	b.n	712 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     738:	2341      	movs	r3, #65	; 0x41
     73a:	9301      	str	r3, [sp, #4]
     73c:	e772      	b.n	624 <_i2c_master_read_packet+0x6c>
     73e:	46c0      	nop			; (mov r8, r8)
     740:	fffbffff 	.word	0xfffbffff
     744:	0000056d 	.word	0x0000056d
     748:	00000599 	.word	0x00000599
     74c:	0000053d 	.word	0x0000053d
     750:	0000ffff 	.word	0x0000ffff
     754:	00000269 	.word	0x00000269

00000758 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     758:	b5f0      	push	{r4, r5, r6, r7, lr}
     75a:	46de      	mov	lr, fp
     75c:	4657      	mov	r7, sl
     75e:	464e      	mov	r6, r9
     760:	4645      	mov	r5, r8
     762:	b5e0      	push	{r5, r6, r7, lr}
     764:	b083      	sub	sp, #12
     766:	0006      	movs	r6, r0
     768:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     76a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     76c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     76e:	4b32      	ldr	r3, [pc, #200]	; (838 <_i2c_master_write_packet+0xe0>)
     770:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     772:	7a7b      	ldrb	r3, [r7, #9]
     774:	2b00      	cmp	r3, #0
     776:	d11d      	bne.n	7b4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     778:	686b      	ldr	r3, [r5, #4]
     77a:	4a30      	ldr	r2, [pc, #192]	; (83c <_i2c_master_write_packet+0xe4>)
     77c:	4013      	ands	r3, r2
     77e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     780:	7a3b      	ldrb	r3, [r7, #8]
     782:	2b00      	cmp	r3, #0
     784:	d01b      	beq.n	7be <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     786:	883b      	ldrh	r3, [r7, #0]
     788:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     78a:	7a7a      	ldrb	r2, [r7, #9]
     78c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     78e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     790:	2280      	movs	r2, #128	; 0x80
     792:	0212      	lsls	r2, r2, #8
     794:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     796:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     798:	0030      	movs	r0, r6
     79a:	4b29      	ldr	r3, [pc, #164]	; (840 <_i2c_master_write_packet+0xe8>)
     79c:	4798      	blx	r3
     79e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     7a0:	2800      	cmp	r0, #0
     7a2:	d013      	beq.n	7cc <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     7a4:	9801      	ldr	r0, [sp, #4]
     7a6:	b003      	add	sp, #12
     7a8:	bc3c      	pop	{r2, r3, r4, r5}
     7aa:	4690      	mov	r8, r2
     7ac:	4699      	mov	r9, r3
     7ae:	46a2      	mov	sl, r4
     7b0:	46ab      	mov	fp, r5
     7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     7b4:	7ab9      	ldrb	r1, [r7, #10]
     7b6:	0030      	movs	r0, r6
     7b8:	4b22      	ldr	r3, [pc, #136]	; (844 <_i2c_master_write_packet+0xec>)
     7ba:	4798      	blx	r3
     7bc:	e7dc      	b.n	778 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7be:	883b      	ldrh	r3, [r7, #0]
     7c0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     7c2:	7a7a      	ldrb	r2, [r7, #9]
     7c4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7c6:	4313      	orrs	r3, r2
     7c8:	626b      	str	r3, [r5, #36]	; 0x24
     7ca:	e7e5      	b.n	798 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     7cc:	0030      	movs	r0, r6
     7ce:	4b1e      	ldr	r3, [pc, #120]	; (848 <_i2c_master_write_packet+0xf0>)
     7d0:	4798      	blx	r3
     7d2:	1e03      	subs	r3, r0, #0
     7d4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     7d6:	d1e5      	bne.n	7a4 <_i2c_master_write_packet+0x4c>
     7d8:	46a0      	mov	r8, r4
     7da:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7dc:	3320      	adds	r3, #32
     7de:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     7e0:	4b15      	ldr	r3, [pc, #84]	; (838 <_i2c_master_write_packet+0xe0>)
     7e2:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     7e4:	4b16      	ldr	r3, [pc, #88]	; (840 <_i2c_master_write_packet+0xe8>)
     7e6:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     7e8:	4544      	cmp	r4, r8
     7ea:	d015      	beq.n	818 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7ec:	8b6b      	ldrh	r3, [r5, #26]
     7ee:	464a      	mov	r2, r9
     7f0:	4213      	tst	r3, r2
     7f2:	d01d      	beq.n	830 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     7f4:	0030      	movs	r0, r6
     7f6:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     7f8:	687b      	ldr	r3, [r7, #4]
     7fa:	5d1a      	ldrb	r2, [r3, r4]
     7fc:	2328      	movs	r3, #40	; 0x28
     7fe:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     800:	0030      	movs	r0, r6
     802:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     804:	2800      	cmp	r0, #0
     806:	d106      	bne.n	816 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     808:	8b6b      	ldrh	r3, [r5, #26]
     80a:	3401      	adds	r4, #1
     80c:	075b      	lsls	r3, r3, #29
     80e:	d5eb      	bpl.n	7e8 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     810:	231e      	movs	r3, #30
     812:	9301      	str	r3, [sp, #4]
     814:	e000      	b.n	818 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     816:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     818:	7ab3      	ldrb	r3, [r6, #10]
     81a:	2b00      	cmp	r3, #0
     81c:	d0c2      	beq.n	7a4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     81e:	0030      	movs	r0, r6
     820:	4b05      	ldr	r3, [pc, #20]	; (838 <_i2c_master_write_packet+0xe0>)
     822:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     824:	686a      	ldr	r2, [r5, #4]
     826:	23c0      	movs	r3, #192	; 0xc0
     828:	029b      	lsls	r3, r3, #10
     82a:	4313      	orrs	r3, r2
     82c:	606b      	str	r3, [r5, #4]
     82e:	e7b9      	b.n	7a4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     830:	2341      	movs	r3, #65	; 0x41
     832:	9301      	str	r3, [sp, #4]
     834:	e7b6      	b.n	7a4 <_i2c_master_write_packet+0x4c>
     836:	46c0      	nop			; (mov r8, r8)
     838:	00000269 	.word	0x00000269
     83c:	fffbffff 	.word	0xfffbffff
     840:	0000056d 	.word	0x0000056d
     844:	00000599 	.word	0x00000599
     848:	0000053d 	.word	0x0000053d

0000084c <i2c_master_read_packet_wait>:
{
     84c:	b510      	push	{r4, lr}
	module->send_stop = true;
     84e:	2301      	movs	r3, #1
     850:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     852:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     854:	4b01      	ldr	r3, [pc, #4]	; (85c <i2c_master_read_packet_wait+0x10>)
     856:	4798      	blx	r3
}
     858:	bd10      	pop	{r4, pc}
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	000005b9 	.word	0x000005b9

00000860 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     860:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     862:	2301      	movs	r3, #1
     864:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     866:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     868:	4b01      	ldr	r3, [pc, #4]	; (870 <i2c_master_write_packet_wait+0x10>)
     86a:	4798      	blx	r3
}
     86c:	bd10      	pop	{r4, pc}
     86e:	46c0      	nop			; (mov r8, r8)
     870:	00000759 	.word	0x00000759

00000874 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     874:	b510      	push	{r4, lr}
     876:	b082      	sub	sp, #8
     878:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     87a:	4b0e      	ldr	r3, [pc, #56]	; (8b4 <sercom_set_gclk_generator+0x40>)
     87c:	781b      	ldrb	r3, [r3, #0]
     87e:	2b00      	cmp	r3, #0
     880:	d007      	beq.n	892 <sercom_set_gclk_generator+0x1e>
     882:	2900      	cmp	r1, #0
     884:	d105      	bne.n	892 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     886:	4b0b      	ldr	r3, [pc, #44]	; (8b4 <sercom_set_gclk_generator+0x40>)
     888:	785b      	ldrb	r3, [r3, #1]
     88a:	4283      	cmp	r3, r0
     88c:	d010      	beq.n	8b0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     88e:	201d      	movs	r0, #29
     890:	e00c      	b.n	8ac <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     892:	a901      	add	r1, sp, #4
     894:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     896:	2013      	movs	r0, #19
     898:	4b07      	ldr	r3, [pc, #28]	; (8b8 <sercom_set_gclk_generator+0x44>)
     89a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     89c:	2013      	movs	r0, #19
     89e:	4b07      	ldr	r3, [pc, #28]	; (8bc <sercom_set_gclk_generator+0x48>)
     8a0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     8a2:	4b04      	ldr	r3, [pc, #16]	; (8b4 <sercom_set_gclk_generator+0x40>)
     8a4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     8a6:	2201      	movs	r2, #1
     8a8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     8aa:	2000      	movs	r0, #0
}
     8ac:	b002      	add	sp, #8
     8ae:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     8b0:	2000      	movs	r0, #0
     8b2:	e7fb      	b.n	8ac <sercom_set_gclk_generator+0x38>
     8b4:	20000034 	.word	0x20000034
     8b8:	00000f85 	.word	0x00000f85
     8bc:	00000ef9 	.word	0x00000ef9

000008c0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8c0:	4b40      	ldr	r3, [pc, #256]	; (9c4 <_sercom_get_default_pad+0x104>)
     8c2:	4298      	cmp	r0, r3
     8c4:	d031      	beq.n	92a <_sercom_get_default_pad+0x6a>
     8c6:	d90a      	bls.n	8de <_sercom_get_default_pad+0x1e>
     8c8:	4b3f      	ldr	r3, [pc, #252]	; (9c8 <_sercom_get_default_pad+0x108>)
     8ca:	4298      	cmp	r0, r3
     8cc:	d04d      	beq.n	96a <_sercom_get_default_pad+0xaa>
     8ce:	4b3f      	ldr	r3, [pc, #252]	; (9cc <_sercom_get_default_pad+0x10c>)
     8d0:	4298      	cmp	r0, r3
     8d2:	d05a      	beq.n	98a <_sercom_get_default_pad+0xca>
     8d4:	4b3e      	ldr	r3, [pc, #248]	; (9d0 <_sercom_get_default_pad+0x110>)
     8d6:	4298      	cmp	r0, r3
     8d8:	d037      	beq.n	94a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8da:	2000      	movs	r0, #0
}
     8dc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8de:	4b3d      	ldr	r3, [pc, #244]	; (9d4 <_sercom_get_default_pad+0x114>)
     8e0:	4298      	cmp	r0, r3
     8e2:	d00c      	beq.n	8fe <_sercom_get_default_pad+0x3e>
     8e4:	4b3c      	ldr	r3, [pc, #240]	; (9d8 <_sercom_get_default_pad+0x118>)
     8e6:	4298      	cmp	r0, r3
     8e8:	d1f7      	bne.n	8da <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8ea:	2901      	cmp	r1, #1
     8ec:	d017      	beq.n	91e <_sercom_get_default_pad+0x5e>
     8ee:	2900      	cmp	r1, #0
     8f0:	d05d      	beq.n	9ae <_sercom_get_default_pad+0xee>
     8f2:	2902      	cmp	r1, #2
     8f4:	d015      	beq.n	922 <_sercom_get_default_pad+0x62>
     8f6:	2903      	cmp	r1, #3
     8f8:	d015      	beq.n	926 <_sercom_get_default_pad+0x66>
	return 0;
     8fa:	2000      	movs	r0, #0
     8fc:	e7ee      	b.n	8dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fe:	2901      	cmp	r1, #1
     900:	d007      	beq.n	912 <_sercom_get_default_pad+0x52>
     902:	2900      	cmp	r1, #0
     904:	d051      	beq.n	9aa <_sercom_get_default_pad+0xea>
     906:	2902      	cmp	r1, #2
     908:	d005      	beq.n	916 <_sercom_get_default_pad+0x56>
     90a:	2903      	cmp	r1, #3
     90c:	d005      	beq.n	91a <_sercom_get_default_pad+0x5a>
	return 0;
     90e:	2000      	movs	r0, #0
     910:	e7e4      	b.n	8dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     912:	4832      	ldr	r0, [pc, #200]	; (9dc <_sercom_get_default_pad+0x11c>)
     914:	e7e2      	b.n	8dc <_sercom_get_default_pad+0x1c>
     916:	4832      	ldr	r0, [pc, #200]	; (9e0 <_sercom_get_default_pad+0x120>)
     918:	e7e0      	b.n	8dc <_sercom_get_default_pad+0x1c>
     91a:	4832      	ldr	r0, [pc, #200]	; (9e4 <_sercom_get_default_pad+0x124>)
     91c:	e7de      	b.n	8dc <_sercom_get_default_pad+0x1c>
     91e:	4832      	ldr	r0, [pc, #200]	; (9e8 <_sercom_get_default_pad+0x128>)
     920:	e7dc      	b.n	8dc <_sercom_get_default_pad+0x1c>
     922:	4832      	ldr	r0, [pc, #200]	; (9ec <_sercom_get_default_pad+0x12c>)
     924:	e7da      	b.n	8dc <_sercom_get_default_pad+0x1c>
     926:	4832      	ldr	r0, [pc, #200]	; (9f0 <_sercom_get_default_pad+0x130>)
     928:	e7d8      	b.n	8dc <_sercom_get_default_pad+0x1c>
     92a:	2901      	cmp	r1, #1
     92c:	d007      	beq.n	93e <_sercom_get_default_pad+0x7e>
     92e:	2900      	cmp	r1, #0
     930:	d03f      	beq.n	9b2 <_sercom_get_default_pad+0xf2>
     932:	2902      	cmp	r1, #2
     934:	d005      	beq.n	942 <_sercom_get_default_pad+0x82>
     936:	2903      	cmp	r1, #3
     938:	d005      	beq.n	946 <_sercom_get_default_pad+0x86>
	return 0;
     93a:	2000      	movs	r0, #0
     93c:	e7ce      	b.n	8dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     93e:	482d      	ldr	r0, [pc, #180]	; (9f4 <_sercom_get_default_pad+0x134>)
     940:	e7cc      	b.n	8dc <_sercom_get_default_pad+0x1c>
     942:	482d      	ldr	r0, [pc, #180]	; (9f8 <_sercom_get_default_pad+0x138>)
     944:	e7ca      	b.n	8dc <_sercom_get_default_pad+0x1c>
     946:	482d      	ldr	r0, [pc, #180]	; (9fc <_sercom_get_default_pad+0x13c>)
     948:	e7c8      	b.n	8dc <_sercom_get_default_pad+0x1c>
     94a:	2901      	cmp	r1, #1
     94c:	d007      	beq.n	95e <_sercom_get_default_pad+0x9e>
     94e:	2900      	cmp	r1, #0
     950:	d031      	beq.n	9b6 <_sercom_get_default_pad+0xf6>
     952:	2902      	cmp	r1, #2
     954:	d005      	beq.n	962 <_sercom_get_default_pad+0xa2>
     956:	2903      	cmp	r1, #3
     958:	d005      	beq.n	966 <_sercom_get_default_pad+0xa6>
	return 0;
     95a:	2000      	movs	r0, #0
     95c:	e7be      	b.n	8dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     95e:	4828      	ldr	r0, [pc, #160]	; (a00 <_sercom_get_default_pad+0x140>)
     960:	e7bc      	b.n	8dc <_sercom_get_default_pad+0x1c>
     962:	4828      	ldr	r0, [pc, #160]	; (a04 <_sercom_get_default_pad+0x144>)
     964:	e7ba      	b.n	8dc <_sercom_get_default_pad+0x1c>
     966:	4828      	ldr	r0, [pc, #160]	; (a08 <_sercom_get_default_pad+0x148>)
     968:	e7b8      	b.n	8dc <_sercom_get_default_pad+0x1c>
     96a:	2901      	cmp	r1, #1
     96c:	d007      	beq.n	97e <_sercom_get_default_pad+0xbe>
     96e:	2900      	cmp	r1, #0
     970:	d023      	beq.n	9ba <_sercom_get_default_pad+0xfa>
     972:	2902      	cmp	r1, #2
     974:	d005      	beq.n	982 <_sercom_get_default_pad+0xc2>
     976:	2903      	cmp	r1, #3
     978:	d005      	beq.n	986 <_sercom_get_default_pad+0xc6>
	return 0;
     97a:	2000      	movs	r0, #0
     97c:	e7ae      	b.n	8dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     97e:	4823      	ldr	r0, [pc, #140]	; (a0c <_sercom_get_default_pad+0x14c>)
     980:	e7ac      	b.n	8dc <_sercom_get_default_pad+0x1c>
     982:	4823      	ldr	r0, [pc, #140]	; (a10 <_sercom_get_default_pad+0x150>)
     984:	e7aa      	b.n	8dc <_sercom_get_default_pad+0x1c>
     986:	4823      	ldr	r0, [pc, #140]	; (a14 <_sercom_get_default_pad+0x154>)
     988:	e7a8      	b.n	8dc <_sercom_get_default_pad+0x1c>
     98a:	2901      	cmp	r1, #1
     98c:	d007      	beq.n	99e <_sercom_get_default_pad+0xde>
     98e:	2900      	cmp	r1, #0
     990:	d015      	beq.n	9be <_sercom_get_default_pad+0xfe>
     992:	2902      	cmp	r1, #2
     994:	d005      	beq.n	9a2 <_sercom_get_default_pad+0xe2>
     996:	2903      	cmp	r1, #3
     998:	d005      	beq.n	9a6 <_sercom_get_default_pad+0xe6>
	return 0;
     99a:	2000      	movs	r0, #0
     99c:	e79e      	b.n	8dc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     99e:	481e      	ldr	r0, [pc, #120]	; (a18 <_sercom_get_default_pad+0x158>)
     9a0:	e79c      	b.n	8dc <_sercom_get_default_pad+0x1c>
     9a2:	481e      	ldr	r0, [pc, #120]	; (a1c <_sercom_get_default_pad+0x15c>)
     9a4:	e79a      	b.n	8dc <_sercom_get_default_pad+0x1c>
     9a6:	481e      	ldr	r0, [pc, #120]	; (a20 <_sercom_get_default_pad+0x160>)
     9a8:	e798      	b.n	8dc <_sercom_get_default_pad+0x1c>
     9aa:	481e      	ldr	r0, [pc, #120]	; (a24 <_sercom_get_default_pad+0x164>)
     9ac:	e796      	b.n	8dc <_sercom_get_default_pad+0x1c>
     9ae:	2003      	movs	r0, #3
     9b0:	e794      	b.n	8dc <_sercom_get_default_pad+0x1c>
     9b2:	481d      	ldr	r0, [pc, #116]	; (a28 <_sercom_get_default_pad+0x168>)
     9b4:	e792      	b.n	8dc <_sercom_get_default_pad+0x1c>
     9b6:	481d      	ldr	r0, [pc, #116]	; (a2c <_sercom_get_default_pad+0x16c>)
     9b8:	e790      	b.n	8dc <_sercom_get_default_pad+0x1c>
     9ba:	481d      	ldr	r0, [pc, #116]	; (a30 <_sercom_get_default_pad+0x170>)
     9bc:	e78e      	b.n	8dc <_sercom_get_default_pad+0x1c>
     9be:	481d      	ldr	r0, [pc, #116]	; (a34 <_sercom_get_default_pad+0x174>)
     9c0:	e78c      	b.n	8dc <_sercom_get_default_pad+0x1c>
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	42001000 	.word	0x42001000
     9c8:	42001800 	.word	0x42001800
     9cc:	42001c00 	.word	0x42001c00
     9d0:	42001400 	.word	0x42001400
     9d4:	42000800 	.word	0x42000800
     9d8:	42000c00 	.word	0x42000c00
     9dc:	00050003 	.word	0x00050003
     9e0:	00060003 	.word	0x00060003
     9e4:	00070003 	.word	0x00070003
     9e8:	00010003 	.word	0x00010003
     9ec:	001e0003 	.word	0x001e0003
     9f0:	001f0003 	.word	0x001f0003
     9f4:	000d0002 	.word	0x000d0002
     9f8:	000e0002 	.word	0x000e0002
     9fc:	000f0002 	.word	0x000f0002
     a00:	00110003 	.word	0x00110003
     a04:	00120003 	.word	0x00120003
     a08:	00130003 	.word	0x00130003
     a0c:	003f0005 	.word	0x003f0005
     a10:	003e0005 	.word	0x003e0005
     a14:	00520005 	.word	0x00520005
     a18:	00170003 	.word	0x00170003
     a1c:	00180003 	.word	0x00180003
     a20:	00190003 	.word	0x00190003
     a24:	00040003 	.word	0x00040003
     a28:	000c0002 	.word	0x000c0002
     a2c:	00100003 	.word	0x00100003
     a30:	00530005 	.word	0x00530005
     a34:	00160003 	.word	0x00160003

00000a38 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a38:	b530      	push	{r4, r5, lr}
     a3a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a3c:	4b0b      	ldr	r3, [pc, #44]	; (a6c <_sercom_get_sercom_inst_index+0x34>)
     a3e:	466a      	mov	r2, sp
     a40:	cb32      	ldmia	r3!, {r1, r4, r5}
     a42:	c232      	stmia	r2!, {r1, r4, r5}
     a44:	cb32      	ldmia	r3!, {r1, r4, r5}
     a46:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a48:	9b00      	ldr	r3, [sp, #0]
     a4a:	4283      	cmp	r3, r0
     a4c:	d00b      	beq.n	a66 <_sercom_get_sercom_inst_index+0x2e>
     a4e:	2301      	movs	r3, #1
     a50:	009a      	lsls	r2, r3, #2
     a52:	4669      	mov	r1, sp
     a54:	5852      	ldr	r2, [r2, r1]
     a56:	4282      	cmp	r2, r0
     a58:	d006      	beq.n	a68 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a5a:	3301      	adds	r3, #1
     a5c:	2b06      	cmp	r3, #6
     a5e:	d1f7      	bne.n	a50 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a60:	2000      	movs	r0, #0
}
     a62:	b007      	add	sp, #28
     a64:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a66:	2300      	movs	r3, #0
			return i;
     a68:	b2d8      	uxtb	r0, r3
     a6a:	e7fa      	b.n	a62 <_sercom_get_sercom_inst_index+0x2a>
     a6c:	00002c70 	.word	0x00002c70

00000a70 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     a70:	4b0c      	ldr	r3, [pc, #48]	; (aa4 <cpu_irq_enter_critical+0x34>)
     a72:	681b      	ldr	r3, [r3, #0]
     a74:	2b00      	cmp	r3, #0
     a76:	d106      	bne.n	a86 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a78:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     a7c:	2b00      	cmp	r3, #0
     a7e:	d007      	beq.n	a90 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     a80:	2200      	movs	r2, #0
     a82:	4b09      	ldr	r3, [pc, #36]	; (aa8 <cpu_irq_enter_critical+0x38>)
     a84:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     a86:	4a07      	ldr	r2, [pc, #28]	; (aa4 <cpu_irq_enter_critical+0x34>)
     a88:	6813      	ldr	r3, [r2, #0]
     a8a:	3301      	adds	r3, #1
     a8c:	6013      	str	r3, [r2, #0]
}
     a8e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     a90:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     a92:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     a96:	2200      	movs	r2, #0
     a98:	4b04      	ldr	r3, [pc, #16]	; (aac <cpu_irq_enter_critical+0x3c>)
     a9a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     a9c:	3201      	adds	r2, #1
     a9e:	4b02      	ldr	r3, [pc, #8]	; (aa8 <cpu_irq_enter_critical+0x38>)
     aa0:	701a      	strb	r2, [r3, #0]
     aa2:	e7f0      	b.n	a86 <cpu_irq_enter_critical+0x16>
     aa4:	20000038 	.word	0x20000038
     aa8:	2000003c 	.word	0x2000003c
     aac:	20000008 	.word	0x20000008

00000ab0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ab0:	4b08      	ldr	r3, [pc, #32]	; (ad4 <cpu_irq_leave_critical+0x24>)
     ab2:	681a      	ldr	r2, [r3, #0]
     ab4:	3a01      	subs	r2, #1
     ab6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	2b00      	cmp	r3, #0
     abc:	d109      	bne.n	ad2 <cpu_irq_leave_critical+0x22>
     abe:	4b06      	ldr	r3, [pc, #24]	; (ad8 <cpu_irq_leave_critical+0x28>)
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d005      	beq.n	ad2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     ac6:	2201      	movs	r2, #1
     ac8:	4b04      	ldr	r3, [pc, #16]	; (adc <cpu_irq_leave_critical+0x2c>)
     aca:	701a      	strb	r2, [r3, #0]
     acc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ad0:	b662      	cpsie	i
	}
}
     ad2:	4770      	bx	lr
     ad4:	20000038 	.word	0x20000038
     ad8:	2000003c 	.word	0x2000003c
     adc:	20000008 	.word	0x20000008

00000ae0 <system_board_init>:




void system_board_init(void)
{
     ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ae2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     ae4:	ac01      	add	r4, sp, #4
     ae6:	2501      	movs	r5, #1
     ae8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     aea:	2700      	movs	r7, #0
     aec:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     aee:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     af0:	0021      	movs	r1, r4
     af2:	2013      	movs	r0, #19
     af4:	4e06      	ldr	r6, [pc, #24]	; (b10 <system_board_init+0x30>)
     af6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     af8:	2280      	movs	r2, #128	; 0x80
     afa:	0312      	lsls	r2, r2, #12
     afc:	4b05      	ldr	r3, [pc, #20]	; (b14 <system_board_init+0x34>)
     afe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     b00:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     b02:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     b04:	0021      	movs	r1, r4
     b06:	201c      	movs	r0, #28
     b08:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     b0a:	b003      	add	sp, #12
     b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	00000b19 	.word	0x00000b19
     b14:	41004400 	.word	0x41004400

00000b18 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b18:	b500      	push	{lr}
     b1a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b1c:	ab01      	add	r3, sp, #4
     b1e:	2280      	movs	r2, #128	; 0x80
     b20:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     b22:	780a      	ldrb	r2, [r1, #0]
     b24:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     b26:	784a      	ldrb	r2, [r1, #1]
     b28:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     b2a:	788a      	ldrb	r2, [r1, #2]
     b2c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b2e:	0019      	movs	r1, r3
     b30:	4b01      	ldr	r3, [pc, #4]	; (b38 <port_pin_set_config+0x20>)
     b32:	4798      	blx	r3
}
     b34:	b003      	add	sp, #12
     b36:	bd00      	pop	{pc}
     b38:	0000107d 	.word	0x0000107d

00000b3c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b3c:	b510      	push	{r4, lr}
	switch (clock_source) {
     b3e:	2808      	cmp	r0, #8
     b40:	d803      	bhi.n	b4a <system_clock_source_get_hz+0xe>
     b42:	0080      	lsls	r0, r0, #2
     b44:	4b1c      	ldr	r3, [pc, #112]	; (bb8 <system_clock_source_get_hz+0x7c>)
     b46:	581b      	ldr	r3, [r3, r0]
     b48:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     b4a:	2000      	movs	r0, #0
     b4c:	e032      	b.n	bb4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     b4e:	4b1b      	ldr	r3, [pc, #108]	; (bbc <system_clock_source_get_hz+0x80>)
     b50:	6918      	ldr	r0, [r3, #16]
     b52:	e02f      	b.n	bb4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b54:	4b1a      	ldr	r3, [pc, #104]	; (bc0 <system_clock_source_get_hz+0x84>)
     b56:	6a1b      	ldr	r3, [r3, #32]
     b58:	059b      	lsls	r3, r3, #22
     b5a:	0f9b      	lsrs	r3, r3, #30
     b5c:	4819      	ldr	r0, [pc, #100]	; (bc4 <system_clock_source_get_hz+0x88>)
     b5e:	40d8      	lsrs	r0, r3
     b60:	e028      	b.n	bb4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     b62:	4b16      	ldr	r3, [pc, #88]	; (bbc <system_clock_source_get_hz+0x80>)
     b64:	6958      	ldr	r0, [r3, #20]
     b66:	e025      	b.n	bb4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b68:	4b14      	ldr	r3, [pc, #80]	; (bbc <system_clock_source_get_hz+0x80>)
     b6a:	681b      	ldr	r3, [r3, #0]
			return 0;
     b6c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b6e:	079b      	lsls	r3, r3, #30
     b70:	d520      	bpl.n	bb4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b72:	4913      	ldr	r1, [pc, #76]	; (bc0 <system_clock_source_get_hz+0x84>)
     b74:	2210      	movs	r2, #16
     b76:	68cb      	ldr	r3, [r1, #12]
     b78:	421a      	tst	r2, r3
     b7a:	d0fc      	beq.n	b76 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     b7c:	4b0f      	ldr	r3, [pc, #60]	; (bbc <system_clock_source_get_hz+0x80>)
     b7e:	681a      	ldr	r2, [r3, #0]
     b80:	2324      	movs	r3, #36	; 0x24
     b82:	4013      	ands	r3, r2
     b84:	2b04      	cmp	r3, #4
     b86:	d001      	beq.n	b8c <system_clock_source_get_hz+0x50>
			return 48000000UL;
     b88:	480f      	ldr	r0, [pc, #60]	; (bc8 <system_clock_source_get_hz+0x8c>)
     b8a:	e013      	b.n	bb4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b8c:	2000      	movs	r0, #0
     b8e:	4b0f      	ldr	r3, [pc, #60]	; (bcc <system_clock_source_get_hz+0x90>)
     b90:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     b92:	4b0a      	ldr	r3, [pc, #40]	; (bbc <system_clock_source_get_hz+0x80>)
     b94:	689b      	ldr	r3, [r3, #8]
     b96:	041b      	lsls	r3, r3, #16
     b98:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b9a:	4358      	muls	r0, r3
     b9c:	e00a      	b.n	bb4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     b9e:	2350      	movs	r3, #80	; 0x50
     ba0:	4a07      	ldr	r2, [pc, #28]	; (bc0 <system_clock_source_get_hz+0x84>)
     ba2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     ba4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ba6:	075b      	lsls	r3, r3, #29
     ba8:	d504      	bpl.n	bb4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     baa:	4b04      	ldr	r3, [pc, #16]	; (bbc <system_clock_source_get_hz+0x80>)
     bac:	68d8      	ldr	r0, [r3, #12]
     bae:	e001      	b.n	bb4 <system_clock_source_get_hz+0x78>
		return 32768UL;
     bb0:	2080      	movs	r0, #128	; 0x80
     bb2:	0200      	lsls	r0, r0, #8
	}
}
     bb4:	bd10      	pop	{r4, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	00002c88 	.word	0x00002c88
     bbc:	20000040 	.word	0x20000040
     bc0:	40000800 	.word	0x40000800
     bc4:	007a1200 	.word	0x007a1200
     bc8:	02dc6c00 	.word	0x02dc6c00
     bcc:	00000fa1 	.word	0x00000fa1

00000bd0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     bd0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     bd2:	490c      	ldr	r1, [pc, #48]	; (c04 <system_clock_source_osc8m_set_config+0x34>)
     bd4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     bd6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     bd8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     bda:	7840      	ldrb	r0, [r0, #1]
     bdc:	2201      	movs	r2, #1
     bde:	4010      	ands	r0, r2
     be0:	0180      	lsls	r0, r0, #6
     be2:	2640      	movs	r6, #64	; 0x40
     be4:	43b3      	bics	r3, r6
     be6:	4303      	orrs	r3, r0
     be8:	402a      	ands	r2, r5
     bea:	01d2      	lsls	r2, r2, #7
     bec:	2080      	movs	r0, #128	; 0x80
     bee:	4383      	bics	r3, r0
     bf0:	4313      	orrs	r3, r2
     bf2:	2203      	movs	r2, #3
     bf4:	4022      	ands	r2, r4
     bf6:	0212      	lsls	r2, r2, #8
     bf8:	4803      	ldr	r0, [pc, #12]	; (c08 <system_clock_source_osc8m_set_config+0x38>)
     bfa:	4003      	ands	r3, r0
     bfc:	4313      	orrs	r3, r2
     bfe:	620b      	str	r3, [r1, #32]
}
     c00:	bd70      	pop	{r4, r5, r6, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	40000800 	.word	0x40000800
     c08:	fffffcff 	.word	0xfffffcff

00000c0c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c0c:	2808      	cmp	r0, #8
     c0e:	d803      	bhi.n	c18 <system_clock_source_enable+0xc>
     c10:	0080      	lsls	r0, r0, #2
     c12:	4b25      	ldr	r3, [pc, #148]	; (ca8 <system_clock_source_enable+0x9c>)
     c14:	581b      	ldr	r3, [r3, r0]
     c16:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c18:	2017      	movs	r0, #23
     c1a:	e044      	b.n	ca6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c1c:	4a23      	ldr	r2, [pc, #140]	; (cac <system_clock_source_enable+0xa0>)
     c1e:	6a13      	ldr	r3, [r2, #32]
     c20:	2102      	movs	r1, #2
     c22:	430b      	orrs	r3, r1
     c24:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c26:	2000      	movs	r0, #0
     c28:	e03d      	b.n	ca6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c2a:	4a20      	ldr	r2, [pc, #128]	; (cac <system_clock_source_enable+0xa0>)
     c2c:	6993      	ldr	r3, [r2, #24]
     c2e:	2102      	movs	r1, #2
     c30:	430b      	orrs	r3, r1
     c32:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     c34:	2000      	movs	r0, #0
		break;
     c36:	e036      	b.n	ca6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c38:	4a1c      	ldr	r2, [pc, #112]	; (cac <system_clock_source_enable+0xa0>)
     c3a:	8a13      	ldrh	r3, [r2, #16]
     c3c:	2102      	movs	r1, #2
     c3e:	430b      	orrs	r3, r1
     c40:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     c42:	2000      	movs	r0, #0
		break;
     c44:	e02f      	b.n	ca6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c46:	4a19      	ldr	r2, [pc, #100]	; (cac <system_clock_source_enable+0xa0>)
     c48:	8a93      	ldrh	r3, [r2, #20]
     c4a:	2102      	movs	r1, #2
     c4c:	430b      	orrs	r3, r1
     c4e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     c50:	2000      	movs	r0, #0
		break;
     c52:	e028      	b.n	ca6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c54:	4916      	ldr	r1, [pc, #88]	; (cb0 <system_clock_source_enable+0xa4>)
     c56:	680b      	ldr	r3, [r1, #0]
     c58:	2202      	movs	r2, #2
     c5a:	4313      	orrs	r3, r2
     c5c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     c5e:	4b13      	ldr	r3, [pc, #76]	; (cac <system_clock_source_enable+0xa0>)
     c60:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c62:	0019      	movs	r1, r3
     c64:	320e      	adds	r2, #14
     c66:	68cb      	ldr	r3, [r1, #12]
     c68:	421a      	tst	r2, r3
     c6a:	d0fc      	beq.n	c66 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c6c:	4a10      	ldr	r2, [pc, #64]	; (cb0 <system_clock_source_enable+0xa4>)
     c6e:	6891      	ldr	r1, [r2, #8]
     c70:	4b0e      	ldr	r3, [pc, #56]	; (cac <system_clock_source_enable+0xa0>)
     c72:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c74:	6852      	ldr	r2, [r2, #4]
     c76:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     c78:	2200      	movs	r2, #0
     c7a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c7c:	0019      	movs	r1, r3
     c7e:	3210      	adds	r2, #16
     c80:	68cb      	ldr	r3, [r1, #12]
     c82:	421a      	tst	r2, r3
     c84:	d0fc      	beq.n	c80 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     c86:	4b0a      	ldr	r3, [pc, #40]	; (cb0 <system_clock_source_enable+0xa4>)
     c88:	681b      	ldr	r3, [r3, #0]
     c8a:	b29b      	uxth	r3, r3
     c8c:	4a07      	ldr	r2, [pc, #28]	; (cac <system_clock_source_enable+0xa0>)
     c8e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     c90:	2000      	movs	r0, #0
     c92:	e008      	b.n	ca6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     c94:	4905      	ldr	r1, [pc, #20]	; (cac <system_clock_source_enable+0xa0>)
     c96:	2244      	movs	r2, #68	; 0x44
     c98:	5c8b      	ldrb	r3, [r1, r2]
     c9a:	2002      	movs	r0, #2
     c9c:	4303      	orrs	r3, r0
     c9e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     ca0:	2000      	movs	r0, #0
		break;
     ca2:	e000      	b.n	ca6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     ca4:	2000      	movs	r0, #0
}
     ca6:	4770      	bx	lr
     ca8:	00002cac 	.word	0x00002cac
     cac:	40000800 	.word	0x40000800
     cb0:	20000040 	.word	0x20000040

00000cb4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     cb4:	b530      	push	{r4, r5, lr}
     cb6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cb8:	22c2      	movs	r2, #194	; 0xc2
     cba:	00d2      	lsls	r2, r2, #3
     cbc:	4b1a      	ldr	r3, [pc, #104]	; (d28 <system_clock_init+0x74>)
     cbe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     cc0:	4a1a      	ldr	r2, [pc, #104]	; (d2c <system_clock_init+0x78>)
     cc2:	6853      	ldr	r3, [r2, #4]
     cc4:	211e      	movs	r1, #30
     cc6:	438b      	bics	r3, r1
     cc8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     cca:	2301      	movs	r3, #1
     ccc:	466a      	mov	r2, sp
     cce:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cd0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     cd2:	4d17      	ldr	r5, [pc, #92]	; (d30 <system_clock_init+0x7c>)
     cd4:	b2e0      	uxtb	r0, r4
     cd6:	4669      	mov	r1, sp
     cd8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cda:	3401      	adds	r4, #1
     cdc:	2c25      	cmp	r4, #37	; 0x25
     cde:	d1f9      	bne.n	cd4 <system_clock_init+0x20>
	config->run_in_standby  = false;
     ce0:	a803      	add	r0, sp, #12
     ce2:	2400      	movs	r4, #0
     ce4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     ce6:	2501      	movs	r5, #1
     ce8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     cea:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     cec:	4b11      	ldr	r3, [pc, #68]	; (d34 <system_clock_init+0x80>)
     cee:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     cf0:	2006      	movs	r0, #6
     cf2:	4b11      	ldr	r3, [pc, #68]	; (d38 <system_clock_init+0x84>)
     cf4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     cf6:	4b11      	ldr	r3, [pc, #68]	; (d3c <system_clock_init+0x88>)
     cf8:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     cfa:	4b11      	ldr	r3, [pc, #68]	; (d40 <system_clock_init+0x8c>)
     cfc:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     cfe:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     d00:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     d02:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d04:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     d06:	466b      	mov	r3, sp
     d08:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d0a:	2306      	movs	r3, #6
     d0c:	466a      	mov	r2, sp
     d0e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     d10:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     d12:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d14:	4669      	mov	r1, sp
     d16:	2000      	movs	r0, #0
     d18:	4b0a      	ldr	r3, [pc, #40]	; (d44 <system_clock_init+0x90>)
     d1a:	4798      	blx	r3
     d1c:	2000      	movs	r0, #0
     d1e:	4b0a      	ldr	r3, [pc, #40]	; (d48 <system_clock_init+0x94>)
     d20:	4798      	blx	r3
#endif
}
     d22:	b005      	add	sp, #20
     d24:	bd30      	pop	{r4, r5, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	40000800 	.word	0x40000800
     d2c:	41004000 	.word	0x41004000
     d30:	00000f85 	.word	0x00000f85
     d34:	00000bd1 	.word	0x00000bd1
     d38:	00000c0d 	.word	0x00000c0d
     d3c:	00000d4d 	.word	0x00000d4d
     d40:	40000400 	.word	0x40000400
     d44:	00000d71 	.word	0x00000d71
     d48:	00000e29 	.word	0x00000e29

00000d4c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     d4c:	4a06      	ldr	r2, [pc, #24]	; (d68 <system_gclk_init+0x1c>)
     d4e:	6993      	ldr	r3, [r2, #24]
     d50:	2108      	movs	r1, #8
     d52:	430b      	orrs	r3, r1
     d54:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d56:	2201      	movs	r2, #1
     d58:	4b04      	ldr	r3, [pc, #16]	; (d6c <system_gclk_init+0x20>)
     d5a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d5c:	0019      	movs	r1, r3
     d5e:	780b      	ldrb	r3, [r1, #0]
     d60:	4213      	tst	r3, r2
     d62:	d1fc      	bne.n	d5e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d64:	4770      	bx	lr
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	40000400 	.word	0x40000400
     d6c:	40000c00 	.word	0x40000c00

00000d70 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d70:	b570      	push	{r4, r5, r6, lr}
     d72:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     d74:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d76:	780d      	ldrb	r5, [r1, #0]
     d78:	022d      	lsls	r5, r5, #8
     d7a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     d7c:	784b      	ldrb	r3, [r1, #1]
     d7e:	2b00      	cmp	r3, #0
     d80:	d002      	beq.n	d88 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     d82:	2380      	movs	r3, #128	; 0x80
     d84:	02db      	lsls	r3, r3, #11
     d86:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     d88:	7a4b      	ldrb	r3, [r1, #9]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d002      	beq.n	d94 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     d8e:	2380      	movs	r3, #128	; 0x80
     d90:	031b      	lsls	r3, r3, #12
     d92:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     d94:	6848      	ldr	r0, [r1, #4]
     d96:	2801      	cmp	r0, #1
     d98:	d910      	bls.n	dbc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     d9a:	1e43      	subs	r3, r0, #1
     d9c:	4218      	tst	r0, r3
     d9e:	d134      	bne.n	e0a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     da0:	2802      	cmp	r0, #2
     da2:	d930      	bls.n	e06 <system_gclk_gen_set_config+0x96>
     da4:	2302      	movs	r3, #2
     da6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     da8:	3201      	adds	r2, #1
						mask <<= 1) {
     daa:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     dac:	4298      	cmp	r0, r3
     dae:	d8fb      	bhi.n	da8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     db0:	0212      	lsls	r2, r2, #8
     db2:	4332      	orrs	r2, r6
     db4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     db6:	2380      	movs	r3, #128	; 0x80
     db8:	035b      	lsls	r3, r3, #13
     dba:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     dbc:	7a0b      	ldrb	r3, [r1, #8]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d002      	beq.n	dc8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     dc2:	2380      	movs	r3, #128	; 0x80
     dc4:	039b      	lsls	r3, r3, #14
     dc6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dc8:	4a13      	ldr	r2, [pc, #76]	; (e18 <system_gclk_gen_set_config+0xa8>)
     dca:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     dcc:	b25b      	sxtb	r3, r3
     dce:	2b00      	cmp	r3, #0
     dd0:	dbfb      	blt.n	dca <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     dd2:	4b12      	ldr	r3, [pc, #72]	; (e1c <system_gclk_gen_set_config+0xac>)
     dd4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     dd6:	4b12      	ldr	r3, [pc, #72]	; (e20 <system_gclk_gen_set_config+0xb0>)
     dd8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dda:	4a0f      	ldr	r2, [pc, #60]	; (e18 <system_gclk_gen_set_config+0xa8>)
     ddc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     dde:	b25b      	sxtb	r3, r3
     de0:	2b00      	cmp	r3, #0
     de2:	dbfb      	blt.n	ddc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     de4:	4b0c      	ldr	r3, [pc, #48]	; (e18 <system_gclk_gen_set_config+0xa8>)
     de6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     de8:	001a      	movs	r2, r3
     dea:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     dec:	b25b      	sxtb	r3, r3
     dee:	2b00      	cmp	r3, #0
     df0:	dbfb      	blt.n	dea <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     df2:	4a09      	ldr	r2, [pc, #36]	; (e18 <system_gclk_gen_set_config+0xa8>)
     df4:	6853      	ldr	r3, [r2, #4]
     df6:	2180      	movs	r1, #128	; 0x80
     df8:	0249      	lsls	r1, r1, #9
     dfa:	400b      	ands	r3, r1
     dfc:	431d      	orrs	r5, r3
     dfe:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e00:	4b08      	ldr	r3, [pc, #32]	; (e24 <system_gclk_gen_set_config+0xb4>)
     e02:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e04:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     e06:	2200      	movs	r2, #0
     e08:	e7d2      	b.n	db0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e0a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     e0c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e0e:	2380      	movs	r3, #128	; 0x80
     e10:	029b      	lsls	r3, r3, #10
     e12:	431d      	orrs	r5, r3
     e14:	e7d2      	b.n	dbc <system_gclk_gen_set_config+0x4c>
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	40000c00 	.word	0x40000c00
     e1c:	00000a71 	.word	0x00000a71
     e20:	40000c08 	.word	0x40000c08
     e24:	00000ab1 	.word	0x00000ab1

00000e28 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e28:	b510      	push	{r4, lr}
     e2a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e2c:	4a0b      	ldr	r2, [pc, #44]	; (e5c <system_gclk_gen_enable+0x34>)
     e2e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e30:	b25b      	sxtb	r3, r3
     e32:	2b00      	cmp	r3, #0
     e34:	dbfb      	blt.n	e2e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     e36:	4b0a      	ldr	r3, [pc, #40]	; (e60 <system_gclk_gen_enable+0x38>)
     e38:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e3a:	4b0a      	ldr	r3, [pc, #40]	; (e64 <system_gclk_gen_enable+0x3c>)
     e3c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e3e:	4a07      	ldr	r2, [pc, #28]	; (e5c <system_gclk_gen_enable+0x34>)
     e40:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e42:	b25b      	sxtb	r3, r3
     e44:	2b00      	cmp	r3, #0
     e46:	dbfb      	blt.n	e40 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e48:	4a04      	ldr	r2, [pc, #16]	; (e5c <system_gclk_gen_enable+0x34>)
     e4a:	6851      	ldr	r1, [r2, #4]
     e4c:	2380      	movs	r3, #128	; 0x80
     e4e:	025b      	lsls	r3, r3, #9
     e50:	430b      	orrs	r3, r1
     e52:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     e54:	4b04      	ldr	r3, [pc, #16]	; (e68 <system_gclk_gen_enable+0x40>)
     e56:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e58:	bd10      	pop	{r4, pc}
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	40000c00 	.word	0x40000c00
     e60:	00000a71 	.word	0x00000a71
     e64:	40000c04 	.word	0x40000c04
     e68:	00000ab1 	.word	0x00000ab1

00000e6c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e6c:	b570      	push	{r4, r5, r6, lr}
     e6e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e70:	4a1a      	ldr	r2, [pc, #104]	; (edc <system_gclk_gen_get_hz+0x70>)
     e72:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e74:	b25b      	sxtb	r3, r3
     e76:	2b00      	cmp	r3, #0
     e78:	dbfb      	blt.n	e72 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     e7a:	4b19      	ldr	r3, [pc, #100]	; (ee0 <system_gclk_gen_get_hz+0x74>)
     e7c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e7e:	4b19      	ldr	r3, [pc, #100]	; (ee4 <system_gclk_gen_get_hz+0x78>)
     e80:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e82:	4a16      	ldr	r2, [pc, #88]	; (edc <system_gclk_gen_get_hz+0x70>)
     e84:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e86:	b25b      	sxtb	r3, r3
     e88:	2b00      	cmp	r3, #0
     e8a:	dbfb      	blt.n	e84 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     e8c:	4e13      	ldr	r6, [pc, #76]	; (edc <system_gclk_gen_get_hz+0x70>)
     e8e:	6870      	ldr	r0, [r6, #4]
     e90:	04c0      	lsls	r0, r0, #19
     e92:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     e94:	4b14      	ldr	r3, [pc, #80]	; (ee8 <system_gclk_gen_get_hz+0x7c>)
     e96:	4798      	blx	r3
     e98:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e9a:	4b12      	ldr	r3, [pc, #72]	; (ee4 <system_gclk_gen_get_hz+0x78>)
     e9c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     e9e:	6876      	ldr	r6, [r6, #4]
     ea0:	02f6      	lsls	r6, r6, #11
     ea2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ea4:	4b11      	ldr	r3, [pc, #68]	; (eec <system_gclk_gen_get_hz+0x80>)
     ea6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ea8:	4a0c      	ldr	r2, [pc, #48]	; (edc <system_gclk_gen_get_hz+0x70>)
     eaa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     eac:	b25b      	sxtb	r3, r3
     eae:	2b00      	cmp	r3, #0
     eb0:	dbfb      	blt.n	eaa <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     eb2:	4b0a      	ldr	r3, [pc, #40]	; (edc <system_gclk_gen_get_hz+0x70>)
     eb4:	689c      	ldr	r4, [r3, #8]
     eb6:	0224      	lsls	r4, r4, #8
     eb8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     eba:	4b0d      	ldr	r3, [pc, #52]	; (ef0 <system_gclk_gen_get_hz+0x84>)
     ebc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     ebe:	2e00      	cmp	r6, #0
     ec0:	d107      	bne.n	ed2 <system_gclk_gen_get_hz+0x66>
     ec2:	2c01      	cmp	r4, #1
     ec4:	d907      	bls.n	ed6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     ec6:	0021      	movs	r1, r4
     ec8:	0028      	movs	r0, r5
     eca:	4b0a      	ldr	r3, [pc, #40]	; (ef4 <system_gclk_gen_get_hz+0x88>)
     ecc:	4798      	blx	r3
     ece:	0005      	movs	r5, r0
     ed0:	e001      	b.n	ed6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     ed2:	3401      	adds	r4, #1
     ed4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     ed6:	0028      	movs	r0, r5
     ed8:	bd70      	pop	{r4, r5, r6, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	40000c00 	.word	0x40000c00
     ee0:	00000a71 	.word	0x00000a71
     ee4:	40000c04 	.word	0x40000c04
     ee8:	00000b3d 	.word	0x00000b3d
     eec:	40000c08 	.word	0x40000c08
     ef0:	00000ab1 	.word	0x00000ab1
     ef4:	00001249 	.word	0x00001249

00000ef8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     ef8:	b510      	push	{r4, lr}
     efa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     efc:	4b06      	ldr	r3, [pc, #24]	; (f18 <system_gclk_chan_enable+0x20>)
     efe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f00:	4b06      	ldr	r3, [pc, #24]	; (f1c <system_gclk_chan_enable+0x24>)
     f02:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f04:	4a06      	ldr	r2, [pc, #24]	; (f20 <system_gclk_chan_enable+0x28>)
     f06:	8853      	ldrh	r3, [r2, #2]
     f08:	2180      	movs	r1, #128	; 0x80
     f0a:	01c9      	lsls	r1, r1, #7
     f0c:	430b      	orrs	r3, r1
     f0e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     f10:	4b04      	ldr	r3, [pc, #16]	; (f24 <system_gclk_chan_enable+0x2c>)
     f12:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f14:	bd10      	pop	{r4, pc}
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	00000a71 	.word	0x00000a71
     f1c:	40000c02 	.word	0x40000c02
     f20:	40000c00 	.word	0x40000c00
     f24:	00000ab1 	.word	0x00000ab1

00000f28 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f28:	b510      	push	{r4, lr}
     f2a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f2c:	4b0f      	ldr	r3, [pc, #60]	; (f6c <system_gclk_chan_disable+0x44>)
     f2e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f30:	4b0f      	ldr	r3, [pc, #60]	; (f70 <system_gclk_chan_disable+0x48>)
     f32:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f34:	4a0f      	ldr	r2, [pc, #60]	; (f74 <system_gclk_chan_disable+0x4c>)
     f36:	8853      	ldrh	r3, [r2, #2]
     f38:	051b      	lsls	r3, r3, #20
     f3a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f3c:	8853      	ldrh	r3, [r2, #2]
     f3e:	490e      	ldr	r1, [pc, #56]	; (f78 <system_gclk_chan_disable+0x50>)
     f40:	400b      	ands	r3, r1
     f42:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f44:	8853      	ldrh	r3, [r2, #2]
     f46:	490d      	ldr	r1, [pc, #52]	; (f7c <system_gclk_chan_disable+0x54>)
     f48:	400b      	ands	r3, r1
     f4a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f4c:	0011      	movs	r1, r2
     f4e:	2280      	movs	r2, #128	; 0x80
     f50:	01d2      	lsls	r2, r2, #7
     f52:	884b      	ldrh	r3, [r1, #2]
     f54:	4213      	tst	r3, r2
     f56:	d1fc      	bne.n	f52 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f58:	4906      	ldr	r1, [pc, #24]	; (f74 <system_gclk_chan_disable+0x4c>)
     f5a:	884a      	ldrh	r2, [r1, #2]
     f5c:	0203      	lsls	r3, r0, #8
     f5e:	4806      	ldr	r0, [pc, #24]	; (f78 <system_gclk_chan_disable+0x50>)
     f60:	4002      	ands	r2, r0
     f62:	4313      	orrs	r3, r2
     f64:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     f66:	4b06      	ldr	r3, [pc, #24]	; (f80 <system_gclk_chan_disable+0x58>)
     f68:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f6a:	bd10      	pop	{r4, pc}
     f6c:	00000a71 	.word	0x00000a71
     f70:	40000c02 	.word	0x40000c02
     f74:	40000c00 	.word	0x40000c00
     f78:	fffff0ff 	.word	0xfffff0ff
     f7c:	ffffbfff 	.word	0xffffbfff
     f80:	00000ab1 	.word	0x00000ab1

00000f84 <system_gclk_chan_set_config>:
{
     f84:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     f86:	780c      	ldrb	r4, [r1, #0]
     f88:	0224      	lsls	r4, r4, #8
     f8a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     f8c:	4b02      	ldr	r3, [pc, #8]	; (f98 <system_gclk_chan_set_config+0x14>)
     f8e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     f90:	b2a4      	uxth	r4, r4
     f92:	4b02      	ldr	r3, [pc, #8]	; (f9c <system_gclk_chan_set_config+0x18>)
     f94:	805c      	strh	r4, [r3, #2]
}
     f96:	bd10      	pop	{r4, pc}
     f98:	00000f29 	.word	0x00000f29
     f9c:	40000c00 	.word	0x40000c00

00000fa0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     fa0:	b510      	push	{r4, lr}
     fa2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     fa4:	4b06      	ldr	r3, [pc, #24]	; (fc0 <system_gclk_chan_get_hz+0x20>)
     fa6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fa8:	4b06      	ldr	r3, [pc, #24]	; (fc4 <system_gclk_chan_get_hz+0x24>)
     faa:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     fac:	4b06      	ldr	r3, [pc, #24]	; (fc8 <system_gclk_chan_get_hz+0x28>)
     fae:	885c      	ldrh	r4, [r3, #2]
     fb0:	0524      	lsls	r4, r4, #20
     fb2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     fb4:	4b05      	ldr	r3, [pc, #20]	; (fcc <system_gclk_chan_get_hz+0x2c>)
     fb6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     fb8:	0020      	movs	r0, r4
     fba:	4b05      	ldr	r3, [pc, #20]	; (fd0 <system_gclk_chan_get_hz+0x30>)
     fbc:	4798      	blx	r3
}
     fbe:	bd10      	pop	{r4, pc}
     fc0:	00000a71 	.word	0x00000a71
     fc4:	40000c02 	.word	0x40000c02
     fc8:	40000c00 	.word	0x40000c00
     fcc:	00000ab1 	.word	0x00000ab1
     fd0:	00000e6d 	.word	0x00000e6d

00000fd4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     fd4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     fd6:	78d3      	ldrb	r3, [r2, #3]
     fd8:	2b00      	cmp	r3, #0
     fda:	d135      	bne.n	1048 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     fdc:	7813      	ldrb	r3, [r2, #0]
     fde:	2b80      	cmp	r3, #128	; 0x80
     fe0:	d029      	beq.n	1036 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     fe2:	061b      	lsls	r3, r3, #24
     fe4:	2480      	movs	r4, #128	; 0x80
     fe6:	0264      	lsls	r4, r4, #9
     fe8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     fea:	7854      	ldrb	r4, [r2, #1]
     fec:	2502      	movs	r5, #2
     fee:	43ac      	bics	r4, r5
     ff0:	d106      	bne.n	1000 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     ff2:	7894      	ldrb	r4, [r2, #2]
     ff4:	2c00      	cmp	r4, #0
     ff6:	d120      	bne.n	103a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     ff8:	2480      	movs	r4, #128	; 0x80
     ffa:	02a4      	lsls	r4, r4, #10
     ffc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     ffe:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1000:	7854      	ldrb	r4, [r2, #1]
    1002:	3c01      	subs	r4, #1
    1004:	2c01      	cmp	r4, #1
    1006:	d91c      	bls.n	1042 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1008:	040d      	lsls	r5, r1, #16
    100a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    100c:	24a0      	movs	r4, #160	; 0xa0
    100e:	05e4      	lsls	r4, r4, #23
    1010:	432c      	orrs	r4, r5
    1012:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1014:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1016:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1018:	24d0      	movs	r4, #208	; 0xd0
    101a:	0624      	lsls	r4, r4, #24
    101c:	432c      	orrs	r4, r5
    101e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1020:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1022:	78d4      	ldrb	r4, [r2, #3]
    1024:	2c00      	cmp	r4, #0
    1026:	d122      	bne.n	106e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1028:	035b      	lsls	r3, r3, #13
    102a:	d51c      	bpl.n	1066 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    102c:	7893      	ldrb	r3, [r2, #2]
    102e:	2b01      	cmp	r3, #1
    1030:	d01e      	beq.n	1070 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1032:	6141      	str	r1, [r0, #20]
    1034:	e017      	b.n	1066 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1036:	2300      	movs	r3, #0
    1038:	e7d7      	b.n	fea <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    103a:	24c0      	movs	r4, #192	; 0xc0
    103c:	02e4      	lsls	r4, r4, #11
    103e:	4323      	orrs	r3, r4
    1040:	e7dd      	b.n	ffe <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1042:	4c0d      	ldr	r4, [pc, #52]	; (1078 <_system_pinmux_config+0xa4>)
    1044:	4023      	ands	r3, r4
    1046:	e7df      	b.n	1008 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1048:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    104a:	040c      	lsls	r4, r1, #16
    104c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    104e:	23a0      	movs	r3, #160	; 0xa0
    1050:	05db      	lsls	r3, r3, #23
    1052:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1054:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1056:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1058:	23d0      	movs	r3, #208	; 0xd0
    105a:	061b      	lsls	r3, r3, #24
    105c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    105e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1060:	78d3      	ldrb	r3, [r2, #3]
    1062:	2b00      	cmp	r3, #0
    1064:	d103      	bne.n	106e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1066:	7853      	ldrb	r3, [r2, #1]
    1068:	3b01      	subs	r3, #1
    106a:	2b01      	cmp	r3, #1
    106c:	d902      	bls.n	1074 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    106e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1070:	6181      	str	r1, [r0, #24]
    1072:	e7f8      	b.n	1066 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1074:	6081      	str	r1, [r0, #8]
}
    1076:	e7fa      	b.n	106e <_system_pinmux_config+0x9a>
    1078:	fffbffff 	.word	0xfffbffff

0000107c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    107c:	b510      	push	{r4, lr}
    107e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1080:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1082:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1084:	2900      	cmp	r1, #0
    1086:	d104      	bne.n	1092 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1088:	0943      	lsrs	r3, r0, #5
    108a:	01db      	lsls	r3, r3, #7
    108c:	4905      	ldr	r1, [pc, #20]	; (10a4 <system_pinmux_pin_set_config+0x28>)
    108e:	468c      	mov	ip, r1
    1090:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1092:	241f      	movs	r4, #31
    1094:	4020      	ands	r0, r4
    1096:	2101      	movs	r1, #1
    1098:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    109a:	0018      	movs	r0, r3
    109c:	4b02      	ldr	r3, [pc, #8]	; (10a8 <system_pinmux_pin_set_config+0x2c>)
    109e:	4798      	blx	r3
}
    10a0:	bd10      	pop	{r4, pc}
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	41004400 	.word	0x41004400
    10a8:	00000fd5 	.word	0x00000fd5

000010ac <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10ac:	4770      	bx	lr
	...

000010b0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10b0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10b2:	4b05      	ldr	r3, [pc, #20]	; (10c8 <system_init+0x18>)
    10b4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    10b6:	4b05      	ldr	r3, [pc, #20]	; (10cc <system_init+0x1c>)
    10b8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    10ba:	4b05      	ldr	r3, [pc, #20]	; (10d0 <system_init+0x20>)
    10bc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10be:	4b05      	ldr	r3, [pc, #20]	; (10d4 <system_init+0x24>)
    10c0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10c2:	4b05      	ldr	r3, [pc, #20]	; (10d8 <system_init+0x28>)
    10c4:	4798      	blx	r3
}
    10c6:	bd10      	pop	{r4, pc}
    10c8:	00000cb5 	.word	0x00000cb5
    10cc:	00000ae1 	.word	0x00000ae1
    10d0:	000010ad 	.word	0x000010ad
    10d4:	000010ad 	.word	0x000010ad
    10d8:	000010ad 	.word	0x000010ad

000010dc <main>:
		delay_ms(500);
	}
}

int main (void)
{
    10dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10de:	46d6      	mov	lr, sl
    10e0:	464f      	mov	r7, r9
    10e2:	b580      	push	{r7, lr}
    10e4:	b091      	sub	sp, #68	; 0x44
	system_init();
    10e6:	4b47      	ldr	r3, [pc, #284]	; (1204 <main+0x128>)
    10e8:	4798      	blx	r3
	delay_init();
    10ea:	4b47      	ldr	r3, [pc, #284]	; (1208 <main+0x12c>)
    10ec:	4798      	blx	r3
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    10ee:	2364      	movs	r3, #100	; 0x64
    10f0:	9300      	str	r3, [sp, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    10f2:	4b46      	ldr	r3, [pc, #280]	; (120c <main+0x130>)
    10f4:	9301      	str	r3, [sp, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    10f6:	2300      	movs	r3, #0
    10f8:	9302      	str	r3, [sp, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    10fa:	466a      	mov	r2, sp
    10fc:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    10fe:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1100:	2280      	movs	r2, #128	; 0x80
    1102:	0392      	lsls	r2, r2, #14
    1104:	9204      	str	r2, [sp, #16]
	config->buffer_timeout   = 65535;
    1106:	2201      	movs	r2, #1
    1108:	4252      	negs	r2, r2
    110a:	4669      	mov	r1, sp
    110c:	82ca      	strh	r2, [r1, #22]
	config->unknown_bus_state_timeout = 65535;
    110e:	828a      	strh	r2, [r1, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1110:	3225      	adds	r2, #37	; 0x25
    1112:	548b      	strb	r3, [r1, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1114:	930a      	str	r3, [sp, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1116:	3208      	adds	r2, #8
    1118:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    111a:	3201      	adds	r2, #1
    111c:	548b      	strb	r3, [r1, r2]
	config->master_scl_low_extend_timeout  = false;
    111e:	3201      	adds	r2, #1
    1120:	548b      	strb	r3, [r1, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1122:	33d7      	adds	r3, #215	; 0xd7
    1124:	466a      	mov	r2, sp
    1126:	860b      	strh	r3, [r1, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    1128:	4b39      	ldr	r3, [pc, #228]	; (1210 <main+0x134>)
    112a:	9307      	str	r3, [sp, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    112c:	4b39      	ldr	r3, [pc, #228]	; (1214 <main+0x138>)
    112e:	9308      	str	r3, [sp, #32]
	i2c_master_init(&i2c_master_instance, EXT1_I2C_MODULE, &config_i2c_master); //EDBG_I2C_MODULE
    1130:	4c39      	ldr	r4, [pc, #228]	; (1218 <main+0x13c>)
    1132:	493a      	ldr	r1, [pc, #232]	; (121c <main+0x140>)
    1134:	0020      	movs	r0, r4
    1136:	4b3a      	ldr	r3, [pc, #232]	; (1220 <main+0x144>)
    1138:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    113a:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    113c:	2107      	movs	r1, #7
    113e:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    1140:	4219      	tst	r1, r3
    1142:	d1fc      	bne.n	113e <main+0x62>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1144:	6813      	ldr	r3, [r2, #0]
    1146:	2102      	movs	r1, #2
    1148:	430b      	orrs	r3, r1
    114a:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    114c:	4b32      	ldr	r3, [pc, #200]	; (1218 <main+0x13c>)
    114e:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    1150:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1152:	2010      	movs	r0, #16
    1154:	8b51      	ldrh	r1, [r2, #26]
    1156:	4201      	tst	r1, r0
    1158:	d104      	bne.n	1164 <main+0x88>
		timeout_counter++;
    115a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    115c:	42a3      	cmp	r3, r4
    115e:	d3f9      	bcc.n	1154 <main+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1160:	2310      	movs	r3, #16
    1162:	8353      	strh	r3, [r2, #26]
	config->input_pull = PORT_PIN_PULL_UP;
    1164:	2301      	movs	r3, #1
    1166:	466a      	mov	r2, sp
    1168:	7053      	strb	r3, [r2, #1]
	config->powersave  = false;
    116a:	2200      	movs	r2, #0
    116c:	4669      	mov	r1, sp
    116e:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1170:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1172:	2013      	movs	r0, #19
    1174:	4b2b      	ldr	r3, [pc, #172]	; (1224 <main+0x148>)
    1176:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1178:	2280      	movs	r2, #128	; 0x80
    117a:	0312      	lsls	r2, r2, #12
    117c:	4b2a      	ldr	r3, [pc, #168]	; (1228 <main+0x14c>)
    117e:	619a      	str	r2, [r3, #24]
	configure_i2c_master();
	config_led();
	
	uint16_t timeout = 0;
	
	struct i2c_master_packet packet = {
    1180:	aa0d      	add	r2, sp, #52	; 0x34
    1182:	4b2a      	ldr	r3, [pc, #168]	; (122c <main+0x150>)
    1184:	cb13      	ldmia	r3!, {r0, r1, r4}
    1186:	c213      	stmia	r2!, {r0, r1, r4}
	uint16_t timeout = 0;
    1188:	2400      	movs	r4, #0
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code = 0x00,
	};
	
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK)
    118a:	4d23      	ldr	r5, [pc, #140]	; (1218 <main+0x13c>)
    118c:	4e28      	ldr	r6, [pc, #160]	; (1230 <main+0x154>)
    118e:	a90d      	add	r1, sp, #52	; 0x34
    1190:	0028      	movs	r0, r5
    1192:	47b0      	blx	r6
    1194:	2800      	cmp	r0, #0
    1196:	d005      	beq.n	11a4 <main+0xc8>
	{
		if (timeout++ == TIMEOUT)
    1198:	3401      	adds	r4, #1
    119a:	b2a4      	uxth	r4, r4
    119c:	4b25      	ldr	r3, [pc, #148]	; (1234 <main+0x158>)
    119e:	429c      	cmp	r4, r3
    11a0:	d1f5      	bne.n	118e <main+0xb2>
    11a2:	e002      	b.n	11aa <main+0xce>
		{
			break;
		}
	}
	
	if (timeout < TIMEOUT)
    11a4:	4b24      	ldr	r3, [pc, #144]	; (1238 <main+0x15c>)
    11a6:	429c      	cmp	r4, r3
    11a8:	d910      	bls.n	11cc <main+0xf0>
	{
		blink_led(5);
	}

	packet.data = read_buffer;
    11aa:	4b24      	ldr	r3, [pc, #144]	; (123c <main+0x160>)
    11ac:	930e      	str	r3, [sp, #56]	; 0x38
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) != STATUS_OK)
    11ae:	4d1a      	ldr	r5, [pc, #104]	; (1218 <main+0x13c>)
    11b0:	4e23      	ldr	r6, [pc, #140]	; (1240 <main+0x164>)
    11b2:	a90d      	add	r1, sp, #52	; 0x34
    11b4:	0028      	movs	r0, r5
    11b6:	47b0      	blx	r6
    11b8:	2800      	cmp	r0, #0
    11ba:	d01c      	beq.n	11f6 <main+0x11a>
	{
		if (timeout++ == TIMEOUT)
    11bc:	1c63      	adds	r3, r4, #1
    11be:	b29b      	uxth	r3, r3
    11c0:	22fa      	movs	r2, #250	; 0xfa
    11c2:	0092      	lsls	r2, r2, #2
    11c4:	4294      	cmp	r4, r2
    11c6:	d016      	beq.n	11f6 <main+0x11a>
    11c8:	001c      	movs	r4, r3
    11ca:	e7f2      	b.n	11b2 <main+0xd6>
    11cc:	2505      	movs	r5, #5
    11ce:	4f16      	ldr	r7, [pc, #88]	; (1228 <main+0x14c>)
    11d0:	2380      	movs	r3, #128	; 0x80
    11d2:	031b      	lsls	r3, r3, #12
    11d4:	4699      	mov	r9, r3
    11d6:	469a      	mov	sl, r3
    11d8:	4653      	mov	r3, sl
    11da:	61bb      	str	r3, [r7, #24]
		delay_ms(500);
    11dc:	20fa      	movs	r0, #250	; 0xfa
    11de:	0040      	lsls	r0, r0, #1
    11e0:	4e18      	ldr	r6, [pc, #96]	; (1244 <main+0x168>)
    11e2:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    11e4:	464b      	mov	r3, r9
    11e6:	617b      	str	r3, [r7, #20]
		delay_ms(500);
    11e8:	20fa      	movs	r0, #250	; 0xfa
    11ea:	0040      	lsls	r0, r0, #1
    11ec:	47b0      	blx	r6
    11ee:	3d01      	subs	r5, #1
	for (int i = 0; i < nb_blinks; i++)
    11f0:	2d00      	cmp	r5, #0
    11f2:	d1f1      	bne.n	11d8 <main+0xfc>
    11f4:	e7d9      	b.n	11aa <main+0xce>
		{
			break;
		}
	}
}
    11f6:	2000      	movs	r0, #0
    11f8:	b011      	add	sp, #68	; 0x44
    11fa:	bc0c      	pop	{r2, r3}
    11fc:	4691      	mov	r9, r2
    11fe:	469a      	mov	sl, r3
    1200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	000010b1 	.word	0x000010b1
    1208:	000001fd 	.word	0x000001fd
    120c:	00000d48 	.word	0x00000d48
    1210:	00100002 	.word	0x00100002
    1214:	00110002 	.word	0x00110002
    1218:	20000064 	.word	0x20000064
    121c:	42000c00 	.word	0x42000c00
    1220:	00000275 	.word	0x00000275
    1224:	00000b19 	.word	0x00000b19
    1228:	41004400 	.word	0x41004400
    122c:	00002cd0 	.word	0x00002cd0
    1230:	00000861 	.word	0x00000861
    1234:	000003e9 	.word	0x000003e9
    1238:	000003e7 	.word	0x000003e7
    123c:	20000058 	.word	0x20000058
    1240:	0000084d 	.word	0x0000084d
    1244:	0000023d 	.word	0x0000023d

00001248 <__udivsi3>:
    1248:	2200      	movs	r2, #0
    124a:	0843      	lsrs	r3, r0, #1
    124c:	428b      	cmp	r3, r1
    124e:	d374      	bcc.n	133a <__udivsi3+0xf2>
    1250:	0903      	lsrs	r3, r0, #4
    1252:	428b      	cmp	r3, r1
    1254:	d35f      	bcc.n	1316 <__udivsi3+0xce>
    1256:	0a03      	lsrs	r3, r0, #8
    1258:	428b      	cmp	r3, r1
    125a:	d344      	bcc.n	12e6 <__udivsi3+0x9e>
    125c:	0b03      	lsrs	r3, r0, #12
    125e:	428b      	cmp	r3, r1
    1260:	d328      	bcc.n	12b4 <__udivsi3+0x6c>
    1262:	0c03      	lsrs	r3, r0, #16
    1264:	428b      	cmp	r3, r1
    1266:	d30d      	bcc.n	1284 <__udivsi3+0x3c>
    1268:	22ff      	movs	r2, #255	; 0xff
    126a:	0209      	lsls	r1, r1, #8
    126c:	ba12      	rev	r2, r2
    126e:	0c03      	lsrs	r3, r0, #16
    1270:	428b      	cmp	r3, r1
    1272:	d302      	bcc.n	127a <__udivsi3+0x32>
    1274:	1212      	asrs	r2, r2, #8
    1276:	0209      	lsls	r1, r1, #8
    1278:	d065      	beq.n	1346 <__udivsi3+0xfe>
    127a:	0b03      	lsrs	r3, r0, #12
    127c:	428b      	cmp	r3, r1
    127e:	d319      	bcc.n	12b4 <__udivsi3+0x6c>
    1280:	e000      	b.n	1284 <__udivsi3+0x3c>
    1282:	0a09      	lsrs	r1, r1, #8
    1284:	0bc3      	lsrs	r3, r0, #15
    1286:	428b      	cmp	r3, r1
    1288:	d301      	bcc.n	128e <__udivsi3+0x46>
    128a:	03cb      	lsls	r3, r1, #15
    128c:	1ac0      	subs	r0, r0, r3
    128e:	4152      	adcs	r2, r2
    1290:	0b83      	lsrs	r3, r0, #14
    1292:	428b      	cmp	r3, r1
    1294:	d301      	bcc.n	129a <__udivsi3+0x52>
    1296:	038b      	lsls	r3, r1, #14
    1298:	1ac0      	subs	r0, r0, r3
    129a:	4152      	adcs	r2, r2
    129c:	0b43      	lsrs	r3, r0, #13
    129e:	428b      	cmp	r3, r1
    12a0:	d301      	bcc.n	12a6 <__udivsi3+0x5e>
    12a2:	034b      	lsls	r3, r1, #13
    12a4:	1ac0      	subs	r0, r0, r3
    12a6:	4152      	adcs	r2, r2
    12a8:	0b03      	lsrs	r3, r0, #12
    12aa:	428b      	cmp	r3, r1
    12ac:	d301      	bcc.n	12b2 <__udivsi3+0x6a>
    12ae:	030b      	lsls	r3, r1, #12
    12b0:	1ac0      	subs	r0, r0, r3
    12b2:	4152      	adcs	r2, r2
    12b4:	0ac3      	lsrs	r3, r0, #11
    12b6:	428b      	cmp	r3, r1
    12b8:	d301      	bcc.n	12be <__udivsi3+0x76>
    12ba:	02cb      	lsls	r3, r1, #11
    12bc:	1ac0      	subs	r0, r0, r3
    12be:	4152      	adcs	r2, r2
    12c0:	0a83      	lsrs	r3, r0, #10
    12c2:	428b      	cmp	r3, r1
    12c4:	d301      	bcc.n	12ca <__udivsi3+0x82>
    12c6:	028b      	lsls	r3, r1, #10
    12c8:	1ac0      	subs	r0, r0, r3
    12ca:	4152      	adcs	r2, r2
    12cc:	0a43      	lsrs	r3, r0, #9
    12ce:	428b      	cmp	r3, r1
    12d0:	d301      	bcc.n	12d6 <__udivsi3+0x8e>
    12d2:	024b      	lsls	r3, r1, #9
    12d4:	1ac0      	subs	r0, r0, r3
    12d6:	4152      	adcs	r2, r2
    12d8:	0a03      	lsrs	r3, r0, #8
    12da:	428b      	cmp	r3, r1
    12dc:	d301      	bcc.n	12e2 <__udivsi3+0x9a>
    12de:	020b      	lsls	r3, r1, #8
    12e0:	1ac0      	subs	r0, r0, r3
    12e2:	4152      	adcs	r2, r2
    12e4:	d2cd      	bcs.n	1282 <__udivsi3+0x3a>
    12e6:	09c3      	lsrs	r3, r0, #7
    12e8:	428b      	cmp	r3, r1
    12ea:	d301      	bcc.n	12f0 <__udivsi3+0xa8>
    12ec:	01cb      	lsls	r3, r1, #7
    12ee:	1ac0      	subs	r0, r0, r3
    12f0:	4152      	adcs	r2, r2
    12f2:	0983      	lsrs	r3, r0, #6
    12f4:	428b      	cmp	r3, r1
    12f6:	d301      	bcc.n	12fc <__udivsi3+0xb4>
    12f8:	018b      	lsls	r3, r1, #6
    12fa:	1ac0      	subs	r0, r0, r3
    12fc:	4152      	adcs	r2, r2
    12fe:	0943      	lsrs	r3, r0, #5
    1300:	428b      	cmp	r3, r1
    1302:	d301      	bcc.n	1308 <__udivsi3+0xc0>
    1304:	014b      	lsls	r3, r1, #5
    1306:	1ac0      	subs	r0, r0, r3
    1308:	4152      	adcs	r2, r2
    130a:	0903      	lsrs	r3, r0, #4
    130c:	428b      	cmp	r3, r1
    130e:	d301      	bcc.n	1314 <__udivsi3+0xcc>
    1310:	010b      	lsls	r3, r1, #4
    1312:	1ac0      	subs	r0, r0, r3
    1314:	4152      	adcs	r2, r2
    1316:	08c3      	lsrs	r3, r0, #3
    1318:	428b      	cmp	r3, r1
    131a:	d301      	bcc.n	1320 <__udivsi3+0xd8>
    131c:	00cb      	lsls	r3, r1, #3
    131e:	1ac0      	subs	r0, r0, r3
    1320:	4152      	adcs	r2, r2
    1322:	0883      	lsrs	r3, r0, #2
    1324:	428b      	cmp	r3, r1
    1326:	d301      	bcc.n	132c <__udivsi3+0xe4>
    1328:	008b      	lsls	r3, r1, #2
    132a:	1ac0      	subs	r0, r0, r3
    132c:	4152      	adcs	r2, r2
    132e:	0843      	lsrs	r3, r0, #1
    1330:	428b      	cmp	r3, r1
    1332:	d301      	bcc.n	1338 <__udivsi3+0xf0>
    1334:	004b      	lsls	r3, r1, #1
    1336:	1ac0      	subs	r0, r0, r3
    1338:	4152      	adcs	r2, r2
    133a:	1a41      	subs	r1, r0, r1
    133c:	d200      	bcs.n	1340 <__udivsi3+0xf8>
    133e:	4601      	mov	r1, r0
    1340:	4152      	adcs	r2, r2
    1342:	4610      	mov	r0, r2
    1344:	4770      	bx	lr
    1346:	e7ff      	b.n	1348 <__udivsi3+0x100>
    1348:	b501      	push	{r0, lr}
    134a:	2000      	movs	r0, #0
    134c:	f000 f806 	bl	135c <__aeabi_idiv0>
    1350:	bd02      	pop	{r1, pc}
    1352:	46c0      	nop			; (mov r8, r8)

00001354 <__aeabi_uidivmod>:
    1354:	2900      	cmp	r1, #0
    1356:	d0f7      	beq.n	1348 <__udivsi3+0x100>
    1358:	e776      	b.n	1248 <__udivsi3>
    135a:	4770      	bx	lr

0000135c <__aeabi_idiv0>:
    135c:	4770      	bx	lr
    135e:	46c0      	nop			; (mov r8, r8)

00001360 <__aeabi_dadd>:
    1360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1362:	4645      	mov	r5, r8
    1364:	46de      	mov	lr, fp
    1366:	4657      	mov	r7, sl
    1368:	464e      	mov	r6, r9
    136a:	030c      	lsls	r4, r1, #12
    136c:	b5e0      	push	{r5, r6, r7, lr}
    136e:	004e      	lsls	r6, r1, #1
    1370:	0fc9      	lsrs	r1, r1, #31
    1372:	4688      	mov	r8, r1
    1374:	000d      	movs	r5, r1
    1376:	0a61      	lsrs	r1, r4, #9
    1378:	0f44      	lsrs	r4, r0, #29
    137a:	430c      	orrs	r4, r1
    137c:	00c7      	lsls	r7, r0, #3
    137e:	0319      	lsls	r1, r3, #12
    1380:	0058      	lsls	r0, r3, #1
    1382:	0fdb      	lsrs	r3, r3, #31
    1384:	469b      	mov	fp, r3
    1386:	0a4b      	lsrs	r3, r1, #9
    1388:	0f51      	lsrs	r1, r2, #29
    138a:	430b      	orrs	r3, r1
    138c:	0d76      	lsrs	r6, r6, #21
    138e:	0d40      	lsrs	r0, r0, #21
    1390:	0019      	movs	r1, r3
    1392:	00d2      	lsls	r2, r2, #3
    1394:	45d8      	cmp	r8, fp
    1396:	d100      	bne.n	139a <__aeabi_dadd+0x3a>
    1398:	e0ae      	b.n	14f8 <__aeabi_dadd+0x198>
    139a:	1a35      	subs	r5, r6, r0
    139c:	2d00      	cmp	r5, #0
    139e:	dc00      	bgt.n	13a2 <__aeabi_dadd+0x42>
    13a0:	e0f6      	b.n	1590 <__aeabi_dadd+0x230>
    13a2:	2800      	cmp	r0, #0
    13a4:	d10f      	bne.n	13c6 <__aeabi_dadd+0x66>
    13a6:	4313      	orrs	r3, r2
    13a8:	d100      	bne.n	13ac <__aeabi_dadd+0x4c>
    13aa:	e0db      	b.n	1564 <__aeabi_dadd+0x204>
    13ac:	1e6b      	subs	r3, r5, #1
    13ae:	2b00      	cmp	r3, #0
    13b0:	d000      	beq.n	13b4 <__aeabi_dadd+0x54>
    13b2:	e137      	b.n	1624 <__aeabi_dadd+0x2c4>
    13b4:	1aba      	subs	r2, r7, r2
    13b6:	4297      	cmp	r7, r2
    13b8:	41bf      	sbcs	r7, r7
    13ba:	1a64      	subs	r4, r4, r1
    13bc:	427f      	negs	r7, r7
    13be:	1be4      	subs	r4, r4, r7
    13c0:	2601      	movs	r6, #1
    13c2:	0017      	movs	r7, r2
    13c4:	e024      	b.n	1410 <__aeabi_dadd+0xb0>
    13c6:	4bc6      	ldr	r3, [pc, #792]	; (16e0 <__aeabi_dadd+0x380>)
    13c8:	429e      	cmp	r6, r3
    13ca:	d04d      	beq.n	1468 <__aeabi_dadd+0x108>
    13cc:	2380      	movs	r3, #128	; 0x80
    13ce:	041b      	lsls	r3, r3, #16
    13d0:	4319      	orrs	r1, r3
    13d2:	2d38      	cmp	r5, #56	; 0x38
    13d4:	dd00      	ble.n	13d8 <__aeabi_dadd+0x78>
    13d6:	e107      	b.n	15e8 <__aeabi_dadd+0x288>
    13d8:	2d1f      	cmp	r5, #31
    13da:	dd00      	ble.n	13de <__aeabi_dadd+0x7e>
    13dc:	e138      	b.n	1650 <__aeabi_dadd+0x2f0>
    13de:	2020      	movs	r0, #32
    13e0:	1b43      	subs	r3, r0, r5
    13e2:	469a      	mov	sl, r3
    13e4:	000b      	movs	r3, r1
    13e6:	4650      	mov	r0, sl
    13e8:	4083      	lsls	r3, r0
    13ea:	4699      	mov	r9, r3
    13ec:	0013      	movs	r3, r2
    13ee:	4648      	mov	r0, r9
    13f0:	40eb      	lsrs	r3, r5
    13f2:	4318      	orrs	r0, r3
    13f4:	0003      	movs	r3, r0
    13f6:	4650      	mov	r0, sl
    13f8:	4082      	lsls	r2, r0
    13fa:	1e50      	subs	r0, r2, #1
    13fc:	4182      	sbcs	r2, r0
    13fe:	40e9      	lsrs	r1, r5
    1400:	431a      	orrs	r2, r3
    1402:	1aba      	subs	r2, r7, r2
    1404:	1a61      	subs	r1, r4, r1
    1406:	4297      	cmp	r7, r2
    1408:	41a4      	sbcs	r4, r4
    140a:	0017      	movs	r7, r2
    140c:	4264      	negs	r4, r4
    140e:	1b0c      	subs	r4, r1, r4
    1410:	0223      	lsls	r3, r4, #8
    1412:	d562      	bpl.n	14da <__aeabi_dadd+0x17a>
    1414:	0264      	lsls	r4, r4, #9
    1416:	0a65      	lsrs	r5, r4, #9
    1418:	2d00      	cmp	r5, #0
    141a:	d100      	bne.n	141e <__aeabi_dadd+0xbe>
    141c:	e0df      	b.n	15de <__aeabi_dadd+0x27e>
    141e:	0028      	movs	r0, r5
    1420:	f001 fbe4 	bl	2bec <__clzsi2>
    1424:	0003      	movs	r3, r0
    1426:	3b08      	subs	r3, #8
    1428:	2b1f      	cmp	r3, #31
    142a:	dd00      	ble.n	142e <__aeabi_dadd+0xce>
    142c:	e0d2      	b.n	15d4 <__aeabi_dadd+0x274>
    142e:	2220      	movs	r2, #32
    1430:	003c      	movs	r4, r7
    1432:	1ad2      	subs	r2, r2, r3
    1434:	409d      	lsls	r5, r3
    1436:	40d4      	lsrs	r4, r2
    1438:	409f      	lsls	r7, r3
    143a:	4325      	orrs	r5, r4
    143c:	429e      	cmp	r6, r3
    143e:	dd00      	ble.n	1442 <__aeabi_dadd+0xe2>
    1440:	e0c4      	b.n	15cc <__aeabi_dadd+0x26c>
    1442:	1b9e      	subs	r6, r3, r6
    1444:	1c73      	adds	r3, r6, #1
    1446:	2b1f      	cmp	r3, #31
    1448:	dd00      	ble.n	144c <__aeabi_dadd+0xec>
    144a:	e0f1      	b.n	1630 <__aeabi_dadd+0x2d0>
    144c:	2220      	movs	r2, #32
    144e:	0038      	movs	r0, r7
    1450:	0029      	movs	r1, r5
    1452:	1ad2      	subs	r2, r2, r3
    1454:	40d8      	lsrs	r0, r3
    1456:	4091      	lsls	r1, r2
    1458:	4097      	lsls	r7, r2
    145a:	002c      	movs	r4, r5
    145c:	4301      	orrs	r1, r0
    145e:	1e78      	subs	r0, r7, #1
    1460:	4187      	sbcs	r7, r0
    1462:	40dc      	lsrs	r4, r3
    1464:	2600      	movs	r6, #0
    1466:	430f      	orrs	r7, r1
    1468:	077b      	lsls	r3, r7, #29
    146a:	d009      	beq.n	1480 <__aeabi_dadd+0x120>
    146c:	230f      	movs	r3, #15
    146e:	403b      	ands	r3, r7
    1470:	2b04      	cmp	r3, #4
    1472:	d005      	beq.n	1480 <__aeabi_dadd+0x120>
    1474:	1d3b      	adds	r3, r7, #4
    1476:	42bb      	cmp	r3, r7
    1478:	41bf      	sbcs	r7, r7
    147a:	427f      	negs	r7, r7
    147c:	19e4      	adds	r4, r4, r7
    147e:	001f      	movs	r7, r3
    1480:	0223      	lsls	r3, r4, #8
    1482:	d52c      	bpl.n	14de <__aeabi_dadd+0x17e>
    1484:	4b96      	ldr	r3, [pc, #600]	; (16e0 <__aeabi_dadd+0x380>)
    1486:	3601      	adds	r6, #1
    1488:	429e      	cmp	r6, r3
    148a:	d100      	bne.n	148e <__aeabi_dadd+0x12e>
    148c:	e09a      	b.n	15c4 <__aeabi_dadd+0x264>
    148e:	4645      	mov	r5, r8
    1490:	4b94      	ldr	r3, [pc, #592]	; (16e4 <__aeabi_dadd+0x384>)
    1492:	08ff      	lsrs	r7, r7, #3
    1494:	401c      	ands	r4, r3
    1496:	0760      	lsls	r0, r4, #29
    1498:	0576      	lsls	r6, r6, #21
    149a:	0264      	lsls	r4, r4, #9
    149c:	4307      	orrs	r7, r0
    149e:	0b24      	lsrs	r4, r4, #12
    14a0:	0d76      	lsrs	r6, r6, #21
    14a2:	2100      	movs	r1, #0
    14a4:	0324      	lsls	r4, r4, #12
    14a6:	0b23      	lsrs	r3, r4, #12
    14a8:	0d0c      	lsrs	r4, r1, #20
    14aa:	4a8f      	ldr	r2, [pc, #572]	; (16e8 <__aeabi_dadd+0x388>)
    14ac:	0524      	lsls	r4, r4, #20
    14ae:	431c      	orrs	r4, r3
    14b0:	4014      	ands	r4, r2
    14b2:	0533      	lsls	r3, r6, #20
    14b4:	4323      	orrs	r3, r4
    14b6:	005b      	lsls	r3, r3, #1
    14b8:	07ed      	lsls	r5, r5, #31
    14ba:	085b      	lsrs	r3, r3, #1
    14bc:	432b      	orrs	r3, r5
    14be:	0038      	movs	r0, r7
    14c0:	0019      	movs	r1, r3
    14c2:	bc3c      	pop	{r2, r3, r4, r5}
    14c4:	4690      	mov	r8, r2
    14c6:	4699      	mov	r9, r3
    14c8:	46a2      	mov	sl, r4
    14ca:	46ab      	mov	fp, r5
    14cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14ce:	4664      	mov	r4, ip
    14d0:	4304      	orrs	r4, r0
    14d2:	d100      	bne.n	14d6 <__aeabi_dadd+0x176>
    14d4:	e211      	b.n	18fa <__aeabi_dadd+0x59a>
    14d6:	0004      	movs	r4, r0
    14d8:	4667      	mov	r7, ip
    14da:	077b      	lsls	r3, r7, #29
    14dc:	d1c6      	bne.n	146c <__aeabi_dadd+0x10c>
    14de:	4645      	mov	r5, r8
    14e0:	0760      	lsls	r0, r4, #29
    14e2:	08ff      	lsrs	r7, r7, #3
    14e4:	4307      	orrs	r7, r0
    14e6:	08e4      	lsrs	r4, r4, #3
    14e8:	4b7d      	ldr	r3, [pc, #500]	; (16e0 <__aeabi_dadd+0x380>)
    14ea:	429e      	cmp	r6, r3
    14ec:	d030      	beq.n	1550 <__aeabi_dadd+0x1f0>
    14ee:	0324      	lsls	r4, r4, #12
    14f0:	0576      	lsls	r6, r6, #21
    14f2:	0b24      	lsrs	r4, r4, #12
    14f4:	0d76      	lsrs	r6, r6, #21
    14f6:	e7d4      	b.n	14a2 <__aeabi_dadd+0x142>
    14f8:	1a33      	subs	r3, r6, r0
    14fa:	469a      	mov	sl, r3
    14fc:	2b00      	cmp	r3, #0
    14fe:	dd78      	ble.n	15f2 <__aeabi_dadd+0x292>
    1500:	2800      	cmp	r0, #0
    1502:	d031      	beq.n	1568 <__aeabi_dadd+0x208>
    1504:	4876      	ldr	r0, [pc, #472]	; (16e0 <__aeabi_dadd+0x380>)
    1506:	4286      	cmp	r6, r0
    1508:	d0ae      	beq.n	1468 <__aeabi_dadd+0x108>
    150a:	2080      	movs	r0, #128	; 0x80
    150c:	0400      	lsls	r0, r0, #16
    150e:	4301      	orrs	r1, r0
    1510:	4653      	mov	r3, sl
    1512:	2b38      	cmp	r3, #56	; 0x38
    1514:	dc00      	bgt.n	1518 <__aeabi_dadd+0x1b8>
    1516:	e0e9      	b.n	16ec <__aeabi_dadd+0x38c>
    1518:	430a      	orrs	r2, r1
    151a:	1e51      	subs	r1, r2, #1
    151c:	418a      	sbcs	r2, r1
    151e:	2100      	movs	r1, #0
    1520:	19d2      	adds	r2, r2, r7
    1522:	42ba      	cmp	r2, r7
    1524:	41bf      	sbcs	r7, r7
    1526:	1909      	adds	r1, r1, r4
    1528:	427c      	negs	r4, r7
    152a:	0017      	movs	r7, r2
    152c:	190c      	adds	r4, r1, r4
    152e:	0223      	lsls	r3, r4, #8
    1530:	d5d3      	bpl.n	14da <__aeabi_dadd+0x17a>
    1532:	4b6b      	ldr	r3, [pc, #428]	; (16e0 <__aeabi_dadd+0x380>)
    1534:	3601      	adds	r6, #1
    1536:	429e      	cmp	r6, r3
    1538:	d100      	bne.n	153c <__aeabi_dadd+0x1dc>
    153a:	e13a      	b.n	17b2 <__aeabi_dadd+0x452>
    153c:	2001      	movs	r0, #1
    153e:	4b69      	ldr	r3, [pc, #420]	; (16e4 <__aeabi_dadd+0x384>)
    1540:	401c      	ands	r4, r3
    1542:	087b      	lsrs	r3, r7, #1
    1544:	4007      	ands	r7, r0
    1546:	431f      	orrs	r7, r3
    1548:	07e0      	lsls	r0, r4, #31
    154a:	4307      	orrs	r7, r0
    154c:	0864      	lsrs	r4, r4, #1
    154e:	e78b      	b.n	1468 <__aeabi_dadd+0x108>
    1550:	0023      	movs	r3, r4
    1552:	433b      	orrs	r3, r7
    1554:	d100      	bne.n	1558 <__aeabi_dadd+0x1f8>
    1556:	e1cb      	b.n	18f0 <__aeabi_dadd+0x590>
    1558:	2280      	movs	r2, #128	; 0x80
    155a:	0312      	lsls	r2, r2, #12
    155c:	4314      	orrs	r4, r2
    155e:	0324      	lsls	r4, r4, #12
    1560:	0b24      	lsrs	r4, r4, #12
    1562:	e79e      	b.n	14a2 <__aeabi_dadd+0x142>
    1564:	002e      	movs	r6, r5
    1566:	e77f      	b.n	1468 <__aeabi_dadd+0x108>
    1568:	0008      	movs	r0, r1
    156a:	4310      	orrs	r0, r2
    156c:	d100      	bne.n	1570 <__aeabi_dadd+0x210>
    156e:	e0b4      	b.n	16da <__aeabi_dadd+0x37a>
    1570:	1e58      	subs	r0, r3, #1
    1572:	2800      	cmp	r0, #0
    1574:	d000      	beq.n	1578 <__aeabi_dadd+0x218>
    1576:	e0de      	b.n	1736 <__aeabi_dadd+0x3d6>
    1578:	18ba      	adds	r2, r7, r2
    157a:	42ba      	cmp	r2, r7
    157c:	419b      	sbcs	r3, r3
    157e:	1864      	adds	r4, r4, r1
    1580:	425b      	negs	r3, r3
    1582:	18e4      	adds	r4, r4, r3
    1584:	0017      	movs	r7, r2
    1586:	2601      	movs	r6, #1
    1588:	0223      	lsls	r3, r4, #8
    158a:	d5a6      	bpl.n	14da <__aeabi_dadd+0x17a>
    158c:	2602      	movs	r6, #2
    158e:	e7d5      	b.n	153c <__aeabi_dadd+0x1dc>
    1590:	2d00      	cmp	r5, #0
    1592:	d16e      	bne.n	1672 <__aeabi_dadd+0x312>
    1594:	1c70      	adds	r0, r6, #1
    1596:	0540      	lsls	r0, r0, #21
    1598:	0d40      	lsrs	r0, r0, #21
    159a:	2801      	cmp	r0, #1
    159c:	dc00      	bgt.n	15a0 <__aeabi_dadd+0x240>
    159e:	e0f9      	b.n	1794 <__aeabi_dadd+0x434>
    15a0:	1ab8      	subs	r0, r7, r2
    15a2:	4684      	mov	ip, r0
    15a4:	4287      	cmp	r7, r0
    15a6:	4180      	sbcs	r0, r0
    15a8:	1ae5      	subs	r5, r4, r3
    15aa:	4240      	negs	r0, r0
    15ac:	1a2d      	subs	r5, r5, r0
    15ae:	0228      	lsls	r0, r5, #8
    15b0:	d400      	bmi.n	15b4 <__aeabi_dadd+0x254>
    15b2:	e089      	b.n	16c8 <__aeabi_dadd+0x368>
    15b4:	1bd7      	subs	r7, r2, r7
    15b6:	42ba      	cmp	r2, r7
    15b8:	4192      	sbcs	r2, r2
    15ba:	1b1c      	subs	r4, r3, r4
    15bc:	4252      	negs	r2, r2
    15be:	1aa5      	subs	r5, r4, r2
    15c0:	46d8      	mov	r8, fp
    15c2:	e729      	b.n	1418 <__aeabi_dadd+0xb8>
    15c4:	4645      	mov	r5, r8
    15c6:	2400      	movs	r4, #0
    15c8:	2700      	movs	r7, #0
    15ca:	e76a      	b.n	14a2 <__aeabi_dadd+0x142>
    15cc:	4c45      	ldr	r4, [pc, #276]	; (16e4 <__aeabi_dadd+0x384>)
    15ce:	1af6      	subs	r6, r6, r3
    15d0:	402c      	ands	r4, r5
    15d2:	e749      	b.n	1468 <__aeabi_dadd+0x108>
    15d4:	003d      	movs	r5, r7
    15d6:	3828      	subs	r0, #40	; 0x28
    15d8:	4085      	lsls	r5, r0
    15da:	2700      	movs	r7, #0
    15dc:	e72e      	b.n	143c <__aeabi_dadd+0xdc>
    15de:	0038      	movs	r0, r7
    15e0:	f001 fb04 	bl	2bec <__clzsi2>
    15e4:	3020      	adds	r0, #32
    15e6:	e71d      	b.n	1424 <__aeabi_dadd+0xc4>
    15e8:	430a      	orrs	r2, r1
    15ea:	1e51      	subs	r1, r2, #1
    15ec:	418a      	sbcs	r2, r1
    15ee:	2100      	movs	r1, #0
    15f0:	e707      	b.n	1402 <__aeabi_dadd+0xa2>
    15f2:	2b00      	cmp	r3, #0
    15f4:	d000      	beq.n	15f8 <__aeabi_dadd+0x298>
    15f6:	e0f3      	b.n	17e0 <__aeabi_dadd+0x480>
    15f8:	1c70      	adds	r0, r6, #1
    15fa:	0543      	lsls	r3, r0, #21
    15fc:	0d5b      	lsrs	r3, r3, #21
    15fe:	2b01      	cmp	r3, #1
    1600:	dc00      	bgt.n	1604 <__aeabi_dadd+0x2a4>
    1602:	e0ad      	b.n	1760 <__aeabi_dadd+0x400>
    1604:	4b36      	ldr	r3, [pc, #216]	; (16e0 <__aeabi_dadd+0x380>)
    1606:	4298      	cmp	r0, r3
    1608:	d100      	bne.n	160c <__aeabi_dadd+0x2ac>
    160a:	e0d1      	b.n	17b0 <__aeabi_dadd+0x450>
    160c:	18ba      	adds	r2, r7, r2
    160e:	42ba      	cmp	r2, r7
    1610:	41bf      	sbcs	r7, r7
    1612:	1864      	adds	r4, r4, r1
    1614:	427f      	negs	r7, r7
    1616:	19e4      	adds	r4, r4, r7
    1618:	07e7      	lsls	r7, r4, #31
    161a:	0852      	lsrs	r2, r2, #1
    161c:	4317      	orrs	r7, r2
    161e:	0864      	lsrs	r4, r4, #1
    1620:	0006      	movs	r6, r0
    1622:	e721      	b.n	1468 <__aeabi_dadd+0x108>
    1624:	482e      	ldr	r0, [pc, #184]	; (16e0 <__aeabi_dadd+0x380>)
    1626:	4285      	cmp	r5, r0
    1628:	d100      	bne.n	162c <__aeabi_dadd+0x2cc>
    162a:	e093      	b.n	1754 <__aeabi_dadd+0x3f4>
    162c:	001d      	movs	r5, r3
    162e:	e6d0      	b.n	13d2 <__aeabi_dadd+0x72>
    1630:	0029      	movs	r1, r5
    1632:	3e1f      	subs	r6, #31
    1634:	40f1      	lsrs	r1, r6
    1636:	2b20      	cmp	r3, #32
    1638:	d100      	bne.n	163c <__aeabi_dadd+0x2dc>
    163a:	e08d      	b.n	1758 <__aeabi_dadd+0x3f8>
    163c:	2240      	movs	r2, #64	; 0x40
    163e:	1ad3      	subs	r3, r2, r3
    1640:	409d      	lsls	r5, r3
    1642:	432f      	orrs	r7, r5
    1644:	1e7d      	subs	r5, r7, #1
    1646:	41af      	sbcs	r7, r5
    1648:	2400      	movs	r4, #0
    164a:	430f      	orrs	r7, r1
    164c:	2600      	movs	r6, #0
    164e:	e744      	b.n	14da <__aeabi_dadd+0x17a>
    1650:	002b      	movs	r3, r5
    1652:	0008      	movs	r0, r1
    1654:	3b20      	subs	r3, #32
    1656:	40d8      	lsrs	r0, r3
    1658:	0003      	movs	r3, r0
    165a:	2d20      	cmp	r5, #32
    165c:	d100      	bne.n	1660 <__aeabi_dadd+0x300>
    165e:	e07d      	b.n	175c <__aeabi_dadd+0x3fc>
    1660:	2040      	movs	r0, #64	; 0x40
    1662:	1b45      	subs	r5, r0, r5
    1664:	40a9      	lsls	r1, r5
    1666:	430a      	orrs	r2, r1
    1668:	1e51      	subs	r1, r2, #1
    166a:	418a      	sbcs	r2, r1
    166c:	2100      	movs	r1, #0
    166e:	431a      	orrs	r2, r3
    1670:	e6c7      	b.n	1402 <__aeabi_dadd+0xa2>
    1672:	2e00      	cmp	r6, #0
    1674:	d050      	beq.n	1718 <__aeabi_dadd+0x3b8>
    1676:	4e1a      	ldr	r6, [pc, #104]	; (16e0 <__aeabi_dadd+0x380>)
    1678:	42b0      	cmp	r0, r6
    167a:	d057      	beq.n	172c <__aeabi_dadd+0x3cc>
    167c:	2680      	movs	r6, #128	; 0x80
    167e:	426b      	negs	r3, r5
    1680:	4699      	mov	r9, r3
    1682:	0436      	lsls	r6, r6, #16
    1684:	4334      	orrs	r4, r6
    1686:	464b      	mov	r3, r9
    1688:	2b38      	cmp	r3, #56	; 0x38
    168a:	dd00      	ble.n	168e <__aeabi_dadd+0x32e>
    168c:	e0d6      	b.n	183c <__aeabi_dadd+0x4dc>
    168e:	2b1f      	cmp	r3, #31
    1690:	dd00      	ble.n	1694 <__aeabi_dadd+0x334>
    1692:	e135      	b.n	1900 <__aeabi_dadd+0x5a0>
    1694:	2620      	movs	r6, #32
    1696:	1af5      	subs	r5, r6, r3
    1698:	0026      	movs	r6, r4
    169a:	40ae      	lsls	r6, r5
    169c:	46b2      	mov	sl, r6
    169e:	003e      	movs	r6, r7
    16a0:	40de      	lsrs	r6, r3
    16a2:	46ac      	mov	ip, r5
    16a4:	0035      	movs	r5, r6
    16a6:	4656      	mov	r6, sl
    16a8:	432e      	orrs	r6, r5
    16aa:	4665      	mov	r5, ip
    16ac:	40af      	lsls	r7, r5
    16ae:	1e7d      	subs	r5, r7, #1
    16b0:	41af      	sbcs	r7, r5
    16b2:	40dc      	lsrs	r4, r3
    16b4:	4337      	orrs	r7, r6
    16b6:	1bd7      	subs	r7, r2, r7
    16b8:	42ba      	cmp	r2, r7
    16ba:	4192      	sbcs	r2, r2
    16bc:	1b0c      	subs	r4, r1, r4
    16be:	4252      	negs	r2, r2
    16c0:	1aa4      	subs	r4, r4, r2
    16c2:	0006      	movs	r6, r0
    16c4:	46d8      	mov	r8, fp
    16c6:	e6a3      	b.n	1410 <__aeabi_dadd+0xb0>
    16c8:	4664      	mov	r4, ip
    16ca:	4667      	mov	r7, ip
    16cc:	432c      	orrs	r4, r5
    16ce:	d000      	beq.n	16d2 <__aeabi_dadd+0x372>
    16d0:	e6a2      	b.n	1418 <__aeabi_dadd+0xb8>
    16d2:	2500      	movs	r5, #0
    16d4:	2600      	movs	r6, #0
    16d6:	2700      	movs	r7, #0
    16d8:	e706      	b.n	14e8 <__aeabi_dadd+0x188>
    16da:	001e      	movs	r6, r3
    16dc:	e6c4      	b.n	1468 <__aeabi_dadd+0x108>
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	000007ff 	.word	0x000007ff
    16e4:	ff7fffff 	.word	0xff7fffff
    16e8:	800fffff 	.word	0x800fffff
    16ec:	2b1f      	cmp	r3, #31
    16ee:	dc63      	bgt.n	17b8 <__aeabi_dadd+0x458>
    16f0:	2020      	movs	r0, #32
    16f2:	1ac3      	subs	r3, r0, r3
    16f4:	0008      	movs	r0, r1
    16f6:	4098      	lsls	r0, r3
    16f8:	469c      	mov	ip, r3
    16fa:	4683      	mov	fp, r0
    16fc:	4653      	mov	r3, sl
    16fe:	0010      	movs	r0, r2
    1700:	40d8      	lsrs	r0, r3
    1702:	0003      	movs	r3, r0
    1704:	4658      	mov	r0, fp
    1706:	4318      	orrs	r0, r3
    1708:	4663      	mov	r3, ip
    170a:	409a      	lsls	r2, r3
    170c:	1e53      	subs	r3, r2, #1
    170e:	419a      	sbcs	r2, r3
    1710:	4653      	mov	r3, sl
    1712:	4302      	orrs	r2, r0
    1714:	40d9      	lsrs	r1, r3
    1716:	e703      	b.n	1520 <__aeabi_dadd+0x1c0>
    1718:	0026      	movs	r6, r4
    171a:	433e      	orrs	r6, r7
    171c:	d006      	beq.n	172c <__aeabi_dadd+0x3cc>
    171e:	43eb      	mvns	r3, r5
    1720:	4699      	mov	r9, r3
    1722:	2b00      	cmp	r3, #0
    1724:	d0c7      	beq.n	16b6 <__aeabi_dadd+0x356>
    1726:	4e94      	ldr	r6, [pc, #592]	; (1978 <__aeabi_dadd+0x618>)
    1728:	42b0      	cmp	r0, r6
    172a:	d1ac      	bne.n	1686 <__aeabi_dadd+0x326>
    172c:	000c      	movs	r4, r1
    172e:	0017      	movs	r7, r2
    1730:	0006      	movs	r6, r0
    1732:	46d8      	mov	r8, fp
    1734:	e698      	b.n	1468 <__aeabi_dadd+0x108>
    1736:	4b90      	ldr	r3, [pc, #576]	; (1978 <__aeabi_dadd+0x618>)
    1738:	459a      	cmp	sl, r3
    173a:	d00b      	beq.n	1754 <__aeabi_dadd+0x3f4>
    173c:	4682      	mov	sl, r0
    173e:	e6e7      	b.n	1510 <__aeabi_dadd+0x1b0>
    1740:	2800      	cmp	r0, #0
    1742:	d000      	beq.n	1746 <__aeabi_dadd+0x3e6>
    1744:	e09e      	b.n	1884 <__aeabi_dadd+0x524>
    1746:	0018      	movs	r0, r3
    1748:	4310      	orrs	r0, r2
    174a:	d100      	bne.n	174e <__aeabi_dadd+0x3ee>
    174c:	e0e9      	b.n	1922 <__aeabi_dadd+0x5c2>
    174e:	001c      	movs	r4, r3
    1750:	0017      	movs	r7, r2
    1752:	46d8      	mov	r8, fp
    1754:	4e88      	ldr	r6, [pc, #544]	; (1978 <__aeabi_dadd+0x618>)
    1756:	e687      	b.n	1468 <__aeabi_dadd+0x108>
    1758:	2500      	movs	r5, #0
    175a:	e772      	b.n	1642 <__aeabi_dadd+0x2e2>
    175c:	2100      	movs	r1, #0
    175e:	e782      	b.n	1666 <__aeabi_dadd+0x306>
    1760:	0023      	movs	r3, r4
    1762:	433b      	orrs	r3, r7
    1764:	2e00      	cmp	r6, #0
    1766:	d000      	beq.n	176a <__aeabi_dadd+0x40a>
    1768:	e0ab      	b.n	18c2 <__aeabi_dadd+0x562>
    176a:	2b00      	cmp	r3, #0
    176c:	d100      	bne.n	1770 <__aeabi_dadd+0x410>
    176e:	e0e7      	b.n	1940 <__aeabi_dadd+0x5e0>
    1770:	000b      	movs	r3, r1
    1772:	4313      	orrs	r3, r2
    1774:	d100      	bne.n	1778 <__aeabi_dadd+0x418>
    1776:	e677      	b.n	1468 <__aeabi_dadd+0x108>
    1778:	18ba      	adds	r2, r7, r2
    177a:	42ba      	cmp	r2, r7
    177c:	41bf      	sbcs	r7, r7
    177e:	1864      	adds	r4, r4, r1
    1780:	427f      	negs	r7, r7
    1782:	19e4      	adds	r4, r4, r7
    1784:	0223      	lsls	r3, r4, #8
    1786:	d400      	bmi.n	178a <__aeabi_dadd+0x42a>
    1788:	e0f2      	b.n	1970 <__aeabi_dadd+0x610>
    178a:	4b7c      	ldr	r3, [pc, #496]	; (197c <__aeabi_dadd+0x61c>)
    178c:	0017      	movs	r7, r2
    178e:	401c      	ands	r4, r3
    1790:	0006      	movs	r6, r0
    1792:	e669      	b.n	1468 <__aeabi_dadd+0x108>
    1794:	0020      	movs	r0, r4
    1796:	4338      	orrs	r0, r7
    1798:	2e00      	cmp	r6, #0
    179a:	d1d1      	bne.n	1740 <__aeabi_dadd+0x3e0>
    179c:	2800      	cmp	r0, #0
    179e:	d15b      	bne.n	1858 <__aeabi_dadd+0x4f8>
    17a0:	001c      	movs	r4, r3
    17a2:	4314      	orrs	r4, r2
    17a4:	d100      	bne.n	17a8 <__aeabi_dadd+0x448>
    17a6:	e0a8      	b.n	18fa <__aeabi_dadd+0x59a>
    17a8:	001c      	movs	r4, r3
    17aa:	0017      	movs	r7, r2
    17ac:	46d8      	mov	r8, fp
    17ae:	e65b      	b.n	1468 <__aeabi_dadd+0x108>
    17b0:	0006      	movs	r6, r0
    17b2:	2400      	movs	r4, #0
    17b4:	2700      	movs	r7, #0
    17b6:	e697      	b.n	14e8 <__aeabi_dadd+0x188>
    17b8:	4650      	mov	r0, sl
    17ba:	000b      	movs	r3, r1
    17bc:	3820      	subs	r0, #32
    17be:	40c3      	lsrs	r3, r0
    17c0:	4699      	mov	r9, r3
    17c2:	4653      	mov	r3, sl
    17c4:	2b20      	cmp	r3, #32
    17c6:	d100      	bne.n	17ca <__aeabi_dadd+0x46a>
    17c8:	e095      	b.n	18f6 <__aeabi_dadd+0x596>
    17ca:	2340      	movs	r3, #64	; 0x40
    17cc:	4650      	mov	r0, sl
    17ce:	1a1b      	subs	r3, r3, r0
    17d0:	4099      	lsls	r1, r3
    17d2:	430a      	orrs	r2, r1
    17d4:	1e51      	subs	r1, r2, #1
    17d6:	418a      	sbcs	r2, r1
    17d8:	464b      	mov	r3, r9
    17da:	2100      	movs	r1, #0
    17dc:	431a      	orrs	r2, r3
    17de:	e69f      	b.n	1520 <__aeabi_dadd+0x1c0>
    17e0:	2e00      	cmp	r6, #0
    17e2:	d130      	bne.n	1846 <__aeabi_dadd+0x4e6>
    17e4:	0026      	movs	r6, r4
    17e6:	433e      	orrs	r6, r7
    17e8:	d067      	beq.n	18ba <__aeabi_dadd+0x55a>
    17ea:	43db      	mvns	r3, r3
    17ec:	469a      	mov	sl, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d01c      	beq.n	182c <__aeabi_dadd+0x4cc>
    17f2:	4e61      	ldr	r6, [pc, #388]	; (1978 <__aeabi_dadd+0x618>)
    17f4:	42b0      	cmp	r0, r6
    17f6:	d060      	beq.n	18ba <__aeabi_dadd+0x55a>
    17f8:	4653      	mov	r3, sl
    17fa:	2b38      	cmp	r3, #56	; 0x38
    17fc:	dd00      	ble.n	1800 <__aeabi_dadd+0x4a0>
    17fe:	e096      	b.n	192e <__aeabi_dadd+0x5ce>
    1800:	2b1f      	cmp	r3, #31
    1802:	dd00      	ble.n	1806 <__aeabi_dadd+0x4a6>
    1804:	e09f      	b.n	1946 <__aeabi_dadd+0x5e6>
    1806:	2620      	movs	r6, #32
    1808:	1af3      	subs	r3, r6, r3
    180a:	0026      	movs	r6, r4
    180c:	409e      	lsls	r6, r3
    180e:	469c      	mov	ip, r3
    1810:	46b3      	mov	fp, r6
    1812:	4653      	mov	r3, sl
    1814:	003e      	movs	r6, r7
    1816:	40de      	lsrs	r6, r3
    1818:	0033      	movs	r3, r6
    181a:	465e      	mov	r6, fp
    181c:	431e      	orrs	r6, r3
    181e:	4663      	mov	r3, ip
    1820:	409f      	lsls	r7, r3
    1822:	1e7b      	subs	r3, r7, #1
    1824:	419f      	sbcs	r7, r3
    1826:	4653      	mov	r3, sl
    1828:	40dc      	lsrs	r4, r3
    182a:	4337      	orrs	r7, r6
    182c:	18bf      	adds	r7, r7, r2
    182e:	4297      	cmp	r7, r2
    1830:	4192      	sbcs	r2, r2
    1832:	1864      	adds	r4, r4, r1
    1834:	4252      	negs	r2, r2
    1836:	18a4      	adds	r4, r4, r2
    1838:	0006      	movs	r6, r0
    183a:	e678      	b.n	152e <__aeabi_dadd+0x1ce>
    183c:	4327      	orrs	r7, r4
    183e:	1e7c      	subs	r4, r7, #1
    1840:	41a7      	sbcs	r7, r4
    1842:	2400      	movs	r4, #0
    1844:	e737      	b.n	16b6 <__aeabi_dadd+0x356>
    1846:	4e4c      	ldr	r6, [pc, #304]	; (1978 <__aeabi_dadd+0x618>)
    1848:	42b0      	cmp	r0, r6
    184a:	d036      	beq.n	18ba <__aeabi_dadd+0x55a>
    184c:	2680      	movs	r6, #128	; 0x80
    184e:	425b      	negs	r3, r3
    1850:	0436      	lsls	r6, r6, #16
    1852:	469a      	mov	sl, r3
    1854:	4334      	orrs	r4, r6
    1856:	e7cf      	b.n	17f8 <__aeabi_dadd+0x498>
    1858:	0018      	movs	r0, r3
    185a:	4310      	orrs	r0, r2
    185c:	d100      	bne.n	1860 <__aeabi_dadd+0x500>
    185e:	e603      	b.n	1468 <__aeabi_dadd+0x108>
    1860:	1ab8      	subs	r0, r7, r2
    1862:	4684      	mov	ip, r0
    1864:	4567      	cmp	r7, ip
    1866:	41ad      	sbcs	r5, r5
    1868:	1ae0      	subs	r0, r4, r3
    186a:	426d      	negs	r5, r5
    186c:	1b40      	subs	r0, r0, r5
    186e:	0205      	lsls	r5, r0, #8
    1870:	d400      	bmi.n	1874 <__aeabi_dadd+0x514>
    1872:	e62c      	b.n	14ce <__aeabi_dadd+0x16e>
    1874:	1bd7      	subs	r7, r2, r7
    1876:	42ba      	cmp	r2, r7
    1878:	4192      	sbcs	r2, r2
    187a:	1b1c      	subs	r4, r3, r4
    187c:	4252      	negs	r2, r2
    187e:	1aa4      	subs	r4, r4, r2
    1880:	46d8      	mov	r8, fp
    1882:	e5f1      	b.n	1468 <__aeabi_dadd+0x108>
    1884:	0018      	movs	r0, r3
    1886:	4310      	orrs	r0, r2
    1888:	d100      	bne.n	188c <__aeabi_dadd+0x52c>
    188a:	e763      	b.n	1754 <__aeabi_dadd+0x3f4>
    188c:	08f8      	lsrs	r0, r7, #3
    188e:	0767      	lsls	r7, r4, #29
    1890:	4307      	orrs	r7, r0
    1892:	2080      	movs	r0, #128	; 0x80
    1894:	08e4      	lsrs	r4, r4, #3
    1896:	0300      	lsls	r0, r0, #12
    1898:	4204      	tst	r4, r0
    189a:	d008      	beq.n	18ae <__aeabi_dadd+0x54e>
    189c:	08dd      	lsrs	r5, r3, #3
    189e:	4205      	tst	r5, r0
    18a0:	d105      	bne.n	18ae <__aeabi_dadd+0x54e>
    18a2:	08d2      	lsrs	r2, r2, #3
    18a4:	0759      	lsls	r1, r3, #29
    18a6:	4311      	orrs	r1, r2
    18a8:	000f      	movs	r7, r1
    18aa:	002c      	movs	r4, r5
    18ac:	46d8      	mov	r8, fp
    18ae:	0f7b      	lsrs	r3, r7, #29
    18b0:	00e4      	lsls	r4, r4, #3
    18b2:	431c      	orrs	r4, r3
    18b4:	00ff      	lsls	r7, r7, #3
    18b6:	4e30      	ldr	r6, [pc, #192]	; (1978 <__aeabi_dadd+0x618>)
    18b8:	e5d6      	b.n	1468 <__aeabi_dadd+0x108>
    18ba:	000c      	movs	r4, r1
    18bc:	0017      	movs	r7, r2
    18be:	0006      	movs	r6, r0
    18c0:	e5d2      	b.n	1468 <__aeabi_dadd+0x108>
    18c2:	2b00      	cmp	r3, #0
    18c4:	d038      	beq.n	1938 <__aeabi_dadd+0x5d8>
    18c6:	000b      	movs	r3, r1
    18c8:	4313      	orrs	r3, r2
    18ca:	d100      	bne.n	18ce <__aeabi_dadd+0x56e>
    18cc:	e742      	b.n	1754 <__aeabi_dadd+0x3f4>
    18ce:	08f8      	lsrs	r0, r7, #3
    18d0:	0767      	lsls	r7, r4, #29
    18d2:	4307      	orrs	r7, r0
    18d4:	2080      	movs	r0, #128	; 0x80
    18d6:	08e4      	lsrs	r4, r4, #3
    18d8:	0300      	lsls	r0, r0, #12
    18da:	4204      	tst	r4, r0
    18dc:	d0e7      	beq.n	18ae <__aeabi_dadd+0x54e>
    18de:	08cb      	lsrs	r3, r1, #3
    18e0:	4203      	tst	r3, r0
    18e2:	d1e4      	bne.n	18ae <__aeabi_dadd+0x54e>
    18e4:	08d2      	lsrs	r2, r2, #3
    18e6:	0749      	lsls	r1, r1, #29
    18e8:	4311      	orrs	r1, r2
    18ea:	000f      	movs	r7, r1
    18ec:	001c      	movs	r4, r3
    18ee:	e7de      	b.n	18ae <__aeabi_dadd+0x54e>
    18f0:	2700      	movs	r7, #0
    18f2:	2400      	movs	r4, #0
    18f4:	e5d5      	b.n	14a2 <__aeabi_dadd+0x142>
    18f6:	2100      	movs	r1, #0
    18f8:	e76b      	b.n	17d2 <__aeabi_dadd+0x472>
    18fa:	2500      	movs	r5, #0
    18fc:	2700      	movs	r7, #0
    18fe:	e5f3      	b.n	14e8 <__aeabi_dadd+0x188>
    1900:	464e      	mov	r6, r9
    1902:	0025      	movs	r5, r4
    1904:	3e20      	subs	r6, #32
    1906:	40f5      	lsrs	r5, r6
    1908:	464b      	mov	r3, r9
    190a:	002e      	movs	r6, r5
    190c:	2b20      	cmp	r3, #32
    190e:	d02d      	beq.n	196c <__aeabi_dadd+0x60c>
    1910:	2540      	movs	r5, #64	; 0x40
    1912:	1aed      	subs	r5, r5, r3
    1914:	40ac      	lsls	r4, r5
    1916:	4327      	orrs	r7, r4
    1918:	1e7c      	subs	r4, r7, #1
    191a:	41a7      	sbcs	r7, r4
    191c:	2400      	movs	r4, #0
    191e:	4337      	orrs	r7, r6
    1920:	e6c9      	b.n	16b6 <__aeabi_dadd+0x356>
    1922:	2480      	movs	r4, #128	; 0x80
    1924:	2500      	movs	r5, #0
    1926:	0324      	lsls	r4, r4, #12
    1928:	4e13      	ldr	r6, [pc, #76]	; (1978 <__aeabi_dadd+0x618>)
    192a:	2700      	movs	r7, #0
    192c:	e5dc      	b.n	14e8 <__aeabi_dadd+0x188>
    192e:	4327      	orrs	r7, r4
    1930:	1e7c      	subs	r4, r7, #1
    1932:	41a7      	sbcs	r7, r4
    1934:	2400      	movs	r4, #0
    1936:	e779      	b.n	182c <__aeabi_dadd+0x4cc>
    1938:	000c      	movs	r4, r1
    193a:	0017      	movs	r7, r2
    193c:	4e0e      	ldr	r6, [pc, #56]	; (1978 <__aeabi_dadd+0x618>)
    193e:	e593      	b.n	1468 <__aeabi_dadd+0x108>
    1940:	000c      	movs	r4, r1
    1942:	0017      	movs	r7, r2
    1944:	e590      	b.n	1468 <__aeabi_dadd+0x108>
    1946:	4656      	mov	r6, sl
    1948:	0023      	movs	r3, r4
    194a:	3e20      	subs	r6, #32
    194c:	40f3      	lsrs	r3, r6
    194e:	4699      	mov	r9, r3
    1950:	4653      	mov	r3, sl
    1952:	2b20      	cmp	r3, #32
    1954:	d00e      	beq.n	1974 <__aeabi_dadd+0x614>
    1956:	2340      	movs	r3, #64	; 0x40
    1958:	4656      	mov	r6, sl
    195a:	1b9b      	subs	r3, r3, r6
    195c:	409c      	lsls	r4, r3
    195e:	4327      	orrs	r7, r4
    1960:	1e7c      	subs	r4, r7, #1
    1962:	41a7      	sbcs	r7, r4
    1964:	464b      	mov	r3, r9
    1966:	2400      	movs	r4, #0
    1968:	431f      	orrs	r7, r3
    196a:	e75f      	b.n	182c <__aeabi_dadd+0x4cc>
    196c:	2400      	movs	r4, #0
    196e:	e7d2      	b.n	1916 <__aeabi_dadd+0x5b6>
    1970:	0017      	movs	r7, r2
    1972:	e5b2      	b.n	14da <__aeabi_dadd+0x17a>
    1974:	2400      	movs	r4, #0
    1976:	e7f2      	b.n	195e <__aeabi_dadd+0x5fe>
    1978:	000007ff 	.word	0x000007ff
    197c:	ff7fffff 	.word	0xff7fffff

00001980 <__aeabi_ddiv>:
    1980:	b5f0      	push	{r4, r5, r6, r7, lr}
    1982:	4657      	mov	r7, sl
    1984:	4645      	mov	r5, r8
    1986:	46de      	mov	lr, fp
    1988:	464e      	mov	r6, r9
    198a:	b5e0      	push	{r5, r6, r7, lr}
    198c:	004c      	lsls	r4, r1, #1
    198e:	030e      	lsls	r6, r1, #12
    1990:	b087      	sub	sp, #28
    1992:	4683      	mov	fp, r0
    1994:	4692      	mov	sl, r2
    1996:	001d      	movs	r5, r3
    1998:	4680      	mov	r8, r0
    199a:	0b36      	lsrs	r6, r6, #12
    199c:	0d64      	lsrs	r4, r4, #21
    199e:	0fcf      	lsrs	r7, r1, #31
    19a0:	2c00      	cmp	r4, #0
    19a2:	d04f      	beq.n	1a44 <__aeabi_ddiv+0xc4>
    19a4:	4b6f      	ldr	r3, [pc, #444]	; (1b64 <__aeabi_ddiv+0x1e4>)
    19a6:	429c      	cmp	r4, r3
    19a8:	d035      	beq.n	1a16 <__aeabi_ddiv+0x96>
    19aa:	2380      	movs	r3, #128	; 0x80
    19ac:	0f42      	lsrs	r2, r0, #29
    19ae:	041b      	lsls	r3, r3, #16
    19b0:	00f6      	lsls	r6, r6, #3
    19b2:	4313      	orrs	r3, r2
    19b4:	4333      	orrs	r3, r6
    19b6:	4699      	mov	r9, r3
    19b8:	00c3      	lsls	r3, r0, #3
    19ba:	4698      	mov	r8, r3
    19bc:	4b6a      	ldr	r3, [pc, #424]	; (1b68 <__aeabi_ddiv+0x1e8>)
    19be:	2600      	movs	r6, #0
    19c0:	469c      	mov	ip, r3
    19c2:	2300      	movs	r3, #0
    19c4:	4464      	add	r4, ip
    19c6:	9303      	str	r3, [sp, #12]
    19c8:	032b      	lsls	r3, r5, #12
    19ca:	0b1b      	lsrs	r3, r3, #12
    19cc:	469b      	mov	fp, r3
    19ce:	006b      	lsls	r3, r5, #1
    19d0:	0fed      	lsrs	r5, r5, #31
    19d2:	4650      	mov	r0, sl
    19d4:	0d5b      	lsrs	r3, r3, #21
    19d6:	9501      	str	r5, [sp, #4]
    19d8:	d05e      	beq.n	1a98 <__aeabi_ddiv+0x118>
    19da:	4a62      	ldr	r2, [pc, #392]	; (1b64 <__aeabi_ddiv+0x1e4>)
    19dc:	4293      	cmp	r3, r2
    19de:	d053      	beq.n	1a88 <__aeabi_ddiv+0x108>
    19e0:	465a      	mov	r2, fp
    19e2:	00d1      	lsls	r1, r2, #3
    19e4:	2280      	movs	r2, #128	; 0x80
    19e6:	0f40      	lsrs	r0, r0, #29
    19e8:	0412      	lsls	r2, r2, #16
    19ea:	4302      	orrs	r2, r0
    19ec:	430a      	orrs	r2, r1
    19ee:	4693      	mov	fp, r2
    19f0:	4652      	mov	r2, sl
    19f2:	00d1      	lsls	r1, r2, #3
    19f4:	4a5c      	ldr	r2, [pc, #368]	; (1b68 <__aeabi_ddiv+0x1e8>)
    19f6:	4694      	mov	ip, r2
    19f8:	2200      	movs	r2, #0
    19fa:	4463      	add	r3, ip
    19fc:	0038      	movs	r0, r7
    19fe:	4068      	eors	r0, r5
    1a00:	4684      	mov	ip, r0
    1a02:	9002      	str	r0, [sp, #8]
    1a04:	1ae4      	subs	r4, r4, r3
    1a06:	4316      	orrs	r6, r2
    1a08:	2e0f      	cmp	r6, #15
    1a0a:	d900      	bls.n	1a0e <__aeabi_ddiv+0x8e>
    1a0c:	e0b4      	b.n	1b78 <__aeabi_ddiv+0x1f8>
    1a0e:	4b57      	ldr	r3, [pc, #348]	; (1b6c <__aeabi_ddiv+0x1ec>)
    1a10:	00b6      	lsls	r6, r6, #2
    1a12:	599b      	ldr	r3, [r3, r6]
    1a14:	469f      	mov	pc, r3
    1a16:	0003      	movs	r3, r0
    1a18:	4333      	orrs	r3, r6
    1a1a:	4699      	mov	r9, r3
    1a1c:	d16c      	bne.n	1af8 <__aeabi_ddiv+0x178>
    1a1e:	2300      	movs	r3, #0
    1a20:	4698      	mov	r8, r3
    1a22:	3302      	adds	r3, #2
    1a24:	2608      	movs	r6, #8
    1a26:	9303      	str	r3, [sp, #12]
    1a28:	e7ce      	b.n	19c8 <__aeabi_ddiv+0x48>
    1a2a:	46cb      	mov	fp, r9
    1a2c:	4641      	mov	r1, r8
    1a2e:	9a03      	ldr	r2, [sp, #12]
    1a30:	9701      	str	r7, [sp, #4]
    1a32:	2a02      	cmp	r2, #2
    1a34:	d165      	bne.n	1b02 <__aeabi_ddiv+0x182>
    1a36:	9b01      	ldr	r3, [sp, #4]
    1a38:	4c4a      	ldr	r4, [pc, #296]	; (1b64 <__aeabi_ddiv+0x1e4>)
    1a3a:	469c      	mov	ip, r3
    1a3c:	2300      	movs	r3, #0
    1a3e:	2200      	movs	r2, #0
    1a40:	4698      	mov	r8, r3
    1a42:	e06b      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1a44:	0003      	movs	r3, r0
    1a46:	4333      	orrs	r3, r6
    1a48:	4699      	mov	r9, r3
    1a4a:	d04e      	beq.n	1aea <__aeabi_ddiv+0x16a>
    1a4c:	2e00      	cmp	r6, #0
    1a4e:	d100      	bne.n	1a52 <__aeabi_ddiv+0xd2>
    1a50:	e1bc      	b.n	1dcc <__aeabi_ddiv+0x44c>
    1a52:	0030      	movs	r0, r6
    1a54:	f001 f8ca 	bl	2bec <__clzsi2>
    1a58:	0003      	movs	r3, r0
    1a5a:	3b0b      	subs	r3, #11
    1a5c:	2b1c      	cmp	r3, #28
    1a5e:	dd00      	ble.n	1a62 <__aeabi_ddiv+0xe2>
    1a60:	e1ac      	b.n	1dbc <__aeabi_ddiv+0x43c>
    1a62:	221d      	movs	r2, #29
    1a64:	1ad3      	subs	r3, r2, r3
    1a66:	465a      	mov	r2, fp
    1a68:	0001      	movs	r1, r0
    1a6a:	40da      	lsrs	r2, r3
    1a6c:	3908      	subs	r1, #8
    1a6e:	408e      	lsls	r6, r1
    1a70:	0013      	movs	r3, r2
    1a72:	4333      	orrs	r3, r6
    1a74:	4699      	mov	r9, r3
    1a76:	465b      	mov	r3, fp
    1a78:	408b      	lsls	r3, r1
    1a7a:	4698      	mov	r8, r3
    1a7c:	2300      	movs	r3, #0
    1a7e:	4c3c      	ldr	r4, [pc, #240]	; (1b70 <__aeabi_ddiv+0x1f0>)
    1a80:	2600      	movs	r6, #0
    1a82:	1a24      	subs	r4, r4, r0
    1a84:	9303      	str	r3, [sp, #12]
    1a86:	e79f      	b.n	19c8 <__aeabi_ddiv+0x48>
    1a88:	4651      	mov	r1, sl
    1a8a:	465a      	mov	r2, fp
    1a8c:	4311      	orrs	r1, r2
    1a8e:	d129      	bne.n	1ae4 <__aeabi_ddiv+0x164>
    1a90:	2200      	movs	r2, #0
    1a92:	4693      	mov	fp, r2
    1a94:	3202      	adds	r2, #2
    1a96:	e7b1      	b.n	19fc <__aeabi_ddiv+0x7c>
    1a98:	4659      	mov	r1, fp
    1a9a:	4301      	orrs	r1, r0
    1a9c:	d01e      	beq.n	1adc <__aeabi_ddiv+0x15c>
    1a9e:	465b      	mov	r3, fp
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d100      	bne.n	1aa6 <__aeabi_ddiv+0x126>
    1aa4:	e19e      	b.n	1de4 <__aeabi_ddiv+0x464>
    1aa6:	4658      	mov	r0, fp
    1aa8:	f001 f8a0 	bl	2bec <__clzsi2>
    1aac:	0003      	movs	r3, r0
    1aae:	3b0b      	subs	r3, #11
    1ab0:	2b1c      	cmp	r3, #28
    1ab2:	dd00      	ble.n	1ab6 <__aeabi_ddiv+0x136>
    1ab4:	e18f      	b.n	1dd6 <__aeabi_ddiv+0x456>
    1ab6:	0002      	movs	r2, r0
    1ab8:	4659      	mov	r1, fp
    1aba:	3a08      	subs	r2, #8
    1abc:	4091      	lsls	r1, r2
    1abe:	468b      	mov	fp, r1
    1ac0:	211d      	movs	r1, #29
    1ac2:	1acb      	subs	r3, r1, r3
    1ac4:	4651      	mov	r1, sl
    1ac6:	40d9      	lsrs	r1, r3
    1ac8:	000b      	movs	r3, r1
    1aca:	4659      	mov	r1, fp
    1acc:	430b      	orrs	r3, r1
    1ace:	4651      	mov	r1, sl
    1ad0:	469b      	mov	fp, r3
    1ad2:	4091      	lsls	r1, r2
    1ad4:	4b26      	ldr	r3, [pc, #152]	; (1b70 <__aeabi_ddiv+0x1f0>)
    1ad6:	2200      	movs	r2, #0
    1ad8:	1a1b      	subs	r3, r3, r0
    1ada:	e78f      	b.n	19fc <__aeabi_ddiv+0x7c>
    1adc:	2300      	movs	r3, #0
    1ade:	2201      	movs	r2, #1
    1ae0:	469b      	mov	fp, r3
    1ae2:	e78b      	b.n	19fc <__aeabi_ddiv+0x7c>
    1ae4:	4651      	mov	r1, sl
    1ae6:	2203      	movs	r2, #3
    1ae8:	e788      	b.n	19fc <__aeabi_ddiv+0x7c>
    1aea:	2300      	movs	r3, #0
    1aec:	4698      	mov	r8, r3
    1aee:	3301      	adds	r3, #1
    1af0:	2604      	movs	r6, #4
    1af2:	2400      	movs	r4, #0
    1af4:	9303      	str	r3, [sp, #12]
    1af6:	e767      	b.n	19c8 <__aeabi_ddiv+0x48>
    1af8:	2303      	movs	r3, #3
    1afa:	46b1      	mov	r9, r6
    1afc:	9303      	str	r3, [sp, #12]
    1afe:	260c      	movs	r6, #12
    1b00:	e762      	b.n	19c8 <__aeabi_ddiv+0x48>
    1b02:	2a03      	cmp	r2, #3
    1b04:	d100      	bne.n	1b08 <__aeabi_ddiv+0x188>
    1b06:	e25c      	b.n	1fc2 <__aeabi_ddiv+0x642>
    1b08:	9b01      	ldr	r3, [sp, #4]
    1b0a:	2a01      	cmp	r2, #1
    1b0c:	d000      	beq.n	1b10 <__aeabi_ddiv+0x190>
    1b0e:	e1e4      	b.n	1eda <__aeabi_ddiv+0x55a>
    1b10:	4013      	ands	r3, r2
    1b12:	469c      	mov	ip, r3
    1b14:	2300      	movs	r3, #0
    1b16:	2400      	movs	r4, #0
    1b18:	2200      	movs	r2, #0
    1b1a:	4698      	mov	r8, r3
    1b1c:	2100      	movs	r1, #0
    1b1e:	0312      	lsls	r2, r2, #12
    1b20:	0b13      	lsrs	r3, r2, #12
    1b22:	0d0a      	lsrs	r2, r1, #20
    1b24:	0512      	lsls	r2, r2, #20
    1b26:	431a      	orrs	r2, r3
    1b28:	0523      	lsls	r3, r4, #20
    1b2a:	4c12      	ldr	r4, [pc, #72]	; (1b74 <__aeabi_ddiv+0x1f4>)
    1b2c:	4640      	mov	r0, r8
    1b2e:	4022      	ands	r2, r4
    1b30:	4313      	orrs	r3, r2
    1b32:	4662      	mov	r2, ip
    1b34:	005b      	lsls	r3, r3, #1
    1b36:	07d2      	lsls	r2, r2, #31
    1b38:	085b      	lsrs	r3, r3, #1
    1b3a:	4313      	orrs	r3, r2
    1b3c:	0019      	movs	r1, r3
    1b3e:	b007      	add	sp, #28
    1b40:	bc3c      	pop	{r2, r3, r4, r5}
    1b42:	4690      	mov	r8, r2
    1b44:	4699      	mov	r9, r3
    1b46:	46a2      	mov	sl, r4
    1b48:	46ab      	mov	fp, r5
    1b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b4c:	2300      	movs	r3, #0
    1b4e:	2280      	movs	r2, #128	; 0x80
    1b50:	469c      	mov	ip, r3
    1b52:	0312      	lsls	r2, r2, #12
    1b54:	4698      	mov	r8, r3
    1b56:	4c03      	ldr	r4, [pc, #12]	; (1b64 <__aeabi_ddiv+0x1e4>)
    1b58:	e7e0      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1b5a:	2300      	movs	r3, #0
    1b5c:	4c01      	ldr	r4, [pc, #4]	; (1b64 <__aeabi_ddiv+0x1e4>)
    1b5e:	2200      	movs	r2, #0
    1b60:	4698      	mov	r8, r3
    1b62:	e7db      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1b64:	000007ff 	.word	0x000007ff
    1b68:	fffffc01 	.word	0xfffffc01
    1b6c:	00002cdc 	.word	0x00002cdc
    1b70:	fffffc0d 	.word	0xfffffc0d
    1b74:	800fffff 	.word	0x800fffff
    1b78:	45d9      	cmp	r9, fp
    1b7a:	d900      	bls.n	1b7e <__aeabi_ddiv+0x1fe>
    1b7c:	e139      	b.n	1df2 <__aeabi_ddiv+0x472>
    1b7e:	d100      	bne.n	1b82 <__aeabi_ddiv+0x202>
    1b80:	e134      	b.n	1dec <__aeabi_ddiv+0x46c>
    1b82:	2300      	movs	r3, #0
    1b84:	4646      	mov	r6, r8
    1b86:	464d      	mov	r5, r9
    1b88:	469a      	mov	sl, r3
    1b8a:	3c01      	subs	r4, #1
    1b8c:	465b      	mov	r3, fp
    1b8e:	0e0a      	lsrs	r2, r1, #24
    1b90:	021b      	lsls	r3, r3, #8
    1b92:	431a      	orrs	r2, r3
    1b94:	020b      	lsls	r3, r1, #8
    1b96:	0c17      	lsrs	r7, r2, #16
    1b98:	9303      	str	r3, [sp, #12]
    1b9a:	0413      	lsls	r3, r2, #16
    1b9c:	0c1b      	lsrs	r3, r3, #16
    1b9e:	0039      	movs	r1, r7
    1ba0:	0028      	movs	r0, r5
    1ba2:	4690      	mov	r8, r2
    1ba4:	9301      	str	r3, [sp, #4]
    1ba6:	f7ff fb4f 	bl	1248 <__udivsi3>
    1baa:	0002      	movs	r2, r0
    1bac:	9b01      	ldr	r3, [sp, #4]
    1bae:	4683      	mov	fp, r0
    1bb0:	435a      	muls	r2, r3
    1bb2:	0028      	movs	r0, r5
    1bb4:	0039      	movs	r1, r7
    1bb6:	4691      	mov	r9, r2
    1bb8:	f7ff fbcc 	bl	1354 <__aeabi_uidivmod>
    1bbc:	0c35      	lsrs	r5, r6, #16
    1bbe:	0409      	lsls	r1, r1, #16
    1bc0:	430d      	orrs	r5, r1
    1bc2:	45a9      	cmp	r9, r5
    1bc4:	d90d      	bls.n	1be2 <__aeabi_ddiv+0x262>
    1bc6:	465b      	mov	r3, fp
    1bc8:	4445      	add	r5, r8
    1bca:	3b01      	subs	r3, #1
    1bcc:	45a8      	cmp	r8, r5
    1bce:	d900      	bls.n	1bd2 <__aeabi_ddiv+0x252>
    1bd0:	e13a      	b.n	1e48 <__aeabi_ddiv+0x4c8>
    1bd2:	45a9      	cmp	r9, r5
    1bd4:	d800      	bhi.n	1bd8 <__aeabi_ddiv+0x258>
    1bd6:	e137      	b.n	1e48 <__aeabi_ddiv+0x4c8>
    1bd8:	2302      	movs	r3, #2
    1bda:	425b      	negs	r3, r3
    1bdc:	469c      	mov	ip, r3
    1bde:	4445      	add	r5, r8
    1be0:	44e3      	add	fp, ip
    1be2:	464b      	mov	r3, r9
    1be4:	1aeb      	subs	r3, r5, r3
    1be6:	0039      	movs	r1, r7
    1be8:	0018      	movs	r0, r3
    1bea:	9304      	str	r3, [sp, #16]
    1bec:	f7ff fb2c 	bl	1248 <__udivsi3>
    1bf0:	9b01      	ldr	r3, [sp, #4]
    1bf2:	0005      	movs	r5, r0
    1bf4:	4343      	muls	r3, r0
    1bf6:	0039      	movs	r1, r7
    1bf8:	9804      	ldr	r0, [sp, #16]
    1bfa:	4699      	mov	r9, r3
    1bfc:	f7ff fbaa 	bl	1354 <__aeabi_uidivmod>
    1c00:	0433      	lsls	r3, r6, #16
    1c02:	0409      	lsls	r1, r1, #16
    1c04:	0c1b      	lsrs	r3, r3, #16
    1c06:	430b      	orrs	r3, r1
    1c08:	4599      	cmp	r9, r3
    1c0a:	d909      	bls.n	1c20 <__aeabi_ddiv+0x2a0>
    1c0c:	4443      	add	r3, r8
    1c0e:	1e6a      	subs	r2, r5, #1
    1c10:	4598      	cmp	r8, r3
    1c12:	d900      	bls.n	1c16 <__aeabi_ddiv+0x296>
    1c14:	e11a      	b.n	1e4c <__aeabi_ddiv+0x4cc>
    1c16:	4599      	cmp	r9, r3
    1c18:	d800      	bhi.n	1c1c <__aeabi_ddiv+0x29c>
    1c1a:	e117      	b.n	1e4c <__aeabi_ddiv+0x4cc>
    1c1c:	3d02      	subs	r5, #2
    1c1e:	4443      	add	r3, r8
    1c20:	464a      	mov	r2, r9
    1c22:	1a9b      	subs	r3, r3, r2
    1c24:	465a      	mov	r2, fp
    1c26:	0412      	lsls	r2, r2, #16
    1c28:	432a      	orrs	r2, r5
    1c2a:	9903      	ldr	r1, [sp, #12]
    1c2c:	4693      	mov	fp, r2
    1c2e:	0c10      	lsrs	r0, r2, #16
    1c30:	0c0a      	lsrs	r2, r1, #16
    1c32:	4691      	mov	r9, r2
    1c34:	0409      	lsls	r1, r1, #16
    1c36:	465a      	mov	r2, fp
    1c38:	0c09      	lsrs	r1, r1, #16
    1c3a:	464e      	mov	r6, r9
    1c3c:	000d      	movs	r5, r1
    1c3e:	0412      	lsls	r2, r2, #16
    1c40:	0c12      	lsrs	r2, r2, #16
    1c42:	4345      	muls	r5, r0
    1c44:	9105      	str	r1, [sp, #20]
    1c46:	4351      	muls	r1, r2
    1c48:	4372      	muls	r2, r6
    1c4a:	4370      	muls	r0, r6
    1c4c:	1952      	adds	r2, r2, r5
    1c4e:	0c0e      	lsrs	r6, r1, #16
    1c50:	18b2      	adds	r2, r6, r2
    1c52:	4295      	cmp	r5, r2
    1c54:	d903      	bls.n	1c5e <__aeabi_ddiv+0x2de>
    1c56:	2580      	movs	r5, #128	; 0x80
    1c58:	026d      	lsls	r5, r5, #9
    1c5a:	46ac      	mov	ip, r5
    1c5c:	4460      	add	r0, ip
    1c5e:	0c15      	lsrs	r5, r2, #16
    1c60:	0409      	lsls	r1, r1, #16
    1c62:	0412      	lsls	r2, r2, #16
    1c64:	0c09      	lsrs	r1, r1, #16
    1c66:	1828      	adds	r0, r5, r0
    1c68:	1852      	adds	r2, r2, r1
    1c6a:	4283      	cmp	r3, r0
    1c6c:	d200      	bcs.n	1c70 <__aeabi_ddiv+0x2f0>
    1c6e:	e0ce      	b.n	1e0e <__aeabi_ddiv+0x48e>
    1c70:	d100      	bne.n	1c74 <__aeabi_ddiv+0x2f4>
    1c72:	e0c8      	b.n	1e06 <__aeabi_ddiv+0x486>
    1c74:	1a1d      	subs	r5, r3, r0
    1c76:	4653      	mov	r3, sl
    1c78:	1a9e      	subs	r6, r3, r2
    1c7a:	45b2      	cmp	sl, r6
    1c7c:	4192      	sbcs	r2, r2
    1c7e:	4252      	negs	r2, r2
    1c80:	1aab      	subs	r3, r5, r2
    1c82:	469a      	mov	sl, r3
    1c84:	4598      	cmp	r8, r3
    1c86:	d100      	bne.n	1c8a <__aeabi_ddiv+0x30a>
    1c88:	e117      	b.n	1eba <__aeabi_ddiv+0x53a>
    1c8a:	0039      	movs	r1, r7
    1c8c:	0018      	movs	r0, r3
    1c8e:	f7ff fadb 	bl	1248 <__udivsi3>
    1c92:	9b01      	ldr	r3, [sp, #4]
    1c94:	0005      	movs	r5, r0
    1c96:	4343      	muls	r3, r0
    1c98:	0039      	movs	r1, r7
    1c9a:	4650      	mov	r0, sl
    1c9c:	9304      	str	r3, [sp, #16]
    1c9e:	f7ff fb59 	bl	1354 <__aeabi_uidivmod>
    1ca2:	9804      	ldr	r0, [sp, #16]
    1ca4:	040b      	lsls	r3, r1, #16
    1ca6:	0c31      	lsrs	r1, r6, #16
    1ca8:	4319      	orrs	r1, r3
    1caa:	4288      	cmp	r0, r1
    1cac:	d909      	bls.n	1cc2 <__aeabi_ddiv+0x342>
    1cae:	4441      	add	r1, r8
    1cb0:	1e6b      	subs	r3, r5, #1
    1cb2:	4588      	cmp	r8, r1
    1cb4:	d900      	bls.n	1cb8 <__aeabi_ddiv+0x338>
    1cb6:	e107      	b.n	1ec8 <__aeabi_ddiv+0x548>
    1cb8:	4288      	cmp	r0, r1
    1cba:	d800      	bhi.n	1cbe <__aeabi_ddiv+0x33e>
    1cbc:	e104      	b.n	1ec8 <__aeabi_ddiv+0x548>
    1cbe:	3d02      	subs	r5, #2
    1cc0:	4441      	add	r1, r8
    1cc2:	9b04      	ldr	r3, [sp, #16]
    1cc4:	1acb      	subs	r3, r1, r3
    1cc6:	0018      	movs	r0, r3
    1cc8:	0039      	movs	r1, r7
    1cca:	9304      	str	r3, [sp, #16]
    1ccc:	f7ff fabc 	bl	1248 <__udivsi3>
    1cd0:	9b01      	ldr	r3, [sp, #4]
    1cd2:	4682      	mov	sl, r0
    1cd4:	4343      	muls	r3, r0
    1cd6:	0039      	movs	r1, r7
    1cd8:	9804      	ldr	r0, [sp, #16]
    1cda:	9301      	str	r3, [sp, #4]
    1cdc:	f7ff fb3a 	bl	1354 <__aeabi_uidivmod>
    1ce0:	9801      	ldr	r0, [sp, #4]
    1ce2:	040b      	lsls	r3, r1, #16
    1ce4:	0431      	lsls	r1, r6, #16
    1ce6:	0c09      	lsrs	r1, r1, #16
    1ce8:	4319      	orrs	r1, r3
    1cea:	4288      	cmp	r0, r1
    1cec:	d90d      	bls.n	1d0a <__aeabi_ddiv+0x38a>
    1cee:	4653      	mov	r3, sl
    1cf0:	4441      	add	r1, r8
    1cf2:	3b01      	subs	r3, #1
    1cf4:	4588      	cmp	r8, r1
    1cf6:	d900      	bls.n	1cfa <__aeabi_ddiv+0x37a>
    1cf8:	e0e8      	b.n	1ecc <__aeabi_ddiv+0x54c>
    1cfa:	4288      	cmp	r0, r1
    1cfc:	d800      	bhi.n	1d00 <__aeabi_ddiv+0x380>
    1cfe:	e0e5      	b.n	1ecc <__aeabi_ddiv+0x54c>
    1d00:	2302      	movs	r3, #2
    1d02:	425b      	negs	r3, r3
    1d04:	469c      	mov	ip, r3
    1d06:	4441      	add	r1, r8
    1d08:	44e2      	add	sl, ip
    1d0a:	9b01      	ldr	r3, [sp, #4]
    1d0c:	042d      	lsls	r5, r5, #16
    1d0e:	1ace      	subs	r6, r1, r3
    1d10:	4651      	mov	r1, sl
    1d12:	4329      	orrs	r1, r5
    1d14:	9d05      	ldr	r5, [sp, #20]
    1d16:	464f      	mov	r7, r9
    1d18:	002a      	movs	r2, r5
    1d1a:	040b      	lsls	r3, r1, #16
    1d1c:	0c08      	lsrs	r0, r1, #16
    1d1e:	0c1b      	lsrs	r3, r3, #16
    1d20:	435a      	muls	r2, r3
    1d22:	4345      	muls	r5, r0
    1d24:	437b      	muls	r3, r7
    1d26:	4378      	muls	r0, r7
    1d28:	195b      	adds	r3, r3, r5
    1d2a:	0c17      	lsrs	r7, r2, #16
    1d2c:	18fb      	adds	r3, r7, r3
    1d2e:	429d      	cmp	r5, r3
    1d30:	d903      	bls.n	1d3a <__aeabi_ddiv+0x3ba>
    1d32:	2580      	movs	r5, #128	; 0x80
    1d34:	026d      	lsls	r5, r5, #9
    1d36:	46ac      	mov	ip, r5
    1d38:	4460      	add	r0, ip
    1d3a:	0c1d      	lsrs	r5, r3, #16
    1d3c:	0412      	lsls	r2, r2, #16
    1d3e:	041b      	lsls	r3, r3, #16
    1d40:	0c12      	lsrs	r2, r2, #16
    1d42:	1828      	adds	r0, r5, r0
    1d44:	189b      	adds	r3, r3, r2
    1d46:	4286      	cmp	r6, r0
    1d48:	d200      	bcs.n	1d4c <__aeabi_ddiv+0x3cc>
    1d4a:	e093      	b.n	1e74 <__aeabi_ddiv+0x4f4>
    1d4c:	d100      	bne.n	1d50 <__aeabi_ddiv+0x3d0>
    1d4e:	e08e      	b.n	1e6e <__aeabi_ddiv+0x4ee>
    1d50:	2301      	movs	r3, #1
    1d52:	4319      	orrs	r1, r3
    1d54:	4ba0      	ldr	r3, [pc, #640]	; (1fd8 <__aeabi_ddiv+0x658>)
    1d56:	18e3      	adds	r3, r4, r3
    1d58:	2b00      	cmp	r3, #0
    1d5a:	dc00      	bgt.n	1d5e <__aeabi_ddiv+0x3de>
    1d5c:	e099      	b.n	1e92 <__aeabi_ddiv+0x512>
    1d5e:	074a      	lsls	r2, r1, #29
    1d60:	d000      	beq.n	1d64 <__aeabi_ddiv+0x3e4>
    1d62:	e09e      	b.n	1ea2 <__aeabi_ddiv+0x522>
    1d64:	465a      	mov	r2, fp
    1d66:	01d2      	lsls	r2, r2, #7
    1d68:	d506      	bpl.n	1d78 <__aeabi_ddiv+0x3f8>
    1d6a:	465a      	mov	r2, fp
    1d6c:	4b9b      	ldr	r3, [pc, #620]	; (1fdc <__aeabi_ddiv+0x65c>)
    1d6e:	401a      	ands	r2, r3
    1d70:	2380      	movs	r3, #128	; 0x80
    1d72:	4693      	mov	fp, r2
    1d74:	00db      	lsls	r3, r3, #3
    1d76:	18e3      	adds	r3, r4, r3
    1d78:	4a99      	ldr	r2, [pc, #612]	; (1fe0 <__aeabi_ddiv+0x660>)
    1d7a:	4293      	cmp	r3, r2
    1d7c:	dd68      	ble.n	1e50 <__aeabi_ddiv+0x4d0>
    1d7e:	2301      	movs	r3, #1
    1d80:	9a02      	ldr	r2, [sp, #8]
    1d82:	4c98      	ldr	r4, [pc, #608]	; (1fe4 <__aeabi_ddiv+0x664>)
    1d84:	401a      	ands	r2, r3
    1d86:	2300      	movs	r3, #0
    1d88:	4694      	mov	ip, r2
    1d8a:	4698      	mov	r8, r3
    1d8c:	2200      	movs	r2, #0
    1d8e:	e6c5      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1d90:	2280      	movs	r2, #128	; 0x80
    1d92:	464b      	mov	r3, r9
    1d94:	0312      	lsls	r2, r2, #12
    1d96:	4213      	tst	r3, r2
    1d98:	d00a      	beq.n	1db0 <__aeabi_ddiv+0x430>
    1d9a:	465b      	mov	r3, fp
    1d9c:	4213      	tst	r3, r2
    1d9e:	d106      	bne.n	1dae <__aeabi_ddiv+0x42e>
    1da0:	431a      	orrs	r2, r3
    1da2:	0312      	lsls	r2, r2, #12
    1da4:	0b12      	lsrs	r2, r2, #12
    1da6:	46ac      	mov	ip, r5
    1da8:	4688      	mov	r8, r1
    1daa:	4c8e      	ldr	r4, [pc, #568]	; (1fe4 <__aeabi_ddiv+0x664>)
    1dac:	e6b6      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1dae:	464b      	mov	r3, r9
    1db0:	431a      	orrs	r2, r3
    1db2:	0312      	lsls	r2, r2, #12
    1db4:	0b12      	lsrs	r2, r2, #12
    1db6:	46bc      	mov	ip, r7
    1db8:	4c8a      	ldr	r4, [pc, #552]	; (1fe4 <__aeabi_ddiv+0x664>)
    1dba:	e6af      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1dbc:	0003      	movs	r3, r0
    1dbe:	465a      	mov	r2, fp
    1dc0:	3b28      	subs	r3, #40	; 0x28
    1dc2:	409a      	lsls	r2, r3
    1dc4:	2300      	movs	r3, #0
    1dc6:	4691      	mov	r9, r2
    1dc8:	4698      	mov	r8, r3
    1dca:	e657      	b.n	1a7c <__aeabi_ddiv+0xfc>
    1dcc:	4658      	mov	r0, fp
    1dce:	f000 ff0d 	bl	2bec <__clzsi2>
    1dd2:	3020      	adds	r0, #32
    1dd4:	e640      	b.n	1a58 <__aeabi_ddiv+0xd8>
    1dd6:	0003      	movs	r3, r0
    1dd8:	4652      	mov	r2, sl
    1dda:	3b28      	subs	r3, #40	; 0x28
    1ddc:	409a      	lsls	r2, r3
    1dde:	2100      	movs	r1, #0
    1de0:	4693      	mov	fp, r2
    1de2:	e677      	b.n	1ad4 <__aeabi_ddiv+0x154>
    1de4:	f000 ff02 	bl	2bec <__clzsi2>
    1de8:	3020      	adds	r0, #32
    1dea:	e65f      	b.n	1aac <__aeabi_ddiv+0x12c>
    1dec:	4588      	cmp	r8, r1
    1dee:	d200      	bcs.n	1df2 <__aeabi_ddiv+0x472>
    1df0:	e6c7      	b.n	1b82 <__aeabi_ddiv+0x202>
    1df2:	464b      	mov	r3, r9
    1df4:	07de      	lsls	r6, r3, #31
    1df6:	085d      	lsrs	r5, r3, #1
    1df8:	4643      	mov	r3, r8
    1dfa:	085b      	lsrs	r3, r3, #1
    1dfc:	431e      	orrs	r6, r3
    1dfe:	4643      	mov	r3, r8
    1e00:	07db      	lsls	r3, r3, #31
    1e02:	469a      	mov	sl, r3
    1e04:	e6c2      	b.n	1b8c <__aeabi_ddiv+0x20c>
    1e06:	2500      	movs	r5, #0
    1e08:	4592      	cmp	sl, r2
    1e0a:	d300      	bcc.n	1e0e <__aeabi_ddiv+0x48e>
    1e0c:	e733      	b.n	1c76 <__aeabi_ddiv+0x2f6>
    1e0e:	9e03      	ldr	r6, [sp, #12]
    1e10:	4659      	mov	r1, fp
    1e12:	46b4      	mov	ip, r6
    1e14:	44e2      	add	sl, ip
    1e16:	45b2      	cmp	sl, r6
    1e18:	41ad      	sbcs	r5, r5
    1e1a:	426d      	negs	r5, r5
    1e1c:	4445      	add	r5, r8
    1e1e:	18eb      	adds	r3, r5, r3
    1e20:	3901      	subs	r1, #1
    1e22:	4598      	cmp	r8, r3
    1e24:	d207      	bcs.n	1e36 <__aeabi_ddiv+0x4b6>
    1e26:	4298      	cmp	r0, r3
    1e28:	d900      	bls.n	1e2c <__aeabi_ddiv+0x4ac>
    1e2a:	e07f      	b.n	1f2c <__aeabi_ddiv+0x5ac>
    1e2c:	d100      	bne.n	1e30 <__aeabi_ddiv+0x4b0>
    1e2e:	e0bc      	b.n	1faa <__aeabi_ddiv+0x62a>
    1e30:	1a1d      	subs	r5, r3, r0
    1e32:	468b      	mov	fp, r1
    1e34:	e71f      	b.n	1c76 <__aeabi_ddiv+0x2f6>
    1e36:	4598      	cmp	r8, r3
    1e38:	d1fa      	bne.n	1e30 <__aeabi_ddiv+0x4b0>
    1e3a:	9d03      	ldr	r5, [sp, #12]
    1e3c:	4555      	cmp	r5, sl
    1e3e:	d9f2      	bls.n	1e26 <__aeabi_ddiv+0x4a6>
    1e40:	4643      	mov	r3, r8
    1e42:	468b      	mov	fp, r1
    1e44:	1a1d      	subs	r5, r3, r0
    1e46:	e716      	b.n	1c76 <__aeabi_ddiv+0x2f6>
    1e48:	469b      	mov	fp, r3
    1e4a:	e6ca      	b.n	1be2 <__aeabi_ddiv+0x262>
    1e4c:	0015      	movs	r5, r2
    1e4e:	e6e7      	b.n	1c20 <__aeabi_ddiv+0x2a0>
    1e50:	465a      	mov	r2, fp
    1e52:	08c9      	lsrs	r1, r1, #3
    1e54:	0752      	lsls	r2, r2, #29
    1e56:	430a      	orrs	r2, r1
    1e58:	055b      	lsls	r3, r3, #21
    1e5a:	4690      	mov	r8, r2
    1e5c:	0d5c      	lsrs	r4, r3, #21
    1e5e:	465a      	mov	r2, fp
    1e60:	2301      	movs	r3, #1
    1e62:	9902      	ldr	r1, [sp, #8]
    1e64:	0252      	lsls	r2, r2, #9
    1e66:	4019      	ands	r1, r3
    1e68:	0b12      	lsrs	r2, r2, #12
    1e6a:	468c      	mov	ip, r1
    1e6c:	e656      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d100      	bne.n	1e74 <__aeabi_ddiv+0x4f4>
    1e72:	e76f      	b.n	1d54 <__aeabi_ddiv+0x3d4>
    1e74:	4446      	add	r6, r8
    1e76:	1e4a      	subs	r2, r1, #1
    1e78:	45b0      	cmp	r8, r6
    1e7a:	d929      	bls.n	1ed0 <__aeabi_ddiv+0x550>
    1e7c:	0011      	movs	r1, r2
    1e7e:	4286      	cmp	r6, r0
    1e80:	d000      	beq.n	1e84 <__aeabi_ddiv+0x504>
    1e82:	e765      	b.n	1d50 <__aeabi_ddiv+0x3d0>
    1e84:	9a03      	ldr	r2, [sp, #12]
    1e86:	4293      	cmp	r3, r2
    1e88:	d000      	beq.n	1e8c <__aeabi_ddiv+0x50c>
    1e8a:	e761      	b.n	1d50 <__aeabi_ddiv+0x3d0>
    1e8c:	e762      	b.n	1d54 <__aeabi_ddiv+0x3d4>
    1e8e:	2101      	movs	r1, #1
    1e90:	4249      	negs	r1, r1
    1e92:	2001      	movs	r0, #1
    1e94:	1ac2      	subs	r2, r0, r3
    1e96:	2a38      	cmp	r2, #56	; 0x38
    1e98:	dd21      	ble.n	1ede <__aeabi_ddiv+0x55e>
    1e9a:	9b02      	ldr	r3, [sp, #8]
    1e9c:	4003      	ands	r3, r0
    1e9e:	469c      	mov	ip, r3
    1ea0:	e638      	b.n	1b14 <__aeabi_ddiv+0x194>
    1ea2:	220f      	movs	r2, #15
    1ea4:	400a      	ands	r2, r1
    1ea6:	2a04      	cmp	r2, #4
    1ea8:	d100      	bne.n	1eac <__aeabi_ddiv+0x52c>
    1eaa:	e75b      	b.n	1d64 <__aeabi_ddiv+0x3e4>
    1eac:	000a      	movs	r2, r1
    1eae:	1d11      	adds	r1, r2, #4
    1eb0:	4291      	cmp	r1, r2
    1eb2:	4192      	sbcs	r2, r2
    1eb4:	4252      	negs	r2, r2
    1eb6:	4493      	add	fp, r2
    1eb8:	e754      	b.n	1d64 <__aeabi_ddiv+0x3e4>
    1eba:	4b47      	ldr	r3, [pc, #284]	; (1fd8 <__aeabi_ddiv+0x658>)
    1ebc:	18e3      	adds	r3, r4, r3
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	dde5      	ble.n	1e8e <__aeabi_ddiv+0x50e>
    1ec2:	2201      	movs	r2, #1
    1ec4:	4252      	negs	r2, r2
    1ec6:	e7f2      	b.n	1eae <__aeabi_ddiv+0x52e>
    1ec8:	001d      	movs	r5, r3
    1eca:	e6fa      	b.n	1cc2 <__aeabi_ddiv+0x342>
    1ecc:	469a      	mov	sl, r3
    1ece:	e71c      	b.n	1d0a <__aeabi_ddiv+0x38a>
    1ed0:	42b0      	cmp	r0, r6
    1ed2:	d839      	bhi.n	1f48 <__aeabi_ddiv+0x5c8>
    1ed4:	d06e      	beq.n	1fb4 <__aeabi_ddiv+0x634>
    1ed6:	0011      	movs	r1, r2
    1ed8:	e73a      	b.n	1d50 <__aeabi_ddiv+0x3d0>
    1eda:	9302      	str	r3, [sp, #8]
    1edc:	e73a      	b.n	1d54 <__aeabi_ddiv+0x3d4>
    1ede:	2a1f      	cmp	r2, #31
    1ee0:	dc3c      	bgt.n	1f5c <__aeabi_ddiv+0x5dc>
    1ee2:	2320      	movs	r3, #32
    1ee4:	1a9b      	subs	r3, r3, r2
    1ee6:	000c      	movs	r4, r1
    1ee8:	4658      	mov	r0, fp
    1eea:	4099      	lsls	r1, r3
    1eec:	4098      	lsls	r0, r3
    1eee:	1e4b      	subs	r3, r1, #1
    1ef0:	4199      	sbcs	r1, r3
    1ef2:	465b      	mov	r3, fp
    1ef4:	40d4      	lsrs	r4, r2
    1ef6:	40d3      	lsrs	r3, r2
    1ef8:	4320      	orrs	r0, r4
    1efa:	4308      	orrs	r0, r1
    1efc:	001a      	movs	r2, r3
    1efe:	0743      	lsls	r3, r0, #29
    1f00:	d009      	beq.n	1f16 <__aeabi_ddiv+0x596>
    1f02:	230f      	movs	r3, #15
    1f04:	4003      	ands	r3, r0
    1f06:	2b04      	cmp	r3, #4
    1f08:	d005      	beq.n	1f16 <__aeabi_ddiv+0x596>
    1f0a:	0001      	movs	r1, r0
    1f0c:	1d08      	adds	r0, r1, #4
    1f0e:	4288      	cmp	r0, r1
    1f10:	419b      	sbcs	r3, r3
    1f12:	425b      	negs	r3, r3
    1f14:	18d2      	adds	r2, r2, r3
    1f16:	0213      	lsls	r3, r2, #8
    1f18:	d53a      	bpl.n	1f90 <__aeabi_ddiv+0x610>
    1f1a:	2301      	movs	r3, #1
    1f1c:	9a02      	ldr	r2, [sp, #8]
    1f1e:	2401      	movs	r4, #1
    1f20:	401a      	ands	r2, r3
    1f22:	2300      	movs	r3, #0
    1f24:	4694      	mov	ip, r2
    1f26:	4698      	mov	r8, r3
    1f28:	2200      	movs	r2, #0
    1f2a:	e5f7      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1f2c:	2102      	movs	r1, #2
    1f2e:	4249      	negs	r1, r1
    1f30:	468c      	mov	ip, r1
    1f32:	9d03      	ldr	r5, [sp, #12]
    1f34:	44e3      	add	fp, ip
    1f36:	46ac      	mov	ip, r5
    1f38:	44e2      	add	sl, ip
    1f3a:	45aa      	cmp	sl, r5
    1f3c:	41ad      	sbcs	r5, r5
    1f3e:	426d      	negs	r5, r5
    1f40:	4445      	add	r5, r8
    1f42:	18ed      	adds	r5, r5, r3
    1f44:	1a2d      	subs	r5, r5, r0
    1f46:	e696      	b.n	1c76 <__aeabi_ddiv+0x2f6>
    1f48:	1e8a      	subs	r2, r1, #2
    1f4a:	9903      	ldr	r1, [sp, #12]
    1f4c:	004d      	lsls	r5, r1, #1
    1f4e:	428d      	cmp	r5, r1
    1f50:	4189      	sbcs	r1, r1
    1f52:	4249      	negs	r1, r1
    1f54:	4441      	add	r1, r8
    1f56:	1876      	adds	r6, r6, r1
    1f58:	9503      	str	r5, [sp, #12]
    1f5a:	e78f      	b.n	1e7c <__aeabi_ddiv+0x4fc>
    1f5c:	201f      	movs	r0, #31
    1f5e:	4240      	negs	r0, r0
    1f60:	1ac3      	subs	r3, r0, r3
    1f62:	4658      	mov	r0, fp
    1f64:	40d8      	lsrs	r0, r3
    1f66:	0003      	movs	r3, r0
    1f68:	2a20      	cmp	r2, #32
    1f6a:	d028      	beq.n	1fbe <__aeabi_ddiv+0x63e>
    1f6c:	2040      	movs	r0, #64	; 0x40
    1f6e:	465d      	mov	r5, fp
    1f70:	1a82      	subs	r2, r0, r2
    1f72:	4095      	lsls	r5, r2
    1f74:	4329      	orrs	r1, r5
    1f76:	1e4a      	subs	r2, r1, #1
    1f78:	4191      	sbcs	r1, r2
    1f7a:	4319      	orrs	r1, r3
    1f7c:	2307      	movs	r3, #7
    1f7e:	2200      	movs	r2, #0
    1f80:	400b      	ands	r3, r1
    1f82:	d009      	beq.n	1f98 <__aeabi_ddiv+0x618>
    1f84:	230f      	movs	r3, #15
    1f86:	2200      	movs	r2, #0
    1f88:	400b      	ands	r3, r1
    1f8a:	0008      	movs	r0, r1
    1f8c:	2b04      	cmp	r3, #4
    1f8e:	d1bd      	bne.n	1f0c <__aeabi_ddiv+0x58c>
    1f90:	0001      	movs	r1, r0
    1f92:	0753      	lsls	r3, r2, #29
    1f94:	0252      	lsls	r2, r2, #9
    1f96:	0b12      	lsrs	r2, r2, #12
    1f98:	08c9      	lsrs	r1, r1, #3
    1f9a:	4319      	orrs	r1, r3
    1f9c:	2301      	movs	r3, #1
    1f9e:	4688      	mov	r8, r1
    1fa0:	9902      	ldr	r1, [sp, #8]
    1fa2:	2400      	movs	r4, #0
    1fa4:	4019      	ands	r1, r3
    1fa6:	468c      	mov	ip, r1
    1fa8:	e5b8      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1faa:	4552      	cmp	r2, sl
    1fac:	d8be      	bhi.n	1f2c <__aeabi_ddiv+0x5ac>
    1fae:	468b      	mov	fp, r1
    1fb0:	2500      	movs	r5, #0
    1fb2:	e660      	b.n	1c76 <__aeabi_ddiv+0x2f6>
    1fb4:	9d03      	ldr	r5, [sp, #12]
    1fb6:	429d      	cmp	r5, r3
    1fb8:	d3c6      	bcc.n	1f48 <__aeabi_ddiv+0x5c8>
    1fba:	0011      	movs	r1, r2
    1fbc:	e762      	b.n	1e84 <__aeabi_ddiv+0x504>
    1fbe:	2500      	movs	r5, #0
    1fc0:	e7d8      	b.n	1f74 <__aeabi_ddiv+0x5f4>
    1fc2:	2280      	movs	r2, #128	; 0x80
    1fc4:	465b      	mov	r3, fp
    1fc6:	0312      	lsls	r2, r2, #12
    1fc8:	431a      	orrs	r2, r3
    1fca:	9b01      	ldr	r3, [sp, #4]
    1fcc:	0312      	lsls	r2, r2, #12
    1fce:	0b12      	lsrs	r2, r2, #12
    1fd0:	469c      	mov	ip, r3
    1fd2:	4688      	mov	r8, r1
    1fd4:	4c03      	ldr	r4, [pc, #12]	; (1fe4 <__aeabi_ddiv+0x664>)
    1fd6:	e5a1      	b.n	1b1c <__aeabi_ddiv+0x19c>
    1fd8:	000003ff 	.word	0x000003ff
    1fdc:	feffffff 	.word	0xfeffffff
    1fe0:	000007fe 	.word	0x000007fe
    1fe4:	000007ff 	.word	0x000007ff

00001fe8 <__aeabi_dmul>:
    1fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fea:	4657      	mov	r7, sl
    1fec:	4645      	mov	r5, r8
    1fee:	46de      	mov	lr, fp
    1ff0:	464e      	mov	r6, r9
    1ff2:	b5e0      	push	{r5, r6, r7, lr}
    1ff4:	030c      	lsls	r4, r1, #12
    1ff6:	4698      	mov	r8, r3
    1ff8:	004e      	lsls	r6, r1, #1
    1ffa:	0b23      	lsrs	r3, r4, #12
    1ffc:	b087      	sub	sp, #28
    1ffe:	0007      	movs	r7, r0
    2000:	4692      	mov	sl, r2
    2002:	469b      	mov	fp, r3
    2004:	0d76      	lsrs	r6, r6, #21
    2006:	0fcd      	lsrs	r5, r1, #31
    2008:	2e00      	cmp	r6, #0
    200a:	d06b      	beq.n	20e4 <STACK_SIZE+0xe4>
    200c:	4b6d      	ldr	r3, [pc, #436]	; (21c4 <STACK_SIZE+0x1c4>)
    200e:	429e      	cmp	r6, r3
    2010:	d035      	beq.n	207e <STACK_SIZE+0x7e>
    2012:	2480      	movs	r4, #128	; 0x80
    2014:	465b      	mov	r3, fp
    2016:	0f42      	lsrs	r2, r0, #29
    2018:	0424      	lsls	r4, r4, #16
    201a:	00db      	lsls	r3, r3, #3
    201c:	4314      	orrs	r4, r2
    201e:	431c      	orrs	r4, r3
    2020:	00c3      	lsls	r3, r0, #3
    2022:	4699      	mov	r9, r3
    2024:	4b68      	ldr	r3, [pc, #416]	; (21c8 <STACK_SIZE+0x1c8>)
    2026:	46a3      	mov	fp, r4
    2028:	469c      	mov	ip, r3
    202a:	2300      	movs	r3, #0
    202c:	2700      	movs	r7, #0
    202e:	4466      	add	r6, ip
    2030:	9302      	str	r3, [sp, #8]
    2032:	4643      	mov	r3, r8
    2034:	031c      	lsls	r4, r3, #12
    2036:	005a      	lsls	r2, r3, #1
    2038:	0fdb      	lsrs	r3, r3, #31
    203a:	4650      	mov	r0, sl
    203c:	0b24      	lsrs	r4, r4, #12
    203e:	0d52      	lsrs	r2, r2, #21
    2040:	4698      	mov	r8, r3
    2042:	d100      	bne.n	2046 <STACK_SIZE+0x46>
    2044:	e076      	b.n	2134 <STACK_SIZE+0x134>
    2046:	4b5f      	ldr	r3, [pc, #380]	; (21c4 <STACK_SIZE+0x1c4>)
    2048:	429a      	cmp	r2, r3
    204a:	d06d      	beq.n	2128 <STACK_SIZE+0x128>
    204c:	2380      	movs	r3, #128	; 0x80
    204e:	0f41      	lsrs	r1, r0, #29
    2050:	041b      	lsls	r3, r3, #16
    2052:	430b      	orrs	r3, r1
    2054:	495c      	ldr	r1, [pc, #368]	; (21c8 <STACK_SIZE+0x1c8>)
    2056:	00e4      	lsls	r4, r4, #3
    2058:	468c      	mov	ip, r1
    205a:	431c      	orrs	r4, r3
    205c:	00c3      	lsls	r3, r0, #3
    205e:	2000      	movs	r0, #0
    2060:	4462      	add	r2, ip
    2062:	4641      	mov	r1, r8
    2064:	18b6      	adds	r6, r6, r2
    2066:	4069      	eors	r1, r5
    2068:	1c72      	adds	r2, r6, #1
    206a:	9101      	str	r1, [sp, #4]
    206c:	4694      	mov	ip, r2
    206e:	4307      	orrs	r7, r0
    2070:	2f0f      	cmp	r7, #15
    2072:	d900      	bls.n	2076 <STACK_SIZE+0x76>
    2074:	e0b0      	b.n	21d8 <STACK_SIZE+0x1d8>
    2076:	4a55      	ldr	r2, [pc, #340]	; (21cc <STACK_SIZE+0x1cc>)
    2078:	00bf      	lsls	r7, r7, #2
    207a:	59d2      	ldr	r2, [r2, r7]
    207c:	4697      	mov	pc, r2
    207e:	465b      	mov	r3, fp
    2080:	4303      	orrs	r3, r0
    2082:	4699      	mov	r9, r3
    2084:	d000      	beq.n	2088 <STACK_SIZE+0x88>
    2086:	e087      	b.n	2198 <STACK_SIZE+0x198>
    2088:	2300      	movs	r3, #0
    208a:	469b      	mov	fp, r3
    208c:	3302      	adds	r3, #2
    208e:	2708      	movs	r7, #8
    2090:	9302      	str	r3, [sp, #8]
    2092:	e7ce      	b.n	2032 <STACK_SIZE+0x32>
    2094:	4642      	mov	r2, r8
    2096:	9201      	str	r2, [sp, #4]
    2098:	2802      	cmp	r0, #2
    209a:	d067      	beq.n	216c <STACK_SIZE+0x16c>
    209c:	2803      	cmp	r0, #3
    209e:	d100      	bne.n	20a2 <STACK_SIZE+0xa2>
    20a0:	e20e      	b.n	24c0 <STACK_SIZE+0x4c0>
    20a2:	2801      	cmp	r0, #1
    20a4:	d000      	beq.n	20a8 <STACK_SIZE+0xa8>
    20a6:	e162      	b.n	236e <STACK_SIZE+0x36e>
    20a8:	2300      	movs	r3, #0
    20aa:	2400      	movs	r4, #0
    20ac:	2200      	movs	r2, #0
    20ae:	4699      	mov	r9, r3
    20b0:	9901      	ldr	r1, [sp, #4]
    20b2:	4001      	ands	r1, r0
    20b4:	b2cd      	uxtb	r5, r1
    20b6:	2100      	movs	r1, #0
    20b8:	0312      	lsls	r2, r2, #12
    20ba:	0d0b      	lsrs	r3, r1, #20
    20bc:	0b12      	lsrs	r2, r2, #12
    20be:	051b      	lsls	r3, r3, #20
    20c0:	4313      	orrs	r3, r2
    20c2:	4a43      	ldr	r2, [pc, #268]	; (21d0 <STACK_SIZE+0x1d0>)
    20c4:	0524      	lsls	r4, r4, #20
    20c6:	4013      	ands	r3, r2
    20c8:	431c      	orrs	r4, r3
    20ca:	0064      	lsls	r4, r4, #1
    20cc:	07ed      	lsls	r5, r5, #31
    20ce:	0864      	lsrs	r4, r4, #1
    20d0:	432c      	orrs	r4, r5
    20d2:	4648      	mov	r0, r9
    20d4:	0021      	movs	r1, r4
    20d6:	b007      	add	sp, #28
    20d8:	bc3c      	pop	{r2, r3, r4, r5}
    20da:	4690      	mov	r8, r2
    20dc:	4699      	mov	r9, r3
    20de:	46a2      	mov	sl, r4
    20e0:	46ab      	mov	fp, r5
    20e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20e4:	4303      	orrs	r3, r0
    20e6:	4699      	mov	r9, r3
    20e8:	d04f      	beq.n	218a <STACK_SIZE+0x18a>
    20ea:	465b      	mov	r3, fp
    20ec:	2b00      	cmp	r3, #0
    20ee:	d100      	bne.n	20f2 <STACK_SIZE+0xf2>
    20f0:	e189      	b.n	2406 <STACK_SIZE+0x406>
    20f2:	4658      	mov	r0, fp
    20f4:	f000 fd7a 	bl	2bec <__clzsi2>
    20f8:	0003      	movs	r3, r0
    20fa:	3b0b      	subs	r3, #11
    20fc:	2b1c      	cmp	r3, #28
    20fe:	dd00      	ble.n	2102 <STACK_SIZE+0x102>
    2100:	e17a      	b.n	23f8 <STACK_SIZE+0x3f8>
    2102:	221d      	movs	r2, #29
    2104:	1ad3      	subs	r3, r2, r3
    2106:	003a      	movs	r2, r7
    2108:	0001      	movs	r1, r0
    210a:	465c      	mov	r4, fp
    210c:	40da      	lsrs	r2, r3
    210e:	3908      	subs	r1, #8
    2110:	408c      	lsls	r4, r1
    2112:	0013      	movs	r3, r2
    2114:	408f      	lsls	r7, r1
    2116:	4323      	orrs	r3, r4
    2118:	469b      	mov	fp, r3
    211a:	46b9      	mov	r9, r7
    211c:	2300      	movs	r3, #0
    211e:	4e2d      	ldr	r6, [pc, #180]	; (21d4 <STACK_SIZE+0x1d4>)
    2120:	2700      	movs	r7, #0
    2122:	1a36      	subs	r6, r6, r0
    2124:	9302      	str	r3, [sp, #8]
    2126:	e784      	b.n	2032 <STACK_SIZE+0x32>
    2128:	4653      	mov	r3, sl
    212a:	4323      	orrs	r3, r4
    212c:	d12a      	bne.n	2184 <STACK_SIZE+0x184>
    212e:	2400      	movs	r4, #0
    2130:	2002      	movs	r0, #2
    2132:	e796      	b.n	2062 <STACK_SIZE+0x62>
    2134:	4653      	mov	r3, sl
    2136:	4323      	orrs	r3, r4
    2138:	d020      	beq.n	217c <STACK_SIZE+0x17c>
    213a:	2c00      	cmp	r4, #0
    213c:	d100      	bne.n	2140 <STACK_SIZE+0x140>
    213e:	e157      	b.n	23f0 <STACK_SIZE+0x3f0>
    2140:	0020      	movs	r0, r4
    2142:	f000 fd53 	bl	2bec <__clzsi2>
    2146:	0003      	movs	r3, r0
    2148:	3b0b      	subs	r3, #11
    214a:	2b1c      	cmp	r3, #28
    214c:	dd00      	ble.n	2150 <STACK_SIZE+0x150>
    214e:	e149      	b.n	23e4 <STACK_SIZE+0x3e4>
    2150:	211d      	movs	r1, #29
    2152:	1acb      	subs	r3, r1, r3
    2154:	4651      	mov	r1, sl
    2156:	0002      	movs	r2, r0
    2158:	40d9      	lsrs	r1, r3
    215a:	4653      	mov	r3, sl
    215c:	3a08      	subs	r2, #8
    215e:	4094      	lsls	r4, r2
    2160:	4093      	lsls	r3, r2
    2162:	430c      	orrs	r4, r1
    2164:	4a1b      	ldr	r2, [pc, #108]	; (21d4 <STACK_SIZE+0x1d4>)
    2166:	1a12      	subs	r2, r2, r0
    2168:	2000      	movs	r0, #0
    216a:	e77a      	b.n	2062 <STACK_SIZE+0x62>
    216c:	2501      	movs	r5, #1
    216e:	9b01      	ldr	r3, [sp, #4]
    2170:	4c14      	ldr	r4, [pc, #80]	; (21c4 <STACK_SIZE+0x1c4>)
    2172:	401d      	ands	r5, r3
    2174:	2300      	movs	r3, #0
    2176:	2200      	movs	r2, #0
    2178:	4699      	mov	r9, r3
    217a:	e79c      	b.n	20b6 <STACK_SIZE+0xb6>
    217c:	2400      	movs	r4, #0
    217e:	2200      	movs	r2, #0
    2180:	2001      	movs	r0, #1
    2182:	e76e      	b.n	2062 <STACK_SIZE+0x62>
    2184:	4653      	mov	r3, sl
    2186:	2003      	movs	r0, #3
    2188:	e76b      	b.n	2062 <STACK_SIZE+0x62>
    218a:	2300      	movs	r3, #0
    218c:	469b      	mov	fp, r3
    218e:	3301      	adds	r3, #1
    2190:	2704      	movs	r7, #4
    2192:	2600      	movs	r6, #0
    2194:	9302      	str	r3, [sp, #8]
    2196:	e74c      	b.n	2032 <STACK_SIZE+0x32>
    2198:	2303      	movs	r3, #3
    219a:	4681      	mov	r9, r0
    219c:	270c      	movs	r7, #12
    219e:	9302      	str	r3, [sp, #8]
    21a0:	e747      	b.n	2032 <STACK_SIZE+0x32>
    21a2:	2280      	movs	r2, #128	; 0x80
    21a4:	2300      	movs	r3, #0
    21a6:	2500      	movs	r5, #0
    21a8:	0312      	lsls	r2, r2, #12
    21aa:	4699      	mov	r9, r3
    21ac:	4c05      	ldr	r4, [pc, #20]	; (21c4 <STACK_SIZE+0x1c4>)
    21ae:	e782      	b.n	20b6 <STACK_SIZE+0xb6>
    21b0:	465c      	mov	r4, fp
    21b2:	464b      	mov	r3, r9
    21b4:	9802      	ldr	r0, [sp, #8]
    21b6:	e76f      	b.n	2098 <STACK_SIZE+0x98>
    21b8:	465c      	mov	r4, fp
    21ba:	464b      	mov	r3, r9
    21bc:	9501      	str	r5, [sp, #4]
    21be:	9802      	ldr	r0, [sp, #8]
    21c0:	e76a      	b.n	2098 <STACK_SIZE+0x98>
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	000007ff 	.word	0x000007ff
    21c8:	fffffc01 	.word	0xfffffc01
    21cc:	00002d1c 	.word	0x00002d1c
    21d0:	800fffff 	.word	0x800fffff
    21d4:	fffffc0d 	.word	0xfffffc0d
    21d8:	464a      	mov	r2, r9
    21da:	4649      	mov	r1, r9
    21dc:	0c17      	lsrs	r7, r2, #16
    21de:	0c1a      	lsrs	r2, r3, #16
    21e0:	041b      	lsls	r3, r3, #16
    21e2:	0c1b      	lsrs	r3, r3, #16
    21e4:	0408      	lsls	r0, r1, #16
    21e6:	0019      	movs	r1, r3
    21e8:	0c00      	lsrs	r0, r0, #16
    21ea:	4341      	muls	r1, r0
    21ec:	0015      	movs	r5, r2
    21ee:	4688      	mov	r8, r1
    21f0:	0019      	movs	r1, r3
    21f2:	437d      	muls	r5, r7
    21f4:	4379      	muls	r1, r7
    21f6:	9503      	str	r5, [sp, #12]
    21f8:	4689      	mov	r9, r1
    21fa:	0029      	movs	r1, r5
    21fc:	0015      	movs	r5, r2
    21fe:	4345      	muls	r5, r0
    2200:	444d      	add	r5, r9
    2202:	9502      	str	r5, [sp, #8]
    2204:	4645      	mov	r5, r8
    2206:	0c2d      	lsrs	r5, r5, #16
    2208:	46aa      	mov	sl, r5
    220a:	9d02      	ldr	r5, [sp, #8]
    220c:	4455      	add	r5, sl
    220e:	45a9      	cmp	r9, r5
    2210:	d906      	bls.n	2220 <STACK_SIZE+0x220>
    2212:	468a      	mov	sl, r1
    2214:	2180      	movs	r1, #128	; 0x80
    2216:	0249      	lsls	r1, r1, #9
    2218:	4689      	mov	r9, r1
    221a:	44ca      	add	sl, r9
    221c:	4651      	mov	r1, sl
    221e:	9103      	str	r1, [sp, #12]
    2220:	0c29      	lsrs	r1, r5, #16
    2222:	9104      	str	r1, [sp, #16]
    2224:	4641      	mov	r1, r8
    2226:	0409      	lsls	r1, r1, #16
    2228:	042d      	lsls	r5, r5, #16
    222a:	0c09      	lsrs	r1, r1, #16
    222c:	4688      	mov	r8, r1
    222e:	0029      	movs	r1, r5
    2230:	0c25      	lsrs	r5, r4, #16
    2232:	0424      	lsls	r4, r4, #16
    2234:	4441      	add	r1, r8
    2236:	0c24      	lsrs	r4, r4, #16
    2238:	9105      	str	r1, [sp, #20]
    223a:	0021      	movs	r1, r4
    223c:	4341      	muls	r1, r0
    223e:	4688      	mov	r8, r1
    2240:	0021      	movs	r1, r4
    2242:	4379      	muls	r1, r7
    2244:	468a      	mov	sl, r1
    2246:	4368      	muls	r0, r5
    2248:	4641      	mov	r1, r8
    224a:	4450      	add	r0, sl
    224c:	4681      	mov	r9, r0
    224e:	0c08      	lsrs	r0, r1, #16
    2250:	4448      	add	r0, r9
    2252:	436f      	muls	r7, r5
    2254:	4582      	cmp	sl, r0
    2256:	d903      	bls.n	2260 <STACK_SIZE+0x260>
    2258:	2180      	movs	r1, #128	; 0x80
    225a:	0249      	lsls	r1, r1, #9
    225c:	4689      	mov	r9, r1
    225e:	444f      	add	r7, r9
    2260:	0c01      	lsrs	r1, r0, #16
    2262:	4689      	mov	r9, r1
    2264:	0039      	movs	r1, r7
    2266:	4449      	add	r1, r9
    2268:	9102      	str	r1, [sp, #8]
    226a:	4641      	mov	r1, r8
    226c:	040f      	lsls	r7, r1, #16
    226e:	9904      	ldr	r1, [sp, #16]
    2270:	0c3f      	lsrs	r7, r7, #16
    2272:	4688      	mov	r8, r1
    2274:	0400      	lsls	r0, r0, #16
    2276:	19c0      	adds	r0, r0, r7
    2278:	4480      	add	r8, r0
    227a:	4641      	mov	r1, r8
    227c:	9104      	str	r1, [sp, #16]
    227e:	4659      	mov	r1, fp
    2280:	0c0f      	lsrs	r7, r1, #16
    2282:	0409      	lsls	r1, r1, #16
    2284:	0c09      	lsrs	r1, r1, #16
    2286:	4688      	mov	r8, r1
    2288:	4359      	muls	r1, r3
    228a:	468a      	mov	sl, r1
    228c:	0039      	movs	r1, r7
    228e:	4351      	muls	r1, r2
    2290:	4689      	mov	r9, r1
    2292:	4641      	mov	r1, r8
    2294:	434a      	muls	r2, r1
    2296:	4651      	mov	r1, sl
    2298:	0c09      	lsrs	r1, r1, #16
    229a:	468b      	mov	fp, r1
    229c:	437b      	muls	r3, r7
    229e:	18d2      	adds	r2, r2, r3
    22a0:	445a      	add	r2, fp
    22a2:	4293      	cmp	r3, r2
    22a4:	d903      	bls.n	22ae <STACK_SIZE+0x2ae>
    22a6:	2380      	movs	r3, #128	; 0x80
    22a8:	025b      	lsls	r3, r3, #9
    22aa:	469b      	mov	fp, r3
    22ac:	44d9      	add	r9, fp
    22ae:	4651      	mov	r1, sl
    22b0:	0409      	lsls	r1, r1, #16
    22b2:	0c09      	lsrs	r1, r1, #16
    22b4:	468a      	mov	sl, r1
    22b6:	4641      	mov	r1, r8
    22b8:	4361      	muls	r1, r4
    22ba:	437c      	muls	r4, r7
    22bc:	0c13      	lsrs	r3, r2, #16
    22be:	0412      	lsls	r2, r2, #16
    22c0:	444b      	add	r3, r9
    22c2:	4452      	add	r2, sl
    22c4:	46a1      	mov	r9, r4
    22c6:	468a      	mov	sl, r1
    22c8:	003c      	movs	r4, r7
    22ca:	4641      	mov	r1, r8
    22cc:	436c      	muls	r4, r5
    22ce:	434d      	muls	r5, r1
    22d0:	4651      	mov	r1, sl
    22d2:	444d      	add	r5, r9
    22d4:	0c0f      	lsrs	r7, r1, #16
    22d6:	197d      	adds	r5, r7, r5
    22d8:	45a9      	cmp	r9, r5
    22da:	d903      	bls.n	22e4 <STACK_SIZE+0x2e4>
    22dc:	2180      	movs	r1, #128	; 0x80
    22de:	0249      	lsls	r1, r1, #9
    22e0:	4688      	mov	r8, r1
    22e2:	4444      	add	r4, r8
    22e4:	9f04      	ldr	r7, [sp, #16]
    22e6:	9903      	ldr	r1, [sp, #12]
    22e8:	46b8      	mov	r8, r7
    22ea:	4441      	add	r1, r8
    22ec:	468b      	mov	fp, r1
    22ee:	4583      	cmp	fp, r0
    22f0:	4180      	sbcs	r0, r0
    22f2:	4241      	negs	r1, r0
    22f4:	4688      	mov	r8, r1
    22f6:	4651      	mov	r1, sl
    22f8:	0408      	lsls	r0, r1, #16
    22fa:	042f      	lsls	r7, r5, #16
    22fc:	0c00      	lsrs	r0, r0, #16
    22fe:	183f      	adds	r7, r7, r0
    2300:	4658      	mov	r0, fp
    2302:	9902      	ldr	r1, [sp, #8]
    2304:	1810      	adds	r0, r2, r0
    2306:	4689      	mov	r9, r1
    2308:	4290      	cmp	r0, r2
    230a:	4192      	sbcs	r2, r2
    230c:	444f      	add	r7, r9
    230e:	46ba      	mov	sl, r7
    2310:	4252      	negs	r2, r2
    2312:	4699      	mov	r9, r3
    2314:	4693      	mov	fp, r2
    2316:	44c2      	add	sl, r8
    2318:	44d1      	add	r9, sl
    231a:	44cb      	add	fp, r9
    231c:	428f      	cmp	r7, r1
    231e:	41bf      	sbcs	r7, r7
    2320:	45c2      	cmp	sl, r8
    2322:	4189      	sbcs	r1, r1
    2324:	4599      	cmp	r9, r3
    2326:	419b      	sbcs	r3, r3
    2328:	4593      	cmp	fp, r2
    232a:	4192      	sbcs	r2, r2
    232c:	427f      	negs	r7, r7
    232e:	4249      	negs	r1, r1
    2330:	0c2d      	lsrs	r5, r5, #16
    2332:	4252      	negs	r2, r2
    2334:	430f      	orrs	r7, r1
    2336:	425b      	negs	r3, r3
    2338:	4313      	orrs	r3, r2
    233a:	197f      	adds	r7, r7, r5
    233c:	18ff      	adds	r7, r7, r3
    233e:	465b      	mov	r3, fp
    2340:	193c      	adds	r4, r7, r4
    2342:	0ddb      	lsrs	r3, r3, #23
    2344:	9a05      	ldr	r2, [sp, #20]
    2346:	0264      	lsls	r4, r4, #9
    2348:	431c      	orrs	r4, r3
    234a:	0243      	lsls	r3, r0, #9
    234c:	4313      	orrs	r3, r2
    234e:	1e5d      	subs	r5, r3, #1
    2350:	41ab      	sbcs	r3, r5
    2352:	465a      	mov	r2, fp
    2354:	0dc0      	lsrs	r0, r0, #23
    2356:	4303      	orrs	r3, r0
    2358:	0252      	lsls	r2, r2, #9
    235a:	4313      	orrs	r3, r2
    235c:	01e2      	lsls	r2, r4, #7
    235e:	d556      	bpl.n	240e <STACK_SIZE+0x40e>
    2360:	2001      	movs	r0, #1
    2362:	085a      	lsrs	r2, r3, #1
    2364:	4003      	ands	r3, r0
    2366:	4313      	orrs	r3, r2
    2368:	07e2      	lsls	r2, r4, #31
    236a:	4313      	orrs	r3, r2
    236c:	0864      	lsrs	r4, r4, #1
    236e:	485a      	ldr	r0, [pc, #360]	; (24d8 <STACK_SIZE+0x4d8>)
    2370:	4460      	add	r0, ip
    2372:	2800      	cmp	r0, #0
    2374:	dd4d      	ble.n	2412 <STACK_SIZE+0x412>
    2376:	075a      	lsls	r2, r3, #29
    2378:	d009      	beq.n	238e <STACK_SIZE+0x38e>
    237a:	220f      	movs	r2, #15
    237c:	401a      	ands	r2, r3
    237e:	2a04      	cmp	r2, #4
    2380:	d005      	beq.n	238e <STACK_SIZE+0x38e>
    2382:	1d1a      	adds	r2, r3, #4
    2384:	429a      	cmp	r2, r3
    2386:	419b      	sbcs	r3, r3
    2388:	425b      	negs	r3, r3
    238a:	18e4      	adds	r4, r4, r3
    238c:	0013      	movs	r3, r2
    238e:	01e2      	lsls	r2, r4, #7
    2390:	d504      	bpl.n	239c <STACK_SIZE+0x39c>
    2392:	2080      	movs	r0, #128	; 0x80
    2394:	4a51      	ldr	r2, [pc, #324]	; (24dc <STACK_SIZE+0x4dc>)
    2396:	00c0      	lsls	r0, r0, #3
    2398:	4014      	ands	r4, r2
    239a:	4460      	add	r0, ip
    239c:	4a50      	ldr	r2, [pc, #320]	; (24e0 <STACK_SIZE+0x4e0>)
    239e:	4290      	cmp	r0, r2
    23a0:	dd00      	ble.n	23a4 <STACK_SIZE+0x3a4>
    23a2:	e6e3      	b.n	216c <STACK_SIZE+0x16c>
    23a4:	2501      	movs	r5, #1
    23a6:	08db      	lsrs	r3, r3, #3
    23a8:	0762      	lsls	r2, r4, #29
    23aa:	431a      	orrs	r2, r3
    23ac:	0264      	lsls	r4, r4, #9
    23ae:	9b01      	ldr	r3, [sp, #4]
    23b0:	4691      	mov	r9, r2
    23b2:	0b22      	lsrs	r2, r4, #12
    23b4:	0544      	lsls	r4, r0, #21
    23b6:	0d64      	lsrs	r4, r4, #21
    23b8:	401d      	ands	r5, r3
    23ba:	e67c      	b.n	20b6 <STACK_SIZE+0xb6>
    23bc:	2280      	movs	r2, #128	; 0x80
    23be:	4659      	mov	r1, fp
    23c0:	0312      	lsls	r2, r2, #12
    23c2:	4211      	tst	r1, r2
    23c4:	d008      	beq.n	23d8 <STACK_SIZE+0x3d8>
    23c6:	4214      	tst	r4, r2
    23c8:	d106      	bne.n	23d8 <STACK_SIZE+0x3d8>
    23ca:	4322      	orrs	r2, r4
    23cc:	0312      	lsls	r2, r2, #12
    23ce:	0b12      	lsrs	r2, r2, #12
    23d0:	4645      	mov	r5, r8
    23d2:	4699      	mov	r9, r3
    23d4:	4c43      	ldr	r4, [pc, #268]	; (24e4 <STACK_SIZE+0x4e4>)
    23d6:	e66e      	b.n	20b6 <STACK_SIZE+0xb6>
    23d8:	465b      	mov	r3, fp
    23da:	431a      	orrs	r2, r3
    23dc:	0312      	lsls	r2, r2, #12
    23de:	0b12      	lsrs	r2, r2, #12
    23e0:	4c40      	ldr	r4, [pc, #256]	; (24e4 <STACK_SIZE+0x4e4>)
    23e2:	e668      	b.n	20b6 <STACK_SIZE+0xb6>
    23e4:	0003      	movs	r3, r0
    23e6:	4654      	mov	r4, sl
    23e8:	3b28      	subs	r3, #40	; 0x28
    23ea:	409c      	lsls	r4, r3
    23ec:	2300      	movs	r3, #0
    23ee:	e6b9      	b.n	2164 <STACK_SIZE+0x164>
    23f0:	f000 fbfc 	bl	2bec <__clzsi2>
    23f4:	3020      	adds	r0, #32
    23f6:	e6a6      	b.n	2146 <STACK_SIZE+0x146>
    23f8:	0003      	movs	r3, r0
    23fa:	3b28      	subs	r3, #40	; 0x28
    23fc:	409f      	lsls	r7, r3
    23fe:	2300      	movs	r3, #0
    2400:	46bb      	mov	fp, r7
    2402:	4699      	mov	r9, r3
    2404:	e68a      	b.n	211c <STACK_SIZE+0x11c>
    2406:	f000 fbf1 	bl	2bec <__clzsi2>
    240a:	3020      	adds	r0, #32
    240c:	e674      	b.n	20f8 <STACK_SIZE+0xf8>
    240e:	46b4      	mov	ip, r6
    2410:	e7ad      	b.n	236e <STACK_SIZE+0x36e>
    2412:	2501      	movs	r5, #1
    2414:	1a2a      	subs	r2, r5, r0
    2416:	2a38      	cmp	r2, #56	; 0x38
    2418:	dd06      	ble.n	2428 <STACK_SIZE+0x428>
    241a:	9b01      	ldr	r3, [sp, #4]
    241c:	2400      	movs	r4, #0
    241e:	401d      	ands	r5, r3
    2420:	2300      	movs	r3, #0
    2422:	2200      	movs	r2, #0
    2424:	4699      	mov	r9, r3
    2426:	e646      	b.n	20b6 <STACK_SIZE+0xb6>
    2428:	2a1f      	cmp	r2, #31
    242a:	dc21      	bgt.n	2470 <STACK_SIZE+0x470>
    242c:	2520      	movs	r5, #32
    242e:	0020      	movs	r0, r4
    2430:	1aad      	subs	r5, r5, r2
    2432:	001e      	movs	r6, r3
    2434:	40ab      	lsls	r3, r5
    2436:	40a8      	lsls	r0, r5
    2438:	40d6      	lsrs	r6, r2
    243a:	1e5d      	subs	r5, r3, #1
    243c:	41ab      	sbcs	r3, r5
    243e:	4330      	orrs	r0, r6
    2440:	4318      	orrs	r0, r3
    2442:	40d4      	lsrs	r4, r2
    2444:	0743      	lsls	r3, r0, #29
    2446:	d009      	beq.n	245c <STACK_SIZE+0x45c>
    2448:	230f      	movs	r3, #15
    244a:	4003      	ands	r3, r0
    244c:	2b04      	cmp	r3, #4
    244e:	d005      	beq.n	245c <STACK_SIZE+0x45c>
    2450:	0003      	movs	r3, r0
    2452:	1d18      	adds	r0, r3, #4
    2454:	4298      	cmp	r0, r3
    2456:	419b      	sbcs	r3, r3
    2458:	425b      	negs	r3, r3
    245a:	18e4      	adds	r4, r4, r3
    245c:	0223      	lsls	r3, r4, #8
    245e:	d521      	bpl.n	24a4 <STACK_SIZE+0x4a4>
    2460:	2501      	movs	r5, #1
    2462:	9b01      	ldr	r3, [sp, #4]
    2464:	2401      	movs	r4, #1
    2466:	401d      	ands	r5, r3
    2468:	2300      	movs	r3, #0
    246a:	2200      	movs	r2, #0
    246c:	4699      	mov	r9, r3
    246e:	e622      	b.n	20b6 <STACK_SIZE+0xb6>
    2470:	251f      	movs	r5, #31
    2472:	0021      	movs	r1, r4
    2474:	426d      	negs	r5, r5
    2476:	1a28      	subs	r0, r5, r0
    2478:	40c1      	lsrs	r1, r0
    247a:	0008      	movs	r0, r1
    247c:	2a20      	cmp	r2, #32
    247e:	d01d      	beq.n	24bc <STACK_SIZE+0x4bc>
    2480:	355f      	adds	r5, #95	; 0x5f
    2482:	1aaa      	subs	r2, r5, r2
    2484:	4094      	lsls	r4, r2
    2486:	4323      	orrs	r3, r4
    2488:	1e5c      	subs	r4, r3, #1
    248a:	41a3      	sbcs	r3, r4
    248c:	2507      	movs	r5, #7
    248e:	4303      	orrs	r3, r0
    2490:	401d      	ands	r5, r3
    2492:	2200      	movs	r2, #0
    2494:	2d00      	cmp	r5, #0
    2496:	d009      	beq.n	24ac <STACK_SIZE+0x4ac>
    2498:	220f      	movs	r2, #15
    249a:	2400      	movs	r4, #0
    249c:	401a      	ands	r2, r3
    249e:	0018      	movs	r0, r3
    24a0:	2a04      	cmp	r2, #4
    24a2:	d1d6      	bne.n	2452 <STACK_SIZE+0x452>
    24a4:	0003      	movs	r3, r0
    24a6:	0765      	lsls	r5, r4, #29
    24a8:	0264      	lsls	r4, r4, #9
    24aa:	0b22      	lsrs	r2, r4, #12
    24ac:	08db      	lsrs	r3, r3, #3
    24ae:	432b      	orrs	r3, r5
    24b0:	2501      	movs	r5, #1
    24b2:	4699      	mov	r9, r3
    24b4:	9b01      	ldr	r3, [sp, #4]
    24b6:	2400      	movs	r4, #0
    24b8:	401d      	ands	r5, r3
    24ba:	e5fc      	b.n	20b6 <STACK_SIZE+0xb6>
    24bc:	2400      	movs	r4, #0
    24be:	e7e2      	b.n	2486 <STACK_SIZE+0x486>
    24c0:	2280      	movs	r2, #128	; 0x80
    24c2:	2501      	movs	r5, #1
    24c4:	0312      	lsls	r2, r2, #12
    24c6:	4322      	orrs	r2, r4
    24c8:	9901      	ldr	r1, [sp, #4]
    24ca:	0312      	lsls	r2, r2, #12
    24cc:	0b12      	lsrs	r2, r2, #12
    24ce:	400d      	ands	r5, r1
    24d0:	4699      	mov	r9, r3
    24d2:	4c04      	ldr	r4, [pc, #16]	; (24e4 <STACK_SIZE+0x4e4>)
    24d4:	e5ef      	b.n	20b6 <STACK_SIZE+0xb6>
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	000003ff 	.word	0x000003ff
    24dc:	feffffff 	.word	0xfeffffff
    24e0:	000007fe 	.word	0x000007fe
    24e4:	000007ff 	.word	0x000007ff

000024e8 <__aeabi_dsub>:
    24e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ea:	4646      	mov	r6, r8
    24ec:	46d6      	mov	lr, sl
    24ee:	464f      	mov	r7, r9
    24f0:	030c      	lsls	r4, r1, #12
    24f2:	b5c0      	push	{r6, r7, lr}
    24f4:	0fcd      	lsrs	r5, r1, #31
    24f6:	004e      	lsls	r6, r1, #1
    24f8:	0a61      	lsrs	r1, r4, #9
    24fa:	0f44      	lsrs	r4, r0, #29
    24fc:	430c      	orrs	r4, r1
    24fe:	00c1      	lsls	r1, r0, #3
    2500:	0058      	lsls	r0, r3, #1
    2502:	0d40      	lsrs	r0, r0, #21
    2504:	4684      	mov	ip, r0
    2506:	468a      	mov	sl, r1
    2508:	000f      	movs	r7, r1
    250a:	0319      	lsls	r1, r3, #12
    250c:	0f50      	lsrs	r0, r2, #29
    250e:	0a49      	lsrs	r1, r1, #9
    2510:	4301      	orrs	r1, r0
    2512:	48c6      	ldr	r0, [pc, #792]	; (282c <__aeabi_dsub+0x344>)
    2514:	0d76      	lsrs	r6, r6, #21
    2516:	46a8      	mov	r8, r5
    2518:	0fdb      	lsrs	r3, r3, #31
    251a:	00d2      	lsls	r2, r2, #3
    251c:	4584      	cmp	ip, r0
    251e:	d100      	bne.n	2522 <__aeabi_dsub+0x3a>
    2520:	e0d8      	b.n	26d4 <__aeabi_dsub+0x1ec>
    2522:	2001      	movs	r0, #1
    2524:	4043      	eors	r3, r0
    2526:	42ab      	cmp	r3, r5
    2528:	d100      	bne.n	252c <__aeabi_dsub+0x44>
    252a:	e0a6      	b.n	267a <__aeabi_dsub+0x192>
    252c:	4660      	mov	r0, ip
    252e:	1a35      	subs	r5, r6, r0
    2530:	2d00      	cmp	r5, #0
    2532:	dc00      	bgt.n	2536 <__aeabi_dsub+0x4e>
    2534:	e105      	b.n	2742 <__aeabi_dsub+0x25a>
    2536:	2800      	cmp	r0, #0
    2538:	d110      	bne.n	255c <__aeabi_dsub+0x74>
    253a:	000b      	movs	r3, r1
    253c:	4313      	orrs	r3, r2
    253e:	d100      	bne.n	2542 <__aeabi_dsub+0x5a>
    2540:	e0d7      	b.n	26f2 <__aeabi_dsub+0x20a>
    2542:	1e6b      	subs	r3, r5, #1
    2544:	2b00      	cmp	r3, #0
    2546:	d000      	beq.n	254a <__aeabi_dsub+0x62>
    2548:	e14b      	b.n	27e2 <__aeabi_dsub+0x2fa>
    254a:	4653      	mov	r3, sl
    254c:	1a9f      	subs	r7, r3, r2
    254e:	45ba      	cmp	sl, r7
    2550:	4180      	sbcs	r0, r0
    2552:	1a64      	subs	r4, r4, r1
    2554:	4240      	negs	r0, r0
    2556:	1a24      	subs	r4, r4, r0
    2558:	2601      	movs	r6, #1
    255a:	e01e      	b.n	259a <__aeabi_dsub+0xb2>
    255c:	4bb3      	ldr	r3, [pc, #716]	; (282c <__aeabi_dsub+0x344>)
    255e:	429e      	cmp	r6, r3
    2560:	d048      	beq.n	25f4 <__aeabi_dsub+0x10c>
    2562:	2380      	movs	r3, #128	; 0x80
    2564:	041b      	lsls	r3, r3, #16
    2566:	4319      	orrs	r1, r3
    2568:	2d38      	cmp	r5, #56	; 0x38
    256a:	dd00      	ble.n	256e <__aeabi_dsub+0x86>
    256c:	e119      	b.n	27a2 <__aeabi_dsub+0x2ba>
    256e:	2d1f      	cmp	r5, #31
    2570:	dd00      	ble.n	2574 <__aeabi_dsub+0x8c>
    2572:	e14c      	b.n	280e <__aeabi_dsub+0x326>
    2574:	2320      	movs	r3, #32
    2576:	000f      	movs	r7, r1
    2578:	1b5b      	subs	r3, r3, r5
    257a:	0010      	movs	r0, r2
    257c:	409a      	lsls	r2, r3
    257e:	409f      	lsls	r7, r3
    2580:	40e8      	lsrs	r0, r5
    2582:	1e53      	subs	r3, r2, #1
    2584:	419a      	sbcs	r2, r3
    2586:	40e9      	lsrs	r1, r5
    2588:	4307      	orrs	r7, r0
    258a:	4317      	orrs	r7, r2
    258c:	4653      	mov	r3, sl
    258e:	1bdf      	subs	r7, r3, r7
    2590:	1a61      	subs	r1, r4, r1
    2592:	45ba      	cmp	sl, r7
    2594:	41a4      	sbcs	r4, r4
    2596:	4264      	negs	r4, r4
    2598:	1b0c      	subs	r4, r1, r4
    259a:	0223      	lsls	r3, r4, #8
    259c:	d400      	bmi.n	25a0 <__aeabi_dsub+0xb8>
    259e:	e0c5      	b.n	272c <__aeabi_dsub+0x244>
    25a0:	0264      	lsls	r4, r4, #9
    25a2:	0a65      	lsrs	r5, r4, #9
    25a4:	2d00      	cmp	r5, #0
    25a6:	d100      	bne.n	25aa <__aeabi_dsub+0xc2>
    25a8:	e0f6      	b.n	2798 <__aeabi_dsub+0x2b0>
    25aa:	0028      	movs	r0, r5
    25ac:	f000 fb1e 	bl	2bec <__clzsi2>
    25b0:	0003      	movs	r3, r0
    25b2:	3b08      	subs	r3, #8
    25b4:	2b1f      	cmp	r3, #31
    25b6:	dd00      	ble.n	25ba <__aeabi_dsub+0xd2>
    25b8:	e0e9      	b.n	278e <__aeabi_dsub+0x2a6>
    25ba:	2220      	movs	r2, #32
    25bc:	003c      	movs	r4, r7
    25be:	1ad2      	subs	r2, r2, r3
    25c0:	409d      	lsls	r5, r3
    25c2:	40d4      	lsrs	r4, r2
    25c4:	409f      	lsls	r7, r3
    25c6:	4325      	orrs	r5, r4
    25c8:	429e      	cmp	r6, r3
    25ca:	dd00      	ble.n	25ce <__aeabi_dsub+0xe6>
    25cc:	e0db      	b.n	2786 <__aeabi_dsub+0x29e>
    25ce:	1b9e      	subs	r6, r3, r6
    25d0:	1c73      	adds	r3, r6, #1
    25d2:	2b1f      	cmp	r3, #31
    25d4:	dd00      	ble.n	25d8 <__aeabi_dsub+0xf0>
    25d6:	e10a      	b.n	27ee <__aeabi_dsub+0x306>
    25d8:	2220      	movs	r2, #32
    25da:	0038      	movs	r0, r7
    25dc:	1ad2      	subs	r2, r2, r3
    25de:	0029      	movs	r1, r5
    25e0:	4097      	lsls	r7, r2
    25e2:	002c      	movs	r4, r5
    25e4:	4091      	lsls	r1, r2
    25e6:	40d8      	lsrs	r0, r3
    25e8:	1e7a      	subs	r2, r7, #1
    25ea:	4197      	sbcs	r7, r2
    25ec:	40dc      	lsrs	r4, r3
    25ee:	2600      	movs	r6, #0
    25f0:	4301      	orrs	r1, r0
    25f2:	430f      	orrs	r7, r1
    25f4:	077b      	lsls	r3, r7, #29
    25f6:	d009      	beq.n	260c <__aeabi_dsub+0x124>
    25f8:	230f      	movs	r3, #15
    25fa:	403b      	ands	r3, r7
    25fc:	2b04      	cmp	r3, #4
    25fe:	d005      	beq.n	260c <__aeabi_dsub+0x124>
    2600:	1d3b      	adds	r3, r7, #4
    2602:	42bb      	cmp	r3, r7
    2604:	41bf      	sbcs	r7, r7
    2606:	427f      	negs	r7, r7
    2608:	19e4      	adds	r4, r4, r7
    260a:	001f      	movs	r7, r3
    260c:	0223      	lsls	r3, r4, #8
    260e:	d525      	bpl.n	265c <__aeabi_dsub+0x174>
    2610:	4b86      	ldr	r3, [pc, #536]	; (282c <__aeabi_dsub+0x344>)
    2612:	3601      	adds	r6, #1
    2614:	429e      	cmp	r6, r3
    2616:	d100      	bne.n	261a <__aeabi_dsub+0x132>
    2618:	e0af      	b.n	277a <__aeabi_dsub+0x292>
    261a:	4b85      	ldr	r3, [pc, #532]	; (2830 <__aeabi_dsub+0x348>)
    261c:	2501      	movs	r5, #1
    261e:	401c      	ands	r4, r3
    2620:	4643      	mov	r3, r8
    2622:	0762      	lsls	r2, r4, #29
    2624:	08ff      	lsrs	r7, r7, #3
    2626:	0264      	lsls	r4, r4, #9
    2628:	0576      	lsls	r6, r6, #21
    262a:	4317      	orrs	r7, r2
    262c:	0b24      	lsrs	r4, r4, #12
    262e:	0d76      	lsrs	r6, r6, #21
    2630:	401d      	ands	r5, r3
    2632:	2100      	movs	r1, #0
    2634:	0324      	lsls	r4, r4, #12
    2636:	0b23      	lsrs	r3, r4, #12
    2638:	0d0c      	lsrs	r4, r1, #20
    263a:	4a7e      	ldr	r2, [pc, #504]	; (2834 <__aeabi_dsub+0x34c>)
    263c:	0524      	lsls	r4, r4, #20
    263e:	431c      	orrs	r4, r3
    2640:	4014      	ands	r4, r2
    2642:	0533      	lsls	r3, r6, #20
    2644:	4323      	orrs	r3, r4
    2646:	005b      	lsls	r3, r3, #1
    2648:	07ed      	lsls	r5, r5, #31
    264a:	085b      	lsrs	r3, r3, #1
    264c:	432b      	orrs	r3, r5
    264e:	0038      	movs	r0, r7
    2650:	0019      	movs	r1, r3
    2652:	bc1c      	pop	{r2, r3, r4}
    2654:	4690      	mov	r8, r2
    2656:	4699      	mov	r9, r3
    2658:	46a2      	mov	sl, r4
    265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    265c:	2501      	movs	r5, #1
    265e:	4643      	mov	r3, r8
    2660:	0762      	lsls	r2, r4, #29
    2662:	08ff      	lsrs	r7, r7, #3
    2664:	4317      	orrs	r7, r2
    2666:	08e4      	lsrs	r4, r4, #3
    2668:	401d      	ands	r5, r3
    266a:	4b70      	ldr	r3, [pc, #448]	; (282c <__aeabi_dsub+0x344>)
    266c:	429e      	cmp	r6, r3
    266e:	d036      	beq.n	26de <__aeabi_dsub+0x1f6>
    2670:	0324      	lsls	r4, r4, #12
    2672:	0576      	lsls	r6, r6, #21
    2674:	0b24      	lsrs	r4, r4, #12
    2676:	0d76      	lsrs	r6, r6, #21
    2678:	e7db      	b.n	2632 <__aeabi_dsub+0x14a>
    267a:	4663      	mov	r3, ip
    267c:	1af3      	subs	r3, r6, r3
    267e:	2b00      	cmp	r3, #0
    2680:	dc00      	bgt.n	2684 <__aeabi_dsub+0x19c>
    2682:	e094      	b.n	27ae <__aeabi_dsub+0x2c6>
    2684:	4660      	mov	r0, ip
    2686:	2800      	cmp	r0, #0
    2688:	d035      	beq.n	26f6 <__aeabi_dsub+0x20e>
    268a:	4868      	ldr	r0, [pc, #416]	; (282c <__aeabi_dsub+0x344>)
    268c:	4286      	cmp	r6, r0
    268e:	d0b1      	beq.n	25f4 <__aeabi_dsub+0x10c>
    2690:	2780      	movs	r7, #128	; 0x80
    2692:	043f      	lsls	r7, r7, #16
    2694:	4339      	orrs	r1, r7
    2696:	2b38      	cmp	r3, #56	; 0x38
    2698:	dc00      	bgt.n	269c <__aeabi_dsub+0x1b4>
    269a:	e0fd      	b.n	2898 <__aeabi_dsub+0x3b0>
    269c:	430a      	orrs	r2, r1
    269e:	0017      	movs	r7, r2
    26a0:	2100      	movs	r1, #0
    26a2:	1e7a      	subs	r2, r7, #1
    26a4:	4197      	sbcs	r7, r2
    26a6:	4457      	add	r7, sl
    26a8:	4557      	cmp	r7, sl
    26aa:	4180      	sbcs	r0, r0
    26ac:	1909      	adds	r1, r1, r4
    26ae:	4244      	negs	r4, r0
    26b0:	190c      	adds	r4, r1, r4
    26b2:	0223      	lsls	r3, r4, #8
    26b4:	d53a      	bpl.n	272c <__aeabi_dsub+0x244>
    26b6:	4b5d      	ldr	r3, [pc, #372]	; (282c <__aeabi_dsub+0x344>)
    26b8:	3601      	adds	r6, #1
    26ba:	429e      	cmp	r6, r3
    26bc:	d100      	bne.n	26c0 <__aeabi_dsub+0x1d8>
    26be:	e14b      	b.n	2958 <__aeabi_dsub+0x470>
    26c0:	2201      	movs	r2, #1
    26c2:	4b5b      	ldr	r3, [pc, #364]	; (2830 <__aeabi_dsub+0x348>)
    26c4:	401c      	ands	r4, r3
    26c6:	087b      	lsrs	r3, r7, #1
    26c8:	4017      	ands	r7, r2
    26ca:	431f      	orrs	r7, r3
    26cc:	07e2      	lsls	r2, r4, #31
    26ce:	4317      	orrs	r7, r2
    26d0:	0864      	lsrs	r4, r4, #1
    26d2:	e78f      	b.n	25f4 <__aeabi_dsub+0x10c>
    26d4:	0008      	movs	r0, r1
    26d6:	4310      	orrs	r0, r2
    26d8:	d000      	beq.n	26dc <__aeabi_dsub+0x1f4>
    26da:	e724      	b.n	2526 <__aeabi_dsub+0x3e>
    26dc:	e721      	b.n	2522 <__aeabi_dsub+0x3a>
    26de:	0023      	movs	r3, r4
    26e0:	433b      	orrs	r3, r7
    26e2:	d100      	bne.n	26e6 <__aeabi_dsub+0x1fe>
    26e4:	e1b9      	b.n	2a5a <__aeabi_dsub+0x572>
    26e6:	2280      	movs	r2, #128	; 0x80
    26e8:	0312      	lsls	r2, r2, #12
    26ea:	4314      	orrs	r4, r2
    26ec:	0324      	lsls	r4, r4, #12
    26ee:	0b24      	lsrs	r4, r4, #12
    26f0:	e79f      	b.n	2632 <__aeabi_dsub+0x14a>
    26f2:	002e      	movs	r6, r5
    26f4:	e77e      	b.n	25f4 <__aeabi_dsub+0x10c>
    26f6:	0008      	movs	r0, r1
    26f8:	4310      	orrs	r0, r2
    26fa:	d100      	bne.n	26fe <__aeabi_dsub+0x216>
    26fc:	e0ca      	b.n	2894 <__aeabi_dsub+0x3ac>
    26fe:	1e58      	subs	r0, r3, #1
    2700:	4684      	mov	ip, r0
    2702:	2800      	cmp	r0, #0
    2704:	d000      	beq.n	2708 <__aeabi_dsub+0x220>
    2706:	e0e7      	b.n	28d8 <__aeabi_dsub+0x3f0>
    2708:	4452      	add	r2, sl
    270a:	4552      	cmp	r2, sl
    270c:	4180      	sbcs	r0, r0
    270e:	1864      	adds	r4, r4, r1
    2710:	4240      	negs	r0, r0
    2712:	1824      	adds	r4, r4, r0
    2714:	0017      	movs	r7, r2
    2716:	2601      	movs	r6, #1
    2718:	0223      	lsls	r3, r4, #8
    271a:	d507      	bpl.n	272c <__aeabi_dsub+0x244>
    271c:	2602      	movs	r6, #2
    271e:	e7cf      	b.n	26c0 <__aeabi_dsub+0x1d8>
    2720:	4664      	mov	r4, ip
    2722:	432c      	orrs	r4, r5
    2724:	d100      	bne.n	2728 <__aeabi_dsub+0x240>
    2726:	e1b3      	b.n	2a90 <__aeabi_dsub+0x5a8>
    2728:	002c      	movs	r4, r5
    272a:	4667      	mov	r7, ip
    272c:	077b      	lsls	r3, r7, #29
    272e:	d000      	beq.n	2732 <__aeabi_dsub+0x24a>
    2730:	e762      	b.n	25f8 <__aeabi_dsub+0x110>
    2732:	0763      	lsls	r3, r4, #29
    2734:	08ff      	lsrs	r7, r7, #3
    2736:	431f      	orrs	r7, r3
    2738:	2501      	movs	r5, #1
    273a:	4643      	mov	r3, r8
    273c:	08e4      	lsrs	r4, r4, #3
    273e:	401d      	ands	r5, r3
    2740:	e793      	b.n	266a <__aeabi_dsub+0x182>
    2742:	2d00      	cmp	r5, #0
    2744:	d178      	bne.n	2838 <__aeabi_dsub+0x350>
    2746:	1c75      	adds	r5, r6, #1
    2748:	056d      	lsls	r5, r5, #21
    274a:	0d6d      	lsrs	r5, r5, #21
    274c:	2d01      	cmp	r5, #1
    274e:	dc00      	bgt.n	2752 <__aeabi_dsub+0x26a>
    2750:	e0f2      	b.n	2938 <__aeabi_dsub+0x450>
    2752:	4650      	mov	r0, sl
    2754:	1a80      	subs	r0, r0, r2
    2756:	4582      	cmp	sl, r0
    2758:	41bf      	sbcs	r7, r7
    275a:	1a65      	subs	r5, r4, r1
    275c:	427f      	negs	r7, r7
    275e:	1bed      	subs	r5, r5, r7
    2760:	4684      	mov	ip, r0
    2762:	0228      	lsls	r0, r5, #8
    2764:	d400      	bmi.n	2768 <__aeabi_dsub+0x280>
    2766:	e08c      	b.n	2882 <__aeabi_dsub+0x39a>
    2768:	4650      	mov	r0, sl
    276a:	1a17      	subs	r7, r2, r0
    276c:	42ba      	cmp	r2, r7
    276e:	4192      	sbcs	r2, r2
    2770:	1b0c      	subs	r4, r1, r4
    2772:	4255      	negs	r5, r2
    2774:	1b65      	subs	r5, r4, r5
    2776:	4698      	mov	r8, r3
    2778:	e714      	b.n	25a4 <__aeabi_dsub+0xbc>
    277a:	2501      	movs	r5, #1
    277c:	4643      	mov	r3, r8
    277e:	2400      	movs	r4, #0
    2780:	401d      	ands	r5, r3
    2782:	2700      	movs	r7, #0
    2784:	e755      	b.n	2632 <__aeabi_dsub+0x14a>
    2786:	4c2a      	ldr	r4, [pc, #168]	; (2830 <__aeabi_dsub+0x348>)
    2788:	1af6      	subs	r6, r6, r3
    278a:	402c      	ands	r4, r5
    278c:	e732      	b.n	25f4 <__aeabi_dsub+0x10c>
    278e:	003d      	movs	r5, r7
    2790:	3828      	subs	r0, #40	; 0x28
    2792:	4085      	lsls	r5, r0
    2794:	2700      	movs	r7, #0
    2796:	e717      	b.n	25c8 <__aeabi_dsub+0xe0>
    2798:	0038      	movs	r0, r7
    279a:	f000 fa27 	bl	2bec <__clzsi2>
    279e:	3020      	adds	r0, #32
    27a0:	e706      	b.n	25b0 <__aeabi_dsub+0xc8>
    27a2:	430a      	orrs	r2, r1
    27a4:	0017      	movs	r7, r2
    27a6:	2100      	movs	r1, #0
    27a8:	1e7a      	subs	r2, r7, #1
    27aa:	4197      	sbcs	r7, r2
    27ac:	e6ee      	b.n	258c <__aeabi_dsub+0xa4>
    27ae:	2b00      	cmp	r3, #0
    27b0:	d000      	beq.n	27b4 <__aeabi_dsub+0x2cc>
    27b2:	e0e5      	b.n	2980 <__aeabi_dsub+0x498>
    27b4:	1c73      	adds	r3, r6, #1
    27b6:	469c      	mov	ip, r3
    27b8:	055b      	lsls	r3, r3, #21
    27ba:	0d5b      	lsrs	r3, r3, #21
    27bc:	2b01      	cmp	r3, #1
    27be:	dc00      	bgt.n	27c2 <__aeabi_dsub+0x2da>
    27c0:	e09f      	b.n	2902 <__aeabi_dsub+0x41a>
    27c2:	4b1a      	ldr	r3, [pc, #104]	; (282c <__aeabi_dsub+0x344>)
    27c4:	459c      	cmp	ip, r3
    27c6:	d100      	bne.n	27ca <__aeabi_dsub+0x2e2>
    27c8:	e0c5      	b.n	2956 <__aeabi_dsub+0x46e>
    27ca:	4452      	add	r2, sl
    27cc:	4552      	cmp	r2, sl
    27ce:	4180      	sbcs	r0, r0
    27d0:	1864      	adds	r4, r4, r1
    27d2:	4240      	negs	r0, r0
    27d4:	1824      	adds	r4, r4, r0
    27d6:	07e7      	lsls	r7, r4, #31
    27d8:	0852      	lsrs	r2, r2, #1
    27da:	4317      	orrs	r7, r2
    27dc:	0864      	lsrs	r4, r4, #1
    27de:	4666      	mov	r6, ip
    27e0:	e708      	b.n	25f4 <__aeabi_dsub+0x10c>
    27e2:	4812      	ldr	r0, [pc, #72]	; (282c <__aeabi_dsub+0x344>)
    27e4:	4285      	cmp	r5, r0
    27e6:	d100      	bne.n	27ea <__aeabi_dsub+0x302>
    27e8:	e085      	b.n	28f6 <__aeabi_dsub+0x40e>
    27ea:	001d      	movs	r5, r3
    27ec:	e6bc      	b.n	2568 <__aeabi_dsub+0x80>
    27ee:	0029      	movs	r1, r5
    27f0:	3e1f      	subs	r6, #31
    27f2:	40f1      	lsrs	r1, r6
    27f4:	2b20      	cmp	r3, #32
    27f6:	d100      	bne.n	27fa <__aeabi_dsub+0x312>
    27f8:	e07f      	b.n	28fa <__aeabi_dsub+0x412>
    27fa:	2240      	movs	r2, #64	; 0x40
    27fc:	1ad3      	subs	r3, r2, r3
    27fe:	409d      	lsls	r5, r3
    2800:	432f      	orrs	r7, r5
    2802:	1e7d      	subs	r5, r7, #1
    2804:	41af      	sbcs	r7, r5
    2806:	2400      	movs	r4, #0
    2808:	430f      	orrs	r7, r1
    280a:	2600      	movs	r6, #0
    280c:	e78e      	b.n	272c <__aeabi_dsub+0x244>
    280e:	002b      	movs	r3, r5
    2810:	000f      	movs	r7, r1
    2812:	3b20      	subs	r3, #32
    2814:	40df      	lsrs	r7, r3
    2816:	2d20      	cmp	r5, #32
    2818:	d071      	beq.n	28fe <__aeabi_dsub+0x416>
    281a:	2340      	movs	r3, #64	; 0x40
    281c:	1b5d      	subs	r5, r3, r5
    281e:	40a9      	lsls	r1, r5
    2820:	430a      	orrs	r2, r1
    2822:	1e51      	subs	r1, r2, #1
    2824:	418a      	sbcs	r2, r1
    2826:	2100      	movs	r1, #0
    2828:	4317      	orrs	r7, r2
    282a:	e6af      	b.n	258c <__aeabi_dsub+0xa4>
    282c:	000007ff 	.word	0x000007ff
    2830:	ff7fffff 	.word	0xff7fffff
    2834:	800fffff 	.word	0x800fffff
    2838:	2e00      	cmp	r6, #0
    283a:	d03e      	beq.n	28ba <__aeabi_dsub+0x3d2>
    283c:	4eb3      	ldr	r6, [pc, #716]	; (2b0c <__aeabi_dsub+0x624>)
    283e:	45b4      	cmp	ip, r6
    2840:	d045      	beq.n	28ce <__aeabi_dsub+0x3e6>
    2842:	2680      	movs	r6, #128	; 0x80
    2844:	0436      	lsls	r6, r6, #16
    2846:	426d      	negs	r5, r5
    2848:	4334      	orrs	r4, r6
    284a:	2d38      	cmp	r5, #56	; 0x38
    284c:	dd00      	ble.n	2850 <__aeabi_dsub+0x368>
    284e:	e0a8      	b.n	29a2 <__aeabi_dsub+0x4ba>
    2850:	2d1f      	cmp	r5, #31
    2852:	dd00      	ble.n	2856 <__aeabi_dsub+0x36e>
    2854:	e11f      	b.n	2a96 <__aeabi_dsub+0x5ae>
    2856:	2620      	movs	r6, #32
    2858:	0027      	movs	r7, r4
    285a:	4650      	mov	r0, sl
    285c:	1b76      	subs	r6, r6, r5
    285e:	40b7      	lsls	r7, r6
    2860:	40e8      	lsrs	r0, r5
    2862:	4307      	orrs	r7, r0
    2864:	4650      	mov	r0, sl
    2866:	40b0      	lsls	r0, r6
    2868:	1e46      	subs	r6, r0, #1
    286a:	41b0      	sbcs	r0, r6
    286c:	40ec      	lsrs	r4, r5
    286e:	4338      	orrs	r0, r7
    2870:	1a17      	subs	r7, r2, r0
    2872:	42ba      	cmp	r2, r7
    2874:	4192      	sbcs	r2, r2
    2876:	1b0c      	subs	r4, r1, r4
    2878:	4252      	negs	r2, r2
    287a:	1aa4      	subs	r4, r4, r2
    287c:	4666      	mov	r6, ip
    287e:	4698      	mov	r8, r3
    2880:	e68b      	b.n	259a <__aeabi_dsub+0xb2>
    2882:	4664      	mov	r4, ip
    2884:	4667      	mov	r7, ip
    2886:	432c      	orrs	r4, r5
    2888:	d000      	beq.n	288c <__aeabi_dsub+0x3a4>
    288a:	e68b      	b.n	25a4 <__aeabi_dsub+0xbc>
    288c:	2500      	movs	r5, #0
    288e:	2600      	movs	r6, #0
    2890:	2700      	movs	r7, #0
    2892:	e6ea      	b.n	266a <__aeabi_dsub+0x182>
    2894:	001e      	movs	r6, r3
    2896:	e6ad      	b.n	25f4 <__aeabi_dsub+0x10c>
    2898:	2b1f      	cmp	r3, #31
    289a:	dc60      	bgt.n	295e <__aeabi_dsub+0x476>
    289c:	2720      	movs	r7, #32
    289e:	1af8      	subs	r0, r7, r3
    28a0:	000f      	movs	r7, r1
    28a2:	4684      	mov	ip, r0
    28a4:	4087      	lsls	r7, r0
    28a6:	0010      	movs	r0, r2
    28a8:	40d8      	lsrs	r0, r3
    28aa:	4307      	orrs	r7, r0
    28ac:	4660      	mov	r0, ip
    28ae:	4082      	lsls	r2, r0
    28b0:	1e50      	subs	r0, r2, #1
    28b2:	4182      	sbcs	r2, r0
    28b4:	40d9      	lsrs	r1, r3
    28b6:	4317      	orrs	r7, r2
    28b8:	e6f5      	b.n	26a6 <__aeabi_dsub+0x1be>
    28ba:	0026      	movs	r6, r4
    28bc:	4650      	mov	r0, sl
    28be:	4306      	orrs	r6, r0
    28c0:	d005      	beq.n	28ce <__aeabi_dsub+0x3e6>
    28c2:	43ed      	mvns	r5, r5
    28c4:	2d00      	cmp	r5, #0
    28c6:	d0d3      	beq.n	2870 <__aeabi_dsub+0x388>
    28c8:	4e90      	ldr	r6, [pc, #576]	; (2b0c <__aeabi_dsub+0x624>)
    28ca:	45b4      	cmp	ip, r6
    28cc:	d1bd      	bne.n	284a <__aeabi_dsub+0x362>
    28ce:	000c      	movs	r4, r1
    28d0:	0017      	movs	r7, r2
    28d2:	4666      	mov	r6, ip
    28d4:	4698      	mov	r8, r3
    28d6:	e68d      	b.n	25f4 <__aeabi_dsub+0x10c>
    28d8:	488c      	ldr	r0, [pc, #560]	; (2b0c <__aeabi_dsub+0x624>)
    28da:	4283      	cmp	r3, r0
    28dc:	d00b      	beq.n	28f6 <__aeabi_dsub+0x40e>
    28de:	4663      	mov	r3, ip
    28e0:	e6d9      	b.n	2696 <__aeabi_dsub+0x1ae>
    28e2:	2d00      	cmp	r5, #0
    28e4:	d000      	beq.n	28e8 <__aeabi_dsub+0x400>
    28e6:	e096      	b.n	2a16 <__aeabi_dsub+0x52e>
    28e8:	0008      	movs	r0, r1
    28ea:	4310      	orrs	r0, r2
    28ec:	d100      	bne.n	28f0 <__aeabi_dsub+0x408>
    28ee:	e0e2      	b.n	2ab6 <__aeabi_dsub+0x5ce>
    28f0:	000c      	movs	r4, r1
    28f2:	0017      	movs	r7, r2
    28f4:	4698      	mov	r8, r3
    28f6:	4e85      	ldr	r6, [pc, #532]	; (2b0c <__aeabi_dsub+0x624>)
    28f8:	e67c      	b.n	25f4 <__aeabi_dsub+0x10c>
    28fa:	2500      	movs	r5, #0
    28fc:	e780      	b.n	2800 <__aeabi_dsub+0x318>
    28fe:	2100      	movs	r1, #0
    2900:	e78e      	b.n	2820 <__aeabi_dsub+0x338>
    2902:	0023      	movs	r3, r4
    2904:	4650      	mov	r0, sl
    2906:	4303      	orrs	r3, r0
    2908:	2e00      	cmp	r6, #0
    290a:	d000      	beq.n	290e <__aeabi_dsub+0x426>
    290c:	e0a8      	b.n	2a60 <__aeabi_dsub+0x578>
    290e:	2b00      	cmp	r3, #0
    2910:	d100      	bne.n	2914 <__aeabi_dsub+0x42c>
    2912:	e0de      	b.n	2ad2 <__aeabi_dsub+0x5ea>
    2914:	000b      	movs	r3, r1
    2916:	4313      	orrs	r3, r2
    2918:	d100      	bne.n	291c <__aeabi_dsub+0x434>
    291a:	e66b      	b.n	25f4 <__aeabi_dsub+0x10c>
    291c:	4452      	add	r2, sl
    291e:	4552      	cmp	r2, sl
    2920:	4180      	sbcs	r0, r0
    2922:	1864      	adds	r4, r4, r1
    2924:	4240      	negs	r0, r0
    2926:	1824      	adds	r4, r4, r0
    2928:	0017      	movs	r7, r2
    292a:	0223      	lsls	r3, r4, #8
    292c:	d400      	bmi.n	2930 <__aeabi_dsub+0x448>
    292e:	e6fd      	b.n	272c <__aeabi_dsub+0x244>
    2930:	4b77      	ldr	r3, [pc, #476]	; (2b10 <__aeabi_dsub+0x628>)
    2932:	4666      	mov	r6, ip
    2934:	401c      	ands	r4, r3
    2936:	e65d      	b.n	25f4 <__aeabi_dsub+0x10c>
    2938:	0025      	movs	r5, r4
    293a:	4650      	mov	r0, sl
    293c:	4305      	orrs	r5, r0
    293e:	2e00      	cmp	r6, #0
    2940:	d1cf      	bne.n	28e2 <__aeabi_dsub+0x3fa>
    2942:	2d00      	cmp	r5, #0
    2944:	d14f      	bne.n	29e6 <__aeabi_dsub+0x4fe>
    2946:	000c      	movs	r4, r1
    2948:	4314      	orrs	r4, r2
    294a:	d100      	bne.n	294e <__aeabi_dsub+0x466>
    294c:	e0a0      	b.n	2a90 <__aeabi_dsub+0x5a8>
    294e:	000c      	movs	r4, r1
    2950:	0017      	movs	r7, r2
    2952:	4698      	mov	r8, r3
    2954:	e64e      	b.n	25f4 <__aeabi_dsub+0x10c>
    2956:	4666      	mov	r6, ip
    2958:	2400      	movs	r4, #0
    295a:	2700      	movs	r7, #0
    295c:	e685      	b.n	266a <__aeabi_dsub+0x182>
    295e:	001f      	movs	r7, r3
    2960:	0008      	movs	r0, r1
    2962:	3f20      	subs	r7, #32
    2964:	40f8      	lsrs	r0, r7
    2966:	0007      	movs	r7, r0
    2968:	2b20      	cmp	r3, #32
    296a:	d100      	bne.n	296e <__aeabi_dsub+0x486>
    296c:	e08e      	b.n	2a8c <__aeabi_dsub+0x5a4>
    296e:	2040      	movs	r0, #64	; 0x40
    2970:	1ac3      	subs	r3, r0, r3
    2972:	4099      	lsls	r1, r3
    2974:	430a      	orrs	r2, r1
    2976:	1e51      	subs	r1, r2, #1
    2978:	418a      	sbcs	r2, r1
    297a:	2100      	movs	r1, #0
    297c:	4317      	orrs	r7, r2
    297e:	e692      	b.n	26a6 <__aeabi_dsub+0x1be>
    2980:	2e00      	cmp	r6, #0
    2982:	d114      	bne.n	29ae <__aeabi_dsub+0x4c6>
    2984:	0026      	movs	r6, r4
    2986:	4650      	mov	r0, sl
    2988:	4306      	orrs	r6, r0
    298a:	d062      	beq.n	2a52 <__aeabi_dsub+0x56a>
    298c:	43db      	mvns	r3, r3
    298e:	2b00      	cmp	r3, #0
    2990:	d15c      	bne.n	2a4c <__aeabi_dsub+0x564>
    2992:	1887      	adds	r7, r0, r2
    2994:	4297      	cmp	r7, r2
    2996:	4192      	sbcs	r2, r2
    2998:	1864      	adds	r4, r4, r1
    299a:	4252      	negs	r2, r2
    299c:	18a4      	adds	r4, r4, r2
    299e:	4666      	mov	r6, ip
    29a0:	e687      	b.n	26b2 <__aeabi_dsub+0x1ca>
    29a2:	4650      	mov	r0, sl
    29a4:	4320      	orrs	r0, r4
    29a6:	1e44      	subs	r4, r0, #1
    29a8:	41a0      	sbcs	r0, r4
    29aa:	2400      	movs	r4, #0
    29ac:	e760      	b.n	2870 <__aeabi_dsub+0x388>
    29ae:	4e57      	ldr	r6, [pc, #348]	; (2b0c <__aeabi_dsub+0x624>)
    29b0:	45b4      	cmp	ip, r6
    29b2:	d04e      	beq.n	2a52 <__aeabi_dsub+0x56a>
    29b4:	2680      	movs	r6, #128	; 0x80
    29b6:	0436      	lsls	r6, r6, #16
    29b8:	425b      	negs	r3, r3
    29ba:	4334      	orrs	r4, r6
    29bc:	2b38      	cmp	r3, #56	; 0x38
    29be:	dd00      	ble.n	29c2 <__aeabi_dsub+0x4da>
    29c0:	e07f      	b.n	2ac2 <__aeabi_dsub+0x5da>
    29c2:	2b1f      	cmp	r3, #31
    29c4:	dd00      	ble.n	29c8 <__aeabi_dsub+0x4e0>
    29c6:	e08b      	b.n	2ae0 <__aeabi_dsub+0x5f8>
    29c8:	2620      	movs	r6, #32
    29ca:	0027      	movs	r7, r4
    29cc:	4650      	mov	r0, sl
    29ce:	1af6      	subs	r6, r6, r3
    29d0:	40b7      	lsls	r7, r6
    29d2:	40d8      	lsrs	r0, r3
    29d4:	4307      	orrs	r7, r0
    29d6:	4650      	mov	r0, sl
    29d8:	40b0      	lsls	r0, r6
    29da:	1e46      	subs	r6, r0, #1
    29dc:	41b0      	sbcs	r0, r6
    29de:	4307      	orrs	r7, r0
    29e0:	40dc      	lsrs	r4, r3
    29e2:	18bf      	adds	r7, r7, r2
    29e4:	e7d6      	b.n	2994 <__aeabi_dsub+0x4ac>
    29e6:	000d      	movs	r5, r1
    29e8:	4315      	orrs	r5, r2
    29ea:	d100      	bne.n	29ee <__aeabi_dsub+0x506>
    29ec:	e602      	b.n	25f4 <__aeabi_dsub+0x10c>
    29ee:	4650      	mov	r0, sl
    29f0:	1a80      	subs	r0, r0, r2
    29f2:	4582      	cmp	sl, r0
    29f4:	41bf      	sbcs	r7, r7
    29f6:	1a65      	subs	r5, r4, r1
    29f8:	427f      	negs	r7, r7
    29fa:	1bed      	subs	r5, r5, r7
    29fc:	4684      	mov	ip, r0
    29fe:	0228      	lsls	r0, r5, #8
    2a00:	d400      	bmi.n	2a04 <__aeabi_dsub+0x51c>
    2a02:	e68d      	b.n	2720 <__aeabi_dsub+0x238>
    2a04:	4650      	mov	r0, sl
    2a06:	1a17      	subs	r7, r2, r0
    2a08:	42ba      	cmp	r2, r7
    2a0a:	4192      	sbcs	r2, r2
    2a0c:	1b0c      	subs	r4, r1, r4
    2a0e:	4252      	negs	r2, r2
    2a10:	1aa4      	subs	r4, r4, r2
    2a12:	4698      	mov	r8, r3
    2a14:	e5ee      	b.n	25f4 <__aeabi_dsub+0x10c>
    2a16:	000d      	movs	r5, r1
    2a18:	4315      	orrs	r5, r2
    2a1a:	d100      	bne.n	2a1e <__aeabi_dsub+0x536>
    2a1c:	e76b      	b.n	28f6 <__aeabi_dsub+0x40e>
    2a1e:	4650      	mov	r0, sl
    2a20:	0767      	lsls	r7, r4, #29
    2a22:	08c0      	lsrs	r0, r0, #3
    2a24:	4307      	orrs	r7, r0
    2a26:	2080      	movs	r0, #128	; 0x80
    2a28:	08e4      	lsrs	r4, r4, #3
    2a2a:	0300      	lsls	r0, r0, #12
    2a2c:	4204      	tst	r4, r0
    2a2e:	d007      	beq.n	2a40 <__aeabi_dsub+0x558>
    2a30:	08cd      	lsrs	r5, r1, #3
    2a32:	4205      	tst	r5, r0
    2a34:	d104      	bne.n	2a40 <__aeabi_dsub+0x558>
    2a36:	002c      	movs	r4, r5
    2a38:	4698      	mov	r8, r3
    2a3a:	08d7      	lsrs	r7, r2, #3
    2a3c:	0749      	lsls	r1, r1, #29
    2a3e:	430f      	orrs	r7, r1
    2a40:	0f7b      	lsrs	r3, r7, #29
    2a42:	00e4      	lsls	r4, r4, #3
    2a44:	431c      	orrs	r4, r3
    2a46:	00ff      	lsls	r7, r7, #3
    2a48:	4e30      	ldr	r6, [pc, #192]	; (2b0c <__aeabi_dsub+0x624>)
    2a4a:	e5d3      	b.n	25f4 <__aeabi_dsub+0x10c>
    2a4c:	4e2f      	ldr	r6, [pc, #188]	; (2b0c <__aeabi_dsub+0x624>)
    2a4e:	45b4      	cmp	ip, r6
    2a50:	d1b4      	bne.n	29bc <__aeabi_dsub+0x4d4>
    2a52:	000c      	movs	r4, r1
    2a54:	0017      	movs	r7, r2
    2a56:	4666      	mov	r6, ip
    2a58:	e5cc      	b.n	25f4 <__aeabi_dsub+0x10c>
    2a5a:	2700      	movs	r7, #0
    2a5c:	2400      	movs	r4, #0
    2a5e:	e5e8      	b.n	2632 <__aeabi_dsub+0x14a>
    2a60:	2b00      	cmp	r3, #0
    2a62:	d039      	beq.n	2ad8 <__aeabi_dsub+0x5f0>
    2a64:	000b      	movs	r3, r1
    2a66:	4313      	orrs	r3, r2
    2a68:	d100      	bne.n	2a6c <__aeabi_dsub+0x584>
    2a6a:	e744      	b.n	28f6 <__aeabi_dsub+0x40e>
    2a6c:	08c0      	lsrs	r0, r0, #3
    2a6e:	0767      	lsls	r7, r4, #29
    2a70:	4307      	orrs	r7, r0
    2a72:	2080      	movs	r0, #128	; 0x80
    2a74:	08e4      	lsrs	r4, r4, #3
    2a76:	0300      	lsls	r0, r0, #12
    2a78:	4204      	tst	r4, r0
    2a7a:	d0e1      	beq.n	2a40 <__aeabi_dsub+0x558>
    2a7c:	08cb      	lsrs	r3, r1, #3
    2a7e:	4203      	tst	r3, r0
    2a80:	d1de      	bne.n	2a40 <__aeabi_dsub+0x558>
    2a82:	08d7      	lsrs	r7, r2, #3
    2a84:	0749      	lsls	r1, r1, #29
    2a86:	430f      	orrs	r7, r1
    2a88:	001c      	movs	r4, r3
    2a8a:	e7d9      	b.n	2a40 <__aeabi_dsub+0x558>
    2a8c:	2100      	movs	r1, #0
    2a8e:	e771      	b.n	2974 <__aeabi_dsub+0x48c>
    2a90:	2500      	movs	r5, #0
    2a92:	2700      	movs	r7, #0
    2a94:	e5e9      	b.n	266a <__aeabi_dsub+0x182>
    2a96:	002e      	movs	r6, r5
    2a98:	0027      	movs	r7, r4
    2a9a:	3e20      	subs	r6, #32
    2a9c:	40f7      	lsrs	r7, r6
    2a9e:	2d20      	cmp	r5, #32
    2aa0:	d02f      	beq.n	2b02 <__aeabi_dsub+0x61a>
    2aa2:	2640      	movs	r6, #64	; 0x40
    2aa4:	1b75      	subs	r5, r6, r5
    2aa6:	40ac      	lsls	r4, r5
    2aa8:	4650      	mov	r0, sl
    2aaa:	4320      	orrs	r0, r4
    2aac:	1e44      	subs	r4, r0, #1
    2aae:	41a0      	sbcs	r0, r4
    2ab0:	2400      	movs	r4, #0
    2ab2:	4338      	orrs	r0, r7
    2ab4:	e6dc      	b.n	2870 <__aeabi_dsub+0x388>
    2ab6:	2480      	movs	r4, #128	; 0x80
    2ab8:	2500      	movs	r5, #0
    2aba:	0324      	lsls	r4, r4, #12
    2abc:	4e13      	ldr	r6, [pc, #76]	; (2b0c <__aeabi_dsub+0x624>)
    2abe:	2700      	movs	r7, #0
    2ac0:	e5d3      	b.n	266a <__aeabi_dsub+0x182>
    2ac2:	4650      	mov	r0, sl
    2ac4:	4320      	orrs	r0, r4
    2ac6:	0007      	movs	r7, r0
    2ac8:	1e78      	subs	r0, r7, #1
    2aca:	4187      	sbcs	r7, r0
    2acc:	2400      	movs	r4, #0
    2ace:	18bf      	adds	r7, r7, r2
    2ad0:	e760      	b.n	2994 <__aeabi_dsub+0x4ac>
    2ad2:	000c      	movs	r4, r1
    2ad4:	0017      	movs	r7, r2
    2ad6:	e58d      	b.n	25f4 <__aeabi_dsub+0x10c>
    2ad8:	000c      	movs	r4, r1
    2ada:	0017      	movs	r7, r2
    2adc:	4e0b      	ldr	r6, [pc, #44]	; (2b0c <__aeabi_dsub+0x624>)
    2ade:	e589      	b.n	25f4 <__aeabi_dsub+0x10c>
    2ae0:	001e      	movs	r6, r3
    2ae2:	0027      	movs	r7, r4
    2ae4:	3e20      	subs	r6, #32
    2ae6:	40f7      	lsrs	r7, r6
    2ae8:	2b20      	cmp	r3, #32
    2aea:	d00c      	beq.n	2b06 <__aeabi_dsub+0x61e>
    2aec:	2640      	movs	r6, #64	; 0x40
    2aee:	1af3      	subs	r3, r6, r3
    2af0:	409c      	lsls	r4, r3
    2af2:	4650      	mov	r0, sl
    2af4:	4320      	orrs	r0, r4
    2af6:	1e44      	subs	r4, r0, #1
    2af8:	41a0      	sbcs	r0, r4
    2afa:	4307      	orrs	r7, r0
    2afc:	2400      	movs	r4, #0
    2afe:	18bf      	adds	r7, r7, r2
    2b00:	e748      	b.n	2994 <__aeabi_dsub+0x4ac>
    2b02:	2400      	movs	r4, #0
    2b04:	e7d0      	b.n	2aa8 <__aeabi_dsub+0x5c0>
    2b06:	2400      	movs	r4, #0
    2b08:	e7f3      	b.n	2af2 <__aeabi_dsub+0x60a>
    2b0a:	46c0      	nop			; (mov r8, r8)
    2b0c:	000007ff 	.word	0x000007ff
    2b10:	ff7fffff 	.word	0xff7fffff

00002b14 <__aeabi_d2iz>:
    2b14:	b530      	push	{r4, r5, lr}
    2b16:	4d13      	ldr	r5, [pc, #76]	; (2b64 <__aeabi_d2iz+0x50>)
    2b18:	030a      	lsls	r2, r1, #12
    2b1a:	004b      	lsls	r3, r1, #1
    2b1c:	0b12      	lsrs	r2, r2, #12
    2b1e:	0d5b      	lsrs	r3, r3, #21
    2b20:	0fc9      	lsrs	r1, r1, #31
    2b22:	2400      	movs	r4, #0
    2b24:	42ab      	cmp	r3, r5
    2b26:	dd10      	ble.n	2b4a <__aeabi_d2iz+0x36>
    2b28:	4c0f      	ldr	r4, [pc, #60]	; (2b68 <__aeabi_d2iz+0x54>)
    2b2a:	42a3      	cmp	r3, r4
    2b2c:	dc0f      	bgt.n	2b4e <__aeabi_d2iz+0x3a>
    2b2e:	2480      	movs	r4, #128	; 0x80
    2b30:	4d0e      	ldr	r5, [pc, #56]	; (2b6c <__aeabi_d2iz+0x58>)
    2b32:	0364      	lsls	r4, r4, #13
    2b34:	4322      	orrs	r2, r4
    2b36:	1aed      	subs	r5, r5, r3
    2b38:	2d1f      	cmp	r5, #31
    2b3a:	dd0b      	ble.n	2b54 <__aeabi_d2iz+0x40>
    2b3c:	480c      	ldr	r0, [pc, #48]	; (2b70 <__aeabi_d2iz+0x5c>)
    2b3e:	1ac3      	subs	r3, r0, r3
    2b40:	40da      	lsrs	r2, r3
    2b42:	4254      	negs	r4, r2
    2b44:	2900      	cmp	r1, #0
    2b46:	d100      	bne.n	2b4a <__aeabi_d2iz+0x36>
    2b48:	0014      	movs	r4, r2
    2b4a:	0020      	movs	r0, r4
    2b4c:	bd30      	pop	{r4, r5, pc}
    2b4e:	4b09      	ldr	r3, [pc, #36]	; (2b74 <__aeabi_d2iz+0x60>)
    2b50:	18cc      	adds	r4, r1, r3
    2b52:	e7fa      	b.n	2b4a <__aeabi_d2iz+0x36>
    2b54:	4c08      	ldr	r4, [pc, #32]	; (2b78 <__aeabi_d2iz+0x64>)
    2b56:	40e8      	lsrs	r0, r5
    2b58:	46a4      	mov	ip, r4
    2b5a:	4463      	add	r3, ip
    2b5c:	409a      	lsls	r2, r3
    2b5e:	4302      	orrs	r2, r0
    2b60:	e7ef      	b.n	2b42 <__aeabi_d2iz+0x2e>
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	000003fe 	.word	0x000003fe
    2b68:	0000041d 	.word	0x0000041d
    2b6c:	00000433 	.word	0x00000433
    2b70:	00000413 	.word	0x00000413
    2b74:	7fffffff 	.word	0x7fffffff
    2b78:	fffffbed 	.word	0xfffffbed

00002b7c <__aeabi_ui2d>:
    2b7c:	b510      	push	{r4, lr}
    2b7e:	1e04      	subs	r4, r0, #0
    2b80:	d028      	beq.n	2bd4 <__aeabi_ui2d+0x58>
    2b82:	f000 f833 	bl	2bec <__clzsi2>
    2b86:	4b15      	ldr	r3, [pc, #84]	; (2bdc <__aeabi_ui2d+0x60>)
    2b88:	4a15      	ldr	r2, [pc, #84]	; (2be0 <__aeabi_ui2d+0x64>)
    2b8a:	1a1b      	subs	r3, r3, r0
    2b8c:	1ad2      	subs	r2, r2, r3
    2b8e:	2a1f      	cmp	r2, #31
    2b90:	dd15      	ble.n	2bbe <__aeabi_ui2d+0x42>
    2b92:	4a14      	ldr	r2, [pc, #80]	; (2be4 <__aeabi_ui2d+0x68>)
    2b94:	1ad2      	subs	r2, r2, r3
    2b96:	4094      	lsls	r4, r2
    2b98:	2200      	movs	r2, #0
    2b9a:	0324      	lsls	r4, r4, #12
    2b9c:	055b      	lsls	r3, r3, #21
    2b9e:	0b24      	lsrs	r4, r4, #12
    2ba0:	0d5b      	lsrs	r3, r3, #21
    2ba2:	2100      	movs	r1, #0
    2ba4:	0010      	movs	r0, r2
    2ba6:	0324      	lsls	r4, r4, #12
    2ba8:	0d0a      	lsrs	r2, r1, #20
    2baa:	0b24      	lsrs	r4, r4, #12
    2bac:	0512      	lsls	r2, r2, #20
    2bae:	4322      	orrs	r2, r4
    2bb0:	4c0d      	ldr	r4, [pc, #52]	; (2be8 <__aeabi_ui2d+0x6c>)
    2bb2:	051b      	lsls	r3, r3, #20
    2bb4:	4022      	ands	r2, r4
    2bb6:	4313      	orrs	r3, r2
    2bb8:	005b      	lsls	r3, r3, #1
    2bba:	0859      	lsrs	r1, r3, #1
    2bbc:	bd10      	pop	{r4, pc}
    2bbe:	0021      	movs	r1, r4
    2bc0:	4091      	lsls	r1, r2
    2bc2:	000a      	movs	r2, r1
    2bc4:	210b      	movs	r1, #11
    2bc6:	1a08      	subs	r0, r1, r0
    2bc8:	40c4      	lsrs	r4, r0
    2bca:	055b      	lsls	r3, r3, #21
    2bcc:	0324      	lsls	r4, r4, #12
    2bce:	0b24      	lsrs	r4, r4, #12
    2bd0:	0d5b      	lsrs	r3, r3, #21
    2bd2:	e7e6      	b.n	2ba2 <__aeabi_ui2d+0x26>
    2bd4:	2300      	movs	r3, #0
    2bd6:	2400      	movs	r4, #0
    2bd8:	2200      	movs	r2, #0
    2bda:	e7e2      	b.n	2ba2 <__aeabi_ui2d+0x26>
    2bdc:	0000041e 	.word	0x0000041e
    2be0:	00000433 	.word	0x00000433
    2be4:	00000413 	.word	0x00000413
    2be8:	800fffff 	.word	0x800fffff

00002bec <__clzsi2>:
    2bec:	211c      	movs	r1, #28
    2bee:	2301      	movs	r3, #1
    2bf0:	041b      	lsls	r3, r3, #16
    2bf2:	4298      	cmp	r0, r3
    2bf4:	d301      	bcc.n	2bfa <__clzsi2+0xe>
    2bf6:	0c00      	lsrs	r0, r0, #16
    2bf8:	3910      	subs	r1, #16
    2bfa:	0a1b      	lsrs	r3, r3, #8
    2bfc:	4298      	cmp	r0, r3
    2bfe:	d301      	bcc.n	2c04 <__clzsi2+0x18>
    2c00:	0a00      	lsrs	r0, r0, #8
    2c02:	3908      	subs	r1, #8
    2c04:	091b      	lsrs	r3, r3, #4
    2c06:	4298      	cmp	r0, r3
    2c08:	d301      	bcc.n	2c0e <__clzsi2+0x22>
    2c0a:	0900      	lsrs	r0, r0, #4
    2c0c:	3904      	subs	r1, #4
    2c0e:	a202      	add	r2, pc, #8	; (adr r2, 2c18 <__clzsi2+0x2c>)
    2c10:	5c10      	ldrb	r0, [r2, r0]
    2c12:	1840      	adds	r0, r0, r1
    2c14:	4770      	bx	lr
    2c16:	46c0      	nop			; (mov r8, r8)
    2c18:	02020304 	.word	0x02020304
    2c1c:	01010101 	.word	0x01010101
	...

00002c28 <__libc_init_array>:
    2c28:	b570      	push	{r4, r5, r6, lr}
    2c2a:	2600      	movs	r6, #0
    2c2c:	4d0c      	ldr	r5, [pc, #48]	; (2c60 <__libc_init_array+0x38>)
    2c2e:	4c0d      	ldr	r4, [pc, #52]	; (2c64 <__libc_init_array+0x3c>)
    2c30:	1b64      	subs	r4, r4, r5
    2c32:	10a4      	asrs	r4, r4, #2
    2c34:	42a6      	cmp	r6, r4
    2c36:	d109      	bne.n	2c4c <__libc_init_array+0x24>
    2c38:	2600      	movs	r6, #0
    2c3a:	f000 f88f 	bl	2d5c <_init>
    2c3e:	4d0a      	ldr	r5, [pc, #40]	; (2c68 <__libc_init_array+0x40>)
    2c40:	4c0a      	ldr	r4, [pc, #40]	; (2c6c <__libc_init_array+0x44>)
    2c42:	1b64      	subs	r4, r4, r5
    2c44:	10a4      	asrs	r4, r4, #2
    2c46:	42a6      	cmp	r6, r4
    2c48:	d105      	bne.n	2c56 <__libc_init_array+0x2e>
    2c4a:	bd70      	pop	{r4, r5, r6, pc}
    2c4c:	00b3      	lsls	r3, r6, #2
    2c4e:	58eb      	ldr	r3, [r5, r3]
    2c50:	4798      	blx	r3
    2c52:	3601      	adds	r6, #1
    2c54:	e7ee      	b.n	2c34 <__libc_init_array+0xc>
    2c56:	00b3      	lsls	r3, r6, #2
    2c58:	58eb      	ldr	r3, [r5, r3]
    2c5a:	4798      	blx	r3
    2c5c:	3601      	adds	r6, #1
    2c5e:	e7f2      	b.n	2c46 <__libc_init_array+0x1e>
    2c60:	00002d68 	.word	0x00002d68
    2c64:	00002d68 	.word	0x00002d68
    2c68:	00002d68 	.word	0x00002d68
    2c6c:	00002d6c 	.word	0x00002d6c
    2c70:	42000800 	.word	0x42000800
    2c74:	42000c00 	.word	0x42000c00
    2c78:	42001000 	.word	0x42001000
    2c7c:	42001400 	.word	0x42001400
    2c80:	42001800 	.word	0x42001800
    2c84:	42001c00 	.word	0x42001c00
    2c88:	00000b4e 	.word	0x00000b4e
    2c8c:	00000b4a 	.word	0x00000b4a
    2c90:	00000b4a 	.word	0x00000b4a
    2c94:	00000bb0 	.word	0x00000bb0
    2c98:	00000bb0 	.word	0x00000bb0
    2c9c:	00000b62 	.word	0x00000b62
    2ca0:	00000b54 	.word	0x00000b54
    2ca4:	00000b68 	.word	0x00000b68
    2ca8:	00000b9e 	.word	0x00000b9e
    2cac:	00000c38 	.word	0x00000c38
    2cb0:	00000c18 	.word	0x00000c18
    2cb4:	00000c18 	.word	0x00000c18
    2cb8:	00000ca4 	.word	0x00000ca4
    2cbc:	00000c2a 	.word	0x00000c2a
    2cc0:	00000c46 	.word	0x00000c46
    2cc4:	00000c1c 	.word	0x00000c1c
    2cc8:	00000c54 	.word	0x00000c54
    2ccc:	00000c94 	.word	0x00000c94
    2cd0:	000a0012 	.word	0x000a0012
    2cd4:	2000000c 	.word	0x2000000c
    2cd8:	00000000 	.word	0x00000000
    2cdc:	00001b78 	.word	0x00001b78
    2ce0:	00001b5a 	.word	0x00001b5a
    2ce4:	00001b14 	.word	0x00001b14
    2ce8:	00001a32 	.word	0x00001a32
    2cec:	00001b14 	.word	0x00001b14
    2cf0:	00001b4c 	.word	0x00001b4c
    2cf4:	00001b14 	.word	0x00001b14
    2cf8:	00001a32 	.word	0x00001a32
    2cfc:	00001b5a 	.word	0x00001b5a
    2d00:	00001b5a 	.word	0x00001b5a
    2d04:	00001b4c 	.word	0x00001b4c
    2d08:	00001a32 	.word	0x00001a32
    2d0c:	00001a2a 	.word	0x00001a2a
    2d10:	00001a2a 	.word	0x00001a2a
    2d14:	00001a2a 	.word	0x00001a2a
    2d18:	00001d90 	.word	0x00001d90
    2d1c:	000021d8 	.word	0x000021d8
    2d20:	00002098 	.word	0x00002098
    2d24:	00002098 	.word	0x00002098
    2d28:	00002094 	.word	0x00002094
    2d2c:	000021b0 	.word	0x000021b0
    2d30:	000021b0 	.word	0x000021b0
    2d34:	000021a2 	.word	0x000021a2
    2d38:	00002094 	.word	0x00002094
    2d3c:	000021b0 	.word	0x000021b0
    2d40:	000021a2 	.word	0x000021a2
    2d44:	000021b0 	.word	0x000021b0
    2d48:	00002094 	.word	0x00002094
    2d4c:	000021b8 	.word	0x000021b8
    2d50:	000021b8 	.word	0x000021b8
    2d54:	000021b8 	.word	0x000021b8
    2d58:	000023bc 	.word	0x000023bc

00002d5c <_init>:
    2d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d62:	bc08      	pop	{r3}
    2d64:	469e      	mov	lr, r3
    2d66:	4770      	bx	lr

00002d68 <__init_array_start>:
    2d68:	000000dd 	.word	0x000000dd

00002d6c <_fini>:
    2d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d72:	bc08      	pop	{r3}
    2d74:	469e      	mov	lr, r3
    2d76:	4770      	bx	lr

00002d78 <__fini_array_start>:
    2d78:	000000b5 	.word	0x000000b5
