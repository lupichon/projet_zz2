
master_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e18  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000024  20000000  00002e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  20000024  00002e3c  00020024  2**2
                  ALLOC
  3 .stack        00002004  200000c4  00002edc  00020024  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f4ff  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000310e  00000000  00000000  0003f5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003de1  00000000  00000000  000426b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000410  00000000  00000000  00046493  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000448  00000000  00000000  000468a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018cc1  00000000  00000000  00046ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a9f5  00000000  00000000  0005f9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088aa1  00000000  00000000  0006a3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ac8  00000000  00000000  000f2e44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 20 00 20 19 01 00 00 15 01 00 00 15 01 00 00     . . ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 d9 10 00 00     ................
      4c:	15 01 00 00 b5 02 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000024 	.word	0x20000024
      d4:	00000000 	.word	0x00000000
      d8:	00002e18 	.word	0x00002e18

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000028 	.word	0x20000028
     108:	00002e18 	.word	0x00002e18
     10c:	00002e18 	.word	0x00002e18
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00002e18 	.word	0x00002e18
     1c8:	20000000 	.word	0x20000000
     1cc:	20000024 	.word	0x20000024
     1d0:	20000004 	.word	0x20000004
     1d4:	20000024 	.word	0x20000024
     1d8:	200000c4 	.word	0x200000c4
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00002cd1 	.word	0x00002cd1
     1f8:	00001171 	.word	0x00001171

000001fc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     1fc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     1fe:	2000      	movs	r0, #0
     200:	4b08      	ldr	r3, [pc, #32]	; (224 <delay_init+0x28>)
     202:	4798      	blx	r3
     204:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     206:	4c08      	ldr	r4, [pc, #32]	; (228 <delay_init+0x2c>)
     208:	21fa      	movs	r1, #250	; 0xfa
     20a:	0089      	lsls	r1, r1, #2
     20c:	47a0      	blx	r4
     20e:	4b07      	ldr	r3, [pc, #28]	; (22c <delay_init+0x30>)
     210:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     212:	4907      	ldr	r1, [pc, #28]	; (230 <delay_init+0x34>)
     214:	0028      	movs	r0, r5
     216:	47a0      	blx	r4
     218:	4b06      	ldr	r3, [pc, #24]	; (234 <delay_init+0x38>)
     21a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     21c:	2205      	movs	r2, #5
     21e:	4b06      	ldr	r3, [pc, #24]	; (238 <delay_init+0x3c>)
     220:	601a      	str	r2, [r3, #0]
}
     222:	bd70      	pop	{r4, r5, r6, pc}
     224:	00000e69 	.word	0x00000e69
     228:	000012f1 	.word	0x000012f1
     22c:	20000000 	.word	0x20000000
     230:	000f4240 	.word	0x000f4240
     234:	20000004 	.word	0x20000004
     238:	e000e010 	.word	0xe000e010

0000023c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     23c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     23e:	4b08      	ldr	r3, [pc, #32]	; (260 <delay_cycles_ms+0x24>)
     240:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     242:	4a08      	ldr	r2, [pc, #32]	; (264 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     244:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     246:	2180      	movs	r1, #128	; 0x80
     248:	0249      	lsls	r1, r1, #9
	while (n--) {
     24a:	3801      	subs	r0, #1
     24c:	d307      	bcc.n	25e <delay_cycles_ms+0x22>
	if (n > 0) {
     24e:	2c00      	cmp	r4, #0
     250:	d0fb      	beq.n	24a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     252:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     254:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     256:	6813      	ldr	r3, [r2, #0]
     258:	420b      	tst	r3, r1
     25a:	d0fc      	beq.n	256 <delay_cycles_ms+0x1a>
     25c:	e7f5      	b.n	24a <delay_cycles_ms+0xe>
	}
}
     25e:	bd30      	pop	{r4, r5, pc}
     260:	20000000 	.word	0x20000000
     264:	e000e010 	.word	0xe000e010

00000268 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     268:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     26a:	2a00      	cmp	r2, #0
     26c:	d001      	beq.n	272 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     26e:	0018      	movs	r0, r3
     270:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     272:	008b      	lsls	r3, r1, #2
     274:	4a06      	ldr	r2, [pc, #24]	; (290 <extint_register_callback+0x28>)
     276:	589b      	ldr	r3, [r3, r2]
     278:	2b00      	cmp	r3, #0
     27a:	d003      	beq.n	284 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     27c:	4283      	cmp	r3, r0
     27e:	d005      	beq.n	28c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     280:	231d      	movs	r3, #29
     282:	e7f4      	b.n	26e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     284:	0089      	lsls	r1, r1, #2
     286:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     288:	2300      	movs	r3, #0
     28a:	e7f0      	b.n	26e <extint_register_callback+0x6>
		return STATUS_OK;
     28c:	2300      	movs	r3, #0
     28e:	e7ee      	b.n	26e <extint_register_callback+0x6>
     290:	20000074 	.word	0x20000074

00000294 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     294:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     296:	2900      	cmp	r1, #0
     298:	d001      	beq.n	29e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     29a:	0018      	movs	r0, r3
     29c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     29e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     2a0:	281f      	cmp	r0, #31
     2a2:	d800      	bhi.n	2a6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     2a4:	4a02      	ldr	r2, [pc, #8]	; (2b0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     2a6:	2301      	movs	r3, #1
     2a8:	4083      	lsls	r3, r0
     2aa:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     2ac:	2300      	movs	r3, #0
     2ae:	e7f4      	b.n	29a <extint_chan_enable_callback+0x6>
     2b0:	40001800 	.word	0x40001800

000002b4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     2b4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2b6:	2200      	movs	r2, #0
     2b8:	4b10      	ldr	r3, [pc, #64]	; (2fc <EIC_Handler+0x48>)
     2ba:	701a      	strb	r2, [r3, #0]
     2bc:	2300      	movs	r3, #0
     2be:	4910      	ldr	r1, [pc, #64]	; (300 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     2c0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2c2:	4e10      	ldr	r6, [pc, #64]	; (304 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2c4:	4c0d      	ldr	r4, [pc, #52]	; (2fc <EIC_Handler+0x48>)
     2c6:	e00a      	b.n	2de <EIC_Handler+0x2a>
		return eics[eic_index];
     2c8:	490d      	ldr	r1, [pc, #52]	; (300 <EIC_Handler+0x4c>)
     2ca:	e008      	b.n	2de <EIC_Handler+0x2a>
     2cc:	7823      	ldrb	r3, [r4, #0]
     2ce:	3301      	adds	r3, #1
     2d0:	b2db      	uxtb	r3, r3
     2d2:	7023      	strb	r3, [r4, #0]
     2d4:	2b0f      	cmp	r3, #15
     2d6:	d810      	bhi.n	2fa <EIC_Handler+0x46>
		return NULL;
     2d8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     2da:	2b1f      	cmp	r3, #31
     2dc:	d9f4      	bls.n	2c8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     2de:	0028      	movs	r0, r5
     2e0:	4018      	ands	r0, r3
     2e2:	2201      	movs	r2, #1
     2e4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     2e6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     2e8:	4210      	tst	r0, r2
     2ea:	d0ef      	beq.n	2cc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     2ec:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2ee:	009b      	lsls	r3, r3, #2
     2f0:	599b      	ldr	r3, [r3, r6]
     2f2:	2b00      	cmp	r3, #0
     2f4:	d0ea      	beq.n	2cc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2f6:	4798      	blx	r3
     2f8:	e7e8      	b.n	2cc <EIC_Handler+0x18>
			}
		}
	}
}
     2fa:	bd70      	pop	{r4, r5, r6, pc}
     2fc:	20000070 	.word	0x20000070
     300:	40001800 	.word	0x40001800
     304:	20000074 	.word	0x20000074

00000308 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     308:	4a04      	ldr	r2, [pc, #16]	; (31c <_extint_enable+0x14>)
     30a:	7813      	ldrb	r3, [r2, #0]
     30c:	2102      	movs	r1, #2
     30e:	430b      	orrs	r3, r1
     310:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     312:	7853      	ldrb	r3, [r2, #1]
     314:	b25b      	sxtb	r3, r3
     316:	2b00      	cmp	r3, #0
     318:	dbfb      	blt.n	312 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     31a:	4770      	bx	lr
     31c:	40001800 	.word	0x40001800

00000320 <_system_extint_init>:
{
     320:	b500      	push	{lr}
     322:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     324:	4a12      	ldr	r2, [pc, #72]	; (370 <_system_extint_init+0x50>)
     326:	6993      	ldr	r3, [r2, #24]
     328:	2140      	movs	r1, #64	; 0x40
     32a:	430b      	orrs	r3, r1
     32c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     32e:	a901      	add	r1, sp, #4
     330:	2300      	movs	r3, #0
     332:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     334:	2005      	movs	r0, #5
     336:	4b0f      	ldr	r3, [pc, #60]	; (374 <_system_extint_init+0x54>)
     338:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     33a:	2005      	movs	r0, #5
     33c:	4b0e      	ldr	r3, [pc, #56]	; (378 <_system_extint_init+0x58>)
     33e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     340:	4a0e      	ldr	r2, [pc, #56]	; (37c <_system_extint_init+0x5c>)
     342:	7813      	ldrb	r3, [r2, #0]
     344:	2101      	movs	r1, #1
     346:	430b      	orrs	r3, r1
     348:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     34a:	7853      	ldrb	r3, [r2, #1]
     34c:	b25b      	sxtb	r3, r3
     34e:	2b00      	cmp	r3, #0
     350:	dbfb      	blt.n	34a <_system_extint_init+0x2a>
     352:	4b0b      	ldr	r3, [pc, #44]	; (380 <_system_extint_init+0x60>)
     354:	0019      	movs	r1, r3
     356:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     358:	2200      	movs	r2, #0
     35a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     35c:	4299      	cmp	r1, r3
     35e:	d1fc      	bne.n	35a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     360:	2210      	movs	r2, #16
     362:	4b08      	ldr	r3, [pc, #32]	; (384 <_system_extint_init+0x64>)
     364:	601a      	str	r2, [r3, #0]
	_extint_enable();
     366:	4b08      	ldr	r3, [pc, #32]	; (388 <_system_extint_init+0x68>)
     368:	4798      	blx	r3
}
     36a:	b003      	add	sp, #12
     36c:	bd00      	pop	{pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	40000400 	.word	0x40000400
     374:	00000f81 	.word	0x00000f81
     378:	00000ef5 	.word	0x00000ef5
     37c:	40001800 	.word	0x40001800
     380:	20000074 	.word	0x20000074
     384:	e000e100 	.word	0xe000e100
     388:	00000309 	.word	0x00000309

0000038c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     38c:	2300      	movs	r3, #0
     38e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     390:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     392:	2201      	movs	r2, #1
     394:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     396:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     398:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     39a:	3302      	adds	r3, #2
     39c:	72c3      	strb	r3, [r0, #11]
}
     39e:	4770      	bx	lr

000003a0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3a2:	b083      	sub	sp, #12
     3a4:	0005      	movs	r5, r0
     3a6:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3a8:	a901      	add	r1, sp, #4
     3aa:	2300      	movs	r3, #0
     3ac:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3ae:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     3b0:	7923      	ldrb	r3, [r4, #4]
     3b2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     3b4:	7a23      	ldrb	r3, [r4, #8]
     3b6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     3b8:	7820      	ldrb	r0, [r4, #0]
     3ba:	4b15      	ldr	r3, [pc, #84]	; (410 <extint_chan_set_config+0x70>)
     3bc:	4798      	blx	r3
		return NULL;
     3be:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     3c0:	2d1f      	cmp	r5, #31
     3c2:	d800      	bhi.n	3c6 <extint_chan_set_config+0x26>
		return eics[eic_index];
     3c4:	4813      	ldr	r0, [pc, #76]	; (414 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3c6:	2207      	movs	r2, #7
     3c8:	402a      	ands	r2, r5
     3ca:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3cc:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3ce:	7aa3      	ldrb	r3, [r4, #10]
     3d0:	2b00      	cmp	r3, #0
     3d2:	d001      	beq.n	3d8 <extint_chan_set_config+0x38>
     3d4:	2308      	movs	r3, #8
     3d6:	431f      	orrs	r7, r3
     3d8:	08eb      	lsrs	r3, r5, #3
     3da:	009b      	lsls	r3, r3, #2
     3dc:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3de:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3e0:	260f      	movs	r6, #15
     3e2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     3e4:	43b1      	bics	r1, r6
			(new_config << config_pos);
     3e6:	4097      	lsls	r7, r2
     3e8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3ea:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     3ec:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     3ee:	7a63      	ldrb	r3, [r4, #9]
     3f0:	2b00      	cmp	r3, #0
     3f2:	d106      	bne.n	402 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     3f4:	6943      	ldr	r3, [r0, #20]
     3f6:	2201      	movs	r2, #1
     3f8:	40aa      	lsls	r2, r5
     3fa:	4393      	bics	r3, r2
     3fc:	6143      	str	r3, [r0, #20]
	}
}
     3fe:	b003      	add	sp, #12
     400:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     402:	6942      	ldr	r2, [r0, #20]
     404:	2301      	movs	r3, #1
     406:	40ab      	lsls	r3, r5
     408:	4313      	orrs	r3, r2
     40a:	6143      	str	r3, [r0, #20]
     40c:	e7f7      	b.n	3fe <extint_chan_set_config+0x5e>
     40e:	46c0      	nop			; (mov r8, r8)
     410:	00001079 	.word	0x00001079
     414:	40001800 	.word	0x40001800

00000418 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     418:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     41a:	2207      	movs	r2, #7
     41c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     41e:	421a      	tst	r2, r3
     420:	d1fc      	bne.n	41c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     422:	4770      	bx	lr

00000424 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
     426:	46d6      	mov	lr, sl
     428:	464f      	mov	r7, r9
     42a:	4646      	mov	r6, r8
     42c:	b5c0      	push	{r6, r7, lr}
     42e:	b08a      	sub	sp, #40	; 0x28
     430:	0006      	movs	r6, r0
     432:	000f      	movs	r7, r1
     434:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     436:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     438:	0008      	movs	r0, r1
     43a:	4b97      	ldr	r3, [pc, #604]	; (698 <i2c_master_init+0x274>)
     43c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     43e:	4a97      	ldr	r2, [pc, #604]	; (69c <i2c_master_init+0x278>)
     440:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     442:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     444:	2301      	movs	r3, #1
     446:	40ab      	lsls	r3, r5
     448:	430b      	orrs	r3, r1
     44a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     44c:	a909      	add	r1, sp, #36	; 0x24
     44e:	7b23      	ldrb	r3, [r4, #12]
     450:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     452:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     454:	b2c5      	uxtb	r5, r0
     456:	0028      	movs	r0, r5
     458:	4b91      	ldr	r3, [pc, #580]	; (6a0 <i2c_master_init+0x27c>)
     45a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     45c:	0028      	movs	r0, r5
     45e:	4b91      	ldr	r3, [pc, #580]	; (6a4 <i2c_master_init+0x280>)
     460:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     462:	7b20      	ldrb	r0, [r4, #12]
     464:	2100      	movs	r1, #0
     466:	4b90      	ldr	r3, [pc, #576]	; (6a8 <i2c_master_init+0x284>)
     468:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     46a:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     46c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     46e:	079b      	lsls	r3, r3, #30
     470:	d505      	bpl.n	47e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     472:	b00a      	add	sp, #40	; 0x28
     474:	bc1c      	pop	{r2, r3, r4}
     476:	4690      	mov	r8, r2
     478:	4699      	mov	r9, r3
     47a:	46a2      	mov	sl, r4
     47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     47e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     480:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     482:	07db      	lsls	r3, r3, #31
     484:	d4f5      	bmi.n	472 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     486:	2314      	movs	r3, #20
     488:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     48a:	6833      	ldr	r3, [r6, #0]
     48c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     48e:	0018      	movs	r0, r3
     490:	4b81      	ldr	r3, [pc, #516]	; (698 <i2c_master_init+0x274>)
     492:	4798      	blx	r3
     494:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     496:	2380      	movs	r3, #128	; 0x80
     498:	aa08      	add	r2, sp, #32
     49a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     49c:	2300      	movs	r3, #0
     49e:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     4a0:	2201      	movs	r2, #1
     4a2:	a908      	add	r1, sp, #32
     4a4:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     4a6:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     4a8:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     4aa:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     4ac:	2800      	cmp	r0, #0
     4ae:	d100      	bne.n	4b2 <i2c_master_init+0x8e>
     4b0:	e0af      	b.n	612 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     4b2:	ab08      	add	r3, sp, #32
     4b4:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     4b6:	2302      	movs	r3, #2
     4b8:	aa08      	add	r2, sp, #32
     4ba:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     4bc:	0c00      	lsrs	r0, r0, #16
     4be:	b2c0      	uxtb	r0, r0
     4c0:	0011      	movs	r1, r2
     4c2:	4b7a      	ldr	r3, [pc, #488]	; (6ac <i2c_master_init+0x288>)
     4c4:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     4c6:	2f00      	cmp	r7, #0
     4c8:	d100      	bne.n	4cc <i2c_master_init+0xa8>
     4ca:	e0a7      	b.n	61c <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     4cc:	ab08      	add	r3, sp, #32
     4ce:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     4d0:	2302      	movs	r3, #2
     4d2:	aa08      	add	r2, sp, #32
     4d4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     4d6:	0c3f      	lsrs	r7, r7, #16
     4d8:	b2f8      	uxtb	r0, r7
     4da:	0011      	movs	r1, r2
     4dc:	4b73      	ldr	r3, [pc, #460]	; (6ac <i2c_master_init+0x288>)
     4de:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     4e0:	8aa3      	ldrh	r3, [r4, #20]
     4e2:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     4e4:	8ae3      	ldrh	r3, [r4, #22]
     4e6:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     4e8:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     4ea:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     4ec:	2b00      	cmp	r3, #0
     4ee:	d104      	bne.n	4fa <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     4f0:	4b6f      	ldr	r3, [pc, #444]	; (6b0 <i2c_master_init+0x28c>)
     4f2:	789b      	ldrb	r3, [r3, #2]
     4f4:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     4f6:	0fdb      	lsrs	r3, r3, #31
     4f8:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     4fa:	68a1      	ldr	r1, [r4, #8]
     4fc:	6923      	ldr	r3, [r4, #16]
     4fe:	430b      	orrs	r3, r1
     500:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     502:	2224      	movs	r2, #36	; 0x24
     504:	5ca2      	ldrb	r2, [r4, r2]
     506:	2a00      	cmp	r2, #0
     508:	d002      	beq.n	510 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     50a:	2280      	movs	r2, #128	; 0x80
     50c:	05d2      	lsls	r2, r2, #23
     50e:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     510:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     512:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     514:	222c      	movs	r2, #44	; 0x2c
     516:	5ca2      	ldrb	r2, [r4, r2]
     518:	2a00      	cmp	r2, #0
     51a:	d103      	bne.n	524 <i2c_master_init+0x100>
     51c:	2280      	movs	r2, #128	; 0x80
     51e:	0492      	lsls	r2, r2, #18
     520:	4291      	cmp	r1, r2
     522:	d102      	bne.n	52a <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     524:	2280      	movs	r2, #128	; 0x80
     526:	0512      	lsls	r2, r2, #20
     528:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     52a:	222d      	movs	r2, #45	; 0x2d
     52c:	5ca2      	ldrb	r2, [r4, r2]
     52e:	2a00      	cmp	r2, #0
     530:	d002      	beq.n	538 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     532:	2280      	movs	r2, #128	; 0x80
     534:	0412      	lsls	r2, r2, #16
     536:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     538:	222e      	movs	r2, #46	; 0x2e
     53a:	5ca2      	ldrb	r2, [r4, r2]
     53c:	2a00      	cmp	r2, #0
     53e:	d002      	beq.n	546 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     540:	2280      	movs	r2, #128	; 0x80
     542:	03d2      	lsls	r2, r2, #15
     544:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     546:	4642      	mov	r2, r8
     548:	6812      	ldr	r2, [r2, #0]
     54a:	4313      	orrs	r3, r2
     54c:	4642      	mov	r2, r8
     54e:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     550:	2380      	movs	r3, #128	; 0x80
     552:	005b      	lsls	r3, r3, #1
     554:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     556:	0028      	movs	r0, r5
     558:	3014      	adds	r0, #20
     55a:	b2c0      	uxtb	r0, r0
     55c:	4b55      	ldr	r3, [pc, #340]	; (6b4 <i2c_master_init+0x290>)
     55e:	4798      	blx	r3
     560:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     562:	23fa      	movs	r3, #250	; 0xfa
     564:	009b      	lsls	r3, r3, #2
     566:	6822      	ldr	r2, [r4, #0]
     568:	435a      	muls	r2, r3
     56a:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     56c:	6863      	ldr	r3, [r4, #4]
     56e:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     570:	4d51      	ldr	r5, [pc, #324]	; (6b8 <i2c_master_init+0x294>)
     572:	47a8      	blx	r5
     574:	9000      	str	r0, [sp, #0]
     576:	9101      	str	r1, [sp, #4]
     578:	464b      	mov	r3, r9
     57a:	0058      	lsls	r0, r3, #1
     57c:	47a8      	blx	r5
     57e:	9002      	str	r0, [sp, #8]
     580:	9103      	str	r1, [sp, #12]
     582:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     584:	47a8      	blx	r5
     586:	9004      	str	r0, [sp, #16]
     588:	9105      	str	r1, [sp, #20]
     58a:	4f4c      	ldr	r7, [pc, #304]	; (6bc <i2c_master_init+0x298>)
     58c:	4a4c      	ldr	r2, [pc, #304]	; (6c0 <i2c_master_init+0x29c>)
     58e:	4b4d      	ldr	r3, [pc, #308]	; (6c4 <i2c_master_init+0x2a0>)
     590:	9800      	ldr	r0, [sp, #0]
     592:	9901      	ldr	r1, [sp, #4]
     594:	47b8      	blx	r7
     596:	0002      	movs	r2, r0
     598:	000b      	movs	r3, r1
     59a:	9804      	ldr	r0, [sp, #16]
     59c:	9905      	ldr	r1, [sp, #20]
     59e:	47b8      	blx	r7
     5a0:	4e49      	ldr	r6, [pc, #292]	; (6c8 <i2c_master_init+0x2a4>)
     5a2:	2200      	movs	r2, #0
     5a4:	4b49      	ldr	r3, [pc, #292]	; (6cc <i2c_master_init+0x2a8>)
     5a6:	47b0      	blx	r6
     5a8:	9004      	str	r0, [sp, #16]
     5aa:	9105      	str	r1, [sp, #20]
     5ac:	4648      	mov	r0, r9
     5ae:	47a8      	blx	r5
     5b0:	0002      	movs	r2, r0
     5b2:	000b      	movs	r3, r1
     5b4:	9804      	ldr	r0, [sp, #16]
     5b6:	9905      	ldr	r1, [sp, #20]
     5b8:	47b8      	blx	r7
     5ba:	0002      	movs	r2, r0
     5bc:	000b      	movs	r3, r1
     5be:	4d44      	ldr	r5, [pc, #272]	; (6d0 <i2c_master_init+0x2ac>)
     5c0:	9800      	ldr	r0, [sp, #0]
     5c2:	9901      	ldr	r1, [sp, #4]
     5c4:	47a8      	blx	r5
     5c6:	9a02      	ldr	r2, [sp, #8]
     5c8:	9b03      	ldr	r3, [sp, #12]
     5ca:	47b0      	blx	r6
     5cc:	2200      	movs	r2, #0
     5ce:	4b41      	ldr	r3, [pc, #260]	; (6d4 <i2c_master_init+0x2b0>)
     5d0:	47a8      	blx	r5
     5d2:	9a02      	ldr	r2, [sp, #8]
     5d4:	9b03      	ldr	r3, [sp, #12]
     5d6:	4d40      	ldr	r5, [pc, #256]	; (6d8 <i2c_master_init+0x2b4>)
     5d8:	47a8      	blx	r5
     5da:	4b40      	ldr	r3, [pc, #256]	; (6dc <i2c_master_init+0x2b8>)
     5dc:	4798      	blx	r3
     5de:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     5e0:	2380      	movs	r3, #128	; 0x80
     5e2:	049b      	lsls	r3, r3, #18
     5e4:	68a2      	ldr	r2, [r4, #8]
     5e6:	429a      	cmp	r2, r3
     5e8:	d01e      	beq.n	628 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     5ea:	0003      	movs	r3, r0
     5ec:	2040      	movs	r0, #64	; 0x40
     5ee:	2dff      	cmp	r5, #255	; 0xff
     5f0:	d900      	bls.n	5f4 <i2c_master_init+0x1d0>
     5f2:	e73e      	b.n	472 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     5f4:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     5f6:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     5f8:	25ff      	movs	r5, #255	; 0xff
     5fa:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     5fc:	0624      	lsls	r4, r4, #24
     5fe:	4325      	orrs	r5, r4
     600:	0400      	lsls	r0, r0, #16
     602:	23ff      	movs	r3, #255	; 0xff
     604:	041b      	lsls	r3, r3, #16
     606:	4018      	ands	r0, r3
     608:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     60a:	4643      	mov	r3, r8
     60c:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     60e:	2000      	movs	r0, #0
     610:	e72f      	b.n	472 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     612:	2100      	movs	r1, #0
     614:	4640      	mov	r0, r8
     616:	4b32      	ldr	r3, [pc, #200]	; (6e0 <i2c_master_init+0x2bc>)
     618:	4798      	blx	r3
     61a:	e74a      	b.n	4b2 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     61c:	2101      	movs	r1, #1
     61e:	4640      	mov	r0, r8
     620:	4b2f      	ldr	r3, [pc, #188]	; (6e0 <i2c_master_init+0x2bc>)
     622:	4798      	blx	r3
     624:	0007      	movs	r7, r0
     626:	e751      	b.n	4cc <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     628:	26fa      	movs	r6, #250	; 0xfa
     62a:	00b6      	lsls	r6, r6, #2
     62c:	4653      	mov	r3, sl
     62e:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     630:	9800      	ldr	r0, [sp, #0]
     632:	9901      	ldr	r1, [sp, #4]
     634:	0002      	movs	r2, r0
     636:	000b      	movs	r3, r1
     638:	4c23      	ldr	r4, [pc, #140]	; (6c8 <i2c_master_init+0x2a4>)
     63a:	47a0      	blx	r4
     63c:	9000      	str	r0, [sp, #0]
     63e:	9101      	str	r1, [sp, #4]
     640:	0030      	movs	r0, r6
     642:	4b1d      	ldr	r3, [pc, #116]	; (6b8 <i2c_master_init+0x294>)
     644:	4798      	blx	r3
     646:	2200      	movs	r2, #0
     648:	4b26      	ldr	r3, [pc, #152]	; (6e4 <i2c_master_init+0x2c0>)
     64a:	47b8      	blx	r7
     64c:	0002      	movs	r2, r0
     64e:	000b      	movs	r3, r1
     650:	9800      	ldr	r0, [sp, #0]
     652:	9901      	ldr	r1, [sp, #4]
     654:	4c20      	ldr	r4, [pc, #128]	; (6d8 <i2c_master_init+0x2b4>)
     656:	47a0      	blx	r4
     658:	2200      	movs	r2, #0
     65a:	4b1e      	ldr	r3, [pc, #120]	; (6d4 <i2c_master_init+0x2b0>)
     65c:	4c1c      	ldr	r4, [pc, #112]	; (6d0 <i2c_master_init+0x2ac>)
     65e:	47a0      	blx	r4
     660:	4b1e      	ldr	r3, [pc, #120]	; (6dc <i2c_master_init+0x2b8>)
     662:	4798      	blx	r3
     664:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     666:	d00c      	beq.n	682 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     668:	0031      	movs	r1, r6
     66a:	9807      	ldr	r0, [sp, #28]
     66c:	4b1e      	ldr	r3, [pc, #120]	; (6e8 <i2c_master_init+0x2c4>)
     66e:	4798      	blx	r3
     670:	3802      	subs	r0, #2
     672:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     674:	002b      	movs	r3, r5
     676:	2dff      	cmp	r5, #255	; 0xff
     678:	d80c      	bhi.n	694 <i2c_master_init+0x270>
     67a:	28ff      	cmp	r0, #255	; 0xff
     67c:	d9bc      	bls.n	5f8 <i2c_master_init+0x1d4>
     67e:	2040      	movs	r0, #64	; 0x40
     680:	e6f7      	b.n	472 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     682:	0071      	lsls	r1, r6, #1
     684:	1e48      	subs	r0, r1, #1
     686:	9b07      	ldr	r3, [sp, #28]
     688:	469c      	mov	ip, r3
     68a:	4460      	add	r0, ip
     68c:	4b16      	ldr	r3, [pc, #88]	; (6e8 <i2c_master_init+0x2c4>)
     68e:	4798      	blx	r3
     690:	3801      	subs	r0, #1
     692:	e7ef      	b.n	674 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     694:	2040      	movs	r0, #64	; 0x40
     696:	e6ec      	b.n	472 <i2c_master_init+0x4e>
     698:	00000a35 	.word	0x00000a35
     69c:	40000400 	.word	0x40000400
     6a0:	00000f81 	.word	0x00000f81
     6a4:	00000ef5 	.word	0x00000ef5
     6a8:	00000871 	.word	0x00000871
     6ac:	00001079 	.word	0x00001079
     6b0:	41002000 	.word	0x41002000
     6b4:	00000f9d 	.word	0x00000f9d
     6b8:	00002c25 	.word	0x00002c25
     6bc:	00002091 	.word	0x00002091
     6c0:	e826d695 	.word	0xe826d695
     6c4:	3e112e0b 	.word	0x3e112e0b
     6c8:	00001409 	.word	0x00001409
     6cc:	40240000 	.word	0x40240000
     6d0:	00002591 	.word	0x00002591
     6d4:	3ff00000 	.word	0x3ff00000
     6d8:	00001a29 	.word	0x00001a29
     6dc:	00002bbd 	.word	0x00002bbd
     6e0:	000008bd 	.word	0x000008bd
     6e4:	40080000 	.word	0x40080000
     6e8:	000012f1 	.word	0x000012f1

000006ec <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6ec:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     6ee:	7e1a      	ldrb	r2, [r3, #24]
     6f0:	0792      	lsls	r2, r2, #30
     6f2:	d507      	bpl.n	704 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     6f4:	2202      	movs	r2, #2
     6f6:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     6f8:	8b5b      	ldrh	r3, [r3, #26]
     6fa:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     6fc:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     6fe:	17db      	asrs	r3, r3, #31
     700:	4018      	ands	r0, r3
}
     702:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     704:	8b5a      	ldrh	r2, [r3, #26]
     706:	0752      	lsls	r2, r2, #29
     708:	d506      	bpl.n	718 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     70a:	6859      	ldr	r1, [r3, #4]
     70c:	22c0      	movs	r2, #192	; 0xc0
     70e:	0292      	lsls	r2, r2, #10
     710:	430a      	orrs	r2, r1
     712:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     714:	2018      	movs	r0, #24
     716:	e7f4      	b.n	702 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     718:	2000      	movs	r0, #0
     71a:	e7f2      	b.n	702 <_i2c_master_address_response+0x16>

0000071c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     71c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     71e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     720:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     722:	2401      	movs	r4, #1
     724:	2502      	movs	r5, #2
     726:	7e11      	ldrb	r1, [r2, #24]
     728:	4221      	tst	r1, r4
     72a:	d10b      	bne.n	744 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     72c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     72e:	4229      	tst	r1, r5
     730:	d106      	bne.n	740 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     732:	3301      	adds	r3, #1
     734:	b29b      	uxth	r3, r3
     736:	8901      	ldrh	r1, [r0, #8]
     738:	4299      	cmp	r1, r3
     73a:	d8f4      	bhi.n	726 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     73c:	2012      	movs	r0, #18
     73e:	e002      	b.n	746 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     740:	2000      	movs	r0, #0
     742:	e000      	b.n	746 <_i2c_master_wait_for_bus+0x2a>
     744:	2000      	movs	r0, #0
}
     746:	bd30      	pop	{r4, r5, pc}

00000748 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     748:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     74a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     74c:	6862      	ldr	r2, [r4, #4]
     74e:	2380      	movs	r3, #128	; 0x80
     750:	02db      	lsls	r3, r3, #11
     752:	4313      	orrs	r3, r2
     754:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     756:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     758:	4b02      	ldr	r3, [pc, #8]	; (764 <_i2c_master_send_hs_master_code+0x1c>)
     75a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     75c:	2301      	movs	r3, #1
     75e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     760:	bd10      	pop	{r4, pc}
     762:	46c0      	nop			; (mov r8, r8)
     764:	0000071d 	.word	0x0000071d

00000768 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     768:	b5f0      	push	{r4, r5, r6, r7, lr}
     76a:	46de      	mov	lr, fp
     76c:	4657      	mov	r7, sl
     76e:	464e      	mov	r6, r9
     770:	4645      	mov	r5, r8
     772:	b5e0      	push	{r5, r6, r7, lr}
     774:	b083      	sub	sp, #12
     776:	0006      	movs	r6, r0
     778:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     77a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     77c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     77e:	4b32      	ldr	r3, [pc, #200]	; (848 <_i2c_master_write_packet+0xe0>)
     780:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     782:	7a7b      	ldrb	r3, [r7, #9]
     784:	2b00      	cmp	r3, #0
     786:	d11d      	bne.n	7c4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     788:	686b      	ldr	r3, [r5, #4]
     78a:	4a30      	ldr	r2, [pc, #192]	; (84c <_i2c_master_write_packet+0xe4>)
     78c:	4013      	ands	r3, r2
     78e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     790:	7a3b      	ldrb	r3, [r7, #8]
     792:	2b00      	cmp	r3, #0
     794:	d01b      	beq.n	7ce <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     796:	883b      	ldrh	r3, [r7, #0]
     798:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     79a:	7a7a      	ldrb	r2, [r7, #9]
     79c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     79e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	0212      	lsls	r2, r2, #8
     7a4:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7a6:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     7a8:	0030      	movs	r0, r6
     7aa:	4b29      	ldr	r3, [pc, #164]	; (850 <_i2c_master_write_packet+0xe8>)
     7ac:	4798      	blx	r3
     7ae:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     7b0:	2800      	cmp	r0, #0
     7b2:	d013      	beq.n	7dc <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     7b4:	9801      	ldr	r0, [sp, #4]
     7b6:	b003      	add	sp, #12
     7b8:	bc3c      	pop	{r2, r3, r4, r5}
     7ba:	4690      	mov	r8, r2
     7bc:	4699      	mov	r9, r3
     7be:	46a2      	mov	sl, r4
     7c0:	46ab      	mov	fp, r5
     7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     7c4:	7ab9      	ldrb	r1, [r7, #10]
     7c6:	0030      	movs	r0, r6
     7c8:	4b22      	ldr	r3, [pc, #136]	; (854 <_i2c_master_write_packet+0xec>)
     7ca:	4798      	blx	r3
     7cc:	e7dc      	b.n	788 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7ce:	883b      	ldrh	r3, [r7, #0]
     7d0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     7d2:	7a7a      	ldrb	r2, [r7, #9]
     7d4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     7d6:	4313      	orrs	r3, r2
     7d8:	626b      	str	r3, [r5, #36]	; 0x24
     7da:	e7e5      	b.n	7a8 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     7dc:	0030      	movs	r0, r6
     7de:	4b1e      	ldr	r3, [pc, #120]	; (858 <_i2c_master_write_packet+0xf0>)
     7e0:	4798      	blx	r3
     7e2:	1e03      	subs	r3, r0, #0
     7e4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     7e6:	d1e5      	bne.n	7b4 <_i2c_master_write_packet+0x4c>
     7e8:	46a0      	mov	r8, r4
     7ea:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7ec:	3320      	adds	r3, #32
     7ee:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     7f0:	4b15      	ldr	r3, [pc, #84]	; (848 <_i2c_master_write_packet+0xe0>)
     7f2:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     7f4:	4b16      	ldr	r3, [pc, #88]	; (850 <_i2c_master_write_packet+0xe8>)
     7f6:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     7f8:	4544      	cmp	r4, r8
     7fa:	d015      	beq.n	828 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7fc:	8b6b      	ldrh	r3, [r5, #26]
     7fe:	464a      	mov	r2, r9
     800:	4213      	tst	r3, r2
     802:	d01d      	beq.n	840 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     804:	0030      	movs	r0, r6
     806:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     808:	687b      	ldr	r3, [r7, #4]
     80a:	5d1a      	ldrb	r2, [r3, r4]
     80c:	2328      	movs	r3, #40	; 0x28
     80e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     810:	0030      	movs	r0, r6
     812:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     814:	2800      	cmp	r0, #0
     816:	d106      	bne.n	826 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     818:	8b6b      	ldrh	r3, [r5, #26]
     81a:	3401      	adds	r4, #1
     81c:	075b      	lsls	r3, r3, #29
     81e:	d5eb      	bpl.n	7f8 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     820:	231e      	movs	r3, #30
     822:	9301      	str	r3, [sp, #4]
     824:	e000      	b.n	828 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     826:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     828:	7ab3      	ldrb	r3, [r6, #10]
     82a:	2b00      	cmp	r3, #0
     82c:	d0c2      	beq.n	7b4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     82e:	0030      	movs	r0, r6
     830:	4b05      	ldr	r3, [pc, #20]	; (848 <_i2c_master_write_packet+0xe0>)
     832:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     834:	686a      	ldr	r2, [r5, #4]
     836:	23c0      	movs	r3, #192	; 0xc0
     838:	029b      	lsls	r3, r3, #10
     83a:	4313      	orrs	r3, r2
     83c:	606b      	str	r3, [r5, #4]
     83e:	e7b9      	b.n	7b4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     840:	2341      	movs	r3, #65	; 0x41
     842:	9301      	str	r3, [sp, #4]
     844:	e7b6      	b.n	7b4 <_i2c_master_write_packet+0x4c>
     846:	46c0      	nop			; (mov r8, r8)
     848:	00000419 	.word	0x00000419
     84c:	fffbffff 	.word	0xfffbffff
     850:	0000071d 	.word	0x0000071d
     854:	00000749 	.word	0x00000749
     858:	000006ed 	.word	0x000006ed

0000085c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     85c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     85e:	2301      	movs	r3, #1
     860:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     862:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     864:	4b01      	ldr	r3, [pc, #4]	; (86c <i2c_master_write_packet_wait+0x10>)
     866:	4798      	blx	r3
}
     868:	bd10      	pop	{r4, pc}
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	00000769 	.word	0x00000769

00000870 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     870:	b510      	push	{r4, lr}
     872:	b082      	sub	sp, #8
     874:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     876:	4b0e      	ldr	r3, [pc, #56]	; (8b0 <sercom_set_gclk_generator+0x40>)
     878:	781b      	ldrb	r3, [r3, #0]
     87a:	2b00      	cmp	r3, #0
     87c:	d007      	beq.n	88e <sercom_set_gclk_generator+0x1e>
     87e:	2900      	cmp	r1, #0
     880:	d105      	bne.n	88e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     882:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <sercom_set_gclk_generator+0x40>)
     884:	785b      	ldrb	r3, [r3, #1]
     886:	4283      	cmp	r3, r0
     888:	d010      	beq.n	8ac <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     88a:	201d      	movs	r0, #29
     88c:	e00c      	b.n	8a8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     88e:	a901      	add	r1, sp, #4
     890:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     892:	2013      	movs	r0, #19
     894:	4b07      	ldr	r3, [pc, #28]	; (8b4 <sercom_set_gclk_generator+0x44>)
     896:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     898:	2013      	movs	r0, #19
     89a:	4b07      	ldr	r3, [pc, #28]	; (8b8 <sercom_set_gclk_generator+0x48>)
     89c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     89e:	4b04      	ldr	r3, [pc, #16]	; (8b0 <sercom_set_gclk_generator+0x40>)
     8a0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     8a2:	2201      	movs	r2, #1
     8a4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     8a6:	2000      	movs	r0, #0
}
     8a8:	b002      	add	sp, #8
     8aa:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     8ac:	2000      	movs	r0, #0
     8ae:	e7fb      	b.n	8a8 <sercom_set_gclk_generator+0x38>
     8b0:	20000040 	.word	0x20000040
     8b4:	00000f81 	.word	0x00000f81
     8b8:	00000ef5 	.word	0x00000ef5

000008bc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8bc:	4b40      	ldr	r3, [pc, #256]	; (9c0 <_sercom_get_default_pad+0x104>)
     8be:	4298      	cmp	r0, r3
     8c0:	d031      	beq.n	926 <_sercom_get_default_pad+0x6a>
     8c2:	d90a      	bls.n	8da <_sercom_get_default_pad+0x1e>
     8c4:	4b3f      	ldr	r3, [pc, #252]	; (9c4 <_sercom_get_default_pad+0x108>)
     8c6:	4298      	cmp	r0, r3
     8c8:	d04d      	beq.n	966 <_sercom_get_default_pad+0xaa>
     8ca:	4b3f      	ldr	r3, [pc, #252]	; (9c8 <_sercom_get_default_pad+0x10c>)
     8cc:	4298      	cmp	r0, r3
     8ce:	d05a      	beq.n	986 <_sercom_get_default_pad+0xca>
     8d0:	4b3e      	ldr	r3, [pc, #248]	; (9cc <_sercom_get_default_pad+0x110>)
     8d2:	4298      	cmp	r0, r3
     8d4:	d037      	beq.n	946 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8d6:	2000      	movs	r0, #0
}
     8d8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8da:	4b3d      	ldr	r3, [pc, #244]	; (9d0 <_sercom_get_default_pad+0x114>)
     8dc:	4298      	cmp	r0, r3
     8de:	d00c      	beq.n	8fa <_sercom_get_default_pad+0x3e>
     8e0:	4b3c      	ldr	r3, [pc, #240]	; (9d4 <_sercom_get_default_pad+0x118>)
     8e2:	4298      	cmp	r0, r3
     8e4:	d1f7      	bne.n	8d6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e6:	2901      	cmp	r1, #1
     8e8:	d017      	beq.n	91a <_sercom_get_default_pad+0x5e>
     8ea:	2900      	cmp	r1, #0
     8ec:	d05d      	beq.n	9aa <_sercom_get_default_pad+0xee>
     8ee:	2902      	cmp	r1, #2
     8f0:	d015      	beq.n	91e <_sercom_get_default_pad+0x62>
     8f2:	2903      	cmp	r1, #3
     8f4:	d015      	beq.n	922 <_sercom_get_default_pad+0x66>
	return 0;
     8f6:	2000      	movs	r0, #0
     8f8:	e7ee      	b.n	8d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fa:	2901      	cmp	r1, #1
     8fc:	d007      	beq.n	90e <_sercom_get_default_pad+0x52>
     8fe:	2900      	cmp	r1, #0
     900:	d051      	beq.n	9a6 <_sercom_get_default_pad+0xea>
     902:	2902      	cmp	r1, #2
     904:	d005      	beq.n	912 <_sercom_get_default_pad+0x56>
     906:	2903      	cmp	r1, #3
     908:	d005      	beq.n	916 <_sercom_get_default_pad+0x5a>
	return 0;
     90a:	2000      	movs	r0, #0
     90c:	e7e4      	b.n	8d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     90e:	4832      	ldr	r0, [pc, #200]	; (9d8 <_sercom_get_default_pad+0x11c>)
     910:	e7e2      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     912:	4832      	ldr	r0, [pc, #200]	; (9dc <_sercom_get_default_pad+0x120>)
     914:	e7e0      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     916:	4832      	ldr	r0, [pc, #200]	; (9e0 <_sercom_get_default_pad+0x124>)
     918:	e7de      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     91a:	4832      	ldr	r0, [pc, #200]	; (9e4 <_sercom_get_default_pad+0x128>)
     91c:	e7dc      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     91e:	4832      	ldr	r0, [pc, #200]	; (9e8 <_sercom_get_default_pad+0x12c>)
     920:	e7da      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     922:	4832      	ldr	r0, [pc, #200]	; (9ec <_sercom_get_default_pad+0x130>)
     924:	e7d8      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     926:	2901      	cmp	r1, #1
     928:	d007      	beq.n	93a <_sercom_get_default_pad+0x7e>
     92a:	2900      	cmp	r1, #0
     92c:	d03f      	beq.n	9ae <_sercom_get_default_pad+0xf2>
     92e:	2902      	cmp	r1, #2
     930:	d005      	beq.n	93e <_sercom_get_default_pad+0x82>
     932:	2903      	cmp	r1, #3
     934:	d005      	beq.n	942 <_sercom_get_default_pad+0x86>
	return 0;
     936:	2000      	movs	r0, #0
     938:	e7ce      	b.n	8d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     93a:	482d      	ldr	r0, [pc, #180]	; (9f0 <_sercom_get_default_pad+0x134>)
     93c:	e7cc      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     93e:	482d      	ldr	r0, [pc, #180]	; (9f4 <_sercom_get_default_pad+0x138>)
     940:	e7ca      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     942:	482d      	ldr	r0, [pc, #180]	; (9f8 <_sercom_get_default_pad+0x13c>)
     944:	e7c8      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     946:	2901      	cmp	r1, #1
     948:	d007      	beq.n	95a <_sercom_get_default_pad+0x9e>
     94a:	2900      	cmp	r1, #0
     94c:	d031      	beq.n	9b2 <_sercom_get_default_pad+0xf6>
     94e:	2902      	cmp	r1, #2
     950:	d005      	beq.n	95e <_sercom_get_default_pad+0xa2>
     952:	2903      	cmp	r1, #3
     954:	d005      	beq.n	962 <_sercom_get_default_pad+0xa6>
	return 0;
     956:	2000      	movs	r0, #0
     958:	e7be      	b.n	8d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     95a:	4828      	ldr	r0, [pc, #160]	; (9fc <_sercom_get_default_pad+0x140>)
     95c:	e7bc      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     95e:	4828      	ldr	r0, [pc, #160]	; (a00 <_sercom_get_default_pad+0x144>)
     960:	e7ba      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     962:	4828      	ldr	r0, [pc, #160]	; (a04 <_sercom_get_default_pad+0x148>)
     964:	e7b8      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     966:	2901      	cmp	r1, #1
     968:	d007      	beq.n	97a <_sercom_get_default_pad+0xbe>
     96a:	2900      	cmp	r1, #0
     96c:	d023      	beq.n	9b6 <_sercom_get_default_pad+0xfa>
     96e:	2902      	cmp	r1, #2
     970:	d005      	beq.n	97e <_sercom_get_default_pad+0xc2>
     972:	2903      	cmp	r1, #3
     974:	d005      	beq.n	982 <_sercom_get_default_pad+0xc6>
	return 0;
     976:	2000      	movs	r0, #0
     978:	e7ae      	b.n	8d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     97a:	4823      	ldr	r0, [pc, #140]	; (a08 <_sercom_get_default_pad+0x14c>)
     97c:	e7ac      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     97e:	4823      	ldr	r0, [pc, #140]	; (a0c <_sercom_get_default_pad+0x150>)
     980:	e7aa      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     982:	4823      	ldr	r0, [pc, #140]	; (a10 <_sercom_get_default_pad+0x154>)
     984:	e7a8      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     986:	2901      	cmp	r1, #1
     988:	d007      	beq.n	99a <_sercom_get_default_pad+0xde>
     98a:	2900      	cmp	r1, #0
     98c:	d015      	beq.n	9ba <_sercom_get_default_pad+0xfe>
     98e:	2902      	cmp	r1, #2
     990:	d005      	beq.n	99e <_sercom_get_default_pad+0xe2>
     992:	2903      	cmp	r1, #3
     994:	d005      	beq.n	9a2 <_sercom_get_default_pad+0xe6>
	return 0;
     996:	2000      	movs	r0, #0
     998:	e79e      	b.n	8d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     99a:	481e      	ldr	r0, [pc, #120]	; (a14 <_sercom_get_default_pad+0x158>)
     99c:	e79c      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     99e:	481e      	ldr	r0, [pc, #120]	; (a18 <_sercom_get_default_pad+0x15c>)
     9a0:	e79a      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     9a2:	481e      	ldr	r0, [pc, #120]	; (a1c <_sercom_get_default_pad+0x160>)
     9a4:	e798      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     9a6:	481e      	ldr	r0, [pc, #120]	; (a20 <_sercom_get_default_pad+0x164>)
     9a8:	e796      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     9aa:	2003      	movs	r0, #3
     9ac:	e794      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     9ae:	481d      	ldr	r0, [pc, #116]	; (a24 <_sercom_get_default_pad+0x168>)
     9b0:	e792      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     9b2:	481d      	ldr	r0, [pc, #116]	; (a28 <_sercom_get_default_pad+0x16c>)
     9b4:	e790      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     9b6:	481d      	ldr	r0, [pc, #116]	; (a2c <_sercom_get_default_pad+0x170>)
     9b8:	e78e      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     9ba:	481d      	ldr	r0, [pc, #116]	; (a30 <_sercom_get_default_pad+0x174>)
     9bc:	e78c      	b.n	8d8 <_sercom_get_default_pad+0x1c>
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	42001000 	.word	0x42001000
     9c4:	42001800 	.word	0x42001800
     9c8:	42001c00 	.word	0x42001c00
     9cc:	42001400 	.word	0x42001400
     9d0:	42000800 	.word	0x42000800
     9d4:	42000c00 	.word	0x42000c00
     9d8:	00050003 	.word	0x00050003
     9dc:	00060003 	.word	0x00060003
     9e0:	00070003 	.word	0x00070003
     9e4:	00010003 	.word	0x00010003
     9e8:	001e0003 	.word	0x001e0003
     9ec:	001f0003 	.word	0x001f0003
     9f0:	000d0002 	.word	0x000d0002
     9f4:	000e0002 	.word	0x000e0002
     9f8:	000f0002 	.word	0x000f0002
     9fc:	00110003 	.word	0x00110003
     a00:	00120003 	.word	0x00120003
     a04:	00130003 	.word	0x00130003
     a08:	003f0005 	.word	0x003f0005
     a0c:	003e0005 	.word	0x003e0005
     a10:	00520005 	.word	0x00520005
     a14:	00170003 	.word	0x00170003
     a18:	00180003 	.word	0x00180003
     a1c:	00190003 	.word	0x00190003
     a20:	00040003 	.word	0x00040003
     a24:	000c0002 	.word	0x000c0002
     a28:	00100003 	.word	0x00100003
     a2c:	00530005 	.word	0x00530005
     a30:	00160003 	.word	0x00160003

00000a34 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a34:	b530      	push	{r4, r5, lr}
     a36:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a38:	4b0b      	ldr	r3, [pc, #44]	; (a68 <_sercom_get_sercom_inst_index+0x34>)
     a3a:	466a      	mov	r2, sp
     a3c:	cb32      	ldmia	r3!, {r1, r4, r5}
     a3e:	c232      	stmia	r2!, {r1, r4, r5}
     a40:	cb32      	ldmia	r3!, {r1, r4, r5}
     a42:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a44:	9b00      	ldr	r3, [sp, #0]
     a46:	4283      	cmp	r3, r0
     a48:	d00b      	beq.n	a62 <_sercom_get_sercom_inst_index+0x2e>
     a4a:	2301      	movs	r3, #1
     a4c:	009a      	lsls	r2, r3, #2
     a4e:	4669      	mov	r1, sp
     a50:	5852      	ldr	r2, [r2, r1]
     a52:	4282      	cmp	r2, r0
     a54:	d006      	beq.n	a64 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a56:	3301      	adds	r3, #1
     a58:	2b06      	cmp	r3, #6
     a5a:	d1f7      	bne.n	a4c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a5c:	2000      	movs	r0, #0
}
     a5e:	b007      	add	sp, #28
     a60:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a62:	2300      	movs	r3, #0
			return i;
     a64:	b2d8      	uxtb	r0, r3
     a66:	e7fa      	b.n	a5e <_sercom_get_sercom_inst_index+0x2a>
     a68:	00002d18 	.word	0x00002d18

00000a6c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     a6c:	4b0c      	ldr	r3, [pc, #48]	; (aa0 <cpu_irq_enter_critical+0x34>)
     a6e:	681b      	ldr	r3, [r3, #0]
     a70:	2b00      	cmp	r3, #0
     a72:	d106      	bne.n	a82 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a74:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     a78:	2b00      	cmp	r3, #0
     a7a:	d007      	beq.n	a8c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     a7c:	2200      	movs	r2, #0
     a7e:	4b09      	ldr	r3, [pc, #36]	; (aa4 <cpu_irq_enter_critical+0x38>)
     a80:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     a82:	4a07      	ldr	r2, [pc, #28]	; (aa0 <cpu_irq_enter_critical+0x34>)
     a84:	6813      	ldr	r3, [r2, #0]
     a86:	3301      	adds	r3, #1
     a88:	6013      	str	r3, [r2, #0]
}
     a8a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     a8c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     a8e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     a92:	2200      	movs	r2, #0
     a94:	4b04      	ldr	r3, [pc, #16]	; (aa8 <cpu_irq_enter_critical+0x3c>)
     a96:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     a98:	3201      	adds	r2, #1
     a9a:	4b02      	ldr	r3, [pc, #8]	; (aa4 <cpu_irq_enter_critical+0x38>)
     a9c:	701a      	strb	r2, [r3, #0]
     a9e:	e7f0      	b.n	a82 <cpu_irq_enter_critical+0x16>
     aa0:	20000044 	.word	0x20000044
     aa4:	20000048 	.word	0x20000048
     aa8:	20000008 	.word	0x20000008

00000aac <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     aac:	4b08      	ldr	r3, [pc, #32]	; (ad0 <cpu_irq_leave_critical+0x24>)
     aae:	681a      	ldr	r2, [r3, #0]
     ab0:	3a01      	subs	r2, #1
     ab2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	2b00      	cmp	r3, #0
     ab8:	d109      	bne.n	ace <cpu_irq_leave_critical+0x22>
     aba:	4b06      	ldr	r3, [pc, #24]	; (ad4 <cpu_irq_leave_critical+0x28>)
     abc:	781b      	ldrb	r3, [r3, #0]
     abe:	2b00      	cmp	r3, #0
     ac0:	d005      	beq.n	ace <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     ac2:	2201      	movs	r2, #1
     ac4:	4b04      	ldr	r3, [pc, #16]	; (ad8 <cpu_irq_leave_critical+0x2c>)
     ac6:	701a      	strb	r2, [r3, #0]
     ac8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     acc:	b662      	cpsie	i
	}
}
     ace:	4770      	bx	lr
     ad0:	20000044 	.word	0x20000044
     ad4:	20000048 	.word	0x20000048
     ad8:	20000008 	.word	0x20000008

00000adc <system_board_init>:




void system_board_init(void)
{
     adc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ade:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     ae0:	ac01      	add	r4, sp, #4
     ae2:	2501      	movs	r5, #1
     ae4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     ae6:	2700      	movs	r7, #0
     ae8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     aea:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     aec:	0021      	movs	r1, r4
     aee:	2013      	movs	r0, #19
     af0:	4e06      	ldr	r6, [pc, #24]	; (b0c <system_board_init+0x30>)
     af2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     af4:	2280      	movs	r2, #128	; 0x80
     af6:	0312      	lsls	r2, r2, #12
     af8:	4b05      	ldr	r3, [pc, #20]	; (b10 <system_board_init+0x34>)
     afa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     afc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     afe:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     b00:	0021      	movs	r1, r4
     b02:	201c      	movs	r0, #28
     b04:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     b06:	b003      	add	sp, #12
     b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	00000b15 	.word	0x00000b15
     b10:	41004400 	.word	0x41004400

00000b14 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b14:	b500      	push	{lr}
     b16:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b18:	ab01      	add	r3, sp, #4
     b1a:	2280      	movs	r2, #128	; 0x80
     b1c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     b1e:	780a      	ldrb	r2, [r1, #0]
     b20:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     b22:	784a      	ldrb	r2, [r1, #1]
     b24:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     b26:	788a      	ldrb	r2, [r1, #2]
     b28:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b2a:	0019      	movs	r1, r3
     b2c:	4b01      	ldr	r3, [pc, #4]	; (b34 <port_pin_set_config+0x20>)
     b2e:	4798      	blx	r3
}
     b30:	b003      	add	sp, #12
     b32:	bd00      	pop	{pc}
     b34:	00001079 	.word	0x00001079

00000b38 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b38:	b510      	push	{r4, lr}
	switch (clock_source) {
     b3a:	2808      	cmp	r0, #8
     b3c:	d803      	bhi.n	b46 <system_clock_source_get_hz+0xe>
     b3e:	0080      	lsls	r0, r0, #2
     b40:	4b1c      	ldr	r3, [pc, #112]	; (bb4 <system_clock_source_get_hz+0x7c>)
     b42:	581b      	ldr	r3, [r3, r0]
     b44:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     b46:	2000      	movs	r0, #0
     b48:	e032      	b.n	bb0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     b4a:	4b1b      	ldr	r3, [pc, #108]	; (bb8 <system_clock_source_get_hz+0x80>)
     b4c:	6918      	ldr	r0, [r3, #16]
     b4e:	e02f      	b.n	bb0 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b50:	4b1a      	ldr	r3, [pc, #104]	; (bbc <system_clock_source_get_hz+0x84>)
     b52:	6a1b      	ldr	r3, [r3, #32]
     b54:	059b      	lsls	r3, r3, #22
     b56:	0f9b      	lsrs	r3, r3, #30
     b58:	4819      	ldr	r0, [pc, #100]	; (bc0 <system_clock_source_get_hz+0x88>)
     b5a:	40d8      	lsrs	r0, r3
     b5c:	e028      	b.n	bb0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     b5e:	4b16      	ldr	r3, [pc, #88]	; (bb8 <system_clock_source_get_hz+0x80>)
     b60:	6958      	ldr	r0, [r3, #20]
     b62:	e025      	b.n	bb0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b64:	4b14      	ldr	r3, [pc, #80]	; (bb8 <system_clock_source_get_hz+0x80>)
     b66:	681b      	ldr	r3, [r3, #0]
			return 0;
     b68:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b6a:	079b      	lsls	r3, r3, #30
     b6c:	d520      	bpl.n	bb0 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b6e:	4913      	ldr	r1, [pc, #76]	; (bbc <system_clock_source_get_hz+0x84>)
     b70:	2210      	movs	r2, #16
     b72:	68cb      	ldr	r3, [r1, #12]
     b74:	421a      	tst	r2, r3
     b76:	d0fc      	beq.n	b72 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     b78:	4b0f      	ldr	r3, [pc, #60]	; (bb8 <system_clock_source_get_hz+0x80>)
     b7a:	681a      	ldr	r2, [r3, #0]
     b7c:	2324      	movs	r3, #36	; 0x24
     b7e:	4013      	ands	r3, r2
     b80:	2b04      	cmp	r3, #4
     b82:	d001      	beq.n	b88 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     b84:	480f      	ldr	r0, [pc, #60]	; (bc4 <system_clock_source_get_hz+0x8c>)
     b86:	e013      	b.n	bb0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b88:	2000      	movs	r0, #0
     b8a:	4b0f      	ldr	r3, [pc, #60]	; (bc8 <system_clock_source_get_hz+0x90>)
     b8c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     b8e:	4b0a      	ldr	r3, [pc, #40]	; (bb8 <system_clock_source_get_hz+0x80>)
     b90:	689b      	ldr	r3, [r3, #8]
     b92:	041b      	lsls	r3, r3, #16
     b94:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b96:	4358      	muls	r0, r3
     b98:	e00a      	b.n	bb0 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     b9a:	2350      	movs	r3, #80	; 0x50
     b9c:	4a07      	ldr	r2, [pc, #28]	; (bbc <system_clock_source_get_hz+0x84>)
     b9e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     ba0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ba2:	075b      	lsls	r3, r3, #29
     ba4:	d504      	bpl.n	bb0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     ba6:	4b04      	ldr	r3, [pc, #16]	; (bb8 <system_clock_source_get_hz+0x80>)
     ba8:	68d8      	ldr	r0, [r3, #12]
     baa:	e001      	b.n	bb0 <system_clock_source_get_hz+0x78>
		return 32768UL;
     bac:	2080      	movs	r0, #128	; 0x80
     bae:	0200      	lsls	r0, r0, #8
	}
}
     bb0:	bd10      	pop	{r4, pc}
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	00002d30 	.word	0x00002d30
     bb8:	2000004c 	.word	0x2000004c
     bbc:	40000800 	.word	0x40000800
     bc0:	007a1200 	.word	0x007a1200
     bc4:	02dc6c00 	.word	0x02dc6c00
     bc8:	00000f9d 	.word	0x00000f9d

00000bcc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     bcc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     bce:	490c      	ldr	r1, [pc, #48]	; (c00 <system_clock_source_osc8m_set_config+0x34>)
     bd0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     bd2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     bd4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     bd6:	7840      	ldrb	r0, [r0, #1]
     bd8:	2201      	movs	r2, #1
     bda:	4010      	ands	r0, r2
     bdc:	0180      	lsls	r0, r0, #6
     bde:	2640      	movs	r6, #64	; 0x40
     be0:	43b3      	bics	r3, r6
     be2:	4303      	orrs	r3, r0
     be4:	402a      	ands	r2, r5
     be6:	01d2      	lsls	r2, r2, #7
     be8:	2080      	movs	r0, #128	; 0x80
     bea:	4383      	bics	r3, r0
     bec:	4313      	orrs	r3, r2
     bee:	2203      	movs	r2, #3
     bf0:	4022      	ands	r2, r4
     bf2:	0212      	lsls	r2, r2, #8
     bf4:	4803      	ldr	r0, [pc, #12]	; (c04 <system_clock_source_osc8m_set_config+0x38>)
     bf6:	4003      	ands	r3, r0
     bf8:	4313      	orrs	r3, r2
     bfa:	620b      	str	r3, [r1, #32]
}
     bfc:	bd70      	pop	{r4, r5, r6, pc}
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	40000800 	.word	0x40000800
     c04:	fffffcff 	.word	0xfffffcff

00000c08 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c08:	2808      	cmp	r0, #8
     c0a:	d803      	bhi.n	c14 <system_clock_source_enable+0xc>
     c0c:	0080      	lsls	r0, r0, #2
     c0e:	4b25      	ldr	r3, [pc, #148]	; (ca4 <system_clock_source_enable+0x9c>)
     c10:	581b      	ldr	r3, [r3, r0]
     c12:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c14:	2017      	movs	r0, #23
     c16:	e044      	b.n	ca2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c18:	4a23      	ldr	r2, [pc, #140]	; (ca8 <system_clock_source_enable+0xa0>)
     c1a:	6a13      	ldr	r3, [r2, #32]
     c1c:	2102      	movs	r1, #2
     c1e:	430b      	orrs	r3, r1
     c20:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c22:	2000      	movs	r0, #0
     c24:	e03d      	b.n	ca2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c26:	4a20      	ldr	r2, [pc, #128]	; (ca8 <system_clock_source_enable+0xa0>)
     c28:	6993      	ldr	r3, [r2, #24]
     c2a:	2102      	movs	r1, #2
     c2c:	430b      	orrs	r3, r1
     c2e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     c30:	2000      	movs	r0, #0
		break;
     c32:	e036      	b.n	ca2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c34:	4a1c      	ldr	r2, [pc, #112]	; (ca8 <system_clock_source_enable+0xa0>)
     c36:	8a13      	ldrh	r3, [r2, #16]
     c38:	2102      	movs	r1, #2
     c3a:	430b      	orrs	r3, r1
     c3c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     c3e:	2000      	movs	r0, #0
		break;
     c40:	e02f      	b.n	ca2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c42:	4a19      	ldr	r2, [pc, #100]	; (ca8 <system_clock_source_enable+0xa0>)
     c44:	8a93      	ldrh	r3, [r2, #20]
     c46:	2102      	movs	r1, #2
     c48:	430b      	orrs	r3, r1
     c4a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     c4c:	2000      	movs	r0, #0
		break;
     c4e:	e028      	b.n	ca2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c50:	4916      	ldr	r1, [pc, #88]	; (cac <system_clock_source_enable+0xa4>)
     c52:	680b      	ldr	r3, [r1, #0]
     c54:	2202      	movs	r2, #2
     c56:	4313      	orrs	r3, r2
     c58:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     c5a:	4b13      	ldr	r3, [pc, #76]	; (ca8 <system_clock_source_enable+0xa0>)
     c5c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c5e:	0019      	movs	r1, r3
     c60:	320e      	adds	r2, #14
     c62:	68cb      	ldr	r3, [r1, #12]
     c64:	421a      	tst	r2, r3
     c66:	d0fc      	beq.n	c62 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c68:	4a10      	ldr	r2, [pc, #64]	; (cac <system_clock_source_enable+0xa4>)
     c6a:	6891      	ldr	r1, [r2, #8]
     c6c:	4b0e      	ldr	r3, [pc, #56]	; (ca8 <system_clock_source_enable+0xa0>)
     c6e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c70:	6852      	ldr	r2, [r2, #4]
     c72:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     c74:	2200      	movs	r2, #0
     c76:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c78:	0019      	movs	r1, r3
     c7a:	3210      	adds	r2, #16
     c7c:	68cb      	ldr	r3, [r1, #12]
     c7e:	421a      	tst	r2, r3
     c80:	d0fc      	beq.n	c7c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     c82:	4b0a      	ldr	r3, [pc, #40]	; (cac <system_clock_source_enable+0xa4>)
     c84:	681b      	ldr	r3, [r3, #0]
     c86:	b29b      	uxth	r3, r3
     c88:	4a07      	ldr	r2, [pc, #28]	; (ca8 <system_clock_source_enable+0xa0>)
     c8a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     c8c:	2000      	movs	r0, #0
     c8e:	e008      	b.n	ca2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     c90:	4905      	ldr	r1, [pc, #20]	; (ca8 <system_clock_source_enable+0xa0>)
     c92:	2244      	movs	r2, #68	; 0x44
     c94:	5c8b      	ldrb	r3, [r1, r2]
     c96:	2002      	movs	r0, #2
     c98:	4303      	orrs	r3, r0
     c9a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     c9c:	2000      	movs	r0, #0
		break;
     c9e:	e000      	b.n	ca2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     ca0:	2000      	movs	r0, #0
}
     ca2:	4770      	bx	lr
     ca4:	00002d54 	.word	0x00002d54
     ca8:	40000800 	.word	0x40000800
     cac:	2000004c 	.word	0x2000004c

00000cb0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     cb0:	b530      	push	{r4, r5, lr}
     cb2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cb4:	22c2      	movs	r2, #194	; 0xc2
     cb6:	00d2      	lsls	r2, r2, #3
     cb8:	4b1a      	ldr	r3, [pc, #104]	; (d24 <system_clock_init+0x74>)
     cba:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     cbc:	4a1a      	ldr	r2, [pc, #104]	; (d28 <system_clock_init+0x78>)
     cbe:	6853      	ldr	r3, [r2, #4]
     cc0:	211e      	movs	r1, #30
     cc2:	438b      	bics	r3, r1
     cc4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     cc6:	2301      	movs	r3, #1
     cc8:	466a      	mov	r2, sp
     cca:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ccc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     cce:	4d17      	ldr	r5, [pc, #92]	; (d2c <system_clock_init+0x7c>)
     cd0:	b2e0      	uxtb	r0, r4
     cd2:	4669      	mov	r1, sp
     cd4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cd6:	3401      	adds	r4, #1
     cd8:	2c25      	cmp	r4, #37	; 0x25
     cda:	d1f9      	bne.n	cd0 <system_clock_init+0x20>
	config->run_in_standby  = false;
     cdc:	a803      	add	r0, sp, #12
     cde:	2400      	movs	r4, #0
     ce0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     ce2:	2501      	movs	r5, #1
     ce4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     ce6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ce8:	4b11      	ldr	r3, [pc, #68]	; (d30 <system_clock_init+0x80>)
     cea:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     cec:	2006      	movs	r0, #6
     cee:	4b11      	ldr	r3, [pc, #68]	; (d34 <system_clock_init+0x84>)
     cf0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     cf2:	4b11      	ldr	r3, [pc, #68]	; (d38 <system_clock_init+0x88>)
     cf4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     cf6:	4b11      	ldr	r3, [pc, #68]	; (d3c <system_clock_init+0x8c>)
     cf8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     cfa:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     cfc:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     cfe:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     d00:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     d02:	466b      	mov	r3, sp
     d04:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d06:	2306      	movs	r3, #6
     d08:	466a      	mov	r2, sp
     d0a:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     d0c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     d0e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d10:	4669      	mov	r1, sp
     d12:	2000      	movs	r0, #0
     d14:	4b0a      	ldr	r3, [pc, #40]	; (d40 <system_clock_init+0x90>)
     d16:	4798      	blx	r3
     d18:	2000      	movs	r0, #0
     d1a:	4b0a      	ldr	r3, [pc, #40]	; (d44 <system_clock_init+0x94>)
     d1c:	4798      	blx	r3
#endif
}
     d1e:	b005      	add	sp, #20
     d20:	bd30      	pop	{r4, r5, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	40000800 	.word	0x40000800
     d28:	41004000 	.word	0x41004000
     d2c:	00000f81 	.word	0x00000f81
     d30:	00000bcd 	.word	0x00000bcd
     d34:	00000c09 	.word	0x00000c09
     d38:	00000d49 	.word	0x00000d49
     d3c:	40000400 	.word	0x40000400
     d40:	00000d6d 	.word	0x00000d6d
     d44:	00000e25 	.word	0x00000e25

00000d48 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     d48:	4a06      	ldr	r2, [pc, #24]	; (d64 <system_gclk_init+0x1c>)
     d4a:	6993      	ldr	r3, [r2, #24]
     d4c:	2108      	movs	r1, #8
     d4e:	430b      	orrs	r3, r1
     d50:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d52:	2201      	movs	r2, #1
     d54:	4b04      	ldr	r3, [pc, #16]	; (d68 <system_gclk_init+0x20>)
     d56:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d58:	0019      	movs	r1, r3
     d5a:	780b      	ldrb	r3, [r1, #0]
     d5c:	4213      	tst	r3, r2
     d5e:	d1fc      	bne.n	d5a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d60:	4770      	bx	lr
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	40000400 	.word	0x40000400
     d68:	40000c00 	.word	0x40000c00

00000d6c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d6c:	b570      	push	{r4, r5, r6, lr}
     d6e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     d70:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d72:	780d      	ldrb	r5, [r1, #0]
     d74:	022d      	lsls	r5, r5, #8
     d76:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     d78:	784b      	ldrb	r3, [r1, #1]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d002      	beq.n	d84 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     d7e:	2380      	movs	r3, #128	; 0x80
     d80:	02db      	lsls	r3, r3, #11
     d82:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     d84:	7a4b      	ldrb	r3, [r1, #9]
     d86:	2b00      	cmp	r3, #0
     d88:	d002      	beq.n	d90 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     d8a:	2380      	movs	r3, #128	; 0x80
     d8c:	031b      	lsls	r3, r3, #12
     d8e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     d90:	6848      	ldr	r0, [r1, #4]
     d92:	2801      	cmp	r0, #1
     d94:	d910      	bls.n	db8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     d96:	1e43      	subs	r3, r0, #1
     d98:	4218      	tst	r0, r3
     d9a:	d134      	bne.n	e06 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     d9c:	2802      	cmp	r0, #2
     d9e:	d930      	bls.n	e02 <system_gclk_gen_set_config+0x96>
     da0:	2302      	movs	r3, #2
     da2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     da4:	3201      	adds	r2, #1
						mask <<= 1) {
     da6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     da8:	4298      	cmp	r0, r3
     daa:	d8fb      	bhi.n	da4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     dac:	0212      	lsls	r2, r2, #8
     dae:	4332      	orrs	r2, r6
     db0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     db2:	2380      	movs	r3, #128	; 0x80
     db4:	035b      	lsls	r3, r3, #13
     db6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     db8:	7a0b      	ldrb	r3, [r1, #8]
     dba:	2b00      	cmp	r3, #0
     dbc:	d002      	beq.n	dc4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     dbe:	2380      	movs	r3, #128	; 0x80
     dc0:	039b      	lsls	r3, r3, #14
     dc2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dc4:	4a13      	ldr	r2, [pc, #76]	; (e14 <system_gclk_gen_set_config+0xa8>)
     dc6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     dc8:	b25b      	sxtb	r3, r3
     dca:	2b00      	cmp	r3, #0
     dcc:	dbfb      	blt.n	dc6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     dce:	4b12      	ldr	r3, [pc, #72]	; (e18 <system_gclk_gen_set_config+0xac>)
     dd0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     dd2:	4b12      	ldr	r3, [pc, #72]	; (e1c <system_gclk_gen_set_config+0xb0>)
     dd4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dd6:	4a0f      	ldr	r2, [pc, #60]	; (e14 <system_gclk_gen_set_config+0xa8>)
     dd8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     dda:	b25b      	sxtb	r3, r3
     ddc:	2b00      	cmp	r3, #0
     dde:	dbfb      	blt.n	dd8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     de0:	4b0c      	ldr	r3, [pc, #48]	; (e14 <system_gclk_gen_set_config+0xa8>)
     de2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     de4:	001a      	movs	r2, r3
     de6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     de8:	b25b      	sxtb	r3, r3
     dea:	2b00      	cmp	r3, #0
     dec:	dbfb      	blt.n	de6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     dee:	4a09      	ldr	r2, [pc, #36]	; (e14 <system_gclk_gen_set_config+0xa8>)
     df0:	6853      	ldr	r3, [r2, #4]
     df2:	2180      	movs	r1, #128	; 0x80
     df4:	0249      	lsls	r1, r1, #9
     df6:	400b      	ands	r3, r1
     df8:	431d      	orrs	r5, r3
     dfa:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     dfc:	4b08      	ldr	r3, [pc, #32]	; (e20 <system_gclk_gen_set_config+0xb4>)
     dfe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e00:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     e02:	2200      	movs	r2, #0
     e04:	e7d2      	b.n	dac <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e06:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     e08:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e0a:	2380      	movs	r3, #128	; 0x80
     e0c:	029b      	lsls	r3, r3, #10
     e0e:	431d      	orrs	r5, r3
     e10:	e7d2      	b.n	db8 <system_gclk_gen_set_config+0x4c>
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	40000c00 	.word	0x40000c00
     e18:	00000a6d 	.word	0x00000a6d
     e1c:	40000c08 	.word	0x40000c08
     e20:	00000aad 	.word	0x00000aad

00000e24 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e24:	b510      	push	{r4, lr}
     e26:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e28:	4a0b      	ldr	r2, [pc, #44]	; (e58 <system_gclk_gen_enable+0x34>)
     e2a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e2c:	b25b      	sxtb	r3, r3
     e2e:	2b00      	cmp	r3, #0
     e30:	dbfb      	blt.n	e2a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     e32:	4b0a      	ldr	r3, [pc, #40]	; (e5c <system_gclk_gen_enable+0x38>)
     e34:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e36:	4b0a      	ldr	r3, [pc, #40]	; (e60 <system_gclk_gen_enable+0x3c>)
     e38:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e3a:	4a07      	ldr	r2, [pc, #28]	; (e58 <system_gclk_gen_enable+0x34>)
     e3c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e3e:	b25b      	sxtb	r3, r3
     e40:	2b00      	cmp	r3, #0
     e42:	dbfb      	blt.n	e3c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e44:	4a04      	ldr	r2, [pc, #16]	; (e58 <system_gclk_gen_enable+0x34>)
     e46:	6851      	ldr	r1, [r2, #4]
     e48:	2380      	movs	r3, #128	; 0x80
     e4a:	025b      	lsls	r3, r3, #9
     e4c:	430b      	orrs	r3, r1
     e4e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     e50:	4b04      	ldr	r3, [pc, #16]	; (e64 <system_gclk_gen_enable+0x40>)
     e52:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e54:	bd10      	pop	{r4, pc}
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	40000c00 	.word	0x40000c00
     e5c:	00000a6d 	.word	0x00000a6d
     e60:	40000c04 	.word	0x40000c04
     e64:	00000aad 	.word	0x00000aad

00000e68 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e68:	b570      	push	{r4, r5, r6, lr}
     e6a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e6c:	4a1a      	ldr	r2, [pc, #104]	; (ed8 <system_gclk_gen_get_hz+0x70>)
     e6e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e70:	b25b      	sxtb	r3, r3
     e72:	2b00      	cmp	r3, #0
     e74:	dbfb      	blt.n	e6e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     e76:	4b19      	ldr	r3, [pc, #100]	; (edc <system_gclk_gen_get_hz+0x74>)
     e78:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e7a:	4b19      	ldr	r3, [pc, #100]	; (ee0 <system_gclk_gen_get_hz+0x78>)
     e7c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e7e:	4a16      	ldr	r2, [pc, #88]	; (ed8 <system_gclk_gen_get_hz+0x70>)
     e80:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e82:	b25b      	sxtb	r3, r3
     e84:	2b00      	cmp	r3, #0
     e86:	dbfb      	blt.n	e80 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     e88:	4e13      	ldr	r6, [pc, #76]	; (ed8 <system_gclk_gen_get_hz+0x70>)
     e8a:	6870      	ldr	r0, [r6, #4]
     e8c:	04c0      	lsls	r0, r0, #19
     e8e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     e90:	4b14      	ldr	r3, [pc, #80]	; (ee4 <system_gclk_gen_get_hz+0x7c>)
     e92:	4798      	blx	r3
     e94:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e96:	4b12      	ldr	r3, [pc, #72]	; (ee0 <system_gclk_gen_get_hz+0x78>)
     e98:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     e9a:	6876      	ldr	r6, [r6, #4]
     e9c:	02f6      	lsls	r6, r6, #11
     e9e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ea0:	4b11      	ldr	r3, [pc, #68]	; (ee8 <system_gclk_gen_get_hz+0x80>)
     ea2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ea4:	4a0c      	ldr	r2, [pc, #48]	; (ed8 <system_gclk_gen_get_hz+0x70>)
     ea6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ea8:	b25b      	sxtb	r3, r3
     eaa:	2b00      	cmp	r3, #0
     eac:	dbfb      	blt.n	ea6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     eae:	4b0a      	ldr	r3, [pc, #40]	; (ed8 <system_gclk_gen_get_hz+0x70>)
     eb0:	689c      	ldr	r4, [r3, #8]
     eb2:	0224      	lsls	r4, r4, #8
     eb4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     eb6:	4b0d      	ldr	r3, [pc, #52]	; (eec <system_gclk_gen_get_hz+0x84>)
     eb8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     eba:	2e00      	cmp	r6, #0
     ebc:	d107      	bne.n	ece <system_gclk_gen_get_hz+0x66>
     ebe:	2c01      	cmp	r4, #1
     ec0:	d907      	bls.n	ed2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     ec2:	0021      	movs	r1, r4
     ec4:	0028      	movs	r0, r5
     ec6:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <system_gclk_gen_get_hz+0x88>)
     ec8:	4798      	blx	r3
     eca:	0005      	movs	r5, r0
     ecc:	e001      	b.n	ed2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     ece:	3401      	adds	r4, #1
     ed0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     ed2:	0028      	movs	r0, r5
     ed4:	bd70      	pop	{r4, r5, r6, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	40000c00 	.word	0x40000c00
     edc:	00000a6d 	.word	0x00000a6d
     ee0:	40000c04 	.word	0x40000c04
     ee4:	00000b39 	.word	0x00000b39
     ee8:	40000c08 	.word	0x40000c08
     eec:	00000aad 	.word	0x00000aad
     ef0:	000012f1 	.word	0x000012f1

00000ef4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     ef4:	b510      	push	{r4, lr}
     ef6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ef8:	4b06      	ldr	r3, [pc, #24]	; (f14 <system_gclk_chan_enable+0x20>)
     efa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     efc:	4b06      	ldr	r3, [pc, #24]	; (f18 <system_gclk_chan_enable+0x24>)
     efe:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f00:	4a06      	ldr	r2, [pc, #24]	; (f1c <system_gclk_chan_enable+0x28>)
     f02:	8853      	ldrh	r3, [r2, #2]
     f04:	2180      	movs	r1, #128	; 0x80
     f06:	01c9      	lsls	r1, r1, #7
     f08:	430b      	orrs	r3, r1
     f0a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     f0c:	4b04      	ldr	r3, [pc, #16]	; (f20 <system_gclk_chan_enable+0x2c>)
     f0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f10:	bd10      	pop	{r4, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00000a6d 	.word	0x00000a6d
     f18:	40000c02 	.word	0x40000c02
     f1c:	40000c00 	.word	0x40000c00
     f20:	00000aad 	.word	0x00000aad

00000f24 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f24:	b510      	push	{r4, lr}
     f26:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f28:	4b0f      	ldr	r3, [pc, #60]	; (f68 <system_gclk_chan_disable+0x44>)
     f2a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f2c:	4b0f      	ldr	r3, [pc, #60]	; (f6c <system_gclk_chan_disable+0x48>)
     f2e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f30:	4a0f      	ldr	r2, [pc, #60]	; (f70 <system_gclk_chan_disable+0x4c>)
     f32:	8853      	ldrh	r3, [r2, #2]
     f34:	051b      	lsls	r3, r3, #20
     f36:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f38:	8853      	ldrh	r3, [r2, #2]
     f3a:	490e      	ldr	r1, [pc, #56]	; (f74 <system_gclk_chan_disable+0x50>)
     f3c:	400b      	ands	r3, r1
     f3e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f40:	8853      	ldrh	r3, [r2, #2]
     f42:	490d      	ldr	r1, [pc, #52]	; (f78 <system_gclk_chan_disable+0x54>)
     f44:	400b      	ands	r3, r1
     f46:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f48:	0011      	movs	r1, r2
     f4a:	2280      	movs	r2, #128	; 0x80
     f4c:	01d2      	lsls	r2, r2, #7
     f4e:	884b      	ldrh	r3, [r1, #2]
     f50:	4213      	tst	r3, r2
     f52:	d1fc      	bne.n	f4e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f54:	4906      	ldr	r1, [pc, #24]	; (f70 <system_gclk_chan_disable+0x4c>)
     f56:	884a      	ldrh	r2, [r1, #2]
     f58:	0203      	lsls	r3, r0, #8
     f5a:	4806      	ldr	r0, [pc, #24]	; (f74 <system_gclk_chan_disable+0x50>)
     f5c:	4002      	ands	r2, r0
     f5e:	4313      	orrs	r3, r2
     f60:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     f62:	4b06      	ldr	r3, [pc, #24]	; (f7c <system_gclk_chan_disable+0x58>)
     f64:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f66:	bd10      	pop	{r4, pc}
     f68:	00000a6d 	.word	0x00000a6d
     f6c:	40000c02 	.word	0x40000c02
     f70:	40000c00 	.word	0x40000c00
     f74:	fffff0ff 	.word	0xfffff0ff
     f78:	ffffbfff 	.word	0xffffbfff
     f7c:	00000aad 	.word	0x00000aad

00000f80 <system_gclk_chan_set_config>:
{
     f80:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     f82:	780c      	ldrb	r4, [r1, #0]
     f84:	0224      	lsls	r4, r4, #8
     f86:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     f88:	4b02      	ldr	r3, [pc, #8]	; (f94 <system_gclk_chan_set_config+0x14>)
     f8a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     f8c:	b2a4      	uxth	r4, r4
     f8e:	4b02      	ldr	r3, [pc, #8]	; (f98 <system_gclk_chan_set_config+0x18>)
     f90:	805c      	strh	r4, [r3, #2]
}
     f92:	bd10      	pop	{r4, pc}
     f94:	00000f25 	.word	0x00000f25
     f98:	40000c00 	.word	0x40000c00

00000f9c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     f9c:	b510      	push	{r4, lr}
     f9e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     fa0:	4b06      	ldr	r3, [pc, #24]	; (fbc <system_gclk_chan_get_hz+0x20>)
     fa2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fa4:	4b06      	ldr	r3, [pc, #24]	; (fc0 <system_gclk_chan_get_hz+0x24>)
     fa6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     fa8:	4b06      	ldr	r3, [pc, #24]	; (fc4 <system_gclk_chan_get_hz+0x28>)
     faa:	885c      	ldrh	r4, [r3, #2]
     fac:	0524      	lsls	r4, r4, #20
     fae:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     fb0:	4b05      	ldr	r3, [pc, #20]	; (fc8 <system_gclk_chan_get_hz+0x2c>)
     fb2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     fb4:	0020      	movs	r0, r4
     fb6:	4b05      	ldr	r3, [pc, #20]	; (fcc <system_gclk_chan_get_hz+0x30>)
     fb8:	4798      	blx	r3
}
     fba:	bd10      	pop	{r4, pc}
     fbc:	00000a6d 	.word	0x00000a6d
     fc0:	40000c02 	.word	0x40000c02
     fc4:	40000c00 	.word	0x40000c00
     fc8:	00000aad 	.word	0x00000aad
     fcc:	00000e69 	.word	0x00000e69

00000fd0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     fd0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     fd2:	78d3      	ldrb	r3, [r2, #3]
     fd4:	2b00      	cmp	r3, #0
     fd6:	d135      	bne.n	1044 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     fd8:	7813      	ldrb	r3, [r2, #0]
     fda:	2b80      	cmp	r3, #128	; 0x80
     fdc:	d029      	beq.n	1032 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     fde:	061b      	lsls	r3, r3, #24
     fe0:	2480      	movs	r4, #128	; 0x80
     fe2:	0264      	lsls	r4, r4, #9
     fe4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     fe6:	7854      	ldrb	r4, [r2, #1]
     fe8:	2502      	movs	r5, #2
     fea:	43ac      	bics	r4, r5
     fec:	d106      	bne.n	ffc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     fee:	7894      	ldrb	r4, [r2, #2]
     ff0:	2c00      	cmp	r4, #0
     ff2:	d120      	bne.n	1036 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     ff4:	2480      	movs	r4, #128	; 0x80
     ff6:	02a4      	lsls	r4, r4, #10
     ff8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     ffa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     ffc:	7854      	ldrb	r4, [r2, #1]
     ffe:	3c01      	subs	r4, #1
    1000:	2c01      	cmp	r4, #1
    1002:	d91c      	bls.n	103e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1004:	040d      	lsls	r5, r1, #16
    1006:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1008:	24a0      	movs	r4, #160	; 0xa0
    100a:	05e4      	lsls	r4, r4, #23
    100c:	432c      	orrs	r4, r5
    100e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1010:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1012:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1014:	24d0      	movs	r4, #208	; 0xd0
    1016:	0624      	lsls	r4, r4, #24
    1018:	432c      	orrs	r4, r5
    101a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    101c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    101e:	78d4      	ldrb	r4, [r2, #3]
    1020:	2c00      	cmp	r4, #0
    1022:	d122      	bne.n	106a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1024:	035b      	lsls	r3, r3, #13
    1026:	d51c      	bpl.n	1062 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1028:	7893      	ldrb	r3, [r2, #2]
    102a:	2b01      	cmp	r3, #1
    102c:	d01e      	beq.n	106c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    102e:	6141      	str	r1, [r0, #20]
    1030:	e017      	b.n	1062 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1032:	2300      	movs	r3, #0
    1034:	e7d7      	b.n	fe6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1036:	24c0      	movs	r4, #192	; 0xc0
    1038:	02e4      	lsls	r4, r4, #11
    103a:	4323      	orrs	r3, r4
    103c:	e7dd      	b.n	ffa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    103e:	4c0d      	ldr	r4, [pc, #52]	; (1074 <_system_pinmux_config+0xa4>)
    1040:	4023      	ands	r3, r4
    1042:	e7df      	b.n	1004 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1044:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1046:	040c      	lsls	r4, r1, #16
    1048:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    104a:	23a0      	movs	r3, #160	; 0xa0
    104c:	05db      	lsls	r3, r3, #23
    104e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1050:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1052:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1054:	23d0      	movs	r3, #208	; 0xd0
    1056:	061b      	lsls	r3, r3, #24
    1058:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    105a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    105c:	78d3      	ldrb	r3, [r2, #3]
    105e:	2b00      	cmp	r3, #0
    1060:	d103      	bne.n	106a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1062:	7853      	ldrb	r3, [r2, #1]
    1064:	3b01      	subs	r3, #1
    1066:	2b01      	cmp	r3, #1
    1068:	d902      	bls.n	1070 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    106a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    106c:	6181      	str	r1, [r0, #24]
    106e:	e7f8      	b.n	1062 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1070:	6081      	str	r1, [r0, #8]
}
    1072:	e7fa      	b.n	106a <_system_pinmux_config+0x9a>
    1074:	fffbffff 	.word	0xfffbffff

00001078 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1078:	b510      	push	{r4, lr}
    107a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    107c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    107e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1080:	2900      	cmp	r1, #0
    1082:	d104      	bne.n	108e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1084:	0943      	lsrs	r3, r0, #5
    1086:	01db      	lsls	r3, r3, #7
    1088:	4905      	ldr	r1, [pc, #20]	; (10a0 <system_pinmux_pin_set_config+0x28>)
    108a:	468c      	mov	ip, r1
    108c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    108e:	241f      	movs	r4, #31
    1090:	4020      	ands	r0, r4
    1092:	2101      	movs	r1, #1
    1094:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1096:	0018      	movs	r0, r3
    1098:	4b02      	ldr	r3, [pc, #8]	; (10a4 <system_pinmux_pin_set_config+0x2c>)
    109a:	4798      	blx	r3
}
    109c:	bd10      	pop	{r4, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	41004400 	.word	0x41004400
    10a4:	00000fd1 	.word	0x00000fd1

000010a8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10a8:	4770      	bx	lr
	...

000010ac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10ac:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10ae:	4b05      	ldr	r3, [pc, #20]	; (10c4 <system_init+0x18>)
    10b0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    10b2:	4b05      	ldr	r3, [pc, #20]	; (10c8 <system_init+0x1c>)
    10b4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    10b6:	4b05      	ldr	r3, [pc, #20]	; (10cc <system_init+0x20>)
    10b8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10ba:	4b05      	ldr	r3, [pc, #20]	; (10d0 <system_init+0x24>)
    10bc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10be:	4b05      	ldr	r3, [pc, #20]	; (10d4 <system_init+0x28>)
    10c0:	4798      	blx	r3
}
    10c2:	bd10      	pop	{r4, pc}
    10c4:	00000cb1 	.word	0x00000cb1
    10c8:	00000add 	.word	0x00000add
    10cc:	000010a9 	.word	0x000010a9
    10d0:	00000321 	.word	0x00000321
    10d4:	000010a9 	.word	0x000010a9

000010d8 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    10d8:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    10da:	2201      	movs	r2, #1
    10dc:	4b03      	ldr	r3, [pc, #12]	; (10ec <WDT_Handler+0x14>)
    10de:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    10e0:	4b03      	ldr	r3, [pc, #12]	; (10f0 <WDT_Handler+0x18>)
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d000      	beq.n	10ea <WDT_Handler+0x12>
		wdt_early_warning_callback();
    10e8:	4798      	blx	r3
	}
}
    10ea:	bd10      	pop	{r4, pc}
    10ec:	40001000 	.word	0x40001000
    10f0:	200000b4 	.word	0x200000b4

000010f4 <irq_handler>:
		delay_ms(500);
	}
}

void irq_handler(void)
{
    10f4:	b570      	push	{r4, r5, r6, lr}
    10f6:	4c08      	ldr	r4, [pc, #32]	; (1118 <irq_handler+0x24>)
    10f8:	2580      	movs	r5, #128	; 0x80
    10fa:	032d      	lsls	r5, r5, #12
    10fc:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	delay_ms(500);
    10fe:	20fa      	movs	r0, #250	; 0xfa
    1100:	0040      	lsls	r0, r0, #1
    1102:	4e06      	ldr	r6, [pc, #24]	; (111c <irq_handler+0x28>)
    1104:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1106:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
	delay_ms(200);
    1108:	20c8      	movs	r0, #200	; 0xc8
    110a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    110c:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	delay_ms(1000);
    110e:	20fa      	movs	r0, #250	; 0xfa
    1110:	0080      	lsls	r0, r0, #2
    1112:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    1114:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
}
    1116:	bd70      	pop	{r4, r5, r6, pc}
    1118:	41004400 	.word	0x41004400
    111c:	0000023d 	.word	0x0000023d

00001120 <init_irq_interrupt>:

//initialisation de la borche à laquelle on envoit des interruptions

void init_irq_interrupt(void)
{
    1120:	b510      	push	{r4, lr}
    1122:	b084      	sub	sp, #16
 	struct extint_chan_conf config_extint_chan;
 	extint_chan_get_config_defaults(&config_extint_chan);
    1124:	ac01      	add	r4, sp, #4
    1126:	0020      	movs	r0, r4
    1128:	4b0c      	ldr	r3, [pc, #48]	; (115c <init_irq_interrupt+0x3c>)
    112a:	4798      	blx	r3
	config_extint_chan.gpio_pin = IRQ_PIN;									//numero de broche associé à l'interruption
    112c:	2307      	movs	r3, #7
    112e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = MUX_PA22A_EIC_EXTINT6;				//configuration de la broche en canal d'entrée
    1130:	2300      	movs	r3, #0
    1132:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;					//résistance de tirage
    1134:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;			//citère de détéction de l'interruption
    1136:	3301      	adds	r3, #1
    1138:	72e3      	strb	r3, [r4, #11]
	config_extint_chan.filter_input_signal = true;
    113a:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(6, &config_extint_chan);							//configuration du canal d'entrée grâce à la structure
    113c:	0021      	movs	r1, r4
    113e:	2006      	movs	r0, #6
    1140:	4b07      	ldr	r3, [pc, #28]	; (1160 <init_irq_interrupt+0x40>)
    1142:	4798      	blx	r3
	extint_register_callback(irq_handler,6, EXTINT_CALLBACK_TYPE_DETECT);	//permet de définir la fonction callback appelée à chaque interruption
    1144:	2200      	movs	r2, #0
    1146:	2106      	movs	r1, #6
    1148:	4806      	ldr	r0, [pc, #24]	; (1164 <init_irq_interrupt+0x44>)
    114a:	4b07      	ldr	r3, [pc, #28]	; (1168 <init_irq_interrupt+0x48>)
    114c:	4798      	blx	r3
	extint_chan_enable_callback(6, EXTINT_CALLBACK_TYPE_DETECT);			//activer la détéction d'interruptions		
    114e:	2100      	movs	r1, #0
    1150:	2006      	movs	r0, #6
    1152:	4b06      	ldr	r3, [pc, #24]	; (116c <init_irq_interrupt+0x4c>)
    1154:	4798      	blx	r3
																			//EXTINT_CALLBACK_TYPE_DETECT -> structure qui permet de configurer la condition d'interruption 
}
    1156:	b004      	add	sp, #16
    1158:	bd10      	pop	{r4, pc}
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	0000038d 	.word	0x0000038d
    1160:	000003a1 	.word	0x000003a1
    1164:	000010f5 	.word	0x000010f5
    1168:	00000269 	.word	0x00000269
    116c:	00000295 	.word	0x00000295

00001170 <main>:

int main (void)
{
    1170:	b5f0      	push	{r4, r5, r6, r7, lr}
    1172:	46d6      	mov	lr, sl
    1174:	464f      	mov	r7, r9
    1176:	4646      	mov	r6, r8
    1178:	b5c0      	push	{r6, r7, lr}
    117a:	b08e      	sub	sp, #56	; 0x38
	system_init();
    117c:	4b4a      	ldr	r3, [pc, #296]	; (12a8 <main+0x138>)
    117e:	4798      	blx	r3
	delay_init();
    1180:	4b4a      	ldr	r3, [pc, #296]	; (12ac <main+0x13c>)
    1182:	4798      	blx	r3
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1184:	aa01      	add	r2, sp, #4
    1186:	2364      	movs	r3, #100	; 0x64
    1188:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    118a:	4b49      	ldr	r3, [pc, #292]	; (12b0 <main+0x140>)
    118c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    118e:	2300      	movs	r3, #0
    1190:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1192:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    1194:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1196:	2180      	movs	r1, #128	; 0x80
    1198:	0389      	lsls	r1, r1, #14
    119a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    119c:	2101      	movs	r1, #1
    119e:	4249      	negs	r1, r1
    11a0:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    11a2:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    11a4:	3125      	adds	r1, #37	; 0x25
    11a6:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    11a8:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    11aa:	3108      	adds	r1, #8
    11ac:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    11ae:	3101      	adds	r1, #1
    11b0:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    11b2:	3101      	adds	r1, #1
    11b4:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    11b6:	33d7      	adds	r3, #215	; 0xd7
    11b8:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    11ba:	4b3e      	ldr	r3, [pc, #248]	; (12b4 <main+0x144>)
    11bc:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    11be:	4b3e      	ldr	r3, [pc, #248]	; (12b8 <main+0x148>)
    11c0:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, EXT1_I2C_MODULE, &config_i2c_master); //EDBG_I2C_MODULE
    11c2:	4c3e      	ldr	r4, [pc, #248]	; (12bc <main+0x14c>)
    11c4:	493e      	ldr	r1, [pc, #248]	; (12c0 <main+0x150>)
    11c6:	0020      	movs	r0, r4
    11c8:	4b3e      	ldr	r3, [pc, #248]	; (12c4 <main+0x154>)
    11ca:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11cc:	6823      	ldr	r3, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    11ce:	2207      	movs	r2, #7
    11d0:	69d9      	ldr	r1, [r3, #28]
	while (i2c_master_is_syncing(module)) {
    11d2:	420a      	tst	r2, r1
    11d4:	d1fc      	bne.n	11d0 <main+0x60>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    11d6:	681a      	ldr	r2, [r3, #0]
    11d8:	2102      	movs	r1, #2
    11da:	430a      	orrs	r2, r1
    11dc:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    11de:	4a37      	ldr	r2, [pc, #220]	; (12bc <main+0x14c>)
    11e0:	88d0      	ldrh	r0, [r2, #6]
	uint32_t timeout_counter = 0;
    11e2:	2200      	movs	r2, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    11e4:	310e      	adds	r1, #14
    11e6:	e002      	b.n	11ee <main+0x7e>
		timeout_counter++;
    11e8:	3201      	adds	r2, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    11ea:	4282      	cmp	r2, r0
    11ec:	d203      	bcs.n	11f6 <main+0x86>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    11ee:	8b5c      	ldrh	r4, [r3, #26]
    11f0:	420c      	tst	r4, r1
    11f2:	d0f9      	beq.n	11e8 <main+0x78>
    11f4:	e001      	b.n	11fa <main+0x8a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    11f6:	2210      	movs	r2, #16
    11f8:	835a      	strh	r2, [r3, #26]
	config->input_pull = PORT_PIN_PULL_UP;
    11fa:	a901      	add	r1, sp, #4
    11fc:	2401      	movs	r4, #1
    11fe:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
    1200:	2300      	movs	r3, #0
    1202:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1204:	700c      	strb	r4, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1206:	2013      	movs	r0, #19
    1208:	4b2f      	ldr	r3, [pc, #188]	; (12c8 <main+0x158>)
    120a:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    120c:	2280      	movs	r2, #128	; 0x80
    120e:	0312      	lsls	r2, r2, #12
    1210:	4b2e      	ldr	r3, [pc, #184]	; (12cc <main+0x15c>)
    1212:	619a      	str	r2, [r3, #24]
	cpu_irq_enable();
    1214:	4b2e      	ldr	r3, [pc, #184]	; (12d0 <main+0x160>)
    1216:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1218:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    121c:	b662      	cpsie	i
	configure_i2c_master();
	config_led();
	system_interrupt_enable_global();
	init_irq_interrupt();
    121e:	4b2d      	ldr	r3, [pc, #180]	; (12d4 <main+0x164>)
    1220:	4798      	blx	r3
	uint16_t timeout = 0;
    1222:	2400      	movs	r4, #0
	if(!bug)
    1224:	4b2c      	ldr	r3, [pc, #176]	; (12d8 <main+0x168>)
    1226:	4698      	mov	r8, r3
		val = !val;
    1228:	4b2c      	ldr	r3, [pc, #176]	; (12dc <main+0x16c>)
    122a:	4699      	mov	r9, r3
		packet.data[0] = val;
    122c:	4b2c      	ldr	r3, [pc, #176]	; (12e0 <main+0x170>)
    122e:	469a      	mov	sl, r3
    1230:	e000      	b.n	1234 <main+0xc4>
	while(1)
	{
		onde();
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK)
		{
			if (timeout++ == TIMEOUT)
    1232:	001c      	movs	r4, r3
	if(!bug)
    1234:	4643      	mov	r3, r8
    1236:	681b      	ldr	r3, [r3, #0]
    1238:	2b00      	cmp	r3, #0
    123a:	d115      	bne.n	1268 <main+0xf8>
		val = !val;
    123c:	464b      	mov	r3, r9
    123e:	681a      	ldr	r2, [r3, #0]
    1240:	4253      	negs	r3, r2
    1242:	4153      	adcs	r3, r2
    1244:	b2db      	uxtb	r3, r3
    1246:	4649      	mov	r1, r9
    1248:	600b      	str	r3, [r1, #0]
	if (level) {
    124a:	2a00      	cmp	r2, #0
    124c:	d122      	bne.n	1294 <main+0x124>
		port_base->OUTSET.reg = pin_mask;
    124e:	2180      	movs	r1, #128	; 0x80
    1250:	00c9      	lsls	r1, r1, #3
    1252:	4a1e      	ldr	r2, [pc, #120]	; (12cc <main+0x15c>)
    1254:	6191      	str	r1, [r2, #24]
		packet.data[0] = val;
    1256:	4652      	mov	r2, sl
    1258:	6852      	ldr	r2, [r2, #4]
    125a:	7013      	strb	r3, [r2, #0]
	return (port_base->OUT.reg & pin_mask);
    125c:	4b1b      	ldr	r3, [pc, #108]	; (12cc <main+0x15c>)
    125e:	691b      	ldr	r3, [r3, #16]
		delay_ms(500);
    1260:	20fa      	movs	r0, #250	; 0xfa
    1262:	0040      	lsls	r0, r0, #1
    1264:	4b1f      	ldr	r3, [pc, #124]	; (12e4 <main+0x174>)
    1266:	4798      	blx	r3
	nb++;
    1268:	4a1f      	ldr	r2, [pc, #124]	; (12e8 <main+0x178>)
    126a:	6813      	ldr	r3, [r2, #0]
    126c:	3301      	adds	r3, #1
    126e:	6013      	str	r3, [r2, #0]
	if(nb==3)
    1270:	2b03      	cmp	r3, #3
    1272:	d014      	beq.n	129e <main+0x12e>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK)
    1274:	4e1a      	ldr	r6, [pc, #104]	; (12e0 <main+0x170>)
    1276:	4d11      	ldr	r5, [pc, #68]	; (12bc <main+0x14c>)
    1278:	4f1c      	ldr	r7, [pc, #112]	; (12ec <main+0x17c>)
    127a:	0031      	movs	r1, r6
    127c:	0028      	movs	r0, r5
    127e:	47b8      	blx	r7
    1280:	2800      	cmp	r0, #0
    1282:	d0d7      	beq.n	1234 <main+0xc4>
			if (timeout++ == TIMEOUT)
    1284:	1c63      	adds	r3, r4, #1
    1286:	b29b      	uxth	r3, r3
    1288:	22fa      	movs	r2, #250	; 0xfa
    128a:	0092      	lsls	r2, r2, #2
    128c:	4294      	cmp	r4, r2
    128e:	d0d0      	beq.n	1232 <main+0xc2>
    1290:	001c      	movs	r4, r3
    1292:	e7f2      	b.n	127a <main+0x10a>
		port_base->OUTCLR.reg = pin_mask;
    1294:	2180      	movs	r1, #128	; 0x80
    1296:	00c9      	lsls	r1, r1, #3
    1298:	4a0c      	ldr	r2, [pc, #48]	; (12cc <main+0x15c>)
    129a:	6151      	str	r1, [r2, #20]
    129c:	e7db      	b.n	1256 <main+0xe6>
		bug = 1;
    129e:	2201      	movs	r2, #1
    12a0:	4b0d      	ldr	r3, [pc, #52]	; (12d8 <main+0x168>)
    12a2:	601a      	str	r2, [r3, #0]
    12a4:	e7e6      	b.n	1274 <main+0x104>
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	000010ad 	.word	0x000010ad
    12ac:	000001fd 	.word	0x000001fd
    12b0:	00000d48 	.word	0x00000d48
    12b4:	00100002 	.word	0x00100002
    12b8:	00110002 	.word	0x00110002
    12bc:	200000b8 	.word	0x200000b8
    12c0:	42000c00 	.word	0x42000c00
    12c4:	00000425 	.word	0x00000425
    12c8:	00000b15 	.word	0x00000b15
    12cc:	41004400 	.word	0x41004400
    12d0:	20000008 	.word	0x20000008
    12d4:	00001121 	.word	0x00001121
    12d8:	20000064 	.word	0x20000064
    12dc:	2000006c 	.word	0x2000006c
    12e0:	2000000c 	.word	0x2000000c
    12e4:	0000023d 	.word	0x0000023d
    12e8:	20000068 	.word	0x20000068
    12ec:	0000085d 	.word	0x0000085d

000012f0 <__udivsi3>:
    12f0:	2200      	movs	r2, #0
    12f2:	0843      	lsrs	r3, r0, #1
    12f4:	428b      	cmp	r3, r1
    12f6:	d374      	bcc.n	13e2 <__udivsi3+0xf2>
    12f8:	0903      	lsrs	r3, r0, #4
    12fa:	428b      	cmp	r3, r1
    12fc:	d35f      	bcc.n	13be <__udivsi3+0xce>
    12fe:	0a03      	lsrs	r3, r0, #8
    1300:	428b      	cmp	r3, r1
    1302:	d344      	bcc.n	138e <__udivsi3+0x9e>
    1304:	0b03      	lsrs	r3, r0, #12
    1306:	428b      	cmp	r3, r1
    1308:	d328      	bcc.n	135c <__udivsi3+0x6c>
    130a:	0c03      	lsrs	r3, r0, #16
    130c:	428b      	cmp	r3, r1
    130e:	d30d      	bcc.n	132c <__udivsi3+0x3c>
    1310:	22ff      	movs	r2, #255	; 0xff
    1312:	0209      	lsls	r1, r1, #8
    1314:	ba12      	rev	r2, r2
    1316:	0c03      	lsrs	r3, r0, #16
    1318:	428b      	cmp	r3, r1
    131a:	d302      	bcc.n	1322 <__udivsi3+0x32>
    131c:	1212      	asrs	r2, r2, #8
    131e:	0209      	lsls	r1, r1, #8
    1320:	d065      	beq.n	13ee <__udivsi3+0xfe>
    1322:	0b03      	lsrs	r3, r0, #12
    1324:	428b      	cmp	r3, r1
    1326:	d319      	bcc.n	135c <__udivsi3+0x6c>
    1328:	e000      	b.n	132c <__udivsi3+0x3c>
    132a:	0a09      	lsrs	r1, r1, #8
    132c:	0bc3      	lsrs	r3, r0, #15
    132e:	428b      	cmp	r3, r1
    1330:	d301      	bcc.n	1336 <__udivsi3+0x46>
    1332:	03cb      	lsls	r3, r1, #15
    1334:	1ac0      	subs	r0, r0, r3
    1336:	4152      	adcs	r2, r2
    1338:	0b83      	lsrs	r3, r0, #14
    133a:	428b      	cmp	r3, r1
    133c:	d301      	bcc.n	1342 <__udivsi3+0x52>
    133e:	038b      	lsls	r3, r1, #14
    1340:	1ac0      	subs	r0, r0, r3
    1342:	4152      	adcs	r2, r2
    1344:	0b43      	lsrs	r3, r0, #13
    1346:	428b      	cmp	r3, r1
    1348:	d301      	bcc.n	134e <__udivsi3+0x5e>
    134a:	034b      	lsls	r3, r1, #13
    134c:	1ac0      	subs	r0, r0, r3
    134e:	4152      	adcs	r2, r2
    1350:	0b03      	lsrs	r3, r0, #12
    1352:	428b      	cmp	r3, r1
    1354:	d301      	bcc.n	135a <__udivsi3+0x6a>
    1356:	030b      	lsls	r3, r1, #12
    1358:	1ac0      	subs	r0, r0, r3
    135a:	4152      	adcs	r2, r2
    135c:	0ac3      	lsrs	r3, r0, #11
    135e:	428b      	cmp	r3, r1
    1360:	d301      	bcc.n	1366 <__udivsi3+0x76>
    1362:	02cb      	lsls	r3, r1, #11
    1364:	1ac0      	subs	r0, r0, r3
    1366:	4152      	adcs	r2, r2
    1368:	0a83      	lsrs	r3, r0, #10
    136a:	428b      	cmp	r3, r1
    136c:	d301      	bcc.n	1372 <__udivsi3+0x82>
    136e:	028b      	lsls	r3, r1, #10
    1370:	1ac0      	subs	r0, r0, r3
    1372:	4152      	adcs	r2, r2
    1374:	0a43      	lsrs	r3, r0, #9
    1376:	428b      	cmp	r3, r1
    1378:	d301      	bcc.n	137e <__udivsi3+0x8e>
    137a:	024b      	lsls	r3, r1, #9
    137c:	1ac0      	subs	r0, r0, r3
    137e:	4152      	adcs	r2, r2
    1380:	0a03      	lsrs	r3, r0, #8
    1382:	428b      	cmp	r3, r1
    1384:	d301      	bcc.n	138a <__udivsi3+0x9a>
    1386:	020b      	lsls	r3, r1, #8
    1388:	1ac0      	subs	r0, r0, r3
    138a:	4152      	adcs	r2, r2
    138c:	d2cd      	bcs.n	132a <__udivsi3+0x3a>
    138e:	09c3      	lsrs	r3, r0, #7
    1390:	428b      	cmp	r3, r1
    1392:	d301      	bcc.n	1398 <__udivsi3+0xa8>
    1394:	01cb      	lsls	r3, r1, #7
    1396:	1ac0      	subs	r0, r0, r3
    1398:	4152      	adcs	r2, r2
    139a:	0983      	lsrs	r3, r0, #6
    139c:	428b      	cmp	r3, r1
    139e:	d301      	bcc.n	13a4 <__udivsi3+0xb4>
    13a0:	018b      	lsls	r3, r1, #6
    13a2:	1ac0      	subs	r0, r0, r3
    13a4:	4152      	adcs	r2, r2
    13a6:	0943      	lsrs	r3, r0, #5
    13a8:	428b      	cmp	r3, r1
    13aa:	d301      	bcc.n	13b0 <__udivsi3+0xc0>
    13ac:	014b      	lsls	r3, r1, #5
    13ae:	1ac0      	subs	r0, r0, r3
    13b0:	4152      	adcs	r2, r2
    13b2:	0903      	lsrs	r3, r0, #4
    13b4:	428b      	cmp	r3, r1
    13b6:	d301      	bcc.n	13bc <__udivsi3+0xcc>
    13b8:	010b      	lsls	r3, r1, #4
    13ba:	1ac0      	subs	r0, r0, r3
    13bc:	4152      	adcs	r2, r2
    13be:	08c3      	lsrs	r3, r0, #3
    13c0:	428b      	cmp	r3, r1
    13c2:	d301      	bcc.n	13c8 <__udivsi3+0xd8>
    13c4:	00cb      	lsls	r3, r1, #3
    13c6:	1ac0      	subs	r0, r0, r3
    13c8:	4152      	adcs	r2, r2
    13ca:	0883      	lsrs	r3, r0, #2
    13cc:	428b      	cmp	r3, r1
    13ce:	d301      	bcc.n	13d4 <__udivsi3+0xe4>
    13d0:	008b      	lsls	r3, r1, #2
    13d2:	1ac0      	subs	r0, r0, r3
    13d4:	4152      	adcs	r2, r2
    13d6:	0843      	lsrs	r3, r0, #1
    13d8:	428b      	cmp	r3, r1
    13da:	d301      	bcc.n	13e0 <__udivsi3+0xf0>
    13dc:	004b      	lsls	r3, r1, #1
    13de:	1ac0      	subs	r0, r0, r3
    13e0:	4152      	adcs	r2, r2
    13e2:	1a41      	subs	r1, r0, r1
    13e4:	d200      	bcs.n	13e8 <__udivsi3+0xf8>
    13e6:	4601      	mov	r1, r0
    13e8:	4152      	adcs	r2, r2
    13ea:	4610      	mov	r0, r2
    13ec:	4770      	bx	lr
    13ee:	e7ff      	b.n	13f0 <__udivsi3+0x100>
    13f0:	b501      	push	{r0, lr}
    13f2:	2000      	movs	r0, #0
    13f4:	f000 f806 	bl	1404 <__aeabi_idiv0>
    13f8:	bd02      	pop	{r1, pc}
    13fa:	46c0      	nop			; (mov r8, r8)

000013fc <__aeabi_uidivmod>:
    13fc:	2900      	cmp	r1, #0
    13fe:	d0f7      	beq.n	13f0 <__udivsi3+0x100>
    1400:	e776      	b.n	12f0 <__udivsi3>
    1402:	4770      	bx	lr

00001404 <__aeabi_idiv0>:
    1404:	4770      	bx	lr
    1406:	46c0      	nop			; (mov r8, r8)

00001408 <__aeabi_dadd>:
    1408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    140a:	4645      	mov	r5, r8
    140c:	46de      	mov	lr, fp
    140e:	4657      	mov	r7, sl
    1410:	464e      	mov	r6, r9
    1412:	030c      	lsls	r4, r1, #12
    1414:	b5e0      	push	{r5, r6, r7, lr}
    1416:	004e      	lsls	r6, r1, #1
    1418:	0fc9      	lsrs	r1, r1, #31
    141a:	4688      	mov	r8, r1
    141c:	000d      	movs	r5, r1
    141e:	0a61      	lsrs	r1, r4, #9
    1420:	0f44      	lsrs	r4, r0, #29
    1422:	430c      	orrs	r4, r1
    1424:	00c7      	lsls	r7, r0, #3
    1426:	0319      	lsls	r1, r3, #12
    1428:	0058      	lsls	r0, r3, #1
    142a:	0fdb      	lsrs	r3, r3, #31
    142c:	469b      	mov	fp, r3
    142e:	0a4b      	lsrs	r3, r1, #9
    1430:	0f51      	lsrs	r1, r2, #29
    1432:	430b      	orrs	r3, r1
    1434:	0d76      	lsrs	r6, r6, #21
    1436:	0d40      	lsrs	r0, r0, #21
    1438:	0019      	movs	r1, r3
    143a:	00d2      	lsls	r2, r2, #3
    143c:	45d8      	cmp	r8, fp
    143e:	d100      	bne.n	1442 <__aeabi_dadd+0x3a>
    1440:	e0ae      	b.n	15a0 <__aeabi_dadd+0x198>
    1442:	1a35      	subs	r5, r6, r0
    1444:	2d00      	cmp	r5, #0
    1446:	dc00      	bgt.n	144a <__aeabi_dadd+0x42>
    1448:	e0f6      	b.n	1638 <__aeabi_dadd+0x230>
    144a:	2800      	cmp	r0, #0
    144c:	d10f      	bne.n	146e <__aeabi_dadd+0x66>
    144e:	4313      	orrs	r3, r2
    1450:	d100      	bne.n	1454 <__aeabi_dadd+0x4c>
    1452:	e0db      	b.n	160c <__aeabi_dadd+0x204>
    1454:	1e6b      	subs	r3, r5, #1
    1456:	2b00      	cmp	r3, #0
    1458:	d000      	beq.n	145c <__aeabi_dadd+0x54>
    145a:	e137      	b.n	16cc <__aeabi_dadd+0x2c4>
    145c:	1aba      	subs	r2, r7, r2
    145e:	4297      	cmp	r7, r2
    1460:	41bf      	sbcs	r7, r7
    1462:	1a64      	subs	r4, r4, r1
    1464:	427f      	negs	r7, r7
    1466:	1be4      	subs	r4, r4, r7
    1468:	2601      	movs	r6, #1
    146a:	0017      	movs	r7, r2
    146c:	e024      	b.n	14b8 <__aeabi_dadd+0xb0>
    146e:	4bc6      	ldr	r3, [pc, #792]	; (1788 <__aeabi_dadd+0x380>)
    1470:	429e      	cmp	r6, r3
    1472:	d04d      	beq.n	1510 <__aeabi_dadd+0x108>
    1474:	2380      	movs	r3, #128	; 0x80
    1476:	041b      	lsls	r3, r3, #16
    1478:	4319      	orrs	r1, r3
    147a:	2d38      	cmp	r5, #56	; 0x38
    147c:	dd00      	ble.n	1480 <__aeabi_dadd+0x78>
    147e:	e107      	b.n	1690 <__aeabi_dadd+0x288>
    1480:	2d1f      	cmp	r5, #31
    1482:	dd00      	ble.n	1486 <__aeabi_dadd+0x7e>
    1484:	e138      	b.n	16f8 <__aeabi_dadd+0x2f0>
    1486:	2020      	movs	r0, #32
    1488:	1b43      	subs	r3, r0, r5
    148a:	469a      	mov	sl, r3
    148c:	000b      	movs	r3, r1
    148e:	4650      	mov	r0, sl
    1490:	4083      	lsls	r3, r0
    1492:	4699      	mov	r9, r3
    1494:	0013      	movs	r3, r2
    1496:	4648      	mov	r0, r9
    1498:	40eb      	lsrs	r3, r5
    149a:	4318      	orrs	r0, r3
    149c:	0003      	movs	r3, r0
    149e:	4650      	mov	r0, sl
    14a0:	4082      	lsls	r2, r0
    14a2:	1e50      	subs	r0, r2, #1
    14a4:	4182      	sbcs	r2, r0
    14a6:	40e9      	lsrs	r1, r5
    14a8:	431a      	orrs	r2, r3
    14aa:	1aba      	subs	r2, r7, r2
    14ac:	1a61      	subs	r1, r4, r1
    14ae:	4297      	cmp	r7, r2
    14b0:	41a4      	sbcs	r4, r4
    14b2:	0017      	movs	r7, r2
    14b4:	4264      	negs	r4, r4
    14b6:	1b0c      	subs	r4, r1, r4
    14b8:	0223      	lsls	r3, r4, #8
    14ba:	d562      	bpl.n	1582 <__aeabi_dadd+0x17a>
    14bc:	0264      	lsls	r4, r4, #9
    14be:	0a65      	lsrs	r5, r4, #9
    14c0:	2d00      	cmp	r5, #0
    14c2:	d100      	bne.n	14c6 <__aeabi_dadd+0xbe>
    14c4:	e0df      	b.n	1686 <__aeabi_dadd+0x27e>
    14c6:	0028      	movs	r0, r5
    14c8:	f001 fbe4 	bl	2c94 <__clzsi2>
    14cc:	0003      	movs	r3, r0
    14ce:	3b08      	subs	r3, #8
    14d0:	2b1f      	cmp	r3, #31
    14d2:	dd00      	ble.n	14d6 <__aeabi_dadd+0xce>
    14d4:	e0d2      	b.n	167c <__aeabi_dadd+0x274>
    14d6:	2220      	movs	r2, #32
    14d8:	003c      	movs	r4, r7
    14da:	1ad2      	subs	r2, r2, r3
    14dc:	409d      	lsls	r5, r3
    14de:	40d4      	lsrs	r4, r2
    14e0:	409f      	lsls	r7, r3
    14e2:	4325      	orrs	r5, r4
    14e4:	429e      	cmp	r6, r3
    14e6:	dd00      	ble.n	14ea <__aeabi_dadd+0xe2>
    14e8:	e0c4      	b.n	1674 <__aeabi_dadd+0x26c>
    14ea:	1b9e      	subs	r6, r3, r6
    14ec:	1c73      	adds	r3, r6, #1
    14ee:	2b1f      	cmp	r3, #31
    14f0:	dd00      	ble.n	14f4 <__aeabi_dadd+0xec>
    14f2:	e0f1      	b.n	16d8 <__aeabi_dadd+0x2d0>
    14f4:	2220      	movs	r2, #32
    14f6:	0038      	movs	r0, r7
    14f8:	0029      	movs	r1, r5
    14fa:	1ad2      	subs	r2, r2, r3
    14fc:	40d8      	lsrs	r0, r3
    14fe:	4091      	lsls	r1, r2
    1500:	4097      	lsls	r7, r2
    1502:	002c      	movs	r4, r5
    1504:	4301      	orrs	r1, r0
    1506:	1e78      	subs	r0, r7, #1
    1508:	4187      	sbcs	r7, r0
    150a:	40dc      	lsrs	r4, r3
    150c:	2600      	movs	r6, #0
    150e:	430f      	orrs	r7, r1
    1510:	077b      	lsls	r3, r7, #29
    1512:	d009      	beq.n	1528 <__aeabi_dadd+0x120>
    1514:	230f      	movs	r3, #15
    1516:	403b      	ands	r3, r7
    1518:	2b04      	cmp	r3, #4
    151a:	d005      	beq.n	1528 <__aeabi_dadd+0x120>
    151c:	1d3b      	adds	r3, r7, #4
    151e:	42bb      	cmp	r3, r7
    1520:	41bf      	sbcs	r7, r7
    1522:	427f      	negs	r7, r7
    1524:	19e4      	adds	r4, r4, r7
    1526:	001f      	movs	r7, r3
    1528:	0223      	lsls	r3, r4, #8
    152a:	d52c      	bpl.n	1586 <__aeabi_dadd+0x17e>
    152c:	4b96      	ldr	r3, [pc, #600]	; (1788 <__aeabi_dadd+0x380>)
    152e:	3601      	adds	r6, #1
    1530:	429e      	cmp	r6, r3
    1532:	d100      	bne.n	1536 <__aeabi_dadd+0x12e>
    1534:	e09a      	b.n	166c <__aeabi_dadd+0x264>
    1536:	4645      	mov	r5, r8
    1538:	4b94      	ldr	r3, [pc, #592]	; (178c <__aeabi_dadd+0x384>)
    153a:	08ff      	lsrs	r7, r7, #3
    153c:	401c      	ands	r4, r3
    153e:	0760      	lsls	r0, r4, #29
    1540:	0576      	lsls	r6, r6, #21
    1542:	0264      	lsls	r4, r4, #9
    1544:	4307      	orrs	r7, r0
    1546:	0b24      	lsrs	r4, r4, #12
    1548:	0d76      	lsrs	r6, r6, #21
    154a:	2100      	movs	r1, #0
    154c:	0324      	lsls	r4, r4, #12
    154e:	0b23      	lsrs	r3, r4, #12
    1550:	0d0c      	lsrs	r4, r1, #20
    1552:	4a8f      	ldr	r2, [pc, #572]	; (1790 <__aeabi_dadd+0x388>)
    1554:	0524      	lsls	r4, r4, #20
    1556:	431c      	orrs	r4, r3
    1558:	4014      	ands	r4, r2
    155a:	0533      	lsls	r3, r6, #20
    155c:	4323      	orrs	r3, r4
    155e:	005b      	lsls	r3, r3, #1
    1560:	07ed      	lsls	r5, r5, #31
    1562:	085b      	lsrs	r3, r3, #1
    1564:	432b      	orrs	r3, r5
    1566:	0038      	movs	r0, r7
    1568:	0019      	movs	r1, r3
    156a:	bc3c      	pop	{r2, r3, r4, r5}
    156c:	4690      	mov	r8, r2
    156e:	4699      	mov	r9, r3
    1570:	46a2      	mov	sl, r4
    1572:	46ab      	mov	fp, r5
    1574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1576:	4664      	mov	r4, ip
    1578:	4304      	orrs	r4, r0
    157a:	d100      	bne.n	157e <__aeabi_dadd+0x176>
    157c:	e211      	b.n	19a2 <__aeabi_dadd+0x59a>
    157e:	0004      	movs	r4, r0
    1580:	4667      	mov	r7, ip
    1582:	077b      	lsls	r3, r7, #29
    1584:	d1c6      	bne.n	1514 <__aeabi_dadd+0x10c>
    1586:	4645      	mov	r5, r8
    1588:	0760      	lsls	r0, r4, #29
    158a:	08ff      	lsrs	r7, r7, #3
    158c:	4307      	orrs	r7, r0
    158e:	08e4      	lsrs	r4, r4, #3
    1590:	4b7d      	ldr	r3, [pc, #500]	; (1788 <__aeabi_dadd+0x380>)
    1592:	429e      	cmp	r6, r3
    1594:	d030      	beq.n	15f8 <__aeabi_dadd+0x1f0>
    1596:	0324      	lsls	r4, r4, #12
    1598:	0576      	lsls	r6, r6, #21
    159a:	0b24      	lsrs	r4, r4, #12
    159c:	0d76      	lsrs	r6, r6, #21
    159e:	e7d4      	b.n	154a <__aeabi_dadd+0x142>
    15a0:	1a33      	subs	r3, r6, r0
    15a2:	469a      	mov	sl, r3
    15a4:	2b00      	cmp	r3, #0
    15a6:	dd78      	ble.n	169a <__aeabi_dadd+0x292>
    15a8:	2800      	cmp	r0, #0
    15aa:	d031      	beq.n	1610 <__aeabi_dadd+0x208>
    15ac:	4876      	ldr	r0, [pc, #472]	; (1788 <__aeabi_dadd+0x380>)
    15ae:	4286      	cmp	r6, r0
    15b0:	d0ae      	beq.n	1510 <__aeabi_dadd+0x108>
    15b2:	2080      	movs	r0, #128	; 0x80
    15b4:	0400      	lsls	r0, r0, #16
    15b6:	4301      	orrs	r1, r0
    15b8:	4653      	mov	r3, sl
    15ba:	2b38      	cmp	r3, #56	; 0x38
    15bc:	dc00      	bgt.n	15c0 <__aeabi_dadd+0x1b8>
    15be:	e0e9      	b.n	1794 <__aeabi_dadd+0x38c>
    15c0:	430a      	orrs	r2, r1
    15c2:	1e51      	subs	r1, r2, #1
    15c4:	418a      	sbcs	r2, r1
    15c6:	2100      	movs	r1, #0
    15c8:	19d2      	adds	r2, r2, r7
    15ca:	42ba      	cmp	r2, r7
    15cc:	41bf      	sbcs	r7, r7
    15ce:	1909      	adds	r1, r1, r4
    15d0:	427c      	negs	r4, r7
    15d2:	0017      	movs	r7, r2
    15d4:	190c      	adds	r4, r1, r4
    15d6:	0223      	lsls	r3, r4, #8
    15d8:	d5d3      	bpl.n	1582 <__aeabi_dadd+0x17a>
    15da:	4b6b      	ldr	r3, [pc, #428]	; (1788 <__aeabi_dadd+0x380>)
    15dc:	3601      	adds	r6, #1
    15de:	429e      	cmp	r6, r3
    15e0:	d100      	bne.n	15e4 <__aeabi_dadd+0x1dc>
    15e2:	e13a      	b.n	185a <__aeabi_dadd+0x452>
    15e4:	2001      	movs	r0, #1
    15e6:	4b69      	ldr	r3, [pc, #420]	; (178c <__aeabi_dadd+0x384>)
    15e8:	401c      	ands	r4, r3
    15ea:	087b      	lsrs	r3, r7, #1
    15ec:	4007      	ands	r7, r0
    15ee:	431f      	orrs	r7, r3
    15f0:	07e0      	lsls	r0, r4, #31
    15f2:	4307      	orrs	r7, r0
    15f4:	0864      	lsrs	r4, r4, #1
    15f6:	e78b      	b.n	1510 <__aeabi_dadd+0x108>
    15f8:	0023      	movs	r3, r4
    15fa:	433b      	orrs	r3, r7
    15fc:	d100      	bne.n	1600 <__aeabi_dadd+0x1f8>
    15fe:	e1cb      	b.n	1998 <__aeabi_dadd+0x590>
    1600:	2280      	movs	r2, #128	; 0x80
    1602:	0312      	lsls	r2, r2, #12
    1604:	4314      	orrs	r4, r2
    1606:	0324      	lsls	r4, r4, #12
    1608:	0b24      	lsrs	r4, r4, #12
    160a:	e79e      	b.n	154a <__aeabi_dadd+0x142>
    160c:	002e      	movs	r6, r5
    160e:	e77f      	b.n	1510 <__aeabi_dadd+0x108>
    1610:	0008      	movs	r0, r1
    1612:	4310      	orrs	r0, r2
    1614:	d100      	bne.n	1618 <__aeabi_dadd+0x210>
    1616:	e0b4      	b.n	1782 <__aeabi_dadd+0x37a>
    1618:	1e58      	subs	r0, r3, #1
    161a:	2800      	cmp	r0, #0
    161c:	d000      	beq.n	1620 <__aeabi_dadd+0x218>
    161e:	e0de      	b.n	17de <__aeabi_dadd+0x3d6>
    1620:	18ba      	adds	r2, r7, r2
    1622:	42ba      	cmp	r2, r7
    1624:	419b      	sbcs	r3, r3
    1626:	1864      	adds	r4, r4, r1
    1628:	425b      	negs	r3, r3
    162a:	18e4      	adds	r4, r4, r3
    162c:	0017      	movs	r7, r2
    162e:	2601      	movs	r6, #1
    1630:	0223      	lsls	r3, r4, #8
    1632:	d5a6      	bpl.n	1582 <__aeabi_dadd+0x17a>
    1634:	2602      	movs	r6, #2
    1636:	e7d5      	b.n	15e4 <__aeabi_dadd+0x1dc>
    1638:	2d00      	cmp	r5, #0
    163a:	d16e      	bne.n	171a <__aeabi_dadd+0x312>
    163c:	1c70      	adds	r0, r6, #1
    163e:	0540      	lsls	r0, r0, #21
    1640:	0d40      	lsrs	r0, r0, #21
    1642:	2801      	cmp	r0, #1
    1644:	dc00      	bgt.n	1648 <__aeabi_dadd+0x240>
    1646:	e0f9      	b.n	183c <__aeabi_dadd+0x434>
    1648:	1ab8      	subs	r0, r7, r2
    164a:	4684      	mov	ip, r0
    164c:	4287      	cmp	r7, r0
    164e:	4180      	sbcs	r0, r0
    1650:	1ae5      	subs	r5, r4, r3
    1652:	4240      	negs	r0, r0
    1654:	1a2d      	subs	r5, r5, r0
    1656:	0228      	lsls	r0, r5, #8
    1658:	d400      	bmi.n	165c <__aeabi_dadd+0x254>
    165a:	e089      	b.n	1770 <__aeabi_dadd+0x368>
    165c:	1bd7      	subs	r7, r2, r7
    165e:	42ba      	cmp	r2, r7
    1660:	4192      	sbcs	r2, r2
    1662:	1b1c      	subs	r4, r3, r4
    1664:	4252      	negs	r2, r2
    1666:	1aa5      	subs	r5, r4, r2
    1668:	46d8      	mov	r8, fp
    166a:	e729      	b.n	14c0 <__aeabi_dadd+0xb8>
    166c:	4645      	mov	r5, r8
    166e:	2400      	movs	r4, #0
    1670:	2700      	movs	r7, #0
    1672:	e76a      	b.n	154a <__aeabi_dadd+0x142>
    1674:	4c45      	ldr	r4, [pc, #276]	; (178c <__aeabi_dadd+0x384>)
    1676:	1af6      	subs	r6, r6, r3
    1678:	402c      	ands	r4, r5
    167a:	e749      	b.n	1510 <__aeabi_dadd+0x108>
    167c:	003d      	movs	r5, r7
    167e:	3828      	subs	r0, #40	; 0x28
    1680:	4085      	lsls	r5, r0
    1682:	2700      	movs	r7, #0
    1684:	e72e      	b.n	14e4 <__aeabi_dadd+0xdc>
    1686:	0038      	movs	r0, r7
    1688:	f001 fb04 	bl	2c94 <__clzsi2>
    168c:	3020      	adds	r0, #32
    168e:	e71d      	b.n	14cc <__aeabi_dadd+0xc4>
    1690:	430a      	orrs	r2, r1
    1692:	1e51      	subs	r1, r2, #1
    1694:	418a      	sbcs	r2, r1
    1696:	2100      	movs	r1, #0
    1698:	e707      	b.n	14aa <__aeabi_dadd+0xa2>
    169a:	2b00      	cmp	r3, #0
    169c:	d000      	beq.n	16a0 <__aeabi_dadd+0x298>
    169e:	e0f3      	b.n	1888 <__aeabi_dadd+0x480>
    16a0:	1c70      	adds	r0, r6, #1
    16a2:	0543      	lsls	r3, r0, #21
    16a4:	0d5b      	lsrs	r3, r3, #21
    16a6:	2b01      	cmp	r3, #1
    16a8:	dc00      	bgt.n	16ac <__aeabi_dadd+0x2a4>
    16aa:	e0ad      	b.n	1808 <__aeabi_dadd+0x400>
    16ac:	4b36      	ldr	r3, [pc, #216]	; (1788 <__aeabi_dadd+0x380>)
    16ae:	4298      	cmp	r0, r3
    16b0:	d100      	bne.n	16b4 <__aeabi_dadd+0x2ac>
    16b2:	e0d1      	b.n	1858 <__aeabi_dadd+0x450>
    16b4:	18ba      	adds	r2, r7, r2
    16b6:	42ba      	cmp	r2, r7
    16b8:	41bf      	sbcs	r7, r7
    16ba:	1864      	adds	r4, r4, r1
    16bc:	427f      	negs	r7, r7
    16be:	19e4      	adds	r4, r4, r7
    16c0:	07e7      	lsls	r7, r4, #31
    16c2:	0852      	lsrs	r2, r2, #1
    16c4:	4317      	orrs	r7, r2
    16c6:	0864      	lsrs	r4, r4, #1
    16c8:	0006      	movs	r6, r0
    16ca:	e721      	b.n	1510 <__aeabi_dadd+0x108>
    16cc:	482e      	ldr	r0, [pc, #184]	; (1788 <__aeabi_dadd+0x380>)
    16ce:	4285      	cmp	r5, r0
    16d0:	d100      	bne.n	16d4 <__aeabi_dadd+0x2cc>
    16d2:	e093      	b.n	17fc <__aeabi_dadd+0x3f4>
    16d4:	001d      	movs	r5, r3
    16d6:	e6d0      	b.n	147a <__aeabi_dadd+0x72>
    16d8:	0029      	movs	r1, r5
    16da:	3e1f      	subs	r6, #31
    16dc:	40f1      	lsrs	r1, r6
    16de:	2b20      	cmp	r3, #32
    16e0:	d100      	bne.n	16e4 <__aeabi_dadd+0x2dc>
    16e2:	e08d      	b.n	1800 <__aeabi_dadd+0x3f8>
    16e4:	2240      	movs	r2, #64	; 0x40
    16e6:	1ad3      	subs	r3, r2, r3
    16e8:	409d      	lsls	r5, r3
    16ea:	432f      	orrs	r7, r5
    16ec:	1e7d      	subs	r5, r7, #1
    16ee:	41af      	sbcs	r7, r5
    16f0:	2400      	movs	r4, #0
    16f2:	430f      	orrs	r7, r1
    16f4:	2600      	movs	r6, #0
    16f6:	e744      	b.n	1582 <__aeabi_dadd+0x17a>
    16f8:	002b      	movs	r3, r5
    16fa:	0008      	movs	r0, r1
    16fc:	3b20      	subs	r3, #32
    16fe:	40d8      	lsrs	r0, r3
    1700:	0003      	movs	r3, r0
    1702:	2d20      	cmp	r5, #32
    1704:	d100      	bne.n	1708 <__aeabi_dadd+0x300>
    1706:	e07d      	b.n	1804 <__aeabi_dadd+0x3fc>
    1708:	2040      	movs	r0, #64	; 0x40
    170a:	1b45      	subs	r5, r0, r5
    170c:	40a9      	lsls	r1, r5
    170e:	430a      	orrs	r2, r1
    1710:	1e51      	subs	r1, r2, #1
    1712:	418a      	sbcs	r2, r1
    1714:	2100      	movs	r1, #0
    1716:	431a      	orrs	r2, r3
    1718:	e6c7      	b.n	14aa <__aeabi_dadd+0xa2>
    171a:	2e00      	cmp	r6, #0
    171c:	d050      	beq.n	17c0 <__aeabi_dadd+0x3b8>
    171e:	4e1a      	ldr	r6, [pc, #104]	; (1788 <__aeabi_dadd+0x380>)
    1720:	42b0      	cmp	r0, r6
    1722:	d057      	beq.n	17d4 <__aeabi_dadd+0x3cc>
    1724:	2680      	movs	r6, #128	; 0x80
    1726:	426b      	negs	r3, r5
    1728:	4699      	mov	r9, r3
    172a:	0436      	lsls	r6, r6, #16
    172c:	4334      	orrs	r4, r6
    172e:	464b      	mov	r3, r9
    1730:	2b38      	cmp	r3, #56	; 0x38
    1732:	dd00      	ble.n	1736 <__aeabi_dadd+0x32e>
    1734:	e0d6      	b.n	18e4 <__aeabi_dadd+0x4dc>
    1736:	2b1f      	cmp	r3, #31
    1738:	dd00      	ble.n	173c <__aeabi_dadd+0x334>
    173a:	e135      	b.n	19a8 <__aeabi_dadd+0x5a0>
    173c:	2620      	movs	r6, #32
    173e:	1af5      	subs	r5, r6, r3
    1740:	0026      	movs	r6, r4
    1742:	40ae      	lsls	r6, r5
    1744:	46b2      	mov	sl, r6
    1746:	003e      	movs	r6, r7
    1748:	40de      	lsrs	r6, r3
    174a:	46ac      	mov	ip, r5
    174c:	0035      	movs	r5, r6
    174e:	4656      	mov	r6, sl
    1750:	432e      	orrs	r6, r5
    1752:	4665      	mov	r5, ip
    1754:	40af      	lsls	r7, r5
    1756:	1e7d      	subs	r5, r7, #1
    1758:	41af      	sbcs	r7, r5
    175a:	40dc      	lsrs	r4, r3
    175c:	4337      	orrs	r7, r6
    175e:	1bd7      	subs	r7, r2, r7
    1760:	42ba      	cmp	r2, r7
    1762:	4192      	sbcs	r2, r2
    1764:	1b0c      	subs	r4, r1, r4
    1766:	4252      	negs	r2, r2
    1768:	1aa4      	subs	r4, r4, r2
    176a:	0006      	movs	r6, r0
    176c:	46d8      	mov	r8, fp
    176e:	e6a3      	b.n	14b8 <__aeabi_dadd+0xb0>
    1770:	4664      	mov	r4, ip
    1772:	4667      	mov	r7, ip
    1774:	432c      	orrs	r4, r5
    1776:	d000      	beq.n	177a <__aeabi_dadd+0x372>
    1778:	e6a2      	b.n	14c0 <__aeabi_dadd+0xb8>
    177a:	2500      	movs	r5, #0
    177c:	2600      	movs	r6, #0
    177e:	2700      	movs	r7, #0
    1780:	e706      	b.n	1590 <__aeabi_dadd+0x188>
    1782:	001e      	movs	r6, r3
    1784:	e6c4      	b.n	1510 <__aeabi_dadd+0x108>
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	000007ff 	.word	0x000007ff
    178c:	ff7fffff 	.word	0xff7fffff
    1790:	800fffff 	.word	0x800fffff
    1794:	2b1f      	cmp	r3, #31
    1796:	dc63      	bgt.n	1860 <__aeabi_dadd+0x458>
    1798:	2020      	movs	r0, #32
    179a:	1ac3      	subs	r3, r0, r3
    179c:	0008      	movs	r0, r1
    179e:	4098      	lsls	r0, r3
    17a0:	469c      	mov	ip, r3
    17a2:	4683      	mov	fp, r0
    17a4:	4653      	mov	r3, sl
    17a6:	0010      	movs	r0, r2
    17a8:	40d8      	lsrs	r0, r3
    17aa:	0003      	movs	r3, r0
    17ac:	4658      	mov	r0, fp
    17ae:	4318      	orrs	r0, r3
    17b0:	4663      	mov	r3, ip
    17b2:	409a      	lsls	r2, r3
    17b4:	1e53      	subs	r3, r2, #1
    17b6:	419a      	sbcs	r2, r3
    17b8:	4653      	mov	r3, sl
    17ba:	4302      	orrs	r2, r0
    17bc:	40d9      	lsrs	r1, r3
    17be:	e703      	b.n	15c8 <__aeabi_dadd+0x1c0>
    17c0:	0026      	movs	r6, r4
    17c2:	433e      	orrs	r6, r7
    17c4:	d006      	beq.n	17d4 <__aeabi_dadd+0x3cc>
    17c6:	43eb      	mvns	r3, r5
    17c8:	4699      	mov	r9, r3
    17ca:	2b00      	cmp	r3, #0
    17cc:	d0c7      	beq.n	175e <__aeabi_dadd+0x356>
    17ce:	4e94      	ldr	r6, [pc, #592]	; (1a20 <__aeabi_dadd+0x618>)
    17d0:	42b0      	cmp	r0, r6
    17d2:	d1ac      	bne.n	172e <__aeabi_dadd+0x326>
    17d4:	000c      	movs	r4, r1
    17d6:	0017      	movs	r7, r2
    17d8:	0006      	movs	r6, r0
    17da:	46d8      	mov	r8, fp
    17dc:	e698      	b.n	1510 <__aeabi_dadd+0x108>
    17de:	4b90      	ldr	r3, [pc, #576]	; (1a20 <__aeabi_dadd+0x618>)
    17e0:	459a      	cmp	sl, r3
    17e2:	d00b      	beq.n	17fc <__aeabi_dadd+0x3f4>
    17e4:	4682      	mov	sl, r0
    17e6:	e6e7      	b.n	15b8 <__aeabi_dadd+0x1b0>
    17e8:	2800      	cmp	r0, #0
    17ea:	d000      	beq.n	17ee <__aeabi_dadd+0x3e6>
    17ec:	e09e      	b.n	192c <__aeabi_dadd+0x524>
    17ee:	0018      	movs	r0, r3
    17f0:	4310      	orrs	r0, r2
    17f2:	d100      	bne.n	17f6 <__aeabi_dadd+0x3ee>
    17f4:	e0e9      	b.n	19ca <__aeabi_dadd+0x5c2>
    17f6:	001c      	movs	r4, r3
    17f8:	0017      	movs	r7, r2
    17fa:	46d8      	mov	r8, fp
    17fc:	4e88      	ldr	r6, [pc, #544]	; (1a20 <__aeabi_dadd+0x618>)
    17fe:	e687      	b.n	1510 <__aeabi_dadd+0x108>
    1800:	2500      	movs	r5, #0
    1802:	e772      	b.n	16ea <__aeabi_dadd+0x2e2>
    1804:	2100      	movs	r1, #0
    1806:	e782      	b.n	170e <__aeabi_dadd+0x306>
    1808:	0023      	movs	r3, r4
    180a:	433b      	orrs	r3, r7
    180c:	2e00      	cmp	r6, #0
    180e:	d000      	beq.n	1812 <__aeabi_dadd+0x40a>
    1810:	e0ab      	b.n	196a <__aeabi_dadd+0x562>
    1812:	2b00      	cmp	r3, #0
    1814:	d100      	bne.n	1818 <__aeabi_dadd+0x410>
    1816:	e0e7      	b.n	19e8 <__aeabi_dadd+0x5e0>
    1818:	000b      	movs	r3, r1
    181a:	4313      	orrs	r3, r2
    181c:	d100      	bne.n	1820 <__aeabi_dadd+0x418>
    181e:	e677      	b.n	1510 <__aeabi_dadd+0x108>
    1820:	18ba      	adds	r2, r7, r2
    1822:	42ba      	cmp	r2, r7
    1824:	41bf      	sbcs	r7, r7
    1826:	1864      	adds	r4, r4, r1
    1828:	427f      	negs	r7, r7
    182a:	19e4      	adds	r4, r4, r7
    182c:	0223      	lsls	r3, r4, #8
    182e:	d400      	bmi.n	1832 <__aeabi_dadd+0x42a>
    1830:	e0f2      	b.n	1a18 <__aeabi_dadd+0x610>
    1832:	4b7c      	ldr	r3, [pc, #496]	; (1a24 <__aeabi_dadd+0x61c>)
    1834:	0017      	movs	r7, r2
    1836:	401c      	ands	r4, r3
    1838:	0006      	movs	r6, r0
    183a:	e669      	b.n	1510 <__aeabi_dadd+0x108>
    183c:	0020      	movs	r0, r4
    183e:	4338      	orrs	r0, r7
    1840:	2e00      	cmp	r6, #0
    1842:	d1d1      	bne.n	17e8 <__aeabi_dadd+0x3e0>
    1844:	2800      	cmp	r0, #0
    1846:	d15b      	bne.n	1900 <__aeabi_dadd+0x4f8>
    1848:	001c      	movs	r4, r3
    184a:	4314      	orrs	r4, r2
    184c:	d100      	bne.n	1850 <__aeabi_dadd+0x448>
    184e:	e0a8      	b.n	19a2 <__aeabi_dadd+0x59a>
    1850:	001c      	movs	r4, r3
    1852:	0017      	movs	r7, r2
    1854:	46d8      	mov	r8, fp
    1856:	e65b      	b.n	1510 <__aeabi_dadd+0x108>
    1858:	0006      	movs	r6, r0
    185a:	2400      	movs	r4, #0
    185c:	2700      	movs	r7, #0
    185e:	e697      	b.n	1590 <__aeabi_dadd+0x188>
    1860:	4650      	mov	r0, sl
    1862:	000b      	movs	r3, r1
    1864:	3820      	subs	r0, #32
    1866:	40c3      	lsrs	r3, r0
    1868:	4699      	mov	r9, r3
    186a:	4653      	mov	r3, sl
    186c:	2b20      	cmp	r3, #32
    186e:	d100      	bne.n	1872 <__aeabi_dadd+0x46a>
    1870:	e095      	b.n	199e <__aeabi_dadd+0x596>
    1872:	2340      	movs	r3, #64	; 0x40
    1874:	4650      	mov	r0, sl
    1876:	1a1b      	subs	r3, r3, r0
    1878:	4099      	lsls	r1, r3
    187a:	430a      	orrs	r2, r1
    187c:	1e51      	subs	r1, r2, #1
    187e:	418a      	sbcs	r2, r1
    1880:	464b      	mov	r3, r9
    1882:	2100      	movs	r1, #0
    1884:	431a      	orrs	r2, r3
    1886:	e69f      	b.n	15c8 <__aeabi_dadd+0x1c0>
    1888:	2e00      	cmp	r6, #0
    188a:	d130      	bne.n	18ee <__aeabi_dadd+0x4e6>
    188c:	0026      	movs	r6, r4
    188e:	433e      	orrs	r6, r7
    1890:	d067      	beq.n	1962 <__aeabi_dadd+0x55a>
    1892:	43db      	mvns	r3, r3
    1894:	469a      	mov	sl, r3
    1896:	2b00      	cmp	r3, #0
    1898:	d01c      	beq.n	18d4 <__aeabi_dadd+0x4cc>
    189a:	4e61      	ldr	r6, [pc, #388]	; (1a20 <__aeabi_dadd+0x618>)
    189c:	42b0      	cmp	r0, r6
    189e:	d060      	beq.n	1962 <__aeabi_dadd+0x55a>
    18a0:	4653      	mov	r3, sl
    18a2:	2b38      	cmp	r3, #56	; 0x38
    18a4:	dd00      	ble.n	18a8 <__aeabi_dadd+0x4a0>
    18a6:	e096      	b.n	19d6 <__aeabi_dadd+0x5ce>
    18a8:	2b1f      	cmp	r3, #31
    18aa:	dd00      	ble.n	18ae <__aeabi_dadd+0x4a6>
    18ac:	e09f      	b.n	19ee <__aeabi_dadd+0x5e6>
    18ae:	2620      	movs	r6, #32
    18b0:	1af3      	subs	r3, r6, r3
    18b2:	0026      	movs	r6, r4
    18b4:	409e      	lsls	r6, r3
    18b6:	469c      	mov	ip, r3
    18b8:	46b3      	mov	fp, r6
    18ba:	4653      	mov	r3, sl
    18bc:	003e      	movs	r6, r7
    18be:	40de      	lsrs	r6, r3
    18c0:	0033      	movs	r3, r6
    18c2:	465e      	mov	r6, fp
    18c4:	431e      	orrs	r6, r3
    18c6:	4663      	mov	r3, ip
    18c8:	409f      	lsls	r7, r3
    18ca:	1e7b      	subs	r3, r7, #1
    18cc:	419f      	sbcs	r7, r3
    18ce:	4653      	mov	r3, sl
    18d0:	40dc      	lsrs	r4, r3
    18d2:	4337      	orrs	r7, r6
    18d4:	18bf      	adds	r7, r7, r2
    18d6:	4297      	cmp	r7, r2
    18d8:	4192      	sbcs	r2, r2
    18da:	1864      	adds	r4, r4, r1
    18dc:	4252      	negs	r2, r2
    18de:	18a4      	adds	r4, r4, r2
    18e0:	0006      	movs	r6, r0
    18e2:	e678      	b.n	15d6 <__aeabi_dadd+0x1ce>
    18e4:	4327      	orrs	r7, r4
    18e6:	1e7c      	subs	r4, r7, #1
    18e8:	41a7      	sbcs	r7, r4
    18ea:	2400      	movs	r4, #0
    18ec:	e737      	b.n	175e <__aeabi_dadd+0x356>
    18ee:	4e4c      	ldr	r6, [pc, #304]	; (1a20 <__aeabi_dadd+0x618>)
    18f0:	42b0      	cmp	r0, r6
    18f2:	d036      	beq.n	1962 <__aeabi_dadd+0x55a>
    18f4:	2680      	movs	r6, #128	; 0x80
    18f6:	425b      	negs	r3, r3
    18f8:	0436      	lsls	r6, r6, #16
    18fa:	469a      	mov	sl, r3
    18fc:	4334      	orrs	r4, r6
    18fe:	e7cf      	b.n	18a0 <__aeabi_dadd+0x498>
    1900:	0018      	movs	r0, r3
    1902:	4310      	orrs	r0, r2
    1904:	d100      	bne.n	1908 <__aeabi_dadd+0x500>
    1906:	e603      	b.n	1510 <__aeabi_dadd+0x108>
    1908:	1ab8      	subs	r0, r7, r2
    190a:	4684      	mov	ip, r0
    190c:	4567      	cmp	r7, ip
    190e:	41ad      	sbcs	r5, r5
    1910:	1ae0      	subs	r0, r4, r3
    1912:	426d      	negs	r5, r5
    1914:	1b40      	subs	r0, r0, r5
    1916:	0205      	lsls	r5, r0, #8
    1918:	d400      	bmi.n	191c <__aeabi_dadd+0x514>
    191a:	e62c      	b.n	1576 <__aeabi_dadd+0x16e>
    191c:	1bd7      	subs	r7, r2, r7
    191e:	42ba      	cmp	r2, r7
    1920:	4192      	sbcs	r2, r2
    1922:	1b1c      	subs	r4, r3, r4
    1924:	4252      	negs	r2, r2
    1926:	1aa4      	subs	r4, r4, r2
    1928:	46d8      	mov	r8, fp
    192a:	e5f1      	b.n	1510 <__aeabi_dadd+0x108>
    192c:	0018      	movs	r0, r3
    192e:	4310      	orrs	r0, r2
    1930:	d100      	bne.n	1934 <__aeabi_dadd+0x52c>
    1932:	e763      	b.n	17fc <__aeabi_dadd+0x3f4>
    1934:	08f8      	lsrs	r0, r7, #3
    1936:	0767      	lsls	r7, r4, #29
    1938:	4307      	orrs	r7, r0
    193a:	2080      	movs	r0, #128	; 0x80
    193c:	08e4      	lsrs	r4, r4, #3
    193e:	0300      	lsls	r0, r0, #12
    1940:	4204      	tst	r4, r0
    1942:	d008      	beq.n	1956 <__aeabi_dadd+0x54e>
    1944:	08dd      	lsrs	r5, r3, #3
    1946:	4205      	tst	r5, r0
    1948:	d105      	bne.n	1956 <__aeabi_dadd+0x54e>
    194a:	08d2      	lsrs	r2, r2, #3
    194c:	0759      	lsls	r1, r3, #29
    194e:	4311      	orrs	r1, r2
    1950:	000f      	movs	r7, r1
    1952:	002c      	movs	r4, r5
    1954:	46d8      	mov	r8, fp
    1956:	0f7b      	lsrs	r3, r7, #29
    1958:	00e4      	lsls	r4, r4, #3
    195a:	431c      	orrs	r4, r3
    195c:	00ff      	lsls	r7, r7, #3
    195e:	4e30      	ldr	r6, [pc, #192]	; (1a20 <__aeabi_dadd+0x618>)
    1960:	e5d6      	b.n	1510 <__aeabi_dadd+0x108>
    1962:	000c      	movs	r4, r1
    1964:	0017      	movs	r7, r2
    1966:	0006      	movs	r6, r0
    1968:	e5d2      	b.n	1510 <__aeabi_dadd+0x108>
    196a:	2b00      	cmp	r3, #0
    196c:	d038      	beq.n	19e0 <__aeabi_dadd+0x5d8>
    196e:	000b      	movs	r3, r1
    1970:	4313      	orrs	r3, r2
    1972:	d100      	bne.n	1976 <__aeabi_dadd+0x56e>
    1974:	e742      	b.n	17fc <__aeabi_dadd+0x3f4>
    1976:	08f8      	lsrs	r0, r7, #3
    1978:	0767      	lsls	r7, r4, #29
    197a:	4307      	orrs	r7, r0
    197c:	2080      	movs	r0, #128	; 0x80
    197e:	08e4      	lsrs	r4, r4, #3
    1980:	0300      	lsls	r0, r0, #12
    1982:	4204      	tst	r4, r0
    1984:	d0e7      	beq.n	1956 <__aeabi_dadd+0x54e>
    1986:	08cb      	lsrs	r3, r1, #3
    1988:	4203      	tst	r3, r0
    198a:	d1e4      	bne.n	1956 <__aeabi_dadd+0x54e>
    198c:	08d2      	lsrs	r2, r2, #3
    198e:	0749      	lsls	r1, r1, #29
    1990:	4311      	orrs	r1, r2
    1992:	000f      	movs	r7, r1
    1994:	001c      	movs	r4, r3
    1996:	e7de      	b.n	1956 <__aeabi_dadd+0x54e>
    1998:	2700      	movs	r7, #0
    199a:	2400      	movs	r4, #0
    199c:	e5d5      	b.n	154a <__aeabi_dadd+0x142>
    199e:	2100      	movs	r1, #0
    19a0:	e76b      	b.n	187a <__aeabi_dadd+0x472>
    19a2:	2500      	movs	r5, #0
    19a4:	2700      	movs	r7, #0
    19a6:	e5f3      	b.n	1590 <__aeabi_dadd+0x188>
    19a8:	464e      	mov	r6, r9
    19aa:	0025      	movs	r5, r4
    19ac:	3e20      	subs	r6, #32
    19ae:	40f5      	lsrs	r5, r6
    19b0:	464b      	mov	r3, r9
    19b2:	002e      	movs	r6, r5
    19b4:	2b20      	cmp	r3, #32
    19b6:	d02d      	beq.n	1a14 <__aeabi_dadd+0x60c>
    19b8:	2540      	movs	r5, #64	; 0x40
    19ba:	1aed      	subs	r5, r5, r3
    19bc:	40ac      	lsls	r4, r5
    19be:	4327      	orrs	r7, r4
    19c0:	1e7c      	subs	r4, r7, #1
    19c2:	41a7      	sbcs	r7, r4
    19c4:	2400      	movs	r4, #0
    19c6:	4337      	orrs	r7, r6
    19c8:	e6c9      	b.n	175e <__aeabi_dadd+0x356>
    19ca:	2480      	movs	r4, #128	; 0x80
    19cc:	2500      	movs	r5, #0
    19ce:	0324      	lsls	r4, r4, #12
    19d0:	4e13      	ldr	r6, [pc, #76]	; (1a20 <__aeabi_dadd+0x618>)
    19d2:	2700      	movs	r7, #0
    19d4:	e5dc      	b.n	1590 <__aeabi_dadd+0x188>
    19d6:	4327      	orrs	r7, r4
    19d8:	1e7c      	subs	r4, r7, #1
    19da:	41a7      	sbcs	r7, r4
    19dc:	2400      	movs	r4, #0
    19de:	e779      	b.n	18d4 <__aeabi_dadd+0x4cc>
    19e0:	000c      	movs	r4, r1
    19e2:	0017      	movs	r7, r2
    19e4:	4e0e      	ldr	r6, [pc, #56]	; (1a20 <__aeabi_dadd+0x618>)
    19e6:	e593      	b.n	1510 <__aeabi_dadd+0x108>
    19e8:	000c      	movs	r4, r1
    19ea:	0017      	movs	r7, r2
    19ec:	e590      	b.n	1510 <__aeabi_dadd+0x108>
    19ee:	4656      	mov	r6, sl
    19f0:	0023      	movs	r3, r4
    19f2:	3e20      	subs	r6, #32
    19f4:	40f3      	lsrs	r3, r6
    19f6:	4699      	mov	r9, r3
    19f8:	4653      	mov	r3, sl
    19fa:	2b20      	cmp	r3, #32
    19fc:	d00e      	beq.n	1a1c <__aeabi_dadd+0x614>
    19fe:	2340      	movs	r3, #64	; 0x40
    1a00:	4656      	mov	r6, sl
    1a02:	1b9b      	subs	r3, r3, r6
    1a04:	409c      	lsls	r4, r3
    1a06:	4327      	orrs	r7, r4
    1a08:	1e7c      	subs	r4, r7, #1
    1a0a:	41a7      	sbcs	r7, r4
    1a0c:	464b      	mov	r3, r9
    1a0e:	2400      	movs	r4, #0
    1a10:	431f      	orrs	r7, r3
    1a12:	e75f      	b.n	18d4 <__aeabi_dadd+0x4cc>
    1a14:	2400      	movs	r4, #0
    1a16:	e7d2      	b.n	19be <__aeabi_dadd+0x5b6>
    1a18:	0017      	movs	r7, r2
    1a1a:	e5b2      	b.n	1582 <__aeabi_dadd+0x17a>
    1a1c:	2400      	movs	r4, #0
    1a1e:	e7f2      	b.n	1a06 <__aeabi_dadd+0x5fe>
    1a20:	000007ff 	.word	0x000007ff
    1a24:	ff7fffff 	.word	0xff7fffff

00001a28 <__aeabi_ddiv>:
    1a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a2a:	4657      	mov	r7, sl
    1a2c:	4645      	mov	r5, r8
    1a2e:	46de      	mov	lr, fp
    1a30:	464e      	mov	r6, r9
    1a32:	b5e0      	push	{r5, r6, r7, lr}
    1a34:	004c      	lsls	r4, r1, #1
    1a36:	030e      	lsls	r6, r1, #12
    1a38:	b087      	sub	sp, #28
    1a3a:	4683      	mov	fp, r0
    1a3c:	4692      	mov	sl, r2
    1a3e:	001d      	movs	r5, r3
    1a40:	4680      	mov	r8, r0
    1a42:	0b36      	lsrs	r6, r6, #12
    1a44:	0d64      	lsrs	r4, r4, #21
    1a46:	0fcf      	lsrs	r7, r1, #31
    1a48:	2c00      	cmp	r4, #0
    1a4a:	d04f      	beq.n	1aec <__aeabi_ddiv+0xc4>
    1a4c:	4b6f      	ldr	r3, [pc, #444]	; (1c0c <__aeabi_ddiv+0x1e4>)
    1a4e:	429c      	cmp	r4, r3
    1a50:	d035      	beq.n	1abe <__aeabi_ddiv+0x96>
    1a52:	2380      	movs	r3, #128	; 0x80
    1a54:	0f42      	lsrs	r2, r0, #29
    1a56:	041b      	lsls	r3, r3, #16
    1a58:	00f6      	lsls	r6, r6, #3
    1a5a:	4313      	orrs	r3, r2
    1a5c:	4333      	orrs	r3, r6
    1a5e:	4699      	mov	r9, r3
    1a60:	00c3      	lsls	r3, r0, #3
    1a62:	4698      	mov	r8, r3
    1a64:	4b6a      	ldr	r3, [pc, #424]	; (1c10 <__aeabi_ddiv+0x1e8>)
    1a66:	2600      	movs	r6, #0
    1a68:	469c      	mov	ip, r3
    1a6a:	2300      	movs	r3, #0
    1a6c:	4464      	add	r4, ip
    1a6e:	9303      	str	r3, [sp, #12]
    1a70:	032b      	lsls	r3, r5, #12
    1a72:	0b1b      	lsrs	r3, r3, #12
    1a74:	469b      	mov	fp, r3
    1a76:	006b      	lsls	r3, r5, #1
    1a78:	0fed      	lsrs	r5, r5, #31
    1a7a:	4650      	mov	r0, sl
    1a7c:	0d5b      	lsrs	r3, r3, #21
    1a7e:	9501      	str	r5, [sp, #4]
    1a80:	d05e      	beq.n	1b40 <__aeabi_ddiv+0x118>
    1a82:	4a62      	ldr	r2, [pc, #392]	; (1c0c <__aeabi_ddiv+0x1e4>)
    1a84:	4293      	cmp	r3, r2
    1a86:	d053      	beq.n	1b30 <__aeabi_ddiv+0x108>
    1a88:	465a      	mov	r2, fp
    1a8a:	00d1      	lsls	r1, r2, #3
    1a8c:	2280      	movs	r2, #128	; 0x80
    1a8e:	0f40      	lsrs	r0, r0, #29
    1a90:	0412      	lsls	r2, r2, #16
    1a92:	4302      	orrs	r2, r0
    1a94:	430a      	orrs	r2, r1
    1a96:	4693      	mov	fp, r2
    1a98:	4652      	mov	r2, sl
    1a9a:	00d1      	lsls	r1, r2, #3
    1a9c:	4a5c      	ldr	r2, [pc, #368]	; (1c10 <__aeabi_ddiv+0x1e8>)
    1a9e:	4694      	mov	ip, r2
    1aa0:	2200      	movs	r2, #0
    1aa2:	4463      	add	r3, ip
    1aa4:	0038      	movs	r0, r7
    1aa6:	4068      	eors	r0, r5
    1aa8:	4684      	mov	ip, r0
    1aaa:	9002      	str	r0, [sp, #8]
    1aac:	1ae4      	subs	r4, r4, r3
    1aae:	4316      	orrs	r6, r2
    1ab0:	2e0f      	cmp	r6, #15
    1ab2:	d900      	bls.n	1ab6 <__aeabi_ddiv+0x8e>
    1ab4:	e0b4      	b.n	1c20 <__aeabi_ddiv+0x1f8>
    1ab6:	4b57      	ldr	r3, [pc, #348]	; (1c14 <__aeabi_ddiv+0x1ec>)
    1ab8:	00b6      	lsls	r6, r6, #2
    1aba:	599b      	ldr	r3, [r3, r6]
    1abc:	469f      	mov	pc, r3
    1abe:	0003      	movs	r3, r0
    1ac0:	4333      	orrs	r3, r6
    1ac2:	4699      	mov	r9, r3
    1ac4:	d16c      	bne.n	1ba0 <__aeabi_ddiv+0x178>
    1ac6:	2300      	movs	r3, #0
    1ac8:	4698      	mov	r8, r3
    1aca:	3302      	adds	r3, #2
    1acc:	2608      	movs	r6, #8
    1ace:	9303      	str	r3, [sp, #12]
    1ad0:	e7ce      	b.n	1a70 <__aeabi_ddiv+0x48>
    1ad2:	46cb      	mov	fp, r9
    1ad4:	4641      	mov	r1, r8
    1ad6:	9a03      	ldr	r2, [sp, #12]
    1ad8:	9701      	str	r7, [sp, #4]
    1ada:	2a02      	cmp	r2, #2
    1adc:	d165      	bne.n	1baa <__aeabi_ddiv+0x182>
    1ade:	9b01      	ldr	r3, [sp, #4]
    1ae0:	4c4a      	ldr	r4, [pc, #296]	; (1c0c <__aeabi_ddiv+0x1e4>)
    1ae2:	469c      	mov	ip, r3
    1ae4:	2300      	movs	r3, #0
    1ae6:	2200      	movs	r2, #0
    1ae8:	4698      	mov	r8, r3
    1aea:	e06b      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    1aec:	0003      	movs	r3, r0
    1aee:	4333      	orrs	r3, r6
    1af0:	4699      	mov	r9, r3
    1af2:	d04e      	beq.n	1b92 <__aeabi_ddiv+0x16a>
    1af4:	2e00      	cmp	r6, #0
    1af6:	d100      	bne.n	1afa <__aeabi_ddiv+0xd2>
    1af8:	e1bc      	b.n	1e74 <__aeabi_ddiv+0x44c>
    1afa:	0030      	movs	r0, r6
    1afc:	f001 f8ca 	bl	2c94 <__clzsi2>
    1b00:	0003      	movs	r3, r0
    1b02:	3b0b      	subs	r3, #11
    1b04:	2b1c      	cmp	r3, #28
    1b06:	dd00      	ble.n	1b0a <__aeabi_ddiv+0xe2>
    1b08:	e1ac      	b.n	1e64 <__aeabi_ddiv+0x43c>
    1b0a:	221d      	movs	r2, #29
    1b0c:	1ad3      	subs	r3, r2, r3
    1b0e:	465a      	mov	r2, fp
    1b10:	0001      	movs	r1, r0
    1b12:	40da      	lsrs	r2, r3
    1b14:	3908      	subs	r1, #8
    1b16:	408e      	lsls	r6, r1
    1b18:	0013      	movs	r3, r2
    1b1a:	4333      	orrs	r3, r6
    1b1c:	4699      	mov	r9, r3
    1b1e:	465b      	mov	r3, fp
    1b20:	408b      	lsls	r3, r1
    1b22:	4698      	mov	r8, r3
    1b24:	2300      	movs	r3, #0
    1b26:	4c3c      	ldr	r4, [pc, #240]	; (1c18 <__aeabi_ddiv+0x1f0>)
    1b28:	2600      	movs	r6, #0
    1b2a:	1a24      	subs	r4, r4, r0
    1b2c:	9303      	str	r3, [sp, #12]
    1b2e:	e79f      	b.n	1a70 <__aeabi_ddiv+0x48>
    1b30:	4651      	mov	r1, sl
    1b32:	465a      	mov	r2, fp
    1b34:	4311      	orrs	r1, r2
    1b36:	d129      	bne.n	1b8c <__aeabi_ddiv+0x164>
    1b38:	2200      	movs	r2, #0
    1b3a:	4693      	mov	fp, r2
    1b3c:	3202      	adds	r2, #2
    1b3e:	e7b1      	b.n	1aa4 <__aeabi_ddiv+0x7c>
    1b40:	4659      	mov	r1, fp
    1b42:	4301      	orrs	r1, r0
    1b44:	d01e      	beq.n	1b84 <__aeabi_ddiv+0x15c>
    1b46:	465b      	mov	r3, fp
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d100      	bne.n	1b4e <__aeabi_ddiv+0x126>
    1b4c:	e19e      	b.n	1e8c <__aeabi_ddiv+0x464>
    1b4e:	4658      	mov	r0, fp
    1b50:	f001 f8a0 	bl	2c94 <__clzsi2>
    1b54:	0003      	movs	r3, r0
    1b56:	3b0b      	subs	r3, #11
    1b58:	2b1c      	cmp	r3, #28
    1b5a:	dd00      	ble.n	1b5e <__aeabi_ddiv+0x136>
    1b5c:	e18f      	b.n	1e7e <__aeabi_ddiv+0x456>
    1b5e:	0002      	movs	r2, r0
    1b60:	4659      	mov	r1, fp
    1b62:	3a08      	subs	r2, #8
    1b64:	4091      	lsls	r1, r2
    1b66:	468b      	mov	fp, r1
    1b68:	211d      	movs	r1, #29
    1b6a:	1acb      	subs	r3, r1, r3
    1b6c:	4651      	mov	r1, sl
    1b6e:	40d9      	lsrs	r1, r3
    1b70:	000b      	movs	r3, r1
    1b72:	4659      	mov	r1, fp
    1b74:	430b      	orrs	r3, r1
    1b76:	4651      	mov	r1, sl
    1b78:	469b      	mov	fp, r3
    1b7a:	4091      	lsls	r1, r2
    1b7c:	4b26      	ldr	r3, [pc, #152]	; (1c18 <__aeabi_ddiv+0x1f0>)
    1b7e:	2200      	movs	r2, #0
    1b80:	1a1b      	subs	r3, r3, r0
    1b82:	e78f      	b.n	1aa4 <__aeabi_ddiv+0x7c>
    1b84:	2300      	movs	r3, #0
    1b86:	2201      	movs	r2, #1
    1b88:	469b      	mov	fp, r3
    1b8a:	e78b      	b.n	1aa4 <__aeabi_ddiv+0x7c>
    1b8c:	4651      	mov	r1, sl
    1b8e:	2203      	movs	r2, #3
    1b90:	e788      	b.n	1aa4 <__aeabi_ddiv+0x7c>
    1b92:	2300      	movs	r3, #0
    1b94:	4698      	mov	r8, r3
    1b96:	3301      	adds	r3, #1
    1b98:	2604      	movs	r6, #4
    1b9a:	2400      	movs	r4, #0
    1b9c:	9303      	str	r3, [sp, #12]
    1b9e:	e767      	b.n	1a70 <__aeabi_ddiv+0x48>
    1ba0:	2303      	movs	r3, #3
    1ba2:	46b1      	mov	r9, r6
    1ba4:	9303      	str	r3, [sp, #12]
    1ba6:	260c      	movs	r6, #12
    1ba8:	e762      	b.n	1a70 <__aeabi_ddiv+0x48>
    1baa:	2a03      	cmp	r2, #3
    1bac:	d100      	bne.n	1bb0 <__aeabi_ddiv+0x188>
    1bae:	e25c      	b.n	206a <STACK_SIZE+0x6a>
    1bb0:	9b01      	ldr	r3, [sp, #4]
    1bb2:	2a01      	cmp	r2, #1
    1bb4:	d000      	beq.n	1bb8 <__aeabi_ddiv+0x190>
    1bb6:	e1e4      	b.n	1f82 <__aeabi_ddiv+0x55a>
    1bb8:	4013      	ands	r3, r2
    1bba:	469c      	mov	ip, r3
    1bbc:	2300      	movs	r3, #0
    1bbe:	2400      	movs	r4, #0
    1bc0:	2200      	movs	r2, #0
    1bc2:	4698      	mov	r8, r3
    1bc4:	2100      	movs	r1, #0
    1bc6:	0312      	lsls	r2, r2, #12
    1bc8:	0b13      	lsrs	r3, r2, #12
    1bca:	0d0a      	lsrs	r2, r1, #20
    1bcc:	0512      	lsls	r2, r2, #20
    1bce:	431a      	orrs	r2, r3
    1bd0:	0523      	lsls	r3, r4, #20
    1bd2:	4c12      	ldr	r4, [pc, #72]	; (1c1c <__aeabi_ddiv+0x1f4>)
    1bd4:	4640      	mov	r0, r8
    1bd6:	4022      	ands	r2, r4
    1bd8:	4313      	orrs	r3, r2
    1bda:	4662      	mov	r2, ip
    1bdc:	005b      	lsls	r3, r3, #1
    1bde:	07d2      	lsls	r2, r2, #31
    1be0:	085b      	lsrs	r3, r3, #1
    1be2:	4313      	orrs	r3, r2
    1be4:	0019      	movs	r1, r3
    1be6:	b007      	add	sp, #28
    1be8:	bc3c      	pop	{r2, r3, r4, r5}
    1bea:	4690      	mov	r8, r2
    1bec:	4699      	mov	r9, r3
    1bee:	46a2      	mov	sl, r4
    1bf0:	46ab      	mov	fp, r5
    1bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bf4:	2300      	movs	r3, #0
    1bf6:	2280      	movs	r2, #128	; 0x80
    1bf8:	469c      	mov	ip, r3
    1bfa:	0312      	lsls	r2, r2, #12
    1bfc:	4698      	mov	r8, r3
    1bfe:	4c03      	ldr	r4, [pc, #12]	; (1c0c <__aeabi_ddiv+0x1e4>)
    1c00:	e7e0      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    1c02:	2300      	movs	r3, #0
    1c04:	4c01      	ldr	r4, [pc, #4]	; (1c0c <__aeabi_ddiv+0x1e4>)
    1c06:	2200      	movs	r2, #0
    1c08:	4698      	mov	r8, r3
    1c0a:	e7db      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    1c0c:	000007ff 	.word	0x000007ff
    1c10:	fffffc01 	.word	0xfffffc01
    1c14:	00002d78 	.word	0x00002d78
    1c18:	fffffc0d 	.word	0xfffffc0d
    1c1c:	800fffff 	.word	0x800fffff
    1c20:	45d9      	cmp	r9, fp
    1c22:	d900      	bls.n	1c26 <__aeabi_ddiv+0x1fe>
    1c24:	e139      	b.n	1e9a <__aeabi_ddiv+0x472>
    1c26:	d100      	bne.n	1c2a <__aeabi_ddiv+0x202>
    1c28:	e134      	b.n	1e94 <__aeabi_ddiv+0x46c>
    1c2a:	2300      	movs	r3, #0
    1c2c:	4646      	mov	r6, r8
    1c2e:	464d      	mov	r5, r9
    1c30:	469a      	mov	sl, r3
    1c32:	3c01      	subs	r4, #1
    1c34:	465b      	mov	r3, fp
    1c36:	0e0a      	lsrs	r2, r1, #24
    1c38:	021b      	lsls	r3, r3, #8
    1c3a:	431a      	orrs	r2, r3
    1c3c:	020b      	lsls	r3, r1, #8
    1c3e:	0c17      	lsrs	r7, r2, #16
    1c40:	9303      	str	r3, [sp, #12]
    1c42:	0413      	lsls	r3, r2, #16
    1c44:	0c1b      	lsrs	r3, r3, #16
    1c46:	0039      	movs	r1, r7
    1c48:	0028      	movs	r0, r5
    1c4a:	4690      	mov	r8, r2
    1c4c:	9301      	str	r3, [sp, #4]
    1c4e:	f7ff fb4f 	bl	12f0 <__udivsi3>
    1c52:	0002      	movs	r2, r0
    1c54:	9b01      	ldr	r3, [sp, #4]
    1c56:	4683      	mov	fp, r0
    1c58:	435a      	muls	r2, r3
    1c5a:	0028      	movs	r0, r5
    1c5c:	0039      	movs	r1, r7
    1c5e:	4691      	mov	r9, r2
    1c60:	f7ff fbcc 	bl	13fc <__aeabi_uidivmod>
    1c64:	0c35      	lsrs	r5, r6, #16
    1c66:	0409      	lsls	r1, r1, #16
    1c68:	430d      	orrs	r5, r1
    1c6a:	45a9      	cmp	r9, r5
    1c6c:	d90d      	bls.n	1c8a <__aeabi_ddiv+0x262>
    1c6e:	465b      	mov	r3, fp
    1c70:	4445      	add	r5, r8
    1c72:	3b01      	subs	r3, #1
    1c74:	45a8      	cmp	r8, r5
    1c76:	d900      	bls.n	1c7a <__aeabi_ddiv+0x252>
    1c78:	e13a      	b.n	1ef0 <__aeabi_ddiv+0x4c8>
    1c7a:	45a9      	cmp	r9, r5
    1c7c:	d800      	bhi.n	1c80 <__aeabi_ddiv+0x258>
    1c7e:	e137      	b.n	1ef0 <__aeabi_ddiv+0x4c8>
    1c80:	2302      	movs	r3, #2
    1c82:	425b      	negs	r3, r3
    1c84:	469c      	mov	ip, r3
    1c86:	4445      	add	r5, r8
    1c88:	44e3      	add	fp, ip
    1c8a:	464b      	mov	r3, r9
    1c8c:	1aeb      	subs	r3, r5, r3
    1c8e:	0039      	movs	r1, r7
    1c90:	0018      	movs	r0, r3
    1c92:	9304      	str	r3, [sp, #16]
    1c94:	f7ff fb2c 	bl	12f0 <__udivsi3>
    1c98:	9b01      	ldr	r3, [sp, #4]
    1c9a:	0005      	movs	r5, r0
    1c9c:	4343      	muls	r3, r0
    1c9e:	0039      	movs	r1, r7
    1ca0:	9804      	ldr	r0, [sp, #16]
    1ca2:	4699      	mov	r9, r3
    1ca4:	f7ff fbaa 	bl	13fc <__aeabi_uidivmod>
    1ca8:	0433      	lsls	r3, r6, #16
    1caa:	0409      	lsls	r1, r1, #16
    1cac:	0c1b      	lsrs	r3, r3, #16
    1cae:	430b      	orrs	r3, r1
    1cb0:	4599      	cmp	r9, r3
    1cb2:	d909      	bls.n	1cc8 <__aeabi_ddiv+0x2a0>
    1cb4:	4443      	add	r3, r8
    1cb6:	1e6a      	subs	r2, r5, #1
    1cb8:	4598      	cmp	r8, r3
    1cba:	d900      	bls.n	1cbe <__aeabi_ddiv+0x296>
    1cbc:	e11a      	b.n	1ef4 <__aeabi_ddiv+0x4cc>
    1cbe:	4599      	cmp	r9, r3
    1cc0:	d800      	bhi.n	1cc4 <__aeabi_ddiv+0x29c>
    1cc2:	e117      	b.n	1ef4 <__aeabi_ddiv+0x4cc>
    1cc4:	3d02      	subs	r5, #2
    1cc6:	4443      	add	r3, r8
    1cc8:	464a      	mov	r2, r9
    1cca:	1a9b      	subs	r3, r3, r2
    1ccc:	465a      	mov	r2, fp
    1cce:	0412      	lsls	r2, r2, #16
    1cd0:	432a      	orrs	r2, r5
    1cd2:	9903      	ldr	r1, [sp, #12]
    1cd4:	4693      	mov	fp, r2
    1cd6:	0c10      	lsrs	r0, r2, #16
    1cd8:	0c0a      	lsrs	r2, r1, #16
    1cda:	4691      	mov	r9, r2
    1cdc:	0409      	lsls	r1, r1, #16
    1cde:	465a      	mov	r2, fp
    1ce0:	0c09      	lsrs	r1, r1, #16
    1ce2:	464e      	mov	r6, r9
    1ce4:	000d      	movs	r5, r1
    1ce6:	0412      	lsls	r2, r2, #16
    1ce8:	0c12      	lsrs	r2, r2, #16
    1cea:	4345      	muls	r5, r0
    1cec:	9105      	str	r1, [sp, #20]
    1cee:	4351      	muls	r1, r2
    1cf0:	4372      	muls	r2, r6
    1cf2:	4370      	muls	r0, r6
    1cf4:	1952      	adds	r2, r2, r5
    1cf6:	0c0e      	lsrs	r6, r1, #16
    1cf8:	18b2      	adds	r2, r6, r2
    1cfa:	4295      	cmp	r5, r2
    1cfc:	d903      	bls.n	1d06 <__aeabi_ddiv+0x2de>
    1cfe:	2580      	movs	r5, #128	; 0x80
    1d00:	026d      	lsls	r5, r5, #9
    1d02:	46ac      	mov	ip, r5
    1d04:	4460      	add	r0, ip
    1d06:	0c15      	lsrs	r5, r2, #16
    1d08:	0409      	lsls	r1, r1, #16
    1d0a:	0412      	lsls	r2, r2, #16
    1d0c:	0c09      	lsrs	r1, r1, #16
    1d0e:	1828      	adds	r0, r5, r0
    1d10:	1852      	adds	r2, r2, r1
    1d12:	4283      	cmp	r3, r0
    1d14:	d200      	bcs.n	1d18 <__aeabi_ddiv+0x2f0>
    1d16:	e0ce      	b.n	1eb6 <__aeabi_ddiv+0x48e>
    1d18:	d100      	bne.n	1d1c <__aeabi_ddiv+0x2f4>
    1d1a:	e0c8      	b.n	1eae <__aeabi_ddiv+0x486>
    1d1c:	1a1d      	subs	r5, r3, r0
    1d1e:	4653      	mov	r3, sl
    1d20:	1a9e      	subs	r6, r3, r2
    1d22:	45b2      	cmp	sl, r6
    1d24:	4192      	sbcs	r2, r2
    1d26:	4252      	negs	r2, r2
    1d28:	1aab      	subs	r3, r5, r2
    1d2a:	469a      	mov	sl, r3
    1d2c:	4598      	cmp	r8, r3
    1d2e:	d100      	bne.n	1d32 <__aeabi_ddiv+0x30a>
    1d30:	e117      	b.n	1f62 <__aeabi_ddiv+0x53a>
    1d32:	0039      	movs	r1, r7
    1d34:	0018      	movs	r0, r3
    1d36:	f7ff fadb 	bl	12f0 <__udivsi3>
    1d3a:	9b01      	ldr	r3, [sp, #4]
    1d3c:	0005      	movs	r5, r0
    1d3e:	4343      	muls	r3, r0
    1d40:	0039      	movs	r1, r7
    1d42:	4650      	mov	r0, sl
    1d44:	9304      	str	r3, [sp, #16]
    1d46:	f7ff fb59 	bl	13fc <__aeabi_uidivmod>
    1d4a:	9804      	ldr	r0, [sp, #16]
    1d4c:	040b      	lsls	r3, r1, #16
    1d4e:	0c31      	lsrs	r1, r6, #16
    1d50:	4319      	orrs	r1, r3
    1d52:	4288      	cmp	r0, r1
    1d54:	d909      	bls.n	1d6a <__aeabi_ddiv+0x342>
    1d56:	4441      	add	r1, r8
    1d58:	1e6b      	subs	r3, r5, #1
    1d5a:	4588      	cmp	r8, r1
    1d5c:	d900      	bls.n	1d60 <__aeabi_ddiv+0x338>
    1d5e:	e107      	b.n	1f70 <__aeabi_ddiv+0x548>
    1d60:	4288      	cmp	r0, r1
    1d62:	d800      	bhi.n	1d66 <__aeabi_ddiv+0x33e>
    1d64:	e104      	b.n	1f70 <__aeabi_ddiv+0x548>
    1d66:	3d02      	subs	r5, #2
    1d68:	4441      	add	r1, r8
    1d6a:	9b04      	ldr	r3, [sp, #16]
    1d6c:	1acb      	subs	r3, r1, r3
    1d6e:	0018      	movs	r0, r3
    1d70:	0039      	movs	r1, r7
    1d72:	9304      	str	r3, [sp, #16]
    1d74:	f7ff fabc 	bl	12f0 <__udivsi3>
    1d78:	9b01      	ldr	r3, [sp, #4]
    1d7a:	4682      	mov	sl, r0
    1d7c:	4343      	muls	r3, r0
    1d7e:	0039      	movs	r1, r7
    1d80:	9804      	ldr	r0, [sp, #16]
    1d82:	9301      	str	r3, [sp, #4]
    1d84:	f7ff fb3a 	bl	13fc <__aeabi_uidivmod>
    1d88:	9801      	ldr	r0, [sp, #4]
    1d8a:	040b      	lsls	r3, r1, #16
    1d8c:	0431      	lsls	r1, r6, #16
    1d8e:	0c09      	lsrs	r1, r1, #16
    1d90:	4319      	orrs	r1, r3
    1d92:	4288      	cmp	r0, r1
    1d94:	d90d      	bls.n	1db2 <__aeabi_ddiv+0x38a>
    1d96:	4653      	mov	r3, sl
    1d98:	4441      	add	r1, r8
    1d9a:	3b01      	subs	r3, #1
    1d9c:	4588      	cmp	r8, r1
    1d9e:	d900      	bls.n	1da2 <__aeabi_ddiv+0x37a>
    1da0:	e0e8      	b.n	1f74 <__aeabi_ddiv+0x54c>
    1da2:	4288      	cmp	r0, r1
    1da4:	d800      	bhi.n	1da8 <__aeabi_ddiv+0x380>
    1da6:	e0e5      	b.n	1f74 <__aeabi_ddiv+0x54c>
    1da8:	2302      	movs	r3, #2
    1daa:	425b      	negs	r3, r3
    1dac:	469c      	mov	ip, r3
    1dae:	4441      	add	r1, r8
    1db0:	44e2      	add	sl, ip
    1db2:	9b01      	ldr	r3, [sp, #4]
    1db4:	042d      	lsls	r5, r5, #16
    1db6:	1ace      	subs	r6, r1, r3
    1db8:	4651      	mov	r1, sl
    1dba:	4329      	orrs	r1, r5
    1dbc:	9d05      	ldr	r5, [sp, #20]
    1dbe:	464f      	mov	r7, r9
    1dc0:	002a      	movs	r2, r5
    1dc2:	040b      	lsls	r3, r1, #16
    1dc4:	0c08      	lsrs	r0, r1, #16
    1dc6:	0c1b      	lsrs	r3, r3, #16
    1dc8:	435a      	muls	r2, r3
    1dca:	4345      	muls	r5, r0
    1dcc:	437b      	muls	r3, r7
    1dce:	4378      	muls	r0, r7
    1dd0:	195b      	adds	r3, r3, r5
    1dd2:	0c17      	lsrs	r7, r2, #16
    1dd4:	18fb      	adds	r3, r7, r3
    1dd6:	429d      	cmp	r5, r3
    1dd8:	d903      	bls.n	1de2 <__aeabi_ddiv+0x3ba>
    1dda:	2580      	movs	r5, #128	; 0x80
    1ddc:	026d      	lsls	r5, r5, #9
    1dde:	46ac      	mov	ip, r5
    1de0:	4460      	add	r0, ip
    1de2:	0c1d      	lsrs	r5, r3, #16
    1de4:	0412      	lsls	r2, r2, #16
    1de6:	041b      	lsls	r3, r3, #16
    1de8:	0c12      	lsrs	r2, r2, #16
    1dea:	1828      	adds	r0, r5, r0
    1dec:	189b      	adds	r3, r3, r2
    1dee:	4286      	cmp	r6, r0
    1df0:	d200      	bcs.n	1df4 <__aeabi_ddiv+0x3cc>
    1df2:	e093      	b.n	1f1c <__aeabi_ddiv+0x4f4>
    1df4:	d100      	bne.n	1df8 <__aeabi_ddiv+0x3d0>
    1df6:	e08e      	b.n	1f16 <__aeabi_ddiv+0x4ee>
    1df8:	2301      	movs	r3, #1
    1dfa:	4319      	orrs	r1, r3
    1dfc:	4ba0      	ldr	r3, [pc, #640]	; (2080 <STACK_SIZE+0x80>)
    1dfe:	18e3      	adds	r3, r4, r3
    1e00:	2b00      	cmp	r3, #0
    1e02:	dc00      	bgt.n	1e06 <__aeabi_ddiv+0x3de>
    1e04:	e099      	b.n	1f3a <__aeabi_ddiv+0x512>
    1e06:	074a      	lsls	r2, r1, #29
    1e08:	d000      	beq.n	1e0c <__aeabi_ddiv+0x3e4>
    1e0a:	e09e      	b.n	1f4a <__aeabi_ddiv+0x522>
    1e0c:	465a      	mov	r2, fp
    1e0e:	01d2      	lsls	r2, r2, #7
    1e10:	d506      	bpl.n	1e20 <__aeabi_ddiv+0x3f8>
    1e12:	465a      	mov	r2, fp
    1e14:	4b9b      	ldr	r3, [pc, #620]	; (2084 <STACK_SIZE+0x84>)
    1e16:	401a      	ands	r2, r3
    1e18:	2380      	movs	r3, #128	; 0x80
    1e1a:	4693      	mov	fp, r2
    1e1c:	00db      	lsls	r3, r3, #3
    1e1e:	18e3      	adds	r3, r4, r3
    1e20:	4a99      	ldr	r2, [pc, #612]	; (2088 <STACK_SIZE+0x88>)
    1e22:	4293      	cmp	r3, r2
    1e24:	dd68      	ble.n	1ef8 <__aeabi_ddiv+0x4d0>
    1e26:	2301      	movs	r3, #1
    1e28:	9a02      	ldr	r2, [sp, #8]
    1e2a:	4c98      	ldr	r4, [pc, #608]	; (208c <STACK_SIZE+0x8c>)
    1e2c:	401a      	ands	r2, r3
    1e2e:	2300      	movs	r3, #0
    1e30:	4694      	mov	ip, r2
    1e32:	4698      	mov	r8, r3
    1e34:	2200      	movs	r2, #0
    1e36:	e6c5      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    1e38:	2280      	movs	r2, #128	; 0x80
    1e3a:	464b      	mov	r3, r9
    1e3c:	0312      	lsls	r2, r2, #12
    1e3e:	4213      	tst	r3, r2
    1e40:	d00a      	beq.n	1e58 <__aeabi_ddiv+0x430>
    1e42:	465b      	mov	r3, fp
    1e44:	4213      	tst	r3, r2
    1e46:	d106      	bne.n	1e56 <__aeabi_ddiv+0x42e>
    1e48:	431a      	orrs	r2, r3
    1e4a:	0312      	lsls	r2, r2, #12
    1e4c:	0b12      	lsrs	r2, r2, #12
    1e4e:	46ac      	mov	ip, r5
    1e50:	4688      	mov	r8, r1
    1e52:	4c8e      	ldr	r4, [pc, #568]	; (208c <STACK_SIZE+0x8c>)
    1e54:	e6b6      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    1e56:	464b      	mov	r3, r9
    1e58:	431a      	orrs	r2, r3
    1e5a:	0312      	lsls	r2, r2, #12
    1e5c:	0b12      	lsrs	r2, r2, #12
    1e5e:	46bc      	mov	ip, r7
    1e60:	4c8a      	ldr	r4, [pc, #552]	; (208c <STACK_SIZE+0x8c>)
    1e62:	e6af      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    1e64:	0003      	movs	r3, r0
    1e66:	465a      	mov	r2, fp
    1e68:	3b28      	subs	r3, #40	; 0x28
    1e6a:	409a      	lsls	r2, r3
    1e6c:	2300      	movs	r3, #0
    1e6e:	4691      	mov	r9, r2
    1e70:	4698      	mov	r8, r3
    1e72:	e657      	b.n	1b24 <__aeabi_ddiv+0xfc>
    1e74:	4658      	mov	r0, fp
    1e76:	f000 ff0d 	bl	2c94 <__clzsi2>
    1e7a:	3020      	adds	r0, #32
    1e7c:	e640      	b.n	1b00 <__aeabi_ddiv+0xd8>
    1e7e:	0003      	movs	r3, r0
    1e80:	4652      	mov	r2, sl
    1e82:	3b28      	subs	r3, #40	; 0x28
    1e84:	409a      	lsls	r2, r3
    1e86:	2100      	movs	r1, #0
    1e88:	4693      	mov	fp, r2
    1e8a:	e677      	b.n	1b7c <__aeabi_ddiv+0x154>
    1e8c:	f000 ff02 	bl	2c94 <__clzsi2>
    1e90:	3020      	adds	r0, #32
    1e92:	e65f      	b.n	1b54 <__aeabi_ddiv+0x12c>
    1e94:	4588      	cmp	r8, r1
    1e96:	d200      	bcs.n	1e9a <__aeabi_ddiv+0x472>
    1e98:	e6c7      	b.n	1c2a <__aeabi_ddiv+0x202>
    1e9a:	464b      	mov	r3, r9
    1e9c:	07de      	lsls	r6, r3, #31
    1e9e:	085d      	lsrs	r5, r3, #1
    1ea0:	4643      	mov	r3, r8
    1ea2:	085b      	lsrs	r3, r3, #1
    1ea4:	431e      	orrs	r6, r3
    1ea6:	4643      	mov	r3, r8
    1ea8:	07db      	lsls	r3, r3, #31
    1eaa:	469a      	mov	sl, r3
    1eac:	e6c2      	b.n	1c34 <__aeabi_ddiv+0x20c>
    1eae:	2500      	movs	r5, #0
    1eb0:	4592      	cmp	sl, r2
    1eb2:	d300      	bcc.n	1eb6 <__aeabi_ddiv+0x48e>
    1eb4:	e733      	b.n	1d1e <__aeabi_ddiv+0x2f6>
    1eb6:	9e03      	ldr	r6, [sp, #12]
    1eb8:	4659      	mov	r1, fp
    1eba:	46b4      	mov	ip, r6
    1ebc:	44e2      	add	sl, ip
    1ebe:	45b2      	cmp	sl, r6
    1ec0:	41ad      	sbcs	r5, r5
    1ec2:	426d      	negs	r5, r5
    1ec4:	4445      	add	r5, r8
    1ec6:	18eb      	adds	r3, r5, r3
    1ec8:	3901      	subs	r1, #1
    1eca:	4598      	cmp	r8, r3
    1ecc:	d207      	bcs.n	1ede <__aeabi_ddiv+0x4b6>
    1ece:	4298      	cmp	r0, r3
    1ed0:	d900      	bls.n	1ed4 <__aeabi_ddiv+0x4ac>
    1ed2:	e07f      	b.n	1fd4 <__aeabi_ddiv+0x5ac>
    1ed4:	d100      	bne.n	1ed8 <__aeabi_ddiv+0x4b0>
    1ed6:	e0bc      	b.n	2052 <STACK_SIZE+0x52>
    1ed8:	1a1d      	subs	r5, r3, r0
    1eda:	468b      	mov	fp, r1
    1edc:	e71f      	b.n	1d1e <__aeabi_ddiv+0x2f6>
    1ede:	4598      	cmp	r8, r3
    1ee0:	d1fa      	bne.n	1ed8 <__aeabi_ddiv+0x4b0>
    1ee2:	9d03      	ldr	r5, [sp, #12]
    1ee4:	4555      	cmp	r5, sl
    1ee6:	d9f2      	bls.n	1ece <__aeabi_ddiv+0x4a6>
    1ee8:	4643      	mov	r3, r8
    1eea:	468b      	mov	fp, r1
    1eec:	1a1d      	subs	r5, r3, r0
    1eee:	e716      	b.n	1d1e <__aeabi_ddiv+0x2f6>
    1ef0:	469b      	mov	fp, r3
    1ef2:	e6ca      	b.n	1c8a <__aeabi_ddiv+0x262>
    1ef4:	0015      	movs	r5, r2
    1ef6:	e6e7      	b.n	1cc8 <__aeabi_ddiv+0x2a0>
    1ef8:	465a      	mov	r2, fp
    1efa:	08c9      	lsrs	r1, r1, #3
    1efc:	0752      	lsls	r2, r2, #29
    1efe:	430a      	orrs	r2, r1
    1f00:	055b      	lsls	r3, r3, #21
    1f02:	4690      	mov	r8, r2
    1f04:	0d5c      	lsrs	r4, r3, #21
    1f06:	465a      	mov	r2, fp
    1f08:	2301      	movs	r3, #1
    1f0a:	9902      	ldr	r1, [sp, #8]
    1f0c:	0252      	lsls	r2, r2, #9
    1f0e:	4019      	ands	r1, r3
    1f10:	0b12      	lsrs	r2, r2, #12
    1f12:	468c      	mov	ip, r1
    1f14:	e656      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    1f16:	2b00      	cmp	r3, #0
    1f18:	d100      	bne.n	1f1c <__aeabi_ddiv+0x4f4>
    1f1a:	e76f      	b.n	1dfc <__aeabi_ddiv+0x3d4>
    1f1c:	4446      	add	r6, r8
    1f1e:	1e4a      	subs	r2, r1, #1
    1f20:	45b0      	cmp	r8, r6
    1f22:	d929      	bls.n	1f78 <__aeabi_ddiv+0x550>
    1f24:	0011      	movs	r1, r2
    1f26:	4286      	cmp	r6, r0
    1f28:	d000      	beq.n	1f2c <__aeabi_ddiv+0x504>
    1f2a:	e765      	b.n	1df8 <__aeabi_ddiv+0x3d0>
    1f2c:	9a03      	ldr	r2, [sp, #12]
    1f2e:	4293      	cmp	r3, r2
    1f30:	d000      	beq.n	1f34 <__aeabi_ddiv+0x50c>
    1f32:	e761      	b.n	1df8 <__aeabi_ddiv+0x3d0>
    1f34:	e762      	b.n	1dfc <__aeabi_ddiv+0x3d4>
    1f36:	2101      	movs	r1, #1
    1f38:	4249      	negs	r1, r1
    1f3a:	2001      	movs	r0, #1
    1f3c:	1ac2      	subs	r2, r0, r3
    1f3e:	2a38      	cmp	r2, #56	; 0x38
    1f40:	dd21      	ble.n	1f86 <__aeabi_ddiv+0x55e>
    1f42:	9b02      	ldr	r3, [sp, #8]
    1f44:	4003      	ands	r3, r0
    1f46:	469c      	mov	ip, r3
    1f48:	e638      	b.n	1bbc <__aeabi_ddiv+0x194>
    1f4a:	220f      	movs	r2, #15
    1f4c:	400a      	ands	r2, r1
    1f4e:	2a04      	cmp	r2, #4
    1f50:	d100      	bne.n	1f54 <__aeabi_ddiv+0x52c>
    1f52:	e75b      	b.n	1e0c <__aeabi_ddiv+0x3e4>
    1f54:	000a      	movs	r2, r1
    1f56:	1d11      	adds	r1, r2, #4
    1f58:	4291      	cmp	r1, r2
    1f5a:	4192      	sbcs	r2, r2
    1f5c:	4252      	negs	r2, r2
    1f5e:	4493      	add	fp, r2
    1f60:	e754      	b.n	1e0c <__aeabi_ddiv+0x3e4>
    1f62:	4b47      	ldr	r3, [pc, #284]	; (2080 <STACK_SIZE+0x80>)
    1f64:	18e3      	adds	r3, r4, r3
    1f66:	2b00      	cmp	r3, #0
    1f68:	dde5      	ble.n	1f36 <__aeabi_ddiv+0x50e>
    1f6a:	2201      	movs	r2, #1
    1f6c:	4252      	negs	r2, r2
    1f6e:	e7f2      	b.n	1f56 <__aeabi_ddiv+0x52e>
    1f70:	001d      	movs	r5, r3
    1f72:	e6fa      	b.n	1d6a <__aeabi_ddiv+0x342>
    1f74:	469a      	mov	sl, r3
    1f76:	e71c      	b.n	1db2 <__aeabi_ddiv+0x38a>
    1f78:	42b0      	cmp	r0, r6
    1f7a:	d839      	bhi.n	1ff0 <__aeabi_ddiv+0x5c8>
    1f7c:	d06e      	beq.n	205c <STACK_SIZE+0x5c>
    1f7e:	0011      	movs	r1, r2
    1f80:	e73a      	b.n	1df8 <__aeabi_ddiv+0x3d0>
    1f82:	9302      	str	r3, [sp, #8]
    1f84:	e73a      	b.n	1dfc <__aeabi_ddiv+0x3d4>
    1f86:	2a1f      	cmp	r2, #31
    1f88:	dc3c      	bgt.n	2004 <STACK_SIZE+0x4>
    1f8a:	2320      	movs	r3, #32
    1f8c:	1a9b      	subs	r3, r3, r2
    1f8e:	000c      	movs	r4, r1
    1f90:	4658      	mov	r0, fp
    1f92:	4099      	lsls	r1, r3
    1f94:	4098      	lsls	r0, r3
    1f96:	1e4b      	subs	r3, r1, #1
    1f98:	4199      	sbcs	r1, r3
    1f9a:	465b      	mov	r3, fp
    1f9c:	40d4      	lsrs	r4, r2
    1f9e:	40d3      	lsrs	r3, r2
    1fa0:	4320      	orrs	r0, r4
    1fa2:	4308      	orrs	r0, r1
    1fa4:	001a      	movs	r2, r3
    1fa6:	0743      	lsls	r3, r0, #29
    1fa8:	d009      	beq.n	1fbe <__aeabi_ddiv+0x596>
    1faa:	230f      	movs	r3, #15
    1fac:	4003      	ands	r3, r0
    1fae:	2b04      	cmp	r3, #4
    1fb0:	d005      	beq.n	1fbe <__aeabi_ddiv+0x596>
    1fb2:	0001      	movs	r1, r0
    1fb4:	1d08      	adds	r0, r1, #4
    1fb6:	4288      	cmp	r0, r1
    1fb8:	419b      	sbcs	r3, r3
    1fba:	425b      	negs	r3, r3
    1fbc:	18d2      	adds	r2, r2, r3
    1fbe:	0213      	lsls	r3, r2, #8
    1fc0:	d53a      	bpl.n	2038 <STACK_SIZE+0x38>
    1fc2:	2301      	movs	r3, #1
    1fc4:	9a02      	ldr	r2, [sp, #8]
    1fc6:	2401      	movs	r4, #1
    1fc8:	401a      	ands	r2, r3
    1fca:	2300      	movs	r3, #0
    1fcc:	4694      	mov	ip, r2
    1fce:	4698      	mov	r8, r3
    1fd0:	2200      	movs	r2, #0
    1fd2:	e5f7      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    1fd4:	2102      	movs	r1, #2
    1fd6:	4249      	negs	r1, r1
    1fd8:	468c      	mov	ip, r1
    1fda:	9d03      	ldr	r5, [sp, #12]
    1fdc:	44e3      	add	fp, ip
    1fde:	46ac      	mov	ip, r5
    1fe0:	44e2      	add	sl, ip
    1fe2:	45aa      	cmp	sl, r5
    1fe4:	41ad      	sbcs	r5, r5
    1fe6:	426d      	negs	r5, r5
    1fe8:	4445      	add	r5, r8
    1fea:	18ed      	adds	r5, r5, r3
    1fec:	1a2d      	subs	r5, r5, r0
    1fee:	e696      	b.n	1d1e <__aeabi_ddiv+0x2f6>
    1ff0:	1e8a      	subs	r2, r1, #2
    1ff2:	9903      	ldr	r1, [sp, #12]
    1ff4:	004d      	lsls	r5, r1, #1
    1ff6:	428d      	cmp	r5, r1
    1ff8:	4189      	sbcs	r1, r1
    1ffa:	4249      	negs	r1, r1
    1ffc:	4441      	add	r1, r8
    1ffe:	1876      	adds	r6, r6, r1
    2000:	9503      	str	r5, [sp, #12]
    2002:	e78f      	b.n	1f24 <__aeabi_ddiv+0x4fc>
    2004:	201f      	movs	r0, #31
    2006:	4240      	negs	r0, r0
    2008:	1ac3      	subs	r3, r0, r3
    200a:	4658      	mov	r0, fp
    200c:	40d8      	lsrs	r0, r3
    200e:	0003      	movs	r3, r0
    2010:	2a20      	cmp	r2, #32
    2012:	d028      	beq.n	2066 <STACK_SIZE+0x66>
    2014:	2040      	movs	r0, #64	; 0x40
    2016:	465d      	mov	r5, fp
    2018:	1a82      	subs	r2, r0, r2
    201a:	4095      	lsls	r5, r2
    201c:	4329      	orrs	r1, r5
    201e:	1e4a      	subs	r2, r1, #1
    2020:	4191      	sbcs	r1, r2
    2022:	4319      	orrs	r1, r3
    2024:	2307      	movs	r3, #7
    2026:	2200      	movs	r2, #0
    2028:	400b      	ands	r3, r1
    202a:	d009      	beq.n	2040 <STACK_SIZE+0x40>
    202c:	230f      	movs	r3, #15
    202e:	2200      	movs	r2, #0
    2030:	400b      	ands	r3, r1
    2032:	0008      	movs	r0, r1
    2034:	2b04      	cmp	r3, #4
    2036:	d1bd      	bne.n	1fb4 <__aeabi_ddiv+0x58c>
    2038:	0001      	movs	r1, r0
    203a:	0753      	lsls	r3, r2, #29
    203c:	0252      	lsls	r2, r2, #9
    203e:	0b12      	lsrs	r2, r2, #12
    2040:	08c9      	lsrs	r1, r1, #3
    2042:	4319      	orrs	r1, r3
    2044:	2301      	movs	r3, #1
    2046:	4688      	mov	r8, r1
    2048:	9902      	ldr	r1, [sp, #8]
    204a:	2400      	movs	r4, #0
    204c:	4019      	ands	r1, r3
    204e:	468c      	mov	ip, r1
    2050:	e5b8      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    2052:	4552      	cmp	r2, sl
    2054:	d8be      	bhi.n	1fd4 <__aeabi_ddiv+0x5ac>
    2056:	468b      	mov	fp, r1
    2058:	2500      	movs	r5, #0
    205a:	e660      	b.n	1d1e <__aeabi_ddiv+0x2f6>
    205c:	9d03      	ldr	r5, [sp, #12]
    205e:	429d      	cmp	r5, r3
    2060:	d3c6      	bcc.n	1ff0 <__aeabi_ddiv+0x5c8>
    2062:	0011      	movs	r1, r2
    2064:	e762      	b.n	1f2c <__aeabi_ddiv+0x504>
    2066:	2500      	movs	r5, #0
    2068:	e7d8      	b.n	201c <STACK_SIZE+0x1c>
    206a:	2280      	movs	r2, #128	; 0x80
    206c:	465b      	mov	r3, fp
    206e:	0312      	lsls	r2, r2, #12
    2070:	431a      	orrs	r2, r3
    2072:	9b01      	ldr	r3, [sp, #4]
    2074:	0312      	lsls	r2, r2, #12
    2076:	0b12      	lsrs	r2, r2, #12
    2078:	469c      	mov	ip, r3
    207a:	4688      	mov	r8, r1
    207c:	4c03      	ldr	r4, [pc, #12]	; (208c <STACK_SIZE+0x8c>)
    207e:	e5a1      	b.n	1bc4 <__aeabi_ddiv+0x19c>
    2080:	000003ff 	.word	0x000003ff
    2084:	feffffff 	.word	0xfeffffff
    2088:	000007fe 	.word	0x000007fe
    208c:	000007ff 	.word	0x000007ff

00002090 <__aeabi_dmul>:
    2090:	b5f0      	push	{r4, r5, r6, r7, lr}
    2092:	4657      	mov	r7, sl
    2094:	4645      	mov	r5, r8
    2096:	46de      	mov	lr, fp
    2098:	464e      	mov	r6, r9
    209a:	b5e0      	push	{r5, r6, r7, lr}
    209c:	030c      	lsls	r4, r1, #12
    209e:	4698      	mov	r8, r3
    20a0:	004e      	lsls	r6, r1, #1
    20a2:	0b23      	lsrs	r3, r4, #12
    20a4:	b087      	sub	sp, #28
    20a6:	0007      	movs	r7, r0
    20a8:	4692      	mov	sl, r2
    20aa:	469b      	mov	fp, r3
    20ac:	0d76      	lsrs	r6, r6, #21
    20ae:	0fcd      	lsrs	r5, r1, #31
    20b0:	2e00      	cmp	r6, #0
    20b2:	d06b      	beq.n	218c <__aeabi_dmul+0xfc>
    20b4:	4b6d      	ldr	r3, [pc, #436]	; (226c <__aeabi_dmul+0x1dc>)
    20b6:	429e      	cmp	r6, r3
    20b8:	d035      	beq.n	2126 <__aeabi_dmul+0x96>
    20ba:	2480      	movs	r4, #128	; 0x80
    20bc:	465b      	mov	r3, fp
    20be:	0f42      	lsrs	r2, r0, #29
    20c0:	0424      	lsls	r4, r4, #16
    20c2:	00db      	lsls	r3, r3, #3
    20c4:	4314      	orrs	r4, r2
    20c6:	431c      	orrs	r4, r3
    20c8:	00c3      	lsls	r3, r0, #3
    20ca:	4699      	mov	r9, r3
    20cc:	4b68      	ldr	r3, [pc, #416]	; (2270 <__aeabi_dmul+0x1e0>)
    20ce:	46a3      	mov	fp, r4
    20d0:	469c      	mov	ip, r3
    20d2:	2300      	movs	r3, #0
    20d4:	2700      	movs	r7, #0
    20d6:	4466      	add	r6, ip
    20d8:	9302      	str	r3, [sp, #8]
    20da:	4643      	mov	r3, r8
    20dc:	031c      	lsls	r4, r3, #12
    20de:	005a      	lsls	r2, r3, #1
    20e0:	0fdb      	lsrs	r3, r3, #31
    20e2:	4650      	mov	r0, sl
    20e4:	0b24      	lsrs	r4, r4, #12
    20e6:	0d52      	lsrs	r2, r2, #21
    20e8:	4698      	mov	r8, r3
    20ea:	d100      	bne.n	20ee <__aeabi_dmul+0x5e>
    20ec:	e076      	b.n	21dc <__aeabi_dmul+0x14c>
    20ee:	4b5f      	ldr	r3, [pc, #380]	; (226c <__aeabi_dmul+0x1dc>)
    20f0:	429a      	cmp	r2, r3
    20f2:	d06d      	beq.n	21d0 <__aeabi_dmul+0x140>
    20f4:	2380      	movs	r3, #128	; 0x80
    20f6:	0f41      	lsrs	r1, r0, #29
    20f8:	041b      	lsls	r3, r3, #16
    20fa:	430b      	orrs	r3, r1
    20fc:	495c      	ldr	r1, [pc, #368]	; (2270 <__aeabi_dmul+0x1e0>)
    20fe:	00e4      	lsls	r4, r4, #3
    2100:	468c      	mov	ip, r1
    2102:	431c      	orrs	r4, r3
    2104:	00c3      	lsls	r3, r0, #3
    2106:	2000      	movs	r0, #0
    2108:	4462      	add	r2, ip
    210a:	4641      	mov	r1, r8
    210c:	18b6      	adds	r6, r6, r2
    210e:	4069      	eors	r1, r5
    2110:	1c72      	adds	r2, r6, #1
    2112:	9101      	str	r1, [sp, #4]
    2114:	4694      	mov	ip, r2
    2116:	4307      	orrs	r7, r0
    2118:	2f0f      	cmp	r7, #15
    211a:	d900      	bls.n	211e <__aeabi_dmul+0x8e>
    211c:	e0b0      	b.n	2280 <__aeabi_dmul+0x1f0>
    211e:	4a55      	ldr	r2, [pc, #340]	; (2274 <__aeabi_dmul+0x1e4>)
    2120:	00bf      	lsls	r7, r7, #2
    2122:	59d2      	ldr	r2, [r2, r7]
    2124:	4697      	mov	pc, r2
    2126:	465b      	mov	r3, fp
    2128:	4303      	orrs	r3, r0
    212a:	4699      	mov	r9, r3
    212c:	d000      	beq.n	2130 <__aeabi_dmul+0xa0>
    212e:	e087      	b.n	2240 <__aeabi_dmul+0x1b0>
    2130:	2300      	movs	r3, #0
    2132:	469b      	mov	fp, r3
    2134:	3302      	adds	r3, #2
    2136:	2708      	movs	r7, #8
    2138:	9302      	str	r3, [sp, #8]
    213a:	e7ce      	b.n	20da <__aeabi_dmul+0x4a>
    213c:	4642      	mov	r2, r8
    213e:	9201      	str	r2, [sp, #4]
    2140:	2802      	cmp	r0, #2
    2142:	d067      	beq.n	2214 <__aeabi_dmul+0x184>
    2144:	2803      	cmp	r0, #3
    2146:	d100      	bne.n	214a <__aeabi_dmul+0xba>
    2148:	e20e      	b.n	2568 <__aeabi_dmul+0x4d8>
    214a:	2801      	cmp	r0, #1
    214c:	d000      	beq.n	2150 <__aeabi_dmul+0xc0>
    214e:	e162      	b.n	2416 <__aeabi_dmul+0x386>
    2150:	2300      	movs	r3, #0
    2152:	2400      	movs	r4, #0
    2154:	2200      	movs	r2, #0
    2156:	4699      	mov	r9, r3
    2158:	9901      	ldr	r1, [sp, #4]
    215a:	4001      	ands	r1, r0
    215c:	b2cd      	uxtb	r5, r1
    215e:	2100      	movs	r1, #0
    2160:	0312      	lsls	r2, r2, #12
    2162:	0d0b      	lsrs	r3, r1, #20
    2164:	0b12      	lsrs	r2, r2, #12
    2166:	051b      	lsls	r3, r3, #20
    2168:	4313      	orrs	r3, r2
    216a:	4a43      	ldr	r2, [pc, #268]	; (2278 <__aeabi_dmul+0x1e8>)
    216c:	0524      	lsls	r4, r4, #20
    216e:	4013      	ands	r3, r2
    2170:	431c      	orrs	r4, r3
    2172:	0064      	lsls	r4, r4, #1
    2174:	07ed      	lsls	r5, r5, #31
    2176:	0864      	lsrs	r4, r4, #1
    2178:	432c      	orrs	r4, r5
    217a:	4648      	mov	r0, r9
    217c:	0021      	movs	r1, r4
    217e:	b007      	add	sp, #28
    2180:	bc3c      	pop	{r2, r3, r4, r5}
    2182:	4690      	mov	r8, r2
    2184:	4699      	mov	r9, r3
    2186:	46a2      	mov	sl, r4
    2188:	46ab      	mov	fp, r5
    218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    218c:	4303      	orrs	r3, r0
    218e:	4699      	mov	r9, r3
    2190:	d04f      	beq.n	2232 <__aeabi_dmul+0x1a2>
    2192:	465b      	mov	r3, fp
    2194:	2b00      	cmp	r3, #0
    2196:	d100      	bne.n	219a <__aeabi_dmul+0x10a>
    2198:	e189      	b.n	24ae <__aeabi_dmul+0x41e>
    219a:	4658      	mov	r0, fp
    219c:	f000 fd7a 	bl	2c94 <__clzsi2>
    21a0:	0003      	movs	r3, r0
    21a2:	3b0b      	subs	r3, #11
    21a4:	2b1c      	cmp	r3, #28
    21a6:	dd00      	ble.n	21aa <__aeabi_dmul+0x11a>
    21a8:	e17a      	b.n	24a0 <__aeabi_dmul+0x410>
    21aa:	221d      	movs	r2, #29
    21ac:	1ad3      	subs	r3, r2, r3
    21ae:	003a      	movs	r2, r7
    21b0:	0001      	movs	r1, r0
    21b2:	465c      	mov	r4, fp
    21b4:	40da      	lsrs	r2, r3
    21b6:	3908      	subs	r1, #8
    21b8:	408c      	lsls	r4, r1
    21ba:	0013      	movs	r3, r2
    21bc:	408f      	lsls	r7, r1
    21be:	4323      	orrs	r3, r4
    21c0:	469b      	mov	fp, r3
    21c2:	46b9      	mov	r9, r7
    21c4:	2300      	movs	r3, #0
    21c6:	4e2d      	ldr	r6, [pc, #180]	; (227c <__aeabi_dmul+0x1ec>)
    21c8:	2700      	movs	r7, #0
    21ca:	1a36      	subs	r6, r6, r0
    21cc:	9302      	str	r3, [sp, #8]
    21ce:	e784      	b.n	20da <__aeabi_dmul+0x4a>
    21d0:	4653      	mov	r3, sl
    21d2:	4323      	orrs	r3, r4
    21d4:	d12a      	bne.n	222c <__aeabi_dmul+0x19c>
    21d6:	2400      	movs	r4, #0
    21d8:	2002      	movs	r0, #2
    21da:	e796      	b.n	210a <__aeabi_dmul+0x7a>
    21dc:	4653      	mov	r3, sl
    21de:	4323      	orrs	r3, r4
    21e0:	d020      	beq.n	2224 <__aeabi_dmul+0x194>
    21e2:	2c00      	cmp	r4, #0
    21e4:	d100      	bne.n	21e8 <__aeabi_dmul+0x158>
    21e6:	e157      	b.n	2498 <__aeabi_dmul+0x408>
    21e8:	0020      	movs	r0, r4
    21ea:	f000 fd53 	bl	2c94 <__clzsi2>
    21ee:	0003      	movs	r3, r0
    21f0:	3b0b      	subs	r3, #11
    21f2:	2b1c      	cmp	r3, #28
    21f4:	dd00      	ble.n	21f8 <__aeabi_dmul+0x168>
    21f6:	e149      	b.n	248c <__aeabi_dmul+0x3fc>
    21f8:	211d      	movs	r1, #29
    21fa:	1acb      	subs	r3, r1, r3
    21fc:	4651      	mov	r1, sl
    21fe:	0002      	movs	r2, r0
    2200:	40d9      	lsrs	r1, r3
    2202:	4653      	mov	r3, sl
    2204:	3a08      	subs	r2, #8
    2206:	4094      	lsls	r4, r2
    2208:	4093      	lsls	r3, r2
    220a:	430c      	orrs	r4, r1
    220c:	4a1b      	ldr	r2, [pc, #108]	; (227c <__aeabi_dmul+0x1ec>)
    220e:	1a12      	subs	r2, r2, r0
    2210:	2000      	movs	r0, #0
    2212:	e77a      	b.n	210a <__aeabi_dmul+0x7a>
    2214:	2501      	movs	r5, #1
    2216:	9b01      	ldr	r3, [sp, #4]
    2218:	4c14      	ldr	r4, [pc, #80]	; (226c <__aeabi_dmul+0x1dc>)
    221a:	401d      	ands	r5, r3
    221c:	2300      	movs	r3, #0
    221e:	2200      	movs	r2, #0
    2220:	4699      	mov	r9, r3
    2222:	e79c      	b.n	215e <__aeabi_dmul+0xce>
    2224:	2400      	movs	r4, #0
    2226:	2200      	movs	r2, #0
    2228:	2001      	movs	r0, #1
    222a:	e76e      	b.n	210a <__aeabi_dmul+0x7a>
    222c:	4653      	mov	r3, sl
    222e:	2003      	movs	r0, #3
    2230:	e76b      	b.n	210a <__aeabi_dmul+0x7a>
    2232:	2300      	movs	r3, #0
    2234:	469b      	mov	fp, r3
    2236:	3301      	adds	r3, #1
    2238:	2704      	movs	r7, #4
    223a:	2600      	movs	r6, #0
    223c:	9302      	str	r3, [sp, #8]
    223e:	e74c      	b.n	20da <__aeabi_dmul+0x4a>
    2240:	2303      	movs	r3, #3
    2242:	4681      	mov	r9, r0
    2244:	270c      	movs	r7, #12
    2246:	9302      	str	r3, [sp, #8]
    2248:	e747      	b.n	20da <__aeabi_dmul+0x4a>
    224a:	2280      	movs	r2, #128	; 0x80
    224c:	2300      	movs	r3, #0
    224e:	2500      	movs	r5, #0
    2250:	0312      	lsls	r2, r2, #12
    2252:	4699      	mov	r9, r3
    2254:	4c05      	ldr	r4, [pc, #20]	; (226c <__aeabi_dmul+0x1dc>)
    2256:	e782      	b.n	215e <__aeabi_dmul+0xce>
    2258:	465c      	mov	r4, fp
    225a:	464b      	mov	r3, r9
    225c:	9802      	ldr	r0, [sp, #8]
    225e:	e76f      	b.n	2140 <__aeabi_dmul+0xb0>
    2260:	465c      	mov	r4, fp
    2262:	464b      	mov	r3, r9
    2264:	9501      	str	r5, [sp, #4]
    2266:	9802      	ldr	r0, [sp, #8]
    2268:	e76a      	b.n	2140 <__aeabi_dmul+0xb0>
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	000007ff 	.word	0x000007ff
    2270:	fffffc01 	.word	0xfffffc01
    2274:	00002db8 	.word	0x00002db8
    2278:	800fffff 	.word	0x800fffff
    227c:	fffffc0d 	.word	0xfffffc0d
    2280:	464a      	mov	r2, r9
    2282:	4649      	mov	r1, r9
    2284:	0c17      	lsrs	r7, r2, #16
    2286:	0c1a      	lsrs	r2, r3, #16
    2288:	041b      	lsls	r3, r3, #16
    228a:	0c1b      	lsrs	r3, r3, #16
    228c:	0408      	lsls	r0, r1, #16
    228e:	0019      	movs	r1, r3
    2290:	0c00      	lsrs	r0, r0, #16
    2292:	4341      	muls	r1, r0
    2294:	0015      	movs	r5, r2
    2296:	4688      	mov	r8, r1
    2298:	0019      	movs	r1, r3
    229a:	437d      	muls	r5, r7
    229c:	4379      	muls	r1, r7
    229e:	9503      	str	r5, [sp, #12]
    22a0:	4689      	mov	r9, r1
    22a2:	0029      	movs	r1, r5
    22a4:	0015      	movs	r5, r2
    22a6:	4345      	muls	r5, r0
    22a8:	444d      	add	r5, r9
    22aa:	9502      	str	r5, [sp, #8]
    22ac:	4645      	mov	r5, r8
    22ae:	0c2d      	lsrs	r5, r5, #16
    22b0:	46aa      	mov	sl, r5
    22b2:	9d02      	ldr	r5, [sp, #8]
    22b4:	4455      	add	r5, sl
    22b6:	45a9      	cmp	r9, r5
    22b8:	d906      	bls.n	22c8 <__aeabi_dmul+0x238>
    22ba:	468a      	mov	sl, r1
    22bc:	2180      	movs	r1, #128	; 0x80
    22be:	0249      	lsls	r1, r1, #9
    22c0:	4689      	mov	r9, r1
    22c2:	44ca      	add	sl, r9
    22c4:	4651      	mov	r1, sl
    22c6:	9103      	str	r1, [sp, #12]
    22c8:	0c29      	lsrs	r1, r5, #16
    22ca:	9104      	str	r1, [sp, #16]
    22cc:	4641      	mov	r1, r8
    22ce:	0409      	lsls	r1, r1, #16
    22d0:	042d      	lsls	r5, r5, #16
    22d2:	0c09      	lsrs	r1, r1, #16
    22d4:	4688      	mov	r8, r1
    22d6:	0029      	movs	r1, r5
    22d8:	0c25      	lsrs	r5, r4, #16
    22da:	0424      	lsls	r4, r4, #16
    22dc:	4441      	add	r1, r8
    22de:	0c24      	lsrs	r4, r4, #16
    22e0:	9105      	str	r1, [sp, #20]
    22e2:	0021      	movs	r1, r4
    22e4:	4341      	muls	r1, r0
    22e6:	4688      	mov	r8, r1
    22e8:	0021      	movs	r1, r4
    22ea:	4379      	muls	r1, r7
    22ec:	468a      	mov	sl, r1
    22ee:	4368      	muls	r0, r5
    22f0:	4641      	mov	r1, r8
    22f2:	4450      	add	r0, sl
    22f4:	4681      	mov	r9, r0
    22f6:	0c08      	lsrs	r0, r1, #16
    22f8:	4448      	add	r0, r9
    22fa:	436f      	muls	r7, r5
    22fc:	4582      	cmp	sl, r0
    22fe:	d903      	bls.n	2308 <__aeabi_dmul+0x278>
    2300:	2180      	movs	r1, #128	; 0x80
    2302:	0249      	lsls	r1, r1, #9
    2304:	4689      	mov	r9, r1
    2306:	444f      	add	r7, r9
    2308:	0c01      	lsrs	r1, r0, #16
    230a:	4689      	mov	r9, r1
    230c:	0039      	movs	r1, r7
    230e:	4449      	add	r1, r9
    2310:	9102      	str	r1, [sp, #8]
    2312:	4641      	mov	r1, r8
    2314:	040f      	lsls	r7, r1, #16
    2316:	9904      	ldr	r1, [sp, #16]
    2318:	0c3f      	lsrs	r7, r7, #16
    231a:	4688      	mov	r8, r1
    231c:	0400      	lsls	r0, r0, #16
    231e:	19c0      	adds	r0, r0, r7
    2320:	4480      	add	r8, r0
    2322:	4641      	mov	r1, r8
    2324:	9104      	str	r1, [sp, #16]
    2326:	4659      	mov	r1, fp
    2328:	0c0f      	lsrs	r7, r1, #16
    232a:	0409      	lsls	r1, r1, #16
    232c:	0c09      	lsrs	r1, r1, #16
    232e:	4688      	mov	r8, r1
    2330:	4359      	muls	r1, r3
    2332:	468a      	mov	sl, r1
    2334:	0039      	movs	r1, r7
    2336:	4351      	muls	r1, r2
    2338:	4689      	mov	r9, r1
    233a:	4641      	mov	r1, r8
    233c:	434a      	muls	r2, r1
    233e:	4651      	mov	r1, sl
    2340:	0c09      	lsrs	r1, r1, #16
    2342:	468b      	mov	fp, r1
    2344:	437b      	muls	r3, r7
    2346:	18d2      	adds	r2, r2, r3
    2348:	445a      	add	r2, fp
    234a:	4293      	cmp	r3, r2
    234c:	d903      	bls.n	2356 <__aeabi_dmul+0x2c6>
    234e:	2380      	movs	r3, #128	; 0x80
    2350:	025b      	lsls	r3, r3, #9
    2352:	469b      	mov	fp, r3
    2354:	44d9      	add	r9, fp
    2356:	4651      	mov	r1, sl
    2358:	0409      	lsls	r1, r1, #16
    235a:	0c09      	lsrs	r1, r1, #16
    235c:	468a      	mov	sl, r1
    235e:	4641      	mov	r1, r8
    2360:	4361      	muls	r1, r4
    2362:	437c      	muls	r4, r7
    2364:	0c13      	lsrs	r3, r2, #16
    2366:	0412      	lsls	r2, r2, #16
    2368:	444b      	add	r3, r9
    236a:	4452      	add	r2, sl
    236c:	46a1      	mov	r9, r4
    236e:	468a      	mov	sl, r1
    2370:	003c      	movs	r4, r7
    2372:	4641      	mov	r1, r8
    2374:	436c      	muls	r4, r5
    2376:	434d      	muls	r5, r1
    2378:	4651      	mov	r1, sl
    237a:	444d      	add	r5, r9
    237c:	0c0f      	lsrs	r7, r1, #16
    237e:	197d      	adds	r5, r7, r5
    2380:	45a9      	cmp	r9, r5
    2382:	d903      	bls.n	238c <__aeabi_dmul+0x2fc>
    2384:	2180      	movs	r1, #128	; 0x80
    2386:	0249      	lsls	r1, r1, #9
    2388:	4688      	mov	r8, r1
    238a:	4444      	add	r4, r8
    238c:	9f04      	ldr	r7, [sp, #16]
    238e:	9903      	ldr	r1, [sp, #12]
    2390:	46b8      	mov	r8, r7
    2392:	4441      	add	r1, r8
    2394:	468b      	mov	fp, r1
    2396:	4583      	cmp	fp, r0
    2398:	4180      	sbcs	r0, r0
    239a:	4241      	negs	r1, r0
    239c:	4688      	mov	r8, r1
    239e:	4651      	mov	r1, sl
    23a0:	0408      	lsls	r0, r1, #16
    23a2:	042f      	lsls	r7, r5, #16
    23a4:	0c00      	lsrs	r0, r0, #16
    23a6:	183f      	adds	r7, r7, r0
    23a8:	4658      	mov	r0, fp
    23aa:	9902      	ldr	r1, [sp, #8]
    23ac:	1810      	adds	r0, r2, r0
    23ae:	4689      	mov	r9, r1
    23b0:	4290      	cmp	r0, r2
    23b2:	4192      	sbcs	r2, r2
    23b4:	444f      	add	r7, r9
    23b6:	46ba      	mov	sl, r7
    23b8:	4252      	negs	r2, r2
    23ba:	4699      	mov	r9, r3
    23bc:	4693      	mov	fp, r2
    23be:	44c2      	add	sl, r8
    23c0:	44d1      	add	r9, sl
    23c2:	44cb      	add	fp, r9
    23c4:	428f      	cmp	r7, r1
    23c6:	41bf      	sbcs	r7, r7
    23c8:	45c2      	cmp	sl, r8
    23ca:	4189      	sbcs	r1, r1
    23cc:	4599      	cmp	r9, r3
    23ce:	419b      	sbcs	r3, r3
    23d0:	4593      	cmp	fp, r2
    23d2:	4192      	sbcs	r2, r2
    23d4:	427f      	negs	r7, r7
    23d6:	4249      	negs	r1, r1
    23d8:	0c2d      	lsrs	r5, r5, #16
    23da:	4252      	negs	r2, r2
    23dc:	430f      	orrs	r7, r1
    23de:	425b      	negs	r3, r3
    23e0:	4313      	orrs	r3, r2
    23e2:	197f      	adds	r7, r7, r5
    23e4:	18ff      	adds	r7, r7, r3
    23e6:	465b      	mov	r3, fp
    23e8:	193c      	adds	r4, r7, r4
    23ea:	0ddb      	lsrs	r3, r3, #23
    23ec:	9a05      	ldr	r2, [sp, #20]
    23ee:	0264      	lsls	r4, r4, #9
    23f0:	431c      	orrs	r4, r3
    23f2:	0243      	lsls	r3, r0, #9
    23f4:	4313      	orrs	r3, r2
    23f6:	1e5d      	subs	r5, r3, #1
    23f8:	41ab      	sbcs	r3, r5
    23fa:	465a      	mov	r2, fp
    23fc:	0dc0      	lsrs	r0, r0, #23
    23fe:	4303      	orrs	r3, r0
    2400:	0252      	lsls	r2, r2, #9
    2402:	4313      	orrs	r3, r2
    2404:	01e2      	lsls	r2, r4, #7
    2406:	d556      	bpl.n	24b6 <__aeabi_dmul+0x426>
    2408:	2001      	movs	r0, #1
    240a:	085a      	lsrs	r2, r3, #1
    240c:	4003      	ands	r3, r0
    240e:	4313      	orrs	r3, r2
    2410:	07e2      	lsls	r2, r4, #31
    2412:	4313      	orrs	r3, r2
    2414:	0864      	lsrs	r4, r4, #1
    2416:	485a      	ldr	r0, [pc, #360]	; (2580 <__aeabi_dmul+0x4f0>)
    2418:	4460      	add	r0, ip
    241a:	2800      	cmp	r0, #0
    241c:	dd4d      	ble.n	24ba <__aeabi_dmul+0x42a>
    241e:	075a      	lsls	r2, r3, #29
    2420:	d009      	beq.n	2436 <__aeabi_dmul+0x3a6>
    2422:	220f      	movs	r2, #15
    2424:	401a      	ands	r2, r3
    2426:	2a04      	cmp	r2, #4
    2428:	d005      	beq.n	2436 <__aeabi_dmul+0x3a6>
    242a:	1d1a      	adds	r2, r3, #4
    242c:	429a      	cmp	r2, r3
    242e:	419b      	sbcs	r3, r3
    2430:	425b      	negs	r3, r3
    2432:	18e4      	adds	r4, r4, r3
    2434:	0013      	movs	r3, r2
    2436:	01e2      	lsls	r2, r4, #7
    2438:	d504      	bpl.n	2444 <__aeabi_dmul+0x3b4>
    243a:	2080      	movs	r0, #128	; 0x80
    243c:	4a51      	ldr	r2, [pc, #324]	; (2584 <__aeabi_dmul+0x4f4>)
    243e:	00c0      	lsls	r0, r0, #3
    2440:	4014      	ands	r4, r2
    2442:	4460      	add	r0, ip
    2444:	4a50      	ldr	r2, [pc, #320]	; (2588 <__aeabi_dmul+0x4f8>)
    2446:	4290      	cmp	r0, r2
    2448:	dd00      	ble.n	244c <__aeabi_dmul+0x3bc>
    244a:	e6e3      	b.n	2214 <__aeabi_dmul+0x184>
    244c:	2501      	movs	r5, #1
    244e:	08db      	lsrs	r3, r3, #3
    2450:	0762      	lsls	r2, r4, #29
    2452:	431a      	orrs	r2, r3
    2454:	0264      	lsls	r4, r4, #9
    2456:	9b01      	ldr	r3, [sp, #4]
    2458:	4691      	mov	r9, r2
    245a:	0b22      	lsrs	r2, r4, #12
    245c:	0544      	lsls	r4, r0, #21
    245e:	0d64      	lsrs	r4, r4, #21
    2460:	401d      	ands	r5, r3
    2462:	e67c      	b.n	215e <__aeabi_dmul+0xce>
    2464:	2280      	movs	r2, #128	; 0x80
    2466:	4659      	mov	r1, fp
    2468:	0312      	lsls	r2, r2, #12
    246a:	4211      	tst	r1, r2
    246c:	d008      	beq.n	2480 <__aeabi_dmul+0x3f0>
    246e:	4214      	tst	r4, r2
    2470:	d106      	bne.n	2480 <__aeabi_dmul+0x3f0>
    2472:	4322      	orrs	r2, r4
    2474:	0312      	lsls	r2, r2, #12
    2476:	0b12      	lsrs	r2, r2, #12
    2478:	4645      	mov	r5, r8
    247a:	4699      	mov	r9, r3
    247c:	4c43      	ldr	r4, [pc, #268]	; (258c <__aeabi_dmul+0x4fc>)
    247e:	e66e      	b.n	215e <__aeabi_dmul+0xce>
    2480:	465b      	mov	r3, fp
    2482:	431a      	orrs	r2, r3
    2484:	0312      	lsls	r2, r2, #12
    2486:	0b12      	lsrs	r2, r2, #12
    2488:	4c40      	ldr	r4, [pc, #256]	; (258c <__aeabi_dmul+0x4fc>)
    248a:	e668      	b.n	215e <__aeabi_dmul+0xce>
    248c:	0003      	movs	r3, r0
    248e:	4654      	mov	r4, sl
    2490:	3b28      	subs	r3, #40	; 0x28
    2492:	409c      	lsls	r4, r3
    2494:	2300      	movs	r3, #0
    2496:	e6b9      	b.n	220c <__aeabi_dmul+0x17c>
    2498:	f000 fbfc 	bl	2c94 <__clzsi2>
    249c:	3020      	adds	r0, #32
    249e:	e6a6      	b.n	21ee <__aeabi_dmul+0x15e>
    24a0:	0003      	movs	r3, r0
    24a2:	3b28      	subs	r3, #40	; 0x28
    24a4:	409f      	lsls	r7, r3
    24a6:	2300      	movs	r3, #0
    24a8:	46bb      	mov	fp, r7
    24aa:	4699      	mov	r9, r3
    24ac:	e68a      	b.n	21c4 <__aeabi_dmul+0x134>
    24ae:	f000 fbf1 	bl	2c94 <__clzsi2>
    24b2:	3020      	adds	r0, #32
    24b4:	e674      	b.n	21a0 <__aeabi_dmul+0x110>
    24b6:	46b4      	mov	ip, r6
    24b8:	e7ad      	b.n	2416 <__aeabi_dmul+0x386>
    24ba:	2501      	movs	r5, #1
    24bc:	1a2a      	subs	r2, r5, r0
    24be:	2a38      	cmp	r2, #56	; 0x38
    24c0:	dd06      	ble.n	24d0 <__aeabi_dmul+0x440>
    24c2:	9b01      	ldr	r3, [sp, #4]
    24c4:	2400      	movs	r4, #0
    24c6:	401d      	ands	r5, r3
    24c8:	2300      	movs	r3, #0
    24ca:	2200      	movs	r2, #0
    24cc:	4699      	mov	r9, r3
    24ce:	e646      	b.n	215e <__aeabi_dmul+0xce>
    24d0:	2a1f      	cmp	r2, #31
    24d2:	dc21      	bgt.n	2518 <__aeabi_dmul+0x488>
    24d4:	2520      	movs	r5, #32
    24d6:	0020      	movs	r0, r4
    24d8:	1aad      	subs	r5, r5, r2
    24da:	001e      	movs	r6, r3
    24dc:	40ab      	lsls	r3, r5
    24de:	40a8      	lsls	r0, r5
    24e0:	40d6      	lsrs	r6, r2
    24e2:	1e5d      	subs	r5, r3, #1
    24e4:	41ab      	sbcs	r3, r5
    24e6:	4330      	orrs	r0, r6
    24e8:	4318      	orrs	r0, r3
    24ea:	40d4      	lsrs	r4, r2
    24ec:	0743      	lsls	r3, r0, #29
    24ee:	d009      	beq.n	2504 <__aeabi_dmul+0x474>
    24f0:	230f      	movs	r3, #15
    24f2:	4003      	ands	r3, r0
    24f4:	2b04      	cmp	r3, #4
    24f6:	d005      	beq.n	2504 <__aeabi_dmul+0x474>
    24f8:	0003      	movs	r3, r0
    24fa:	1d18      	adds	r0, r3, #4
    24fc:	4298      	cmp	r0, r3
    24fe:	419b      	sbcs	r3, r3
    2500:	425b      	negs	r3, r3
    2502:	18e4      	adds	r4, r4, r3
    2504:	0223      	lsls	r3, r4, #8
    2506:	d521      	bpl.n	254c <__aeabi_dmul+0x4bc>
    2508:	2501      	movs	r5, #1
    250a:	9b01      	ldr	r3, [sp, #4]
    250c:	2401      	movs	r4, #1
    250e:	401d      	ands	r5, r3
    2510:	2300      	movs	r3, #0
    2512:	2200      	movs	r2, #0
    2514:	4699      	mov	r9, r3
    2516:	e622      	b.n	215e <__aeabi_dmul+0xce>
    2518:	251f      	movs	r5, #31
    251a:	0021      	movs	r1, r4
    251c:	426d      	negs	r5, r5
    251e:	1a28      	subs	r0, r5, r0
    2520:	40c1      	lsrs	r1, r0
    2522:	0008      	movs	r0, r1
    2524:	2a20      	cmp	r2, #32
    2526:	d01d      	beq.n	2564 <__aeabi_dmul+0x4d4>
    2528:	355f      	adds	r5, #95	; 0x5f
    252a:	1aaa      	subs	r2, r5, r2
    252c:	4094      	lsls	r4, r2
    252e:	4323      	orrs	r3, r4
    2530:	1e5c      	subs	r4, r3, #1
    2532:	41a3      	sbcs	r3, r4
    2534:	2507      	movs	r5, #7
    2536:	4303      	orrs	r3, r0
    2538:	401d      	ands	r5, r3
    253a:	2200      	movs	r2, #0
    253c:	2d00      	cmp	r5, #0
    253e:	d009      	beq.n	2554 <__aeabi_dmul+0x4c4>
    2540:	220f      	movs	r2, #15
    2542:	2400      	movs	r4, #0
    2544:	401a      	ands	r2, r3
    2546:	0018      	movs	r0, r3
    2548:	2a04      	cmp	r2, #4
    254a:	d1d6      	bne.n	24fa <__aeabi_dmul+0x46a>
    254c:	0003      	movs	r3, r0
    254e:	0765      	lsls	r5, r4, #29
    2550:	0264      	lsls	r4, r4, #9
    2552:	0b22      	lsrs	r2, r4, #12
    2554:	08db      	lsrs	r3, r3, #3
    2556:	432b      	orrs	r3, r5
    2558:	2501      	movs	r5, #1
    255a:	4699      	mov	r9, r3
    255c:	9b01      	ldr	r3, [sp, #4]
    255e:	2400      	movs	r4, #0
    2560:	401d      	ands	r5, r3
    2562:	e5fc      	b.n	215e <__aeabi_dmul+0xce>
    2564:	2400      	movs	r4, #0
    2566:	e7e2      	b.n	252e <__aeabi_dmul+0x49e>
    2568:	2280      	movs	r2, #128	; 0x80
    256a:	2501      	movs	r5, #1
    256c:	0312      	lsls	r2, r2, #12
    256e:	4322      	orrs	r2, r4
    2570:	9901      	ldr	r1, [sp, #4]
    2572:	0312      	lsls	r2, r2, #12
    2574:	0b12      	lsrs	r2, r2, #12
    2576:	400d      	ands	r5, r1
    2578:	4699      	mov	r9, r3
    257a:	4c04      	ldr	r4, [pc, #16]	; (258c <__aeabi_dmul+0x4fc>)
    257c:	e5ef      	b.n	215e <__aeabi_dmul+0xce>
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	000003ff 	.word	0x000003ff
    2584:	feffffff 	.word	0xfeffffff
    2588:	000007fe 	.word	0x000007fe
    258c:	000007ff 	.word	0x000007ff

00002590 <__aeabi_dsub>:
    2590:	b5f0      	push	{r4, r5, r6, r7, lr}
    2592:	4646      	mov	r6, r8
    2594:	46d6      	mov	lr, sl
    2596:	464f      	mov	r7, r9
    2598:	030c      	lsls	r4, r1, #12
    259a:	b5c0      	push	{r6, r7, lr}
    259c:	0fcd      	lsrs	r5, r1, #31
    259e:	004e      	lsls	r6, r1, #1
    25a0:	0a61      	lsrs	r1, r4, #9
    25a2:	0f44      	lsrs	r4, r0, #29
    25a4:	430c      	orrs	r4, r1
    25a6:	00c1      	lsls	r1, r0, #3
    25a8:	0058      	lsls	r0, r3, #1
    25aa:	0d40      	lsrs	r0, r0, #21
    25ac:	4684      	mov	ip, r0
    25ae:	468a      	mov	sl, r1
    25b0:	000f      	movs	r7, r1
    25b2:	0319      	lsls	r1, r3, #12
    25b4:	0f50      	lsrs	r0, r2, #29
    25b6:	0a49      	lsrs	r1, r1, #9
    25b8:	4301      	orrs	r1, r0
    25ba:	48c6      	ldr	r0, [pc, #792]	; (28d4 <__aeabi_dsub+0x344>)
    25bc:	0d76      	lsrs	r6, r6, #21
    25be:	46a8      	mov	r8, r5
    25c0:	0fdb      	lsrs	r3, r3, #31
    25c2:	00d2      	lsls	r2, r2, #3
    25c4:	4584      	cmp	ip, r0
    25c6:	d100      	bne.n	25ca <__aeabi_dsub+0x3a>
    25c8:	e0d8      	b.n	277c <__aeabi_dsub+0x1ec>
    25ca:	2001      	movs	r0, #1
    25cc:	4043      	eors	r3, r0
    25ce:	42ab      	cmp	r3, r5
    25d0:	d100      	bne.n	25d4 <__aeabi_dsub+0x44>
    25d2:	e0a6      	b.n	2722 <__aeabi_dsub+0x192>
    25d4:	4660      	mov	r0, ip
    25d6:	1a35      	subs	r5, r6, r0
    25d8:	2d00      	cmp	r5, #0
    25da:	dc00      	bgt.n	25de <__aeabi_dsub+0x4e>
    25dc:	e105      	b.n	27ea <__aeabi_dsub+0x25a>
    25de:	2800      	cmp	r0, #0
    25e0:	d110      	bne.n	2604 <__aeabi_dsub+0x74>
    25e2:	000b      	movs	r3, r1
    25e4:	4313      	orrs	r3, r2
    25e6:	d100      	bne.n	25ea <__aeabi_dsub+0x5a>
    25e8:	e0d7      	b.n	279a <__aeabi_dsub+0x20a>
    25ea:	1e6b      	subs	r3, r5, #1
    25ec:	2b00      	cmp	r3, #0
    25ee:	d000      	beq.n	25f2 <__aeabi_dsub+0x62>
    25f0:	e14b      	b.n	288a <__aeabi_dsub+0x2fa>
    25f2:	4653      	mov	r3, sl
    25f4:	1a9f      	subs	r7, r3, r2
    25f6:	45ba      	cmp	sl, r7
    25f8:	4180      	sbcs	r0, r0
    25fa:	1a64      	subs	r4, r4, r1
    25fc:	4240      	negs	r0, r0
    25fe:	1a24      	subs	r4, r4, r0
    2600:	2601      	movs	r6, #1
    2602:	e01e      	b.n	2642 <__aeabi_dsub+0xb2>
    2604:	4bb3      	ldr	r3, [pc, #716]	; (28d4 <__aeabi_dsub+0x344>)
    2606:	429e      	cmp	r6, r3
    2608:	d048      	beq.n	269c <__aeabi_dsub+0x10c>
    260a:	2380      	movs	r3, #128	; 0x80
    260c:	041b      	lsls	r3, r3, #16
    260e:	4319      	orrs	r1, r3
    2610:	2d38      	cmp	r5, #56	; 0x38
    2612:	dd00      	ble.n	2616 <__aeabi_dsub+0x86>
    2614:	e119      	b.n	284a <__aeabi_dsub+0x2ba>
    2616:	2d1f      	cmp	r5, #31
    2618:	dd00      	ble.n	261c <__aeabi_dsub+0x8c>
    261a:	e14c      	b.n	28b6 <__aeabi_dsub+0x326>
    261c:	2320      	movs	r3, #32
    261e:	000f      	movs	r7, r1
    2620:	1b5b      	subs	r3, r3, r5
    2622:	0010      	movs	r0, r2
    2624:	409a      	lsls	r2, r3
    2626:	409f      	lsls	r7, r3
    2628:	40e8      	lsrs	r0, r5
    262a:	1e53      	subs	r3, r2, #1
    262c:	419a      	sbcs	r2, r3
    262e:	40e9      	lsrs	r1, r5
    2630:	4307      	orrs	r7, r0
    2632:	4317      	orrs	r7, r2
    2634:	4653      	mov	r3, sl
    2636:	1bdf      	subs	r7, r3, r7
    2638:	1a61      	subs	r1, r4, r1
    263a:	45ba      	cmp	sl, r7
    263c:	41a4      	sbcs	r4, r4
    263e:	4264      	negs	r4, r4
    2640:	1b0c      	subs	r4, r1, r4
    2642:	0223      	lsls	r3, r4, #8
    2644:	d400      	bmi.n	2648 <__aeabi_dsub+0xb8>
    2646:	e0c5      	b.n	27d4 <__aeabi_dsub+0x244>
    2648:	0264      	lsls	r4, r4, #9
    264a:	0a65      	lsrs	r5, r4, #9
    264c:	2d00      	cmp	r5, #0
    264e:	d100      	bne.n	2652 <__aeabi_dsub+0xc2>
    2650:	e0f6      	b.n	2840 <__aeabi_dsub+0x2b0>
    2652:	0028      	movs	r0, r5
    2654:	f000 fb1e 	bl	2c94 <__clzsi2>
    2658:	0003      	movs	r3, r0
    265a:	3b08      	subs	r3, #8
    265c:	2b1f      	cmp	r3, #31
    265e:	dd00      	ble.n	2662 <__aeabi_dsub+0xd2>
    2660:	e0e9      	b.n	2836 <__aeabi_dsub+0x2a6>
    2662:	2220      	movs	r2, #32
    2664:	003c      	movs	r4, r7
    2666:	1ad2      	subs	r2, r2, r3
    2668:	409d      	lsls	r5, r3
    266a:	40d4      	lsrs	r4, r2
    266c:	409f      	lsls	r7, r3
    266e:	4325      	orrs	r5, r4
    2670:	429e      	cmp	r6, r3
    2672:	dd00      	ble.n	2676 <__aeabi_dsub+0xe6>
    2674:	e0db      	b.n	282e <__aeabi_dsub+0x29e>
    2676:	1b9e      	subs	r6, r3, r6
    2678:	1c73      	adds	r3, r6, #1
    267a:	2b1f      	cmp	r3, #31
    267c:	dd00      	ble.n	2680 <__aeabi_dsub+0xf0>
    267e:	e10a      	b.n	2896 <__aeabi_dsub+0x306>
    2680:	2220      	movs	r2, #32
    2682:	0038      	movs	r0, r7
    2684:	1ad2      	subs	r2, r2, r3
    2686:	0029      	movs	r1, r5
    2688:	4097      	lsls	r7, r2
    268a:	002c      	movs	r4, r5
    268c:	4091      	lsls	r1, r2
    268e:	40d8      	lsrs	r0, r3
    2690:	1e7a      	subs	r2, r7, #1
    2692:	4197      	sbcs	r7, r2
    2694:	40dc      	lsrs	r4, r3
    2696:	2600      	movs	r6, #0
    2698:	4301      	orrs	r1, r0
    269a:	430f      	orrs	r7, r1
    269c:	077b      	lsls	r3, r7, #29
    269e:	d009      	beq.n	26b4 <__aeabi_dsub+0x124>
    26a0:	230f      	movs	r3, #15
    26a2:	403b      	ands	r3, r7
    26a4:	2b04      	cmp	r3, #4
    26a6:	d005      	beq.n	26b4 <__aeabi_dsub+0x124>
    26a8:	1d3b      	adds	r3, r7, #4
    26aa:	42bb      	cmp	r3, r7
    26ac:	41bf      	sbcs	r7, r7
    26ae:	427f      	negs	r7, r7
    26b0:	19e4      	adds	r4, r4, r7
    26b2:	001f      	movs	r7, r3
    26b4:	0223      	lsls	r3, r4, #8
    26b6:	d525      	bpl.n	2704 <__aeabi_dsub+0x174>
    26b8:	4b86      	ldr	r3, [pc, #536]	; (28d4 <__aeabi_dsub+0x344>)
    26ba:	3601      	adds	r6, #1
    26bc:	429e      	cmp	r6, r3
    26be:	d100      	bne.n	26c2 <__aeabi_dsub+0x132>
    26c0:	e0af      	b.n	2822 <__aeabi_dsub+0x292>
    26c2:	4b85      	ldr	r3, [pc, #532]	; (28d8 <__aeabi_dsub+0x348>)
    26c4:	2501      	movs	r5, #1
    26c6:	401c      	ands	r4, r3
    26c8:	4643      	mov	r3, r8
    26ca:	0762      	lsls	r2, r4, #29
    26cc:	08ff      	lsrs	r7, r7, #3
    26ce:	0264      	lsls	r4, r4, #9
    26d0:	0576      	lsls	r6, r6, #21
    26d2:	4317      	orrs	r7, r2
    26d4:	0b24      	lsrs	r4, r4, #12
    26d6:	0d76      	lsrs	r6, r6, #21
    26d8:	401d      	ands	r5, r3
    26da:	2100      	movs	r1, #0
    26dc:	0324      	lsls	r4, r4, #12
    26de:	0b23      	lsrs	r3, r4, #12
    26e0:	0d0c      	lsrs	r4, r1, #20
    26e2:	4a7e      	ldr	r2, [pc, #504]	; (28dc <__aeabi_dsub+0x34c>)
    26e4:	0524      	lsls	r4, r4, #20
    26e6:	431c      	orrs	r4, r3
    26e8:	4014      	ands	r4, r2
    26ea:	0533      	lsls	r3, r6, #20
    26ec:	4323      	orrs	r3, r4
    26ee:	005b      	lsls	r3, r3, #1
    26f0:	07ed      	lsls	r5, r5, #31
    26f2:	085b      	lsrs	r3, r3, #1
    26f4:	432b      	orrs	r3, r5
    26f6:	0038      	movs	r0, r7
    26f8:	0019      	movs	r1, r3
    26fa:	bc1c      	pop	{r2, r3, r4}
    26fc:	4690      	mov	r8, r2
    26fe:	4699      	mov	r9, r3
    2700:	46a2      	mov	sl, r4
    2702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2704:	2501      	movs	r5, #1
    2706:	4643      	mov	r3, r8
    2708:	0762      	lsls	r2, r4, #29
    270a:	08ff      	lsrs	r7, r7, #3
    270c:	4317      	orrs	r7, r2
    270e:	08e4      	lsrs	r4, r4, #3
    2710:	401d      	ands	r5, r3
    2712:	4b70      	ldr	r3, [pc, #448]	; (28d4 <__aeabi_dsub+0x344>)
    2714:	429e      	cmp	r6, r3
    2716:	d036      	beq.n	2786 <__aeabi_dsub+0x1f6>
    2718:	0324      	lsls	r4, r4, #12
    271a:	0576      	lsls	r6, r6, #21
    271c:	0b24      	lsrs	r4, r4, #12
    271e:	0d76      	lsrs	r6, r6, #21
    2720:	e7db      	b.n	26da <__aeabi_dsub+0x14a>
    2722:	4663      	mov	r3, ip
    2724:	1af3      	subs	r3, r6, r3
    2726:	2b00      	cmp	r3, #0
    2728:	dc00      	bgt.n	272c <__aeabi_dsub+0x19c>
    272a:	e094      	b.n	2856 <__aeabi_dsub+0x2c6>
    272c:	4660      	mov	r0, ip
    272e:	2800      	cmp	r0, #0
    2730:	d035      	beq.n	279e <__aeabi_dsub+0x20e>
    2732:	4868      	ldr	r0, [pc, #416]	; (28d4 <__aeabi_dsub+0x344>)
    2734:	4286      	cmp	r6, r0
    2736:	d0b1      	beq.n	269c <__aeabi_dsub+0x10c>
    2738:	2780      	movs	r7, #128	; 0x80
    273a:	043f      	lsls	r7, r7, #16
    273c:	4339      	orrs	r1, r7
    273e:	2b38      	cmp	r3, #56	; 0x38
    2740:	dc00      	bgt.n	2744 <__aeabi_dsub+0x1b4>
    2742:	e0fd      	b.n	2940 <__aeabi_dsub+0x3b0>
    2744:	430a      	orrs	r2, r1
    2746:	0017      	movs	r7, r2
    2748:	2100      	movs	r1, #0
    274a:	1e7a      	subs	r2, r7, #1
    274c:	4197      	sbcs	r7, r2
    274e:	4457      	add	r7, sl
    2750:	4557      	cmp	r7, sl
    2752:	4180      	sbcs	r0, r0
    2754:	1909      	adds	r1, r1, r4
    2756:	4244      	negs	r4, r0
    2758:	190c      	adds	r4, r1, r4
    275a:	0223      	lsls	r3, r4, #8
    275c:	d53a      	bpl.n	27d4 <__aeabi_dsub+0x244>
    275e:	4b5d      	ldr	r3, [pc, #372]	; (28d4 <__aeabi_dsub+0x344>)
    2760:	3601      	adds	r6, #1
    2762:	429e      	cmp	r6, r3
    2764:	d100      	bne.n	2768 <__aeabi_dsub+0x1d8>
    2766:	e14b      	b.n	2a00 <__aeabi_dsub+0x470>
    2768:	2201      	movs	r2, #1
    276a:	4b5b      	ldr	r3, [pc, #364]	; (28d8 <__aeabi_dsub+0x348>)
    276c:	401c      	ands	r4, r3
    276e:	087b      	lsrs	r3, r7, #1
    2770:	4017      	ands	r7, r2
    2772:	431f      	orrs	r7, r3
    2774:	07e2      	lsls	r2, r4, #31
    2776:	4317      	orrs	r7, r2
    2778:	0864      	lsrs	r4, r4, #1
    277a:	e78f      	b.n	269c <__aeabi_dsub+0x10c>
    277c:	0008      	movs	r0, r1
    277e:	4310      	orrs	r0, r2
    2780:	d000      	beq.n	2784 <__aeabi_dsub+0x1f4>
    2782:	e724      	b.n	25ce <__aeabi_dsub+0x3e>
    2784:	e721      	b.n	25ca <__aeabi_dsub+0x3a>
    2786:	0023      	movs	r3, r4
    2788:	433b      	orrs	r3, r7
    278a:	d100      	bne.n	278e <__aeabi_dsub+0x1fe>
    278c:	e1b9      	b.n	2b02 <__aeabi_dsub+0x572>
    278e:	2280      	movs	r2, #128	; 0x80
    2790:	0312      	lsls	r2, r2, #12
    2792:	4314      	orrs	r4, r2
    2794:	0324      	lsls	r4, r4, #12
    2796:	0b24      	lsrs	r4, r4, #12
    2798:	e79f      	b.n	26da <__aeabi_dsub+0x14a>
    279a:	002e      	movs	r6, r5
    279c:	e77e      	b.n	269c <__aeabi_dsub+0x10c>
    279e:	0008      	movs	r0, r1
    27a0:	4310      	orrs	r0, r2
    27a2:	d100      	bne.n	27a6 <__aeabi_dsub+0x216>
    27a4:	e0ca      	b.n	293c <__aeabi_dsub+0x3ac>
    27a6:	1e58      	subs	r0, r3, #1
    27a8:	4684      	mov	ip, r0
    27aa:	2800      	cmp	r0, #0
    27ac:	d000      	beq.n	27b0 <__aeabi_dsub+0x220>
    27ae:	e0e7      	b.n	2980 <__aeabi_dsub+0x3f0>
    27b0:	4452      	add	r2, sl
    27b2:	4552      	cmp	r2, sl
    27b4:	4180      	sbcs	r0, r0
    27b6:	1864      	adds	r4, r4, r1
    27b8:	4240      	negs	r0, r0
    27ba:	1824      	adds	r4, r4, r0
    27bc:	0017      	movs	r7, r2
    27be:	2601      	movs	r6, #1
    27c0:	0223      	lsls	r3, r4, #8
    27c2:	d507      	bpl.n	27d4 <__aeabi_dsub+0x244>
    27c4:	2602      	movs	r6, #2
    27c6:	e7cf      	b.n	2768 <__aeabi_dsub+0x1d8>
    27c8:	4664      	mov	r4, ip
    27ca:	432c      	orrs	r4, r5
    27cc:	d100      	bne.n	27d0 <__aeabi_dsub+0x240>
    27ce:	e1b3      	b.n	2b38 <__aeabi_dsub+0x5a8>
    27d0:	002c      	movs	r4, r5
    27d2:	4667      	mov	r7, ip
    27d4:	077b      	lsls	r3, r7, #29
    27d6:	d000      	beq.n	27da <__aeabi_dsub+0x24a>
    27d8:	e762      	b.n	26a0 <__aeabi_dsub+0x110>
    27da:	0763      	lsls	r3, r4, #29
    27dc:	08ff      	lsrs	r7, r7, #3
    27de:	431f      	orrs	r7, r3
    27e0:	2501      	movs	r5, #1
    27e2:	4643      	mov	r3, r8
    27e4:	08e4      	lsrs	r4, r4, #3
    27e6:	401d      	ands	r5, r3
    27e8:	e793      	b.n	2712 <__aeabi_dsub+0x182>
    27ea:	2d00      	cmp	r5, #0
    27ec:	d178      	bne.n	28e0 <__aeabi_dsub+0x350>
    27ee:	1c75      	adds	r5, r6, #1
    27f0:	056d      	lsls	r5, r5, #21
    27f2:	0d6d      	lsrs	r5, r5, #21
    27f4:	2d01      	cmp	r5, #1
    27f6:	dc00      	bgt.n	27fa <__aeabi_dsub+0x26a>
    27f8:	e0f2      	b.n	29e0 <__aeabi_dsub+0x450>
    27fa:	4650      	mov	r0, sl
    27fc:	1a80      	subs	r0, r0, r2
    27fe:	4582      	cmp	sl, r0
    2800:	41bf      	sbcs	r7, r7
    2802:	1a65      	subs	r5, r4, r1
    2804:	427f      	negs	r7, r7
    2806:	1bed      	subs	r5, r5, r7
    2808:	4684      	mov	ip, r0
    280a:	0228      	lsls	r0, r5, #8
    280c:	d400      	bmi.n	2810 <__aeabi_dsub+0x280>
    280e:	e08c      	b.n	292a <__aeabi_dsub+0x39a>
    2810:	4650      	mov	r0, sl
    2812:	1a17      	subs	r7, r2, r0
    2814:	42ba      	cmp	r2, r7
    2816:	4192      	sbcs	r2, r2
    2818:	1b0c      	subs	r4, r1, r4
    281a:	4255      	negs	r5, r2
    281c:	1b65      	subs	r5, r4, r5
    281e:	4698      	mov	r8, r3
    2820:	e714      	b.n	264c <__aeabi_dsub+0xbc>
    2822:	2501      	movs	r5, #1
    2824:	4643      	mov	r3, r8
    2826:	2400      	movs	r4, #0
    2828:	401d      	ands	r5, r3
    282a:	2700      	movs	r7, #0
    282c:	e755      	b.n	26da <__aeabi_dsub+0x14a>
    282e:	4c2a      	ldr	r4, [pc, #168]	; (28d8 <__aeabi_dsub+0x348>)
    2830:	1af6      	subs	r6, r6, r3
    2832:	402c      	ands	r4, r5
    2834:	e732      	b.n	269c <__aeabi_dsub+0x10c>
    2836:	003d      	movs	r5, r7
    2838:	3828      	subs	r0, #40	; 0x28
    283a:	4085      	lsls	r5, r0
    283c:	2700      	movs	r7, #0
    283e:	e717      	b.n	2670 <__aeabi_dsub+0xe0>
    2840:	0038      	movs	r0, r7
    2842:	f000 fa27 	bl	2c94 <__clzsi2>
    2846:	3020      	adds	r0, #32
    2848:	e706      	b.n	2658 <__aeabi_dsub+0xc8>
    284a:	430a      	orrs	r2, r1
    284c:	0017      	movs	r7, r2
    284e:	2100      	movs	r1, #0
    2850:	1e7a      	subs	r2, r7, #1
    2852:	4197      	sbcs	r7, r2
    2854:	e6ee      	b.n	2634 <__aeabi_dsub+0xa4>
    2856:	2b00      	cmp	r3, #0
    2858:	d000      	beq.n	285c <__aeabi_dsub+0x2cc>
    285a:	e0e5      	b.n	2a28 <__aeabi_dsub+0x498>
    285c:	1c73      	adds	r3, r6, #1
    285e:	469c      	mov	ip, r3
    2860:	055b      	lsls	r3, r3, #21
    2862:	0d5b      	lsrs	r3, r3, #21
    2864:	2b01      	cmp	r3, #1
    2866:	dc00      	bgt.n	286a <__aeabi_dsub+0x2da>
    2868:	e09f      	b.n	29aa <__aeabi_dsub+0x41a>
    286a:	4b1a      	ldr	r3, [pc, #104]	; (28d4 <__aeabi_dsub+0x344>)
    286c:	459c      	cmp	ip, r3
    286e:	d100      	bne.n	2872 <__aeabi_dsub+0x2e2>
    2870:	e0c5      	b.n	29fe <__aeabi_dsub+0x46e>
    2872:	4452      	add	r2, sl
    2874:	4552      	cmp	r2, sl
    2876:	4180      	sbcs	r0, r0
    2878:	1864      	adds	r4, r4, r1
    287a:	4240      	negs	r0, r0
    287c:	1824      	adds	r4, r4, r0
    287e:	07e7      	lsls	r7, r4, #31
    2880:	0852      	lsrs	r2, r2, #1
    2882:	4317      	orrs	r7, r2
    2884:	0864      	lsrs	r4, r4, #1
    2886:	4666      	mov	r6, ip
    2888:	e708      	b.n	269c <__aeabi_dsub+0x10c>
    288a:	4812      	ldr	r0, [pc, #72]	; (28d4 <__aeabi_dsub+0x344>)
    288c:	4285      	cmp	r5, r0
    288e:	d100      	bne.n	2892 <__aeabi_dsub+0x302>
    2890:	e085      	b.n	299e <__aeabi_dsub+0x40e>
    2892:	001d      	movs	r5, r3
    2894:	e6bc      	b.n	2610 <__aeabi_dsub+0x80>
    2896:	0029      	movs	r1, r5
    2898:	3e1f      	subs	r6, #31
    289a:	40f1      	lsrs	r1, r6
    289c:	2b20      	cmp	r3, #32
    289e:	d100      	bne.n	28a2 <__aeabi_dsub+0x312>
    28a0:	e07f      	b.n	29a2 <__aeabi_dsub+0x412>
    28a2:	2240      	movs	r2, #64	; 0x40
    28a4:	1ad3      	subs	r3, r2, r3
    28a6:	409d      	lsls	r5, r3
    28a8:	432f      	orrs	r7, r5
    28aa:	1e7d      	subs	r5, r7, #1
    28ac:	41af      	sbcs	r7, r5
    28ae:	2400      	movs	r4, #0
    28b0:	430f      	orrs	r7, r1
    28b2:	2600      	movs	r6, #0
    28b4:	e78e      	b.n	27d4 <__aeabi_dsub+0x244>
    28b6:	002b      	movs	r3, r5
    28b8:	000f      	movs	r7, r1
    28ba:	3b20      	subs	r3, #32
    28bc:	40df      	lsrs	r7, r3
    28be:	2d20      	cmp	r5, #32
    28c0:	d071      	beq.n	29a6 <__aeabi_dsub+0x416>
    28c2:	2340      	movs	r3, #64	; 0x40
    28c4:	1b5d      	subs	r5, r3, r5
    28c6:	40a9      	lsls	r1, r5
    28c8:	430a      	orrs	r2, r1
    28ca:	1e51      	subs	r1, r2, #1
    28cc:	418a      	sbcs	r2, r1
    28ce:	2100      	movs	r1, #0
    28d0:	4317      	orrs	r7, r2
    28d2:	e6af      	b.n	2634 <__aeabi_dsub+0xa4>
    28d4:	000007ff 	.word	0x000007ff
    28d8:	ff7fffff 	.word	0xff7fffff
    28dc:	800fffff 	.word	0x800fffff
    28e0:	2e00      	cmp	r6, #0
    28e2:	d03e      	beq.n	2962 <__aeabi_dsub+0x3d2>
    28e4:	4eb3      	ldr	r6, [pc, #716]	; (2bb4 <__aeabi_dsub+0x624>)
    28e6:	45b4      	cmp	ip, r6
    28e8:	d045      	beq.n	2976 <__aeabi_dsub+0x3e6>
    28ea:	2680      	movs	r6, #128	; 0x80
    28ec:	0436      	lsls	r6, r6, #16
    28ee:	426d      	negs	r5, r5
    28f0:	4334      	orrs	r4, r6
    28f2:	2d38      	cmp	r5, #56	; 0x38
    28f4:	dd00      	ble.n	28f8 <__aeabi_dsub+0x368>
    28f6:	e0a8      	b.n	2a4a <__aeabi_dsub+0x4ba>
    28f8:	2d1f      	cmp	r5, #31
    28fa:	dd00      	ble.n	28fe <__aeabi_dsub+0x36e>
    28fc:	e11f      	b.n	2b3e <__aeabi_dsub+0x5ae>
    28fe:	2620      	movs	r6, #32
    2900:	0027      	movs	r7, r4
    2902:	4650      	mov	r0, sl
    2904:	1b76      	subs	r6, r6, r5
    2906:	40b7      	lsls	r7, r6
    2908:	40e8      	lsrs	r0, r5
    290a:	4307      	orrs	r7, r0
    290c:	4650      	mov	r0, sl
    290e:	40b0      	lsls	r0, r6
    2910:	1e46      	subs	r6, r0, #1
    2912:	41b0      	sbcs	r0, r6
    2914:	40ec      	lsrs	r4, r5
    2916:	4338      	orrs	r0, r7
    2918:	1a17      	subs	r7, r2, r0
    291a:	42ba      	cmp	r2, r7
    291c:	4192      	sbcs	r2, r2
    291e:	1b0c      	subs	r4, r1, r4
    2920:	4252      	negs	r2, r2
    2922:	1aa4      	subs	r4, r4, r2
    2924:	4666      	mov	r6, ip
    2926:	4698      	mov	r8, r3
    2928:	e68b      	b.n	2642 <__aeabi_dsub+0xb2>
    292a:	4664      	mov	r4, ip
    292c:	4667      	mov	r7, ip
    292e:	432c      	orrs	r4, r5
    2930:	d000      	beq.n	2934 <__aeabi_dsub+0x3a4>
    2932:	e68b      	b.n	264c <__aeabi_dsub+0xbc>
    2934:	2500      	movs	r5, #0
    2936:	2600      	movs	r6, #0
    2938:	2700      	movs	r7, #0
    293a:	e6ea      	b.n	2712 <__aeabi_dsub+0x182>
    293c:	001e      	movs	r6, r3
    293e:	e6ad      	b.n	269c <__aeabi_dsub+0x10c>
    2940:	2b1f      	cmp	r3, #31
    2942:	dc60      	bgt.n	2a06 <__aeabi_dsub+0x476>
    2944:	2720      	movs	r7, #32
    2946:	1af8      	subs	r0, r7, r3
    2948:	000f      	movs	r7, r1
    294a:	4684      	mov	ip, r0
    294c:	4087      	lsls	r7, r0
    294e:	0010      	movs	r0, r2
    2950:	40d8      	lsrs	r0, r3
    2952:	4307      	orrs	r7, r0
    2954:	4660      	mov	r0, ip
    2956:	4082      	lsls	r2, r0
    2958:	1e50      	subs	r0, r2, #1
    295a:	4182      	sbcs	r2, r0
    295c:	40d9      	lsrs	r1, r3
    295e:	4317      	orrs	r7, r2
    2960:	e6f5      	b.n	274e <__aeabi_dsub+0x1be>
    2962:	0026      	movs	r6, r4
    2964:	4650      	mov	r0, sl
    2966:	4306      	orrs	r6, r0
    2968:	d005      	beq.n	2976 <__aeabi_dsub+0x3e6>
    296a:	43ed      	mvns	r5, r5
    296c:	2d00      	cmp	r5, #0
    296e:	d0d3      	beq.n	2918 <__aeabi_dsub+0x388>
    2970:	4e90      	ldr	r6, [pc, #576]	; (2bb4 <__aeabi_dsub+0x624>)
    2972:	45b4      	cmp	ip, r6
    2974:	d1bd      	bne.n	28f2 <__aeabi_dsub+0x362>
    2976:	000c      	movs	r4, r1
    2978:	0017      	movs	r7, r2
    297a:	4666      	mov	r6, ip
    297c:	4698      	mov	r8, r3
    297e:	e68d      	b.n	269c <__aeabi_dsub+0x10c>
    2980:	488c      	ldr	r0, [pc, #560]	; (2bb4 <__aeabi_dsub+0x624>)
    2982:	4283      	cmp	r3, r0
    2984:	d00b      	beq.n	299e <__aeabi_dsub+0x40e>
    2986:	4663      	mov	r3, ip
    2988:	e6d9      	b.n	273e <__aeabi_dsub+0x1ae>
    298a:	2d00      	cmp	r5, #0
    298c:	d000      	beq.n	2990 <__aeabi_dsub+0x400>
    298e:	e096      	b.n	2abe <__aeabi_dsub+0x52e>
    2990:	0008      	movs	r0, r1
    2992:	4310      	orrs	r0, r2
    2994:	d100      	bne.n	2998 <__aeabi_dsub+0x408>
    2996:	e0e2      	b.n	2b5e <__aeabi_dsub+0x5ce>
    2998:	000c      	movs	r4, r1
    299a:	0017      	movs	r7, r2
    299c:	4698      	mov	r8, r3
    299e:	4e85      	ldr	r6, [pc, #532]	; (2bb4 <__aeabi_dsub+0x624>)
    29a0:	e67c      	b.n	269c <__aeabi_dsub+0x10c>
    29a2:	2500      	movs	r5, #0
    29a4:	e780      	b.n	28a8 <__aeabi_dsub+0x318>
    29a6:	2100      	movs	r1, #0
    29a8:	e78e      	b.n	28c8 <__aeabi_dsub+0x338>
    29aa:	0023      	movs	r3, r4
    29ac:	4650      	mov	r0, sl
    29ae:	4303      	orrs	r3, r0
    29b0:	2e00      	cmp	r6, #0
    29b2:	d000      	beq.n	29b6 <__aeabi_dsub+0x426>
    29b4:	e0a8      	b.n	2b08 <__aeabi_dsub+0x578>
    29b6:	2b00      	cmp	r3, #0
    29b8:	d100      	bne.n	29bc <__aeabi_dsub+0x42c>
    29ba:	e0de      	b.n	2b7a <__aeabi_dsub+0x5ea>
    29bc:	000b      	movs	r3, r1
    29be:	4313      	orrs	r3, r2
    29c0:	d100      	bne.n	29c4 <__aeabi_dsub+0x434>
    29c2:	e66b      	b.n	269c <__aeabi_dsub+0x10c>
    29c4:	4452      	add	r2, sl
    29c6:	4552      	cmp	r2, sl
    29c8:	4180      	sbcs	r0, r0
    29ca:	1864      	adds	r4, r4, r1
    29cc:	4240      	negs	r0, r0
    29ce:	1824      	adds	r4, r4, r0
    29d0:	0017      	movs	r7, r2
    29d2:	0223      	lsls	r3, r4, #8
    29d4:	d400      	bmi.n	29d8 <__aeabi_dsub+0x448>
    29d6:	e6fd      	b.n	27d4 <__aeabi_dsub+0x244>
    29d8:	4b77      	ldr	r3, [pc, #476]	; (2bb8 <__aeabi_dsub+0x628>)
    29da:	4666      	mov	r6, ip
    29dc:	401c      	ands	r4, r3
    29de:	e65d      	b.n	269c <__aeabi_dsub+0x10c>
    29e0:	0025      	movs	r5, r4
    29e2:	4650      	mov	r0, sl
    29e4:	4305      	orrs	r5, r0
    29e6:	2e00      	cmp	r6, #0
    29e8:	d1cf      	bne.n	298a <__aeabi_dsub+0x3fa>
    29ea:	2d00      	cmp	r5, #0
    29ec:	d14f      	bne.n	2a8e <__aeabi_dsub+0x4fe>
    29ee:	000c      	movs	r4, r1
    29f0:	4314      	orrs	r4, r2
    29f2:	d100      	bne.n	29f6 <__aeabi_dsub+0x466>
    29f4:	e0a0      	b.n	2b38 <__aeabi_dsub+0x5a8>
    29f6:	000c      	movs	r4, r1
    29f8:	0017      	movs	r7, r2
    29fa:	4698      	mov	r8, r3
    29fc:	e64e      	b.n	269c <__aeabi_dsub+0x10c>
    29fe:	4666      	mov	r6, ip
    2a00:	2400      	movs	r4, #0
    2a02:	2700      	movs	r7, #0
    2a04:	e685      	b.n	2712 <__aeabi_dsub+0x182>
    2a06:	001f      	movs	r7, r3
    2a08:	0008      	movs	r0, r1
    2a0a:	3f20      	subs	r7, #32
    2a0c:	40f8      	lsrs	r0, r7
    2a0e:	0007      	movs	r7, r0
    2a10:	2b20      	cmp	r3, #32
    2a12:	d100      	bne.n	2a16 <__aeabi_dsub+0x486>
    2a14:	e08e      	b.n	2b34 <__aeabi_dsub+0x5a4>
    2a16:	2040      	movs	r0, #64	; 0x40
    2a18:	1ac3      	subs	r3, r0, r3
    2a1a:	4099      	lsls	r1, r3
    2a1c:	430a      	orrs	r2, r1
    2a1e:	1e51      	subs	r1, r2, #1
    2a20:	418a      	sbcs	r2, r1
    2a22:	2100      	movs	r1, #0
    2a24:	4317      	orrs	r7, r2
    2a26:	e692      	b.n	274e <__aeabi_dsub+0x1be>
    2a28:	2e00      	cmp	r6, #0
    2a2a:	d114      	bne.n	2a56 <__aeabi_dsub+0x4c6>
    2a2c:	0026      	movs	r6, r4
    2a2e:	4650      	mov	r0, sl
    2a30:	4306      	orrs	r6, r0
    2a32:	d062      	beq.n	2afa <__aeabi_dsub+0x56a>
    2a34:	43db      	mvns	r3, r3
    2a36:	2b00      	cmp	r3, #0
    2a38:	d15c      	bne.n	2af4 <__aeabi_dsub+0x564>
    2a3a:	1887      	adds	r7, r0, r2
    2a3c:	4297      	cmp	r7, r2
    2a3e:	4192      	sbcs	r2, r2
    2a40:	1864      	adds	r4, r4, r1
    2a42:	4252      	negs	r2, r2
    2a44:	18a4      	adds	r4, r4, r2
    2a46:	4666      	mov	r6, ip
    2a48:	e687      	b.n	275a <__aeabi_dsub+0x1ca>
    2a4a:	4650      	mov	r0, sl
    2a4c:	4320      	orrs	r0, r4
    2a4e:	1e44      	subs	r4, r0, #1
    2a50:	41a0      	sbcs	r0, r4
    2a52:	2400      	movs	r4, #0
    2a54:	e760      	b.n	2918 <__aeabi_dsub+0x388>
    2a56:	4e57      	ldr	r6, [pc, #348]	; (2bb4 <__aeabi_dsub+0x624>)
    2a58:	45b4      	cmp	ip, r6
    2a5a:	d04e      	beq.n	2afa <__aeabi_dsub+0x56a>
    2a5c:	2680      	movs	r6, #128	; 0x80
    2a5e:	0436      	lsls	r6, r6, #16
    2a60:	425b      	negs	r3, r3
    2a62:	4334      	orrs	r4, r6
    2a64:	2b38      	cmp	r3, #56	; 0x38
    2a66:	dd00      	ble.n	2a6a <__aeabi_dsub+0x4da>
    2a68:	e07f      	b.n	2b6a <__aeabi_dsub+0x5da>
    2a6a:	2b1f      	cmp	r3, #31
    2a6c:	dd00      	ble.n	2a70 <__aeabi_dsub+0x4e0>
    2a6e:	e08b      	b.n	2b88 <__aeabi_dsub+0x5f8>
    2a70:	2620      	movs	r6, #32
    2a72:	0027      	movs	r7, r4
    2a74:	4650      	mov	r0, sl
    2a76:	1af6      	subs	r6, r6, r3
    2a78:	40b7      	lsls	r7, r6
    2a7a:	40d8      	lsrs	r0, r3
    2a7c:	4307      	orrs	r7, r0
    2a7e:	4650      	mov	r0, sl
    2a80:	40b0      	lsls	r0, r6
    2a82:	1e46      	subs	r6, r0, #1
    2a84:	41b0      	sbcs	r0, r6
    2a86:	4307      	orrs	r7, r0
    2a88:	40dc      	lsrs	r4, r3
    2a8a:	18bf      	adds	r7, r7, r2
    2a8c:	e7d6      	b.n	2a3c <__aeabi_dsub+0x4ac>
    2a8e:	000d      	movs	r5, r1
    2a90:	4315      	orrs	r5, r2
    2a92:	d100      	bne.n	2a96 <__aeabi_dsub+0x506>
    2a94:	e602      	b.n	269c <__aeabi_dsub+0x10c>
    2a96:	4650      	mov	r0, sl
    2a98:	1a80      	subs	r0, r0, r2
    2a9a:	4582      	cmp	sl, r0
    2a9c:	41bf      	sbcs	r7, r7
    2a9e:	1a65      	subs	r5, r4, r1
    2aa0:	427f      	negs	r7, r7
    2aa2:	1bed      	subs	r5, r5, r7
    2aa4:	4684      	mov	ip, r0
    2aa6:	0228      	lsls	r0, r5, #8
    2aa8:	d400      	bmi.n	2aac <__aeabi_dsub+0x51c>
    2aaa:	e68d      	b.n	27c8 <__aeabi_dsub+0x238>
    2aac:	4650      	mov	r0, sl
    2aae:	1a17      	subs	r7, r2, r0
    2ab0:	42ba      	cmp	r2, r7
    2ab2:	4192      	sbcs	r2, r2
    2ab4:	1b0c      	subs	r4, r1, r4
    2ab6:	4252      	negs	r2, r2
    2ab8:	1aa4      	subs	r4, r4, r2
    2aba:	4698      	mov	r8, r3
    2abc:	e5ee      	b.n	269c <__aeabi_dsub+0x10c>
    2abe:	000d      	movs	r5, r1
    2ac0:	4315      	orrs	r5, r2
    2ac2:	d100      	bne.n	2ac6 <__aeabi_dsub+0x536>
    2ac4:	e76b      	b.n	299e <__aeabi_dsub+0x40e>
    2ac6:	4650      	mov	r0, sl
    2ac8:	0767      	lsls	r7, r4, #29
    2aca:	08c0      	lsrs	r0, r0, #3
    2acc:	4307      	orrs	r7, r0
    2ace:	2080      	movs	r0, #128	; 0x80
    2ad0:	08e4      	lsrs	r4, r4, #3
    2ad2:	0300      	lsls	r0, r0, #12
    2ad4:	4204      	tst	r4, r0
    2ad6:	d007      	beq.n	2ae8 <__aeabi_dsub+0x558>
    2ad8:	08cd      	lsrs	r5, r1, #3
    2ada:	4205      	tst	r5, r0
    2adc:	d104      	bne.n	2ae8 <__aeabi_dsub+0x558>
    2ade:	002c      	movs	r4, r5
    2ae0:	4698      	mov	r8, r3
    2ae2:	08d7      	lsrs	r7, r2, #3
    2ae4:	0749      	lsls	r1, r1, #29
    2ae6:	430f      	orrs	r7, r1
    2ae8:	0f7b      	lsrs	r3, r7, #29
    2aea:	00e4      	lsls	r4, r4, #3
    2aec:	431c      	orrs	r4, r3
    2aee:	00ff      	lsls	r7, r7, #3
    2af0:	4e30      	ldr	r6, [pc, #192]	; (2bb4 <__aeabi_dsub+0x624>)
    2af2:	e5d3      	b.n	269c <__aeabi_dsub+0x10c>
    2af4:	4e2f      	ldr	r6, [pc, #188]	; (2bb4 <__aeabi_dsub+0x624>)
    2af6:	45b4      	cmp	ip, r6
    2af8:	d1b4      	bne.n	2a64 <__aeabi_dsub+0x4d4>
    2afa:	000c      	movs	r4, r1
    2afc:	0017      	movs	r7, r2
    2afe:	4666      	mov	r6, ip
    2b00:	e5cc      	b.n	269c <__aeabi_dsub+0x10c>
    2b02:	2700      	movs	r7, #0
    2b04:	2400      	movs	r4, #0
    2b06:	e5e8      	b.n	26da <__aeabi_dsub+0x14a>
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d039      	beq.n	2b80 <__aeabi_dsub+0x5f0>
    2b0c:	000b      	movs	r3, r1
    2b0e:	4313      	orrs	r3, r2
    2b10:	d100      	bne.n	2b14 <__aeabi_dsub+0x584>
    2b12:	e744      	b.n	299e <__aeabi_dsub+0x40e>
    2b14:	08c0      	lsrs	r0, r0, #3
    2b16:	0767      	lsls	r7, r4, #29
    2b18:	4307      	orrs	r7, r0
    2b1a:	2080      	movs	r0, #128	; 0x80
    2b1c:	08e4      	lsrs	r4, r4, #3
    2b1e:	0300      	lsls	r0, r0, #12
    2b20:	4204      	tst	r4, r0
    2b22:	d0e1      	beq.n	2ae8 <__aeabi_dsub+0x558>
    2b24:	08cb      	lsrs	r3, r1, #3
    2b26:	4203      	tst	r3, r0
    2b28:	d1de      	bne.n	2ae8 <__aeabi_dsub+0x558>
    2b2a:	08d7      	lsrs	r7, r2, #3
    2b2c:	0749      	lsls	r1, r1, #29
    2b2e:	430f      	orrs	r7, r1
    2b30:	001c      	movs	r4, r3
    2b32:	e7d9      	b.n	2ae8 <__aeabi_dsub+0x558>
    2b34:	2100      	movs	r1, #0
    2b36:	e771      	b.n	2a1c <__aeabi_dsub+0x48c>
    2b38:	2500      	movs	r5, #0
    2b3a:	2700      	movs	r7, #0
    2b3c:	e5e9      	b.n	2712 <__aeabi_dsub+0x182>
    2b3e:	002e      	movs	r6, r5
    2b40:	0027      	movs	r7, r4
    2b42:	3e20      	subs	r6, #32
    2b44:	40f7      	lsrs	r7, r6
    2b46:	2d20      	cmp	r5, #32
    2b48:	d02f      	beq.n	2baa <__aeabi_dsub+0x61a>
    2b4a:	2640      	movs	r6, #64	; 0x40
    2b4c:	1b75      	subs	r5, r6, r5
    2b4e:	40ac      	lsls	r4, r5
    2b50:	4650      	mov	r0, sl
    2b52:	4320      	orrs	r0, r4
    2b54:	1e44      	subs	r4, r0, #1
    2b56:	41a0      	sbcs	r0, r4
    2b58:	2400      	movs	r4, #0
    2b5a:	4338      	orrs	r0, r7
    2b5c:	e6dc      	b.n	2918 <__aeabi_dsub+0x388>
    2b5e:	2480      	movs	r4, #128	; 0x80
    2b60:	2500      	movs	r5, #0
    2b62:	0324      	lsls	r4, r4, #12
    2b64:	4e13      	ldr	r6, [pc, #76]	; (2bb4 <__aeabi_dsub+0x624>)
    2b66:	2700      	movs	r7, #0
    2b68:	e5d3      	b.n	2712 <__aeabi_dsub+0x182>
    2b6a:	4650      	mov	r0, sl
    2b6c:	4320      	orrs	r0, r4
    2b6e:	0007      	movs	r7, r0
    2b70:	1e78      	subs	r0, r7, #1
    2b72:	4187      	sbcs	r7, r0
    2b74:	2400      	movs	r4, #0
    2b76:	18bf      	adds	r7, r7, r2
    2b78:	e760      	b.n	2a3c <__aeabi_dsub+0x4ac>
    2b7a:	000c      	movs	r4, r1
    2b7c:	0017      	movs	r7, r2
    2b7e:	e58d      	b.n	269c <__aeabi_dsub+0x10c>
    2b80:	000c      	movs	r4, r1
    2b82:	0017      	movs	r7, r2
    2b84:	4e0b      	ldr	r6, [pc, #44]	; (2bb4 <__aeabi_dsub+0x624>)
    2b86:	e589      	b.n	269c <__aeabi_dsub+0x10c>
    2b88:	001e      	movs	r6, r3
    2b8a:	0027      	movs	r7, r4
    2b8c:	3e20      	subs	r6, #32
    2b8e:	40f7      	lsrs	r7, r6
    2b90:	2b20      	cmp	r3, #32
    2b92:	d00c      	beq.n	2bae <__aeabi_dsub+0x61e>
    2b94:	2640      	movs	r6, #64	; 0x40
    2b96:	1af3      	subs	r3, r6, r3
    2b98:	409c      	lsls	r4, r3
    2b9a:	4650      	mov	r0, sl
    2b9c:	4320      	orrs	r0, r4
    2b9e:	1e44      	subs	r4, r0, #1
    2ba0:	41a0      	sbcs	r0, r4
    2ba2:	4307      	orrs	r7, r0
    2ba4:	2400      	movs	r4, #0
    2ba6:	18bf      	adds	r7, r7, r2
    2ba8:	e748      	b.n	2a3c <__aeabi_dsub+0x4ac>
    2baa:	2400      	movs	r4, #0
    2bac:	e7d0      	b.n	2b50 <__aeabi_dsub+0x5c0>
    2bae:	2400      	movs	r4, #0
    2bb0:	e7f3      	b.n	2b9a <__aeabi_dsub+0x60a>
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	000007ff 	.word	0x000007ff
    2bb8:	ff7fffff 	.word	0xff7fffff

00002bbc <__aeabi_d2iz>:
    2bbc:	b530      	push	{r4, r5, lr}
    2bbe:	4d13      	ldr	r5, [pc, #76]	; (2c0c <__aeabi_d2iz+0x50>)
    2bc0:	030a      	lsls	r2, r1, #12
    2bc2:	004b      	lsls	r3, r1, #1
    2bc4:	0b12      	lsrs	r2, r2, #12
    2bc6:	0d5b      	lsrs	r3, r3, #21
    2bc8:	0fc9      	lsrs	r1, r1, #31
    2bca:	2400      	movs	r4, #0
    2bcc:	42ab      	cmp	r3, r5
    2bce:	dd10      	ble.n	2bf2 <__aeabi_d2iz+0x36>
    2bd0:	4c0f      	ldr	r4, [pc, #60]	; (2c10 <__aeabi_d2iz+0x54>)
    2bd2:	42a3      	cmp	r3, r4
    2bd4:	dc0f      	bgt.n	2bf6 <__aeabi_d2iz+0x3a>
    2bd6:	2480      	movs	r4, #128	; 0x80
    2bd8:	4d0e      	ldr	r5, [pc, #56]	; (2c14 <__aeabi_d2iz+0x58>)
    2bda:	0364      	lsls	r4, r4, #13
    2bdc:	4322      	orrs	r2, r4
    2bde:	1aed      	subs	r5, r5, r3
    2be0:	2d1f      	cmp	r5, #31
    2be2:	dd0b      	ble.n	2bfc <__aeabi_d2iz+0x40>
    2be4:	480c      	ldr	r0, [pc, #48]	; (2c18 <__aeabi_d2iz+0x5c>)
    2be6:	1ac3      	subs	r3, r0, r3
    2be8:	40da      	lsrs	r2, r3
    2bea:	4254      	negs	r4, r2
    2bec:	2900      	cmp	r1, #0
    2bee:	d100      	bne.n	2bf2 <__aeabi_d2iz+0x36>
    2bf0:	0014      	movs	r4, r2
    2bf2:	0020      	movs	r0, r4
    2bf4:	bd30      	pop	{r4, r5, pc}
    2bf6:	4b09      	ldr	r3, [pc, #36]	; (2c1c <__aeabi_d2iz+0x60>)
    2bf8:	18cc      	adds	r4, r1, r3
    2bfa:	e7fa      	b.n	2bf2 <__aeabi_d2iz+0x36>
    2bfc:	4c08      	ldr	r4, [pc, #32]	; (2c20 <__aeabi_d2iz+0x64>)
    2bfe:	40e8      	lsrs	r0, r5
    2c00:	46a4      	mov	ip, r4
    2c02:	4463      	add	r3, ip
    2c04:	409a      	lsls	r2, r3
    2c06:	4302      	orrs	r2, r0
    2c08:	e7ef      	b.n	2bea <__aeabi_d2iz+0x2e>
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	000003fe 	.word	0x000003fe
    2c10:	0000041d 	.word	0x0000041d
    2c14:	00000433 	.word	0x00000433
    2c18:	00000413 	.word	0x00000413
    2c1c:	7fffffff 	.word	0x7fffffff
    2c20:	fffffbed 	.word	0xfffffbed

00002c24 <__aeabi_ui2d>:
    2c24:	b510      	push	{r4, lr}
    2c26:	1e04      	subs	r4, r0, #0
    2c28:	d028      	beq.n	2c7c <__aeabi_ui2d+0x58>
    2c2a:	f000 f833 	bl	2c94 <__clzsi2>
    2c2e:	4b15      	ldr	r3, [pc, #84]	; (2c84 <__aeabi_ui2d+0x60>)
    2c30:	4a15      	ldr	r2, [pc, #84]	; (2c88 <__aeabi_ui2d+0x64>)
    2c32:	1a1b      	subs	r3, r3, r0
    2c34:	1ad2      	subs	r2, r2, r3
    2c36:	2a1f      	cmp	r2, #31
    2c38:	dd15      	ble.n	2c66 <__aeabi_ui2d+0x42>
    2c3a:	4a14      	ldr	r2, [pc, #80]	; (2c8c <__aeabi_ui2d+0x68>)
    2c3c:	1ad2      	subs	r2, r2, r3
    2c3e:	4094      	lsls	r4, r2
    2c40:	2200      	movs	r2, #0
    2c42:	0324      	lsls	r4, r4, #12
    2c44:	055b      	lsls	r3, r3, #21
    2c46:	0b24      	lsrs	r4, r4, #12
    2c48:	0d5b      	lsrs	r3, r3, #21
    2c4a:	2100      	movs	r1, #0
    2c4c:	0010      	movs	r0, r2
    2c4e:	0324      	lsls	r4, r4, #12
    2c50:	0d0a      	lsrs	r2, r1, #20
    2c52:	0b24      	lsrs	r4, r4, #12
    2c54:	0512      	lsls	r2, r2, #20
    2c56:	4322      	orrs	r2, r4
    2c58:	4c0d      	ldr	r4, [pc, #52]	; (2c90 <__aeabi_ui2d+0x6c>)
    2c5a:	051b      	lsls	r3, r3, #20
    2c5c:	4022      	ands	r2, r4
    2c5e:	4313      	orrs	r3, r2
    2c60:	005b      	lsls	r3, r3, #1
    2c62:	0859      	lsrs	r1, r3, #1
    2c64:	bd10      	pop	{r4, pc}
    2c66:	0021      	movs	r1, r4
    2c68:	4091      	lsls	r1, r2
    2c6a:	000a      	movs	r2, r1
    2c6c:	210b      	movs	r1, #11
    2c6e:	1a08      	subs	r0, r1, r0
    2c70:	40c4      	lsrs	r4, r0
    2c72:	055b      	lsls	r3, r3, #21
    2c74:	0324      	lsls	r4, r4, #12
    2c76:	0b24      	lsrs	r4, r4, #12
    2c78:	0d5b      	lsrs	r3, r3, #21
    2c7a:	e7e6      	b.n	2c4a <__aeabi_ui2d+0x26>
    2c7c:	2300      	movs	r3, #0
    2c7e:	2400      	movs	r4, #0
    2c80:	2200      	movs	r2, #0
    2c82:	e7e2      	b.n	2c4a <__aeabi_ui2d+0x26>
    2c84:	0000041e 	.word	0x0000041e
    2c88:	00000433 	.word	0x00000433
    2c8c:	00000413 	.word	0x00000413
    2c90:	800fffff 	.word	0x800fffff

00002c94 <__clzsi2>:
    2c94:	211c      	movs	r1, #28
    2c96:	2301      	movs	r3, #1
    2c98:	041b      	lsls	r3, r3, #16
    2c9a:	4298      	cmp	r0, r3
    2c9c:	d301      	bcc.n	2ca2 <__clzsi2+0xe>
    2c9e:	0c00      	lsrs	r0, r0, #16
    2ca0:	3910      	subs	r1, #16
    2ca2:	0a1b      	lsrs	r3, r3, #8
    2ca4:	4298      	cmp	r0, r3
    2ca6:	d301      	bcc.n	2cac <__clzsi2+0x18>
    2ca8:	0a00      	lsrs	r0, r0, #8
    2caa:	3908      	subs	r1, #8
    2cac:	091b      	lsrs	r3, r3, #4
    2cae:	4298      	cmp	r0, r3
    2cb0:	d301      	bcc.n	2cb6 <__clzsi2+0x22>
    2cb2:	0900      	lsrs	r0, r0, #4
    2cb4:	3904      	subs	r1, #4
    2cb6:	a202      	add	r2, pc, #8	; (adr r2, 2cc0 <__clzsi2+0x2c>)
    2cb8:	5c10      	ldrb	r0, [r2, r0]
    2cba:	1840      	adds	r0, r0, r1
    2cbc:	4770      	bx	lr
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	02020304 	.word	0x02020304
    2cc4:	01010101 	.word	0x01010101
	...

00002cd0 <__libc_init_array>:
    2cd0:	b570      	push	{r4, r5, r6, lr}
    2cd2:	2600      	movs	r6, #0
    2cd4:	4d0c      	ldr	r5, [pc, #48]	; (2d08 <__libc_init_array+0x38>)
    2cd6:	4c0d      	ldr	r4, [pc, #52]	; (2d0c <__libc_init_array+0x3c>)
    2cd8:	1b64      	subs	r4, r4, r5
    2cda:	10a4      	asrs	r4, r4, #2
    2cdc:	42a6      	cmp	r6, r4
    2cde:	d109      	bne.n	2cf4 <__libc_init_array+0x24>
    2ce0:	2600      	movs	r6, #0
    2ce2:	f000 f889 	bl	2df8 <_init>
    2ce6:	4d0a      	ldr	r5, [pc, #40]	; (2d10 <__libc_init_array+0x40>)
    2ce8:	4c0a      	ldr	r4, [pc, #40]	; (2d14 <__libc_init_array+0x44>)
    2cea:	1b64      	subs	r4, r4, r5
    2cec:	10a4      	asrs	r4, r4, #2
    2cee:	42a6      	cmp	r6, r4
    2cf0:	d105      	bne.n	2cfe <__libc_init_array+0x2e>
    2cf2:	bd70      	pop	{r4, r5, r6, pc}
    2cf4:	00b3      	lsls	r3, r6, #2
    2cf6:	58eb      	ldr	r3, [r5, r3]
    2cf8:	4798      	blx	r3
    2cfa:	3601      	adds	r6, #1
    2cfc:	e7ee      	b.n	2cdc <__libc_init_array+0xc>
    2cfe:	00b3      	lsls	r3, r6, #2
    2d00:	58eb      	ldr	r3, [r5, r3]
    2d02:	4798      	blx	r3
    2d04:	3601      	adds	r6, #1
    2d06:	e7f2      	b.n	2cee <__libc_init_array+0x1e>
    2d08:	00002e04 	.word	0x00002e04
    2d0c:	00002e04 	.word	0x00002e04
    2d10:	00002e04 	.word	0x00002e04
    2d14:	00002e08 	.word	0x00002e08
    2d18:	42000800 	.word	0x42000800
    2d1c:	42000c00 	.word	0x42000c00
    2d20:	42001000 	.word	0x42001000
    2d24:	42001400 	.word	0x42001400
    2d28:	42001800 	.word	0x42001800
    2d2c:	42001c00 	.word	0x42001c00
    2d30:	00000b4a 	.word	0x00000b4a
    2d34:	00000b46 	.word	0x00000b46
    2d38:	00000b46 	.word	0x00000b46
    2d3c:	00000bac 	.word	0x00000bac
    2d40:	00000bac 	.word	0x00000bac
    2d44:	00000b5e 	.word	0x00000b5e
    2d48:	00000b50 	.word	0x00000b50
    2d4c:	00000b64 	.word	0x00000b64
    2d50:	00000b9a 	.word	0x00000b9a
    2d54:	00000c34 	.word	0x00000c34
    2d58:	00000c14 	.word	0x00000c14
    2d5c:	00000c14 	.word	0x00000c14
    2d60:	00000ca0 	.word	0x00000ca0
    2d64:	00000c26 	.word	0x00000c26
    2d68:	00000c42 	.word	0x00000c42
    2d6c:	00000c18 	.word	0x00000c18
    2d70:	00000c50 	.word	0x00000c50
    2d74:	00000c90 	.word	0x00000c90
    2d78:	00001c20 	.word	0x00001c20
    2d7c:	00001c02 	.word	0x00001c02
    2d80:	00001bbc 	.word	0x00001bbc
    2d84:	00001ada 	.word	0x00001ada
    2d88:	00001bbc 	.word	0x00001bbc
    2d8c:	00001bf4 	.word	0x00001bf4
    2d90:	00001bbc 	.word	0x00001bbc
    2d94:	00001ada 	.word	0x00001ada
    2d98:	00001c02 	.word	0x00001c02
    2d9c:	00001c02 	.word	0x00001c02
    2da0:	00001bf4 	.word	0x00001bf4
    2da4:	00001ada 	.word	0x00001ada
    2da8:	00001ad2 	.word	0x00001ad2
    2dac:	00001ad2 	.word	0x00001ad2
    2db0:	00001ad2 	.word	0x00001ad2
    2db4:	00001e38 	.word	0x00001e38
    2db8:	00002280 	.word	0x00002280
    2dbc:	00002140 	.word	0x00002140
    2dc0:	00002140 	.word	0x00002140
    2dc4:	0000213c 	.word	0x0000213c
    2dc8:	00002258 	.word	0x00002258
    2dcc:	00002258 	.word	0x00002258
    2dd0:	0000224a 	.word	0x0000224a
    2dd4:	0000213c 	.word	0x0000213c
    2dd8:	00002258 	.word	0x00002258
    2ddc:	0000224a 	.word	0x0000224a
    2de0:	00002258 	.word	0x00002258
    2de4:	0000213c 	.word	0x0000213c
    2de8:	00002260 	.word	0x00002260
    2dec:	00002260 	.word	0x00002260
    2df0:	00002260 	.word	0x00002260
    2df4:	00002464 	.word	0x00002464

00002df8 <_init>:
    2df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2dfe:	bc08      	pop	{r3}
    2e00:	469e      	mov	lr, r3
    2e02:	4770      	bx	lr

00002e04 <__init_array_start>:
    2e04:	000000dd 	.word	0x000000dd

00002e08 <_fini>:
    2e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e0e:	bc08      	pop	{r3}
    2e10:	469e      	mov	lr, r3
    2e12:	4770      	bx	lr

00002e14 <__fini_array_start>:
    2e14:	000000b5 	.word	0x000000b5
