
initial_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003378  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000028  20000000  00003378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  20000028  000033a0  00020028  2**2
                  ALLOC
  3 .stack        00002000  20000088  00003400  00020028  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e73f  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ab6  00000000  00000000  0003e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003f7d  00000000  00000000  0004129e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000388  00000000  00000000  0004521b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000378  00000000  00000000  000455a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015193  00000000  00000000  0004591b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000948a  00000000  00000000  0005aaae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088298  00000000  00000000  00063f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a08  00000000  00000000  000ec1d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 20 00 20 19 01 00 00 15 01 00 00 15 01 00 00     . . ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000028 	.word	0x20000028
      d4:	00000000 	.word	0x00000000
      d8:	00003378 	.word	0x00003378

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000002c 	.word	0x2000002c
     108:	00003378 	.word	0x00003378
     10c:	00003378 	.word	0x00003378
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00003378 	.word	0x00003378
     1c8:	20000000 	.word	0x20000000
     1cc:	20000028 	.word	0x20000028
     1d0:	20000004 	.word	0x20000004
     1d4:	20000028 	.word	0x20000028
     1d8:	20000088 	.word	0x20000088
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	0000321d 	.word	0x0000321d
     1f8:	000015a1 	.word	0x000015a1

000001fc <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     1fc:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     1fe:	2207      	movs	r2, #7
     200:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     202:	421a      	tst	r2, r3
     204:	d1fc      	bne.n	200 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     206:	4770      	bx	lr

00000208 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     208:	b5f0      	push	{r4, r5, r6, r7, lr}
     20a:	46d6      	mov	lr, sl
     20c:	464f      	mov	r7, r9
     20e:	4646      	mov	r6, r8
     210:	b5c0      	push	{r6, r7, lr}
     212:	b08a      	sub	sp, #40	; 0x28
     214:	0006      	movs	r6, r0
     216:	000f      	movs	r7, r1
     218:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     21a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     21c:	0008      	movs	r0, r1
     21e:	4b97      	ldr	r3, [pc, #604]	; (47c <i2c_master_init+0x274>)
     220:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     222:	4a97      	ldr	r2, [pc, #604]	; (480 <i2c_master_init+0x278>)
     224:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     226:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     228:	2301      	movs	r3, #1
     22a:	40ab      	lsls	r3, r5
     22c:	430b      	orrs	r3, r1
     22e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     230:	a909      	add	r1, sp, #36	; 0x24
     232:	7b23      	ldrb	r3, [r4, #12]
     234:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     236:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     238:	b2c5      	uxtb	r5, r0
     23a:	0028      	movs	r0, r5
     23c:	4b91      	ldr	r3, [pc, #580]	; (484 <i2c_master_init+0x27c>)
     23e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     240:	0028      	movs	r0, r5
     242:	4b91      	ldr	r3, [pc, #580]	; (488 <i2c_master_init+0x280>)
     244:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     246:	7b20      	ldrb	r0, [r4, #12]
     248:	2100      	movs	r1, #0
     24a:	4b90      	ldr	r3, [pc, #576]	; (48c <i2c_master_init+0x284>)
     24c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     24e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     250:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     252:	079b      	lsls	r3, r3, #30
     254:	d505      	bpl.n	262 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     256:	b00a      	add	sp, #40	; 0x28
     258:	bc1c      	pop	{r2, r3, r4}
     25a:	4690      	mov	r8, r2
     25c:	4699      	mov	r9, r3
     25e:	46a2      	mov	sl, r4
     260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     262:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     264:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     266:	07db      	lsls	r3, r3, #31
     268:	d4f5      	bmi.n	256 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     26a:	2314      	movs	r3, #20
     26c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     26e:	6833      	ldr	r3, [r6, #0]
     270:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     272:	0018      	movs	r0, r3
     274:	4b81      	ldr	r3, [pc, #516]	; (47c <i2c_master_init+0x274>)
     276:	4798      	blx	r3
     278:	0005      	movs	r5, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     27a:	2380      	movs	r3, #128	; 0x80
     27c:	aa08      	add	r2, sp, #32
     27e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     280:	2300      	movs	r3, #0
     282:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     284:	2201      	movs	r2, #1
     286:	a908      	add	r1, sp, #32
     288:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     28a:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     28c:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     28e:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     290:	2800      	cmp	r0, #0
     292:	d100      	bne.n	296 <i2c_master_init+0x8e>
     294:	e0af      	b.n	3f6 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     296:	ab08      	add	r3, sp, #32
     298:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     29a:	2302      	movs	r3, #2
     29c:	aa08      	add	r2, sp, #32
     29e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     2a0:	0c00      	lsrs	r0, r0, #16
     2a2:	b2c0      	uxtb	r0, r0
     2a4:	0011      	movs	r1, r2
     2a6:	4b7a      	ldr	r3, [pc, #488]	; (490 <i2c_master_init+0x288>)
     2a8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     2aa:	2f00      	cmp	r7, #0
     2ac:	d100      	bne.n	2b0 <i2c_master_init+0xa8>
     2ae:	e0a7      	b.n	400 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     2b0:	ab08      	add	r3, sp, #32
     2b2:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2b4:	2302      	movs	r3, #2
     2b6:	aa08      	add	r2, sp, #32
     2b8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     2ba:	0c3f      	lsrs	r7, r7, #16
     2bc:	b2f8      	uxtb	r0, r7
     2be:	0011      	movs	r1, r2
     2c0:	4b73      	ldr	r3, [pc, #460]	; (490 <i2c_master_init+0x288>)
     2c2:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     2c4:	8aa3      	ldrh	r3, [r4, #20]
     2c6:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     2c8:	8ae3      	ldrh	r3, [r4, #22]
     2ca:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     2cc:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2ce:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     2d0:	2b00      	cmp	r3, #0
     2d2:	d104      	bne.n	2de <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2d4:	4b6f      	ldr	r3, [pc, #444]	; (494 <i2c_master_init+0x28c>)
     2d6:	789b      	ldrb	r3, [r3, #2]
     2d8:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2da:	0fdb      	lsrs	r3, r3, #31
     2dc:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     2de:	68a1      	ldr	r1, [r4, #8]
     2e0:	6923      	ldr	r3, [r4, #16]
     2e2:	430b      	orrs	r3, r1
     2e4:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     2e6:	2224      	movs	r2, #36	; 0x24
     2e8:	5ca2      	ldrb	r2, [r4, r2]
     2ea:	2a00      	cmp	r2, #0
     2ec:	d002      	beq.n	2f4 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2ee:	2280      	movs	r2, #128	; 0x80
     2f0:	05d2      	lsls	r2, r2, #23
     2f2:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     2f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     2f6:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     2f8:	222c      	movs	r2, #44	; 0x2c
     2fa:	5ca2      	ldrb	r2, [r4, r2]
     2fc:	2a00      	cmp	r2, #0
     2fe:	d103      	bne.n	308 <i2c_master_init+0x100>
     300:	2280      	movs	r2, #128	; 0x80
     302:	0492      	lsls	r2, r2, #18
     304:	4291      	cmp	r1, r2
     306:	d102      	bne.n	30e <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     308:	2280      	movs	r2, #128	; 0x80
     30a:	0512      	lsls	r2, r2, #20
     30c:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     30e:	222d      	movs	r2, #45	; 0x2d
     310:	5ca2      	ldrb	r2, [r4, r2]
     312:	2a00      	cmp	r2, #0
     314:	d002      	beq.n	31c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     316:	2280      	movs	r2, #128	; 0x80
     318:	0412      	lsls	r2, r2, #16
     31a:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     31c:	222e      	movs	r2, #46	; 0x2e
     31e:	5ca2      	ldrb	r2, [r4, r2]
     320:	2a00      	cmp	r2, #0
     322:	d002      	beq.n	32a <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     324:	2280      	movs	r2, #128	; 0x80
     326:	03d2      	lsls	r2, r2, #15
     328:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     32a:	4642      	mov	r2, r8
     32c:	6812      	ldr	r2, [r2, #0]
     32e:	4313      	orrs	r3, r2
     330:	4642      	mov	r2, r8
     332:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     334:	2380      	movs	r3, #128	; 0x80
     336:	005b      	lsls	r3, r3, #1
     338:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     33a:	0028      	movs	r0, r5
     33c:	3014      	adds	r0, #20
     33e:	b2c0      	uxtb	r0, r0
     340:	4b55      	ldr	r3, [pc, #340]	; (498 <i2c_master_init+0x290>)
     342:	4798      	blx	r3
     344:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     346:	23fa      	movs	r3, #250	; 0xfa
     348:	009b      	lsls	r3, r3, #2
     34a:	6822      	ldr	r2, [r4, #0]
     34c:	435a      	muls	r2, r3
     34e:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     350:	6863      	ldr	r3, [r4, #4]
     352:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     354:	4d51      	ldr	r5, [pc, #324]	; (49c <i2c_master_init+0x294>)
     356:	47a8      	blx	r5
     358:	9000      	str	r0, [sp, #0]
     35a:	9101      	str	r1, [sp, #4]
     35c:	464b      	mov	r3, r9
     35e:	0058      	lsls	r0, r3, #1
     360:	47a8      	blx	r5
     362:	9002      	str	r0, [sp, #8]
     364:	9103      	str	r1, [sp, #12]
     366:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     368:	47a8      	blx	r5
     36a:	9004      	str	r0, [sp, #16]
     36c:	9105      	str	r1, [sp, #20]
     36e:	4f4c      	ldr	r7, [pc, #304]	; (4a0 <i2c_master_init+0x298>)
     370:	4a4c      	ldr	r2, [pc, #304]	; (4a4 <i2c_master_init+0x29c>)
     372:	4b4d      	ldr	r3, [pc, #308]	; (4a8 <i2c_master_init+0x2a0>)
     374:	9800      	ldr	r0, [sp, #0]
     376:	9901      	ldr	r1, [sp, #4]
     378:	47b8      	blx	r7
     37a:	0002      	movs	r2, r0
     37c:	000b      	movs	r3, r1
     37e:	9804      	ldr	r0, [sp, #16]
     380:	9905      	ldr	r1, [sp, #20]
     382:	47b8      	blx	r7
     384:	4e49      	ldr	r6, [pc, #292]	; (4ac <i2c_master_init+0x2a4>)
     386:	2200      	movs	r2, #0
     388:	4b49      	ldr	r3, [pc, #292]	; (4b0 <i2c_master_init+0x2a8>)
     38a:	47b0      	blx	r6
     38c:	9004      	str	r0, [sp, #16]
     38e:	9105      	str	r1, [sp, #20]
     390:	4648      	mov	r0, r9
     392:	47a8      	blx	r5
     394:	0002      	movs	r2, r0
     396:	000b      	movs	r3, r1
     398:	9804      	ldr	r0, [sp, #16]
     39a:	9905      	ldr	r1, [sp, #20]
     39c:	47b8      	blx	r7
     39e:	0002      	movs	r2, r0
     3a0:	000b      	movs	r3, r1
     3a2:	4d44      	ldr	r5, [pc, #272]	; (4b4 <i2c_master_init+0x2ac>)
     3a4:	9800      	ldr	r0, [sp, #0]
     3a6:	9901      	ldr	r1, [sp, #4]
     3a8:	47a8      	blx	r5
     3aa:	9a02      	ldr	r2, [sp, #8]
     3ac:	9b03      	ldr	r3, [sp, #12]
     3ae:	47b0      	blx	r6
     3b0:	2200      	movs	r2, #0
     3b2:	4b41      	ldr	r3, [pc, #260]	; (4b8 <i2c_master_init+0x2b0>)
     3b4:	47a8      	blx	r5
     3b6:	9a02      	ldr	r2, [sp, #8]
     3b8:	9b03      	ldr	r3, [sp, #12]
     3ba:	4d40      	ldr	r5, [pc, #256]	; (4bc <i2c_master_init+0x2b4>)
     3bc:	47a8      	blx	r5
     3be:	4b40      	ldr	r3, [pc, #256]	; (4c0 <i2c_master_init+0x2b8>)
     3c0:	4798      	blx	r3
     3c2:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     3c4:	2380      	movs	r3, #128	; 0x80
     3c6:	049b      	lsls	r3, r3, #18
     3c8:	68a2      	ldr	r2, [r4, #8]
     3ca:	429a      	cmp	r2, r3
     3cc:	d01e      	beq.n	40c <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3ce:	0003      	movs	r3, r0
     3d0:	2040      	movs	r0, #64	; 0x40
     3d2:	2dff      	cmp	r5, #255	; 0xff
     3d4:	d900      	bls.n	3d8 <i2c_master_init+0x1d0>
     3d6:	e73e      	b.n	256 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     3d8:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     3da:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3dc:	25ff      	movs	r5, #255	; 0xff
     3de:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3e0:	0624      	lsls	r4, r4, #24
     3e2:	4325      	orrs	r5, r4
     3e4:	0400      	lsls	r0, r0, #16
     3e6:	23ff      	movs	r3, #255	; 0xff
     3e8:	041b      	lsls	r3, r3, #16
     3ea:	4018      	ands	r0, r3
     3ec:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3ee:	4643      	mov	r3, r8
     3f0:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     3f2:	2000      	movs	r0, #0
     3f4:	e72f      	b.n	256 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3f6:	2100      	movs	r1, #0
     3f8:	4640      	mov	r0, r8
     3fa:	4b32      	ldr	r3, [pc, #200]	; (4c4 <i2c_master_init+0x2bc>)
     3fc:	4798      	blx	r3
     3fe:	e74a      	b.n	296 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     400:	2101      	movs	r1, #1
     402:	4640      	mov	r0, r8
     404:	4b2f      	ldr	r3, [pc, #188]	; (4c4 <i2c_master_init+0x2bc>)
     406:	4798      	blx	r3
     408:	0007      	movs	r7, r0
     40a:	e751      	b.n	2b0 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     40c:	26fa      	movs	r6, #250	; 0xfa
     40e:	00b6      	lsls	r6, r6, #2
     410:	4653      	mov	r3, sl
     412:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     414:	9800      	ldr	r0, [sp, #0]
     416:	9901      	ldr	r1, [sp, #4]
     418:	0002      	movs	r2, r0
     41a:	000b      	movs	r3, r1
     41c:	4c23      	ldr	r4, [pc, #140]	; (4ac <i2c_master_init+0x2a4>)
     41e:	47a0      	blx	r4
     420:	9000      	str	r0, [sp, #0]
     422:	9101      	str	r1, [sp, #4]
     424:	0030      	movs	r0, r6
     426:	4b1d      	ldr	r3, [pc, #116]	; (49c <i2c_master_init+0x294>)
     428:	4798      	blx	r3
     42a:	2200      	movs	r2, #0
     42c:	4b26      	ldr	r3, [pc, #152]	; (4c8 <i2c_master_init+0x2c0>)
     42e:	47b8      	blx	r7
     430:	0002      	movs	r2, r0
     432:	000b      	movs	r3, r1
     434:	9800      	ldr	r0, [sp, #0]
     436:	9901      	ldr	r1, [sp, #4]
     438:	4c20      	ldr	r4, [pc, #128]	; (4bc <i2c_master_init+0x2b4>)
     43a:	47a0      	blx	r4
     43c:	2200      	movs	r2, #0
     43e:	4b1e      	ldr	r3, [pc, #120]	; (4b8 <i2c_master_init+0x2b0>)
     440:	4c1c      	ldr	r4, [pc, #112]	; (4b4 <i2c_master_init+0x2ac>)
     442:	47a0      	blx	r4
     444:	4b1e      	ldr	r3, [pc, #120]	; (4c0 <i2c_master_init+0x2b8>)
     446:	4798      	blx	r3
     448:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     44a:	d00c      	beq.n	466 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     44c:	0031      	movs	r1, r6
     44e:	9807      	ldr	r0, [sp, #28]
     450:	4b1e      	ldr	r3, [pc, #120]	; (4cc <i2c_master_init+0x2c4>)
     452:	4798      	blx	r3
     454:	3802      	subs	r0, #2
     456:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     458:	002b      	movs	r3, r5
     45a:	2dff      	cmp	r5, #255	; 0xff
     45c:	d80c      	bhi.n	478 <i2c_master_init+0x270>
     45e:	28ff      	cmp	r0, #255	; 0xff
     460:	d9bc      	bls.n	3dc <i2c_master_init+0x1d4>
     462:	2040      	movs	r0, #64	; 0x40
     464:	e6f7      	b.n	256 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     466:	0071      	lsls	r1, r6, #1
     468:	1e48      	subs	r0, r1, #1
     46a:	9b07      	ldr	r3, [sp, #28]
     46c:	469c      	mov	ip, r3
     46e:	4460      	add	r0, ip
     470:	4b16      	ldr	r3, [pc, #88]	; (4cc <i2c_master_init+0x2c4>)
     472:	4798      	blx	r3
     474:	3801      	subs	r0, #1
     476:	e7ef      	b.n	458 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     478:	2040      	movs	r0, #64	; 0x40
     47a:	e6ec      	b.n	256 <i2c_master_init+0x4e>
     47c:	00000dc1 	.word	0x00000dc1
     480:	40000400 	.word	0x40000400
     484:	00001449 	.word	0x00001449
     488:	000013bd 	.word	0x000013bd
     48c:	00000bfd 	.word	0x00000bfd
     490:	00001541 	.word	0x00001541
     494:	41002000 	.word	0x41002000
     498:	00001465 	.word	0x00001465
     49c:	00003171 	.word	0x00003171
     4a0:	000025dd 	.word	0x000025dd
     4a4:	e826d695 	.word	0xe826d695
     4a8:	3e112e0b 	.word	0x3e112e0b
     4ac:	00001955 	.word	0x00001955
     4b0:	40240000 	.word	0x40240000
     4b4:	00002add 	.word	0x00002add
     4b8:	3ff00000 	.word	0x3ff00000
     4bc:	00001f75 	.word	0x00001f75
     4c0:	00003109 	.word	0x00003109
     4c4:	00000c49 	.word	0x00000c49
     4c8:	40080000 	.word	0x40080000
     4cc:	0000183d 	.word	0x0000183d

000004d0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4d0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     4d2:	7e1a      	ldrb	r2, [r3, #24]
     4d4:	0792      	lsls	r2, r2, #30
     4d6:	d507      	bpl.n	4e8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     4d8:	2202      	movs	r2, #2
     4da:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     4dc:	8b5b      	ldrh	r3, [r3, #26]
     4de:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     4e0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     4e2:	17db      	asrs	r3, r3, #31
     4e4:	4018      	ands	r0, r3
}
     4e6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     4e8:	8b5a      	ldrh	r2, [r3, #26]
     4ea:	0752      	lsls	r2, r2, #29
     4ec:	d506      	bpl.n	4fc <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4ee:	6859      	ldr	r1, [r3, #4]
     4f0:	22c0      	movs	r2, #192	; 0xc0
     4f2:	0292      	lsls	r2, r2, #10
     4f4:	430a      	orrs	r2, r1
     4f6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     4f8:	2018      	movs	r0, #24
     4fa:	e7f4      	b.n	4e6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     4fc:	2000      	movs	r0, #0
     4fe:	e7f2      	b.n	4e6 <_i2c_master_address_response+0x16>

00000500 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     500:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     502:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     504:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     506:	2401      	movs	r4, #1
     508:	2502      	movs	r5, #2
     50a:	7e11      	ldrb	r1, [r2, #24]
     50c:	4221      	tst	r1, r4
     50e:	d10b      	bne.n	528 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     510:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     512:	4229      	tst	r1, r5
     514:	d106      	bne.n	524 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     516:	3301      	adds	r3, #1
     518:	b29b      	uxth	r3, r3
     51a:	8901      	ldrh	r1, [r0, #8]
     51c:	4299      	cmp	r1, r3
     51e:	d8f4      	bhi.n	50a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     520:	2012      	movs	r0, #18
     522:	e002      	b.n	52a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     524:	2000      	movs	r0, #0
     526:	e000      	b.n	52a <_i2c_master_wait_for_bus+0x2a>
     528:	2000      	movs	r0, #0
}
     52a:	bd30      	pop	{r4, r5, pc}

0000052c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     52c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     52e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     530:	6862      	ldr	r2, [r4, #4]
     532:	2380      	movs	r3, #128	; 0x80
     534:	02db      	lsls	r3, r3, #11
     536:	4313      	orrs	r3, r2
     538:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     53a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     53c:	4b02      	ldr	r3, [pc, #8]	; (548 <_i2c_master_send_hs_master_code+0x1c>)
     53e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     540:	2301      	movs	r3, #1
     542:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     544:	bd10      	pop	{r4, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	00000501 	.word	0x00000501

0000054c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     54c:	b5f0      	push	{r4, r5, r6, r7, lr}
     54e:	46de      	mov	lr, fp
     550:	4657      	mov	r7, sl
     552:	464e      	mov	r6, r9
     554:	4645      	mov	r5, r8
     556:	b5e0      	push	{r5, r6, r7, lr}
     558:	b083      	sub	sp, #12
     55a:	0006      	movs	r6, r0
     55c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     55e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     560:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     562:	682b      	ldr	r3, [r5, #0]
     564:	011b      	lsls	r3, r3, #4
     566:	0fdb      	lsrs	r3, r3, #31
     568:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     56a:	7a4b      	ldrb	r3, [r1, #9]
     56c:	2b00      	cmp	r3, #0
     56e:	d12b      	bne.n	5c8 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     570:	686b      	ldr	r3, [r5, #4]
     572:	4a58      	ldr	r2, [pc, #352]	; (6d4 <_i2c_master_read_packet+0x188>)
     574:	4013      	ands	r3, r2
     576:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     578:	464b      	mov	r3, r9
     57a:	7a1b      	ldrb	r3, [r3, #8]
     57c:	2b00      	cmp	r3, #0
     57e:	d127      	bne.n	5d0 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     580:	464b      	mov	r3, r9
     582:	881b      	ldrh	r3, [r3, #0]
     584:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     586:	464a      	mov	r2, r9
     588:	7a52      	ldrb	r2, [r2, #9]
     58a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     58c:	4313      	orrs	r3, r2
     58e:	2201      	movs	r2, #1
     590:	4313      	orrs	r3, r2
     592:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     594:	0030      	movs	r0, r6
     596:	4b50      	ldr	r3, [pc, #320]	; (6d8 <_i2c_master_read_packet+0x18c>)
     598:	4798      	blx	r3
     59a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     59c:	4653      	mov	r3, sl
     59e:	2b00      	cmp	r3, #0
     5a0:	d003      	beq.n	5aa <_i2c_master_read_packet+0x5e>
     5a2:	464b      	mov	r3, r9
     5a4:	885b      	ldrh	r3, [r3, #2]
     5a6:	2b01      	cmp	r3, #1
     5a8:	d03b      	beq.n	622 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     5aa:	686b      	ldr	r3, [r5, #4]
     5ac:	4a49      	ldr	r2, [pc, #292]	; (6d4 <_i2c_master_read_packet+0x188>)
     5ae:	4013      	ands	r3, r2
     5b0:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     5b2:	9b01      	ldr	r3, [sp, #4]
     5b4:	2b00      	cmp	r3, #0
     5b6:	d03a      	beq.n	62e <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     5b8:	9801      	ldr	r0, [sp, #4]
     5ba:	b003      	add	sp, #12
     5bc:	bc3c      	pop	{r2, r3, r4, r5}
     5be:	4690      	mov	r8, r2
     5c0:	4699      	mov	r9, r3
     5c2:	46a2      	mov	sl, r4
     5c4:	46ab      	mov	fp, r5
     5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     5c8:	7a89      	ldrb	r1, [r1, #10]
     5ca:	4b44      	ldr	r3, [pc, #272]	; (6dc <_i2c_master_read_packet+0x190>)
     5cc:	4798      	blx	r3
     5ce:	e7cf      	b.n	570 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     5d0:	464b      	mov	r3, r9
     5d2:	881b      	ldrh	r3, [r3, #0]
     5d4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5d6:	464a      	mov	r2, r9
     5d8:	7a52      	ldrb	r2, [r2, #9]
     5da:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     5dc:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5de:	2280      	movs	r2, #128	; 0x80
     5e0:	0212      	lsls	r2, r2, #8
     5e2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     5e4:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     5e6:	0030      	movs	r0, r6
     5e8:	4b3b      	ldr	r3, [pc, #236]	; (6d8 <_i2c_master_read_packet+0x18c>)
     5ea:	4798      	blx	r3
     5ec:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5ee:	686b      	ldr	r3, [r5, #4]
     5f0:	4a38      	ldr	r2, [pc, #224]	; (6d4 <_i2c_master_read_packet+0x188>)
     5f2:	4013      	ands	r3, r2
     5f4:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     5f6:	2800      	cmp	r0, #0
     5f8:	d1de      	bne.n	5b8 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     5fa:	0030      	movs	r0, r6
     5fc:	4b38      	ldr	r3, [pc, #224]	; (6e0 <_i2c_master_read_packet+0x194>)
     5fe:	4798      	blx	r3
     600:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     602:	2800      	cmp	r0, #0
     604:	d1d8      	bne.n	5b8 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     606:	464b      	mov	r3, r9
     608:	881b      	ldrh	r3, [r3, #0]
     60a:	0a1b      	lsrs	r3, r3, #8
     60c:	2278      	movs	r2, #120	; 0x78
     60e:	4313      	orrs	r3, r2
     610:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     612:	464a      	mov	r2, r9
     614:	7a52      	ldrb	r2, [r2, #9]
     616:	0392      	lsls	r2, r2, #14
     618:	2101      	movs	r1, #1
     61a:	430a      	orrs	r2, r1
     61c:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     61e:	626b      	str	r3, [r5, #36]	; 0x24
     620:	e7b8      	b.n	594 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     622:	686a      	ldr	r2, [r5, #4]
     624:	2380      	movs	r3, #128	; 0x80
     626:	02db      	lsls	r3, r3, #11
     628:	4313      	orrs	r3, r2
     62a:	606b      	str	r3, [r5, #4]
     62c:	e7c1      	b.n	5b2 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     62e:	0030      	movs	r0, r6
     630:	4b2b      	ldr	r3, [pc, #172]	; (6e0 <_i2c_master_read_packet+0x194>)
     632:	4798      	blx	r3
     634:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     636:	2800      	cmp	r0, #0
     638:	d1be      	bne.n	5b8 <_i2c_master_read_packet+0x6c>
     63a:	3c01      	subs	r4, #1
     63c:	b2a4      	uxth	r4, r4
     63e:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     640:	4b28      	ldr	r3, [pc, #160]	; (6e4 <_i2c_master_read_packet+0x198>)
     642:	469b      	mov	fp, r3
     644:	e015      	b.n	672 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     646:	2c01      	cmp	r4, #1
     648:	d020      	beq.n	68c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     64a:	0030      	movs	r0, r6
     64c:	4b26      	ldr	r3, [pc, #152]	; (6e8 <_i2c_master_read_packet+0x19c>)
     64e:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     650:	4643      	mov	r3, r8
     652:	1c5f      	adds	r7, r3, #1
     654:	b2bf      	uxth	r7, r7
     656:	2328      	movs	r3, #40	; 0x28
     658:	5ceb      	ldrb	r3, [r5, r3]
     65a:	464a      	mov	r2, r9
     65c:	6852      	ldr	r2, [r2, #4]
     65e:	4641      	mov	r1, r8
     660:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     662:	0030      	movs	r0, r6
     664:	4b1c      	ldr	r3, [pc, #112]	; (6d8 <_i2c_master_read_packet+0x18c>)
     666:	4798      	blx	r3
     668:	3c01      	subs	r4, #1
     66a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     66c:	2800      	cmp	r0, #0
     66e:	d115      	bne.n	69c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     670:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     672:	455c      	cmp	r4, fp
     674:	d014      	beq.n	6a0 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     676:	8b6b      	ldrh	r3, [r5, #26]
     678:	069b      	lsls	r3, r3, #26
     67a:	d527      	bpl.n	6cc <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     67c:	7af3      	ldrb	r3, [r6, #11]
     67e:	2b00      	cmp	r3, #0
     680:	d0e3      	beq.n	64a <_i2c_master_read_packet+0xfe>
     682:	4653      	mov	r3, sl
     684:	2b00      	cmp	r3, #0
     686:	d1de      	bne.n	646 <_i2c_master_read_packet+0xfa>
     688:	2c00      	cmp	r4, #0
     68a:	d1de      	bne.n	64a <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     68c:	686a      	ldr	r2, [r5, #4]
     68e:	2380      	movs	r3, #128	; 0x80
     690:	02db      	lsls	r3, r3, #11
     692:	4313      	orrs	r3, r2
     694:	606b      	str	r3, [r5, #4]
     696:	3c01      	subs	r4, #1
     698:	b2a4      	uxth	r4, r4
     69a:	e7ea      	b.n	672 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     69c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     69e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     6a0:	7ab3      	ldrb	r3, [r6, #10]
     6a2:	2b00      	cmp	r3, #0
     6a4:	d109      	bne.n	6ba <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     6a6:	0030      	movs	r0, r6
     6a8:	4b0f      	ldr	r3, [pc, #60]	; (6e8 <_i2c_master_read_packet+0x19c>)
     6aa:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     6ac:	2328      	movs	r3, #40	; 0x28
     6ae:	5cea      	ldrb	r2, [r5, r3]
     6b0:	464b      	mov	r3, r9
     6b2:	685b      	ldr	r3, [r3, #4]
     6b4:	4641      	mov	r1, r8
     6b6:	545a      	strb	r2, [r3, r1]
     6b8:	e77e      	b.n	5b8 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     6ba:	0030      	movs	r0, r6
     6bc:	4b0a      	ldr	r3, [pc, #40]	; (6e8 <_i2c_master_read_packet+0x19c>)
     6be:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6c0:	686a      	ldr	r2, [r5, #4]
     6c2:	23c0      	movs	r3, #192	; 0xc0
     6c4:	029b      	lsls	r3, r3, #10
     6c6:	4313      	orrs	r3, r2
     6c8:	606b      	str	r3, [r5, #4]
     6ca:	e7ec      	b.n	6a6 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     6cc:	2341      	movs	r3, #65	; 0x41
     6ce:	9301      	str	r3, [sp, #4]
     6d0:	e772      	b.n	5b8 <_i2c_master_read_packet+0x6c>
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	fffbffff 	.word	0xfffbffff
     6d8:	00000501 	.word	0x00000501
     6dc:	0000052d 	.word	0x0000052d
     6e0:	000004d1 	.word	0x000004d1
     6e4:	0000ffff 	.word	0x0000ffff
     6e8:	000001fd 	.word	0x000001fd

000006ec <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ee:	46de      	mov	lr, fp
     6f0:	4657      	mov	r7, sl
     6f2:	464e      	mov	r6, r9
     6f4:	4645      	mov	r5, r8
     6f6:	b5e0      	push	{r5, r6, r7, lr}
     6f8:	b083      	sub	sp, #12
     6fa:	0006      	movs	r6, r0
     6fc:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6fe:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     700:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     702:	4b32      	ldr	r3, [pc, #200]	; (7cc <_i2c_master_write_packet+0xe0>)
     704:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     706:	7a7b      	ldrb	r3, [r7, #9]
     708:	2b00      	cmp	r3, #0
     70a:	d11d      	bne.n	748 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     70c:	686b      	ldr	r3, [r5, #4]
     70e:	4a30      	ldr	r2, [pc, #192]	; (7d0 <_i2c_master_write_packet+0xe4>)
     710:	4013      	ands	r3, r2
     712:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     714:	7a3b      	ldrb	r3, [r7, #8]
     716:	2b00      	cmp	r3, #0
     718:	d01b      	beq.n	752 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     71a:	883b      	ldrh	r3, [r7, #0]
     71c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     71e:	7a7a      	ldrb	r2, [r7, #9]
     720:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     722:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     724:	2280      	movs	r2, #128	; 0x80
     726:	0212      	lsls	r2, r2, #8
     728:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     72a:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     72c:	0030      	movs	r0, r6
     72e:	4b29      	ldr	r3, [pc, #164]	; (7d4 <_i2c_master_write_packet+0xe8>)
     730:	4798      	blx	r3
     732:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     734:	2800      	cmp	r0, #0
     736:	d013      	beq.n	760 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     738:	9801      	ldr	r0, [sp, #4]
     73a:	b003      	add	sp, #12
     73c:	bc3c      	pop	{r2, r3, r4, r5}
     73e:	4690      	mov	r8, r2
     740:	4699      	mov	r9, r3
     742:	46a2      	mov	sl, r4
     744:	46ab      	mov	fp, r5
     746:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     748:	7ab9      	ldrb	r1, [r7, #10]
     74a:	0030      	movs	r0, r6
     74c:	4b22      	ldr	r3, [pc, #136]	; (7d8 <_i2c_master_write_packet+0xec>)
     74e:	4798      	blx	r3
     750:	e7dc      	b.n	70c <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     752:	883b      	ldrh	r3, [r7, #0]
     754:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     756:	7a7a      	ldrb	r2, [r7, #9]
     758:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     75a:	4313      	orrs	r3, r2
     75c:	626b      	str	r3, [r5, #36]	; 0x24
     75e:	e7e5      	b.n	72c <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     760:	0030      	movs	r0, r6
     762:	4b1e      	ldr	r3, [pc, #120]	; (7dc <_i2c_master_write_packet+0xf0>)
     764:	4798      	blx	r3
     766:	1e03      	subs	r3, r0, #0
     768:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     76a:	d1e5      	bne.n	738 <_i2c_master_write_packet+0x4c>
     76c:	46a0      	mov	r8, r4
     76e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     770:	3320      	adds	r3, #32
     772:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     774:	4b15      	ldr	r3, [pc, #84]	; (7cc <_i2c_master_write_packet+0xe0>)
     776:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     778:	4b16      	ldr	r3, [pc, #88]	; (7d4 <_i2c_master_write_packet+0xe8>)
     77a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     77c:	4544      	cmp	r4, r8
     77e:	d015      	beq.n	7ac <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     780:	8b6b      	ldrh	r3, [r5, #26]
     782:	464a      	mov	r2, r9
     784:	4213      	tst	r3, r2
     786:	d01d      	beq.n	7c4 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     788:	0030      	movs	r0, r6
     78a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	5d1a      	ldrb	r2, [r3, r4]
     790:	2328      	movs	r3, #40	; 0x28
     792:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     794:	0030      	movs	r0, r6
     796:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     798:	2800      	cmp	r0, #0
     79a:	d106      	bne.n	7aa <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     79c:	8b6b      	ldrh	r3, [r5, #26]
     79e:	3401      	adds	r4, #1
     7a0:	075b      	lsls	r3, r3, #29
     7a2:	d5eb      	bpl.n	77c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     7a4:	231e      	movs	r3, #30
     7a6:	9301      	str	r3, [sp, #4]
     7a8:	e000      	b.n	7ac <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     7aa:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     7ac:	7ab3      	ldrb	r3, [r6, #10]
     7ae:	2b00      	cmp	r3, #0
     7b0:	d0c2      	beq.n	738 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     7b2:	0030      	movs	r0, r6
     7b4:	4b05      	ldr	r3, [pc, #20]	; (7cc <_i2c_master_write_packet+0xe0>)
     7b6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7b8:	686a      	ldr	r2, [r5, #4]
     7ba:	23c0      	movs	r3, #192	; 0xc0
     7bc:	029b      	lsls	r3, r3, #10
     7be:	4313      	orrs	r3, r2
     7c0:	606b      	str	r3, [r5, #4]
     7c2:	e7b9      	b.n	738 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     7c4:	2341      	movs	r3, #65	; 0x41
     7c6:	9301      	str	r3, [sp, #4]
     7c8:	e7b6      	b.n	738 <_i2c_master_write_packet+0x4c>
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	000001fd 	.word	0x000001fd
     7d0:	fffbffff 	.word	0xfffbffff
     7d4:	00000501 	.word	0x00000501
     7d8:	0000052d 	.word	0x0000052d
     7dc:	000004d1 	.word	0x000004d1

000007e0 <i2c_master_read_packet_wait>:
{
     7e0:	b510      	push	{r4, lr}
	module->send_stop = true;
     7e2:	2301      	movs	r3, #1
     7e4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7e6:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     7e8:	4b01      	ldr	r3, [pc, #4]	; (7f0 <i2c_master_read_packet_wait+0x10>)
     7ea:	4798      	blx	r3
}
     7ec:	bd10      	pop	{r4, pc}
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	0000054d 	.word	0x0000054d

000007f4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7f4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     7f6:	2301      	movs	r3, #1
     7f8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7fa:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     7fc:	4b01      	ldr	r3, [pc, #4]	; (804 <i2c_master_write_packet_wait+0x10>)
     7fe:	4798      	blx	r3
}
     800:	bd10      	pop	{r4, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	000006ed 	.word	0x000006ed

00000808 <_i2c_slave_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     808:	6801      	ldr	r1, [r0, #0]

	/* Return sync status */
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
     80a:	2203      	movs	r2, #3
     80c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_slave_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_slave_is_syncing(module)) {
     80e:	421a      	tst	r2, r3
     810:	d1fc      	bne.n	80c <_i2c_slave_wait_for_sync+0x4>
		/* Wait for I<SUP>2</SUP>C module to sync */
	}
}
     812:	4770      	bx	lr

00000814 <_i2c_slave_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_slave_wait_for_bus(
		struct i2c_slave_module *const module)
{
     814:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     816:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply */
	uint16_t timeout_counter = 0;
     818:	2300      	movs	r3, #0
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     81a:	2404      	movs	r4, #4
     81c:	2501      	movs	r5, #1
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     81e:	2602      	movs	r6, #2
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     820:	7e11      	ldrb	r1, [r2, #24]
     822:	4221      	tst	r1, r4
     824:	d10e      	bne.n	844 <_i2c_slave_wait_for_bus+0x30>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     826:	7e11      	ldrb	r1, [r2, #24]
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     828:	4229      	tst	r1, r5
     82a:	d10d      	bne.n	848 <_i2c_slave_wait_for_bus+0x34>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH))) {
     82c:	7e11      	ldrb	r1, [r2, #24]
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     82e:	4231      	tst	r1, r6
     830:	d106      	bne.n	840 <_i2c_slave_wait_for_bus+0x2c>

		/* Check timeout condition */
		if (++timeout_counter >= module->buffer_timeout) {
     832:	3301      	adds	r3, #1
     834:	b29b      	uxth	r3, r3
     836:	88c1      	ldrh	r1, [r0, #6]
     838:	4299      	cmp	r1, r3
     83a:	d8f1      	bhi.n	820 <_i2c_slave_wait_for_bus+0xc>
			return STATUS_ERR_TIMEOUT;
     83c:	2012      	movs	r0, #18
     83e:	e002      	b.n	846 <_i2c_slave_wait_for_bus+0x32>
		}
	}
	return STATUS_OK;
     840:	2000      	movs	r0, #0
     842:	e000      	b.n	846 <_i2c_slave_wait_for_bus+0x32>
     844:	2000      	movs	r0, #0
}
     846:	bd70      	pop	{r4, r5, r6, pc}
	return STATUS_OK;
     848:	2000      	movs	r0, #0
     84a:	e7fc      	b.n	846 <_i2c_slave_wait_for_bus+0x32>

0000084c <i2c_slave_init>:
{
     84c:	b5f0      	push	{r4, r5, r6, r7, lr}
     84e:	b085      	sub	sp, #20
     850:	0005      	movs	r5, r0
     852:	000c      	movs	r4, r1
     854:	0016      	movs	r6, r2
	module->hw = hw;
     856:	6029      	str	r1, [r5, #0]
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     858:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     85a:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     85c:	079b      	lsls	r3, r3, #30
     85e:	d501      	bpl.n	864 <i2c_slave_init+0x18>
}
     860:	b005      	add	sp, #20
     862:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     864:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     866:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     868:	07db      	lsls	r3, r3, #31
     86a:	d4f9      	bmi.n	860 <i2c_slave_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     86c:	0008      	movs	r0, r1
     86e:	4b43      	ldr	r3, [pc, #268]	; (97c <i2c_slave_init+0x130>)
     870:	4798      	blx	r3
     872:	4b43      	ldr	r3, [pc, #268]	; (980 <i2c_slave_init+0x134>)
     874:	469c      	mov	ip, r3
     876:	6a19      	ldr	r1, [r3, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     878:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     87a:	2701      	movs	r7, #1
     87c:	003a      	movs	r2, r7
     87e:	409a      	lsls	r2, r3
     880:	0013      	movs	r3, r2
     882:	430b      	orrs	r3, r1
     884:	4662      	mov	r2, ip
     886:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     888:	a903      	add	r1, sp, #12
     88a:	7e33      	ldrb	r3, [r6, #24]
     88c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     88e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     890:	b2c3      	uxtb	r3, r0
     892:	9301      	str	r3, [sp, #4]
     894:	0018      	movs	r0, r3
     896:	4b3b      	ldr	r3, [pc, #236]	; (984 <i2c_slave_init+0x138>)
     898:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     89a:	9801      	ldr	r0, [sp, #4]
     89c:	4b3a      	ldr	r3, [pc, #232]	; (988 <i2c_slave_init+0x13c>)
     89e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8a0:	7e30      	ldrb	r0, [r6, #24]
     8a2:	2100      	movs	r1, #0
     8a4:	4b39      	ldr	r3, [pc, #228]	; (98c <i2c_slave_init+0x140>)
     8a6:	4798      	blx	r3
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     8a8:	2310      	movs	r3, #16
     8aa:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     8ac:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     8ae:	8933      	ldrh	r3, [r6, #8]
     8b0:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     8b2:	7c33      	ldrb	r3, [r6, #16]
     8b4:	722b      	strb	r3, [r5, #8]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8b6:	2380      	movs	r3, #128	; 0x80
     8b8:	aa02      	add	r2, sp, #8
     8ba:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8bc:	2300      	movs	r3, #0
     8be:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8c0:	7097      	strb	r7, [r2, #2]
	config->powersave    = false;
     8c2:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     8c4:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     8c6:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     8c8:	2800      	cmp	r0, #0
     8ca:	d04b      	beq.n	964 <i2c_slave_init+0x118>
	pin_conf.mux_position = pad0 & 0xFFFF;
     8cc:	ab02      	add	r3, sp, #8
     8ce:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     8d0:	2302      	movs	r3, #2
     8d2:	aa02      	add	r2, sp, #8
     8d4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     8d6:	0c00      	lsrs	r0, r0, #16
     8d8:	b2c0      	uxtb	r0, r0
     8da:	0011      	movs	r1, r2
     8dc:	4b2c      	ldr	r3, [pc, #176]	; (990 <i2c_slave_init+0x144>)
     8de:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     8e0:	2d00      	cmp	r5, #0
     8e2:	d044      	beq.n	96e <i2c_slave_init+0x122>
	pin_conf.mux_position = pad1 & 0xFFFF;
     8e4:	ab02      	add	r3, sp, #8
     8e6:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     8e8:	2302      	movs	r3, #2
     8ea:	aa02      	add	r2, sp, #8
     8ec:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     8ee:	0c2d      	lsrs	r5, r5, #16
     8f0:	b2e8      	uxtb	r0, r5
     8f2:	0011      	movs	r1, r2
     8f4:	4b26      	ldr	r3, [pc, #152]	; (990 <i2c_slave_init+0x144>)
     8f6:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     8f8:	7e73      	ldrb	r3, [r6, #25]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     8fa:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     8fc:	2b00      	cmp	r3, #0
     8fe:	d104      	bne.n	90a <i2c_slave_init+0xbe>
     900:	4b24      	ldr	r3, [pc, #144]	; (994 <i2c_slave_init+0x148>)
     902:	789b      	ldrb	r3, [r3, #2]
     904:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     906:	0fdb      	lsrs	r3, r3, #31
     908:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     90a:	2325      	movs	r3, #37	; 0x25
     90c:	5cf3      	ldrb	r3, [r6, r3]
     90e:	2b00      	cmp	r3, #0
     910:	d104      	bne.n	91c <i2c_slave_init+0xd0>
     912:	2380      	movs	r3, #128	; 0x80
     914:	049b      	lsls	r3, r3, #18
     916:	6971      	ldr	r1, [r6, #20]
     918:	4299      	cmp	r1, r3
     91a:	d102      	bne.n	922 <i2c_slave_init+0xd6>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     91c:	2380      	movs	r3, #128	; 0x80
     91e:	051b      	lsls	r3, r3, #20
     920:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     922:	6820      	ldr	r0, [r4, #0]
     924:	6873      	ldr	r3, [r6, #4]
     926:	6971      	ldr	r1, [r6, #20]
     928:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     92a:	2124      	movs	r1, #36	; 0x24
     92c:	5c71      	ldrb	r1, [r6, r1]
     92e:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     930:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     932:	2126      	movs	r1, #38	; 0x26
     934:	5c71      	ldrb	r1, [r6, r1]
     936:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     938:	430b      	orrs	r3, r1
     93a:	4303      	orrs	r3, r0
     93c:	4313      	orrs	r3, r2
     93e:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     940:	8972      	ldrh	r2, [r6, #10]
     942:	2380      	movs	r3, #128	; 0x80
     944:	005b      	lsls	r3, r3, #1
     946:	4313      	orrs	r3, r2
     948:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     94a:	89b3      	ldrh	r3, [r6, #12]
     94c:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     94e:	89f2      	ldrh	r2, [r6, #14]
     950:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     952:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     954:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     956:	4313      	orrs	r3, r2
     958:	7c32      	ldrb	r2, [r6, #16]
     95a:	03d2      	lsls	r2, r2, #15
     95c:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     95e:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     960:	2000      	movs	r0, #0
     962:	e77d      	b.n	860 <i2c_slave_init+0x14>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     964:	2100      	movs	r1, #0
     966:	0020      	movs	r0, r4
     968:	4b0b      	ldr	r3, [pc, #44]	; (998 <i2c_slave_init+0x14c>)
     96a:	4798      	blx	r3
     96c:	e7ae      	b.n	8cc <i2c_slave_init+0x80>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     96e:	2101      	movs	r1, #1
     970:	0020      	movs	r0, r4
     972:	4b09      	ldr	r3, [pc, #36]	; (998 <i2c_slave_init+0x14c>)
     974:	4798      	blx	r3
     976:	0005      	movs	r5, r0
     978:	e7b4      	b.n	8e4 <i2c_slave_init+0x98>
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	00000dc1 	.word	0x00000dc1
     980:	40000400 	.word	0x40000400
     984:	00001449 	.word	0x00001449
     988:	000013bd 	.word	0x000013bd
     98c:	00000bfd 	.word	0x00000bfd
     990:	00001541 	.word	0x00001541
     994:	41002000 	.word	0x41002000
     998:	00000c49 	.word	0x00000c49

0000099c <i2c_slave_write_packet_wait>:
 *                                  period
 */
enum status_code i2c_slave_write_packet_wait(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
     99c:	b5f0      	push	{r4, r5, r6, r7, lr}
     99e:	46de      	mov	lr, fp
     9a0:	4657      	mov	r7, sl
     9a2:	464e      	mov	r6, r9
     9a4:	4645      	mov	r5, r8
     9a6:	b5e0      	push	{r5, r6, r7, lr}
     9a8:	b083      	sub	sp, #12
     9aa:	0006      	movs	r6, r0
     9ac:	000d      	movs	r5, r1
	Assert(module->hw);
	Assert(packet);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	uint16_t length = packet->data_length;
     9ae:	880c      	ldrh	r4, [r1, #0]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     9b0:	2017      	movs	r0, #23
	if (length == 0) {
     9b2:	2c00      	cmp	r4, #0
     9b4:	d106      	bne.n	9c4 <i2c_slave_write_packet_wait+0x28>

	/* Release line */
	i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x02);

	return STATUS_OK;
}
     9b6:	b003      	add	sp, #12
     9b8:	bc3c      	pop	{r2, r3, r4, r5}
     9ba:	4690      	mov	r8, r2
     9bc:	4699      	mov	r9, r3
     9be:	46a2      	mov	sl, r4
     9c0:	46ab      	mov	fp, r5
     9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     9c4:	6837      	ldr	r7, [r6, #0]
	status = _i2c_slave_wait_for_bus(module);
     9c6:	0030      	movs	r0, r6
     9c8:	4b3a      	ldr	r3, [pc, #232]	; (ab4 <i2c_slave_write_packet_wait+0x118>)
     9ca:	4798      	blx	r3
	if (status != STATUS_OK) {
     9cc:	2800      	cmp	r0, #0
     9ce:	d1f2      	bne.n	9b6 <i2c_slave_write_packet_wait+0x1a>
	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     9d0:	7e3b      	ldrb	r3, [r7, #24]
		return STATUS_ERR_DENIED;
     9d2:	301c      	adds	r0, #28
	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     9d4:	079b      	lsls	r3, r3, #30
     9d6:	d5ee      	bpl.n	9b6 <i2c_slave_write_packet_wait+0x1a>
	if (module->ten_bit_address) {
     9d8:	7a33      	ldrb	r3, [r6, #8]
     9da:	2b00      	cmp	r3, #0
     9dc:	d113      	bne.n	a06 <i2c_slave_write_packet_wait+0x6a>
	if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     9de:	8b7a      	ldrh	r2, [r7, #26]
     9e0:	2343      	movs	r3, #67	; 0x43
		return STATUS_ERR_IO;
     9e2:	2010      	movs	r0, #16
	if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     9e4:	421a      	tst	r2, r3
     9e6:	d1e6      	bne.n	9b6 <i2c_slave_write_packet_wait+0x1a>
	if (!(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR)) {
     9e8:	8b7b      	ldrh	r3, [r7, #26]
     9ea:	071b      	lsls	r3, r3, #28
     9ec:	d420      	bmi.n	a30 <i2c_slave_write_packet_wait+0x94>
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     9ee:	687a      	ldr	r2, [r7, #4]
     9f0:	2380      	movs	r3, #128	; 0x80
     9f2:	02db      	lsls	r3, r3, #11
     9f4:	4313      	orrs	r3, r2
     9f6:	607b      	str	r3, [r7, #4]
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
     9f8:	687a      	ldr	r2, [r7, #4]
     9fa:	23c0      	movs	r3, #192	; 0xc0
     9fc:	029b      	lsls	r3, r3, #10
     9fe:	4313      	orrs	r3, r2
     a00:	607b      	str	r3, [r7, #4]
		return STATUS_ERR_BAD_FORMAT;
     a02:	300a      	adds	r0, #10
     a04:	e7d7      	b.n	9b6 <i2c_slave_write_packet_wait+0x1a>
		i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
     a06:	687b      	ldr	r3, [r7, #4]
     a08:	4a2b      	ldr	r2, [pc, #172]	; (ab8 <i2c_slave_write_packet_wait+0x11c>)
     a0a:	4013      	ands	r3, r2
     a0c:	607b      	str	r3, [r7, #4]
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
     a0e:	687a      	ldr	r2, [r7, #4]
     a10:	23c0      	movs	r3, #192	; 0xc0
     a12:	029b      	lsls	r3, r3, #10
     a14:	4313      	orrs	r3, r2
     a16:	607b      	str	r3, [r7, #4]
		status = _i2c_slave_wait_for_bus(module);
     a18:	0030      	movs	r0, r6
     a1a:	4b26      	ldr	r3, [pc, #152]	; (ab4 <i2c_slave_write_packet_wait+0x118>)
     a1c:	4798      	blx	r3
     a1e:	0003      	movs	r3, r0
			return STATUS_ERR_TIMEOUT;
     a20:	2012      	movs	r0, #18
		if (status != STATUS_OK) {
     a22:	2b00      	cmp	r3, #0
     a24:	d1c7      	bne.n	9b6 <i2c_slave_write_packet_wait+0x1a>
		if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     a26:	7e3b      	ldrb	r3, [r7, #24]
			return STATUS_ERR_DENIED;
     a28:	300a      	adds	r0, #10
		if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     a2a:	079b      	lsls	r3, r3, #30
     a2c:	d5c3      	bpl.n	9b6 <i2c_slave_write_packet_wait+0x1a>
     a2e:	e7d6      	b.n	9de <i2c_slave_write_packet_wait+0x42>
	i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	4a21      	ldr	r2, [pc, #132]	; (ab8 <i2c_slave_write_packet_wait+0x11c>)
     a34:	4013      	ands	r3, r2
     a36:	607b      	str	r3, [r7, #4]
	i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
     a38:	687a      	ldr	r2, [r7, #4]
     a3a:	23c0      	movs	r3, #192	; 0xc0
     a3c:	029b      	lsls	r3, r3, #10
     a3e:	4313      	orrs	r3, r2
     a40:	607b      	str	r3, [r7, #4]
	status = _i2c_slave_wait_for_bus(module);
     a42:	0030      	movs	r0, r6
     a44:	4b1b      	ldr	r3, [pc, #108]	; (ab4 <i2c_slave_write_packet_wait+0x118>)
     a46:	4798      	blx	r3
	if (status != STATUS_OK) {
     a48:	2800      	cmp	r0, #0
     a4a:	d1b4      	bne.n	9b6 <i2c_slave_write_packet_wait+0x1a>
	while (length--) {
     a4c:	3c01      	subs	r4, #1
     a4e:	b2a4      	uxth	r4, r4
     a50:	2300      	movs	r3, #0
     a52:	4699      	mov	r9, r3
		_i2c_slave_wait_for_sync(module);
     a54:	4b19      	ldr	r3, [pc, #100]	; (abc <i2c_slave_write_packet_wait+0x120>)
     a56:	469b      	mov	fp, r3
		i2c_hw->DATA.reg = packet->data[i++];
     a58:	2328      	movs	r3, #40	; 0x28
     a5a:	4698      	mov	r8, r3
		status = _i2c_slave_wait_for_bus(module);
     a5c:	4b15      	ldr	r3, [pc, #84]	; (ab4 <i2c_slave_write_packet_wait+0x118>)
     a5e:	469a      	mov	sl, r3
     a60:	e00d      	b.n	a7e <i2c_slave_write_packet_wait+0xe2>
			i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x02);
     a62:	687a      	ldr	r2, [r7, #4]
     a64:	2380      	movs	r3, #128	; 0x80
     a66:	029b      	lsls	r3, r3, #10
     a68:	4313      	orrs	r3, r2
     a6a:	607b      	str	r3, [r7, #4]
			return STATUS_ERR_OVERFLOW;
     a6c:	301e      	adds	r0, #30
     a6e:	e7a2      	b.n	9b6 <i2c_slave_write_packet_wait+0x1a>
	while (length--) {
     a70:	1e63      	subs	r3, r4, #1
     a72:	b29b      	uxth	r3, r3
     a74:	9a01      	ldr	r2, [sp, #4]
     a76:	4691      	mov	r9, r2
     a78:	2c00      	cmp	r4, #0
     a7a:	d015      	beq.n	aa8 <i2c_slave_write_packet_wait+0x10c>
     a7c:	001c      	movs	r4, r3
		_i2c_slave_wait_for_sync(module);
     a7e:	0030      	movs	r0, r6
     a80:	47d8      	blx	fp
		i2c_hw->DATA.reg = packet->data[i++];
     a82:	464b      	mov	r3, r9
     a84:	3301      	adds	r3, #1
     a86:	b29b      	uxth	r3, r3
     a88:	9301      	str	r3, [sp, #4]
     a8a:	686b      	ldr	r3, [r5, #4]
     a8c:	464a      	mov	r2, r9
     a8e:	5c9b      	ldrb	r3, [r3, r2]
     a90:	4642      	mov	r2, r8
     a92:	54bb      	strb	r3, [r7, r2]
		status = _i2c_slave_wait_for_bus(module);
     a94:	0030      	movs	r0, r6
     a96:	47d0      	blx	sl
		if (status != STATUS_OK) {
     a98:	2800      	cmp	r0, #0
     a9a:	d000      	beq.n	a9e <i2c_slave_write_packet_wait+0x102>
     a9c:	e78b      	b.n	9b6 <i2c_slave_write_packet_wait+0x1a>
		if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK &&
     a9e:	8b7b      	ldrh	r3, [r7, #26]
     aa0:	075b      	lsls	r3, r3, #29
     aa2:	d5e5      	bpl.n	a70 <i2c_slave_write_packet_wait+0xd4>
     aa4:	2c00      	cmp	r4, #0
     aa6:	d1dc      	bne.n	a62 <i2c_slave_write_packet_wait+0xc6>
	i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x02);
     aa8:	687a      	ldr	r2, [r7, #4]
     aaa:	2380      	movs	r3, #128	; 0x80
     aac:	029b      	lsls	r3, r3, #10
     aae:	4313      	orrs	r3, r2
     ab0:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
     ab2:	e780      	b.n	9b6 <i2c_slave_write_packet_wait+0x1a>
     ab4:	00000815 	.word	0x00000815
     ab8:	fffbffff 	.word	0xfffbffff
     abc:	00000809 	.word	0x00000809

00000ac0 <i2c_slave_read_packet_wait>:
 * \retval STATUS_ERR_ERR_OVERFLOW  Last byte received overflows buffer
 */
enum status_code i2c_slave_read_packet_wait(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
     ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ac2:	46de      	mov	lr, fp
     ac4:	4657      	mov	r7, sl
     ac6:	464e      	mov	r6, r9
     ac8:	4645      	mov	r5, r8
     aca:	b5e0      	push	{r5, r6, r7, lr}
     acc:	0007      	movs	r7, r0
     ace:	000e      	movs	r6, r1
	Assert(module->hw);
	Assert(packet);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	uint16_t length = packet->data_length;
     ad0:	880d      	ldrh	r5, [r1, #0]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ad2:	2417      	movs	r4, #23
	if (length == 0) {
     ad4:	2d00      	cmp	r5, #0
     ad6:	d106      	bne.n	ae6 <i2c_slave_read_packet_wait+0x26>
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
		/* Clear stop flag */
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
	}
	return STATUS_OK;
}
     ad8:	0020      	movs	r0, r4
     ada:	bc3c      	pop	{r2, r3, r4, r5}
     adc:	4690      	mov	r8, r2
     ade:	4699      	mov	r9, r3
     ae0:	46a2      	mov	sl, r4
     ae2:	46ab      	mov	fp, r5
     ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ae6:	6803      	ldr	r3, [r0, #0]
     ae8:	4698      	mov	r8, r3
	status = _i2c_slave_wait_for_bus(module);
     aea:	4b38      	ldr	r3, [pc, #224]	; (bcc <i2c_slave_read_packet_wait+0x10c>)
     aec:	4798      	blx	r3
     aee:	1e04      	subs	r4, r0, #0
	if (status != STATUS_OK) {
     af0:	d1f2      	bne.n	ad8 <i2c_slave_read_packet_wait+0x18>
	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     af2:	4643      	mov	r3, r8
     af4:	7e1b      	ldrb	r3, [r3, #24]
		return STATUS_ERR_DENIED;
     af6:	341c      	adds	r4, #28
	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     af8:	079b      	lsls	r3, r3, #30
     afa:	d5ed      	bpl.n	ad8 <i2c_slave_read_packet_wait+0x18>
	if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     afc:	4643      	mov	r3, r8
     afe:	8b5a      	ldrh	r2, [r3, #26]
     b00:	2343      	movs	r3, #67	; 0x43
		return STATUS_ERR_IO;
     b02:	3c0c      	subs	r4, #12
	if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     b04:	421a      	tst	r2, r3
     b06:	d1e7      	bne.n	ad8 <i2c_slave_read_packet_wait+0x18>
	if ((i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR)) {
     b08:	4643      	mov	r3, r8
     b0a:	8b5b      	ldrh	r3, [r3, #26]
     b0c:	071b      	lsls	r3, r3, #28
     b0e:	d50e      	bpl.n	b2e <i2c_slave_read_packet_wait+0x6e>
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     b10:	4643      	mov	r3, r8
     b12:	685a      	ldr	r2, [r3, #4]
     b14:	2380      	movs	r3, #128	; 0x80
     b16:	02db      	lsls	r3, r3, #11
     b18:	4313      	orrs	r3, r2
     b1a:	4642      	mov	r2, r8
     b1c:	6053      	str	r3, [r2, #4]
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
     b1e:	6852      	ldr	r2, [r2, #4]
     b20:	23c0      	movs	r3, #192	; 0xc0
     b22:	029b      	lsls	r3, r3, #10
     b24:	4313      	orrs	r3, r2
     b26:	4642      	mov	r2, r8
     b28:	6053      	str	r3, [r2, #4]
		return STATUS_ERR_BAD_FORMAT;
     b2a:	340a      	adds	r4, #10
     b2c:	e7d4      	b.n	ad8 <i2c_slave_read_packet_wait+0x18>
	i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
     b2e:	4643      	mov	r3, r8
     b30:	685b      	ldr	r3, [r3, #4]
     b32:	4a27      	ldr	r2, [pc, #156]	; (bd0 <i2c_slave_read_packet_wait+0x110>)
     b34:	4013      	ands	r3, r2
     b36:	4642      	mov	r2, r8
     b38:	6053      	str	r3, [r2, #4]
	i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
     b3a:	6852      	ldr	r2, [r2, #4]
     b3c:	23c0      	movs	r3, #192	; 0xc0
     b3e:	029b      	lsls	r3, r3, #10
     b40:	4313      	orrs	r3, r2
     b42:	4642      	mov	r2, r8
     b44:	6053      	str	r3, [r2, #4]
	while (length--) {
     b46:	3d01      	subs	r5, #1
     b48:	b2ad      	uxth	r5, r5
     b4a:	1c6b      	adds	r3, r5, #1
     b4c:	4699      	mov	r9, r3
     b4e:	2500      	movs	r5, #0
		status = _i2c_slave_wait_for_bus(module);
     b50:	4b1e      	ldr	r3, [pc, #120]	; (bcc <i2c_slave_read_packet_wait+0x10c>)
     b52:	469a      	mov	sl, r3
		if ((i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
     b54:	2301      	movs	r3, #1
     b56:	469b      	mov	fp, r3
		status = _i2c_slave_wait_for_bus(module);
     b58:	0038      	movs	r0, r7
     b5a:	47d0      	blx	sl
     b5c:	1e04      	subs	r4, r0, #0
		if (status != STATUS_OK) {
     b5e:	d1bb      	bne.n	ad8 <i2c_slave_read_packet_wait+0x18>
		if ((i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
     b60:	4643      	mov	r3, r8
     b62:	7e1b      	ldrb	r3, [r3, #24]
     b64:	465a      	mov	r2, fp
     b66:	4213      	tst	r3, r2
     b68:	d12b      	bne.n	bc2 <i2c_slave_read_packet_wait+0x102>
				i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     b6a:	4643      	mov	r3, r8
     b6c:	7e1b      	ldrb	r3, [r3, #24]
		if ((i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
     b6e:	079b      	lsls	r3, r3, #30
     b70:	d427      	bmi.n	bc2 <i2c_slave_read_packet_wait+0x102>
		_i2c_slave_wait_for_sync(module);
     b72:	0038      	movs	r0, r7
     b74:	4b17      	ldr	r3, [pc, #92]	; (bd4 <i2c_slave_read_packet_wait+0x114>)
     b76:	4798      	blx	r3
		packet->data[i++] = i2c_hw->DATA.reg;
     b78:	2328      	movs	r3, #40	; 0x28
     b7a:	4642      	mov	r2, r8
     b7c:	5cd3      	ldrb	r3, [r2, r3]
     b7e:	6872      	ldr	r2, [r6, #4]
     b80:	5553      	strb	r3, [r2, r5]
     b82:	3501      	adds	r5, #1
	while (length--) {
     b84:	454d      	cmp	r5, r9
     b86:	d1e7      	bne.n	b58 <i2c_slave_read_packet_wait+0x98>
	status = _i2c_slave_wait_for_bus(module);
     b88:	0038      	movs	r0, r7
     b8a:	4b10      	ldr	r3, [pc, #64]	; (bcc <i2c_slave_read_packet_wait+0x10c>)
     b8c:	4798      	blx	r3
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     b8e:	4643      	mov	r3, r8
     b90:	7e1b      	ldrb	r3, [r3, #24]
     b92:	075b      	lsls	r3, r3, #29
     b94:	d50c      	bpl.n	bb0 <i2c_slave_read_packet_wait+0xf0>
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     b96:	4643      	mov	r3, r8
     b98:	685a      	ldr	r2, [r3, #4]
     b9a:	2380      	movs	r3, #128	; 0x80
     b9c:	02db      	lsls	r3, r3, #11
     b9e:	4313      	orrs	r3, r2
     ba0:	4642      	mov	r2, r8
     ba2:	6053      	str	r3, [r2, #4]
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     ba4:	6852      	ldr	r2, [r2, #4]
     ba6:	2380      	movs	r3, #128	; 0x80
     ba8:	029b      	lsls	r3, r3, #10
     baa:	4313      	orrs	r3, r2
     bac:	4642      	mov	r2, r8
     bae:	6053      	str	r3, [r2, #4]
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     bb0:	4643      	mov	r3, r8
     bb2:	7e1b      	ldrb	r3, [r3, #24]
     bb4:	07db      	lsls	r3, r3, #31
     bb6:	d400      	bmi.n	bba <i2c_slave_read_packet_wait+0xfa>
     bb8:	e78e      	b.n	ad8 <i2c_slave_read_packet_wait+0x18>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     bba:	2301      	movs	r3, #1
     bbc:	4642      	mov	r2, r8
     bbe:	7613      	strb	r3, [r2, #24]
     bc0:	e78a      	b.n	ad8 <i2c_slave_read_packet_wait+0x18>
			i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     bc2:	2301      	movs	r3, #1
     bc4:	4642      	mov	r2, r8
     bc6:	7613      	strb	r3, [r2, #24]
			return STATUS_ABORTED;
     bc8:	2404      	movs	r4, #4
     bca:	e785      	b.n	ad8 <i2c_slave_read_packet_wait+0x18>
     bcc:	00000815 	.word	0x00000815
     bd0:	fffbffff 	.word	0xfffbffff
     bd4:	00000809 	.word	0x00000809

00000bd8 <i2c_slave_get_direction_wait>:
 * \retval I2C_SLAVE_DIRECTION_READ   Write request from master
 * \retval I2C_SLAVE_DIRECTION_WRITE  Read request from master
 */
enum i2c_slave_direction i2c_slave_get_direction_wait(
		struct i2c_slave_module *const module)
{
     bd8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     bda:	6804      	ldr	r4, [r0, #0]

	enum status_code status;

	/* Wait for address interrupt */
	status = _i2c_slave_wait_for_bus(module);
     bdc:	4b06      	ldr	r3, [pc, #24]	; (bf8 <i2c_slave_get_direction_wait+0x20>)
     bde:	4798      	blx	r3

	if (status != STATUS_OK) {
		/* Timeout, return */
		return I2C_SLAVE_DIRECTION_NONE;
     be0:	2302      	movs	r3, #2
	if (status != STATUS_OK) {
     be2:	2800      	cmp	r0, #0
     be4:	d001      	beq.n	bea <i2c_slave_get_direction_wait+0x12>
		return I2C_SLAVE_DIRECTION_WRITE;
	} else {
		/* Write request from master */
		return I2C_SLAVE_DIRECTION_READ;
	}
}
     be6:	0018      	movs	r0, r3
     be8:	bd10      	pop	{r4, pc}
	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     bea:	7e22      	ldrb	r2, [r4, #24]
     bec:	0792      	lsls	r2, r2, #30
     bee:	d5fa      	bpl.n	be6 <i2c_slave_get_direction_wait+0xe>
	if ((i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR)) {
     bf0:	8b63      	ldrh	r3, [r4, #26]
     bf2:	071b      	lsls	r3, r3, #28
		return I2C_SLAVE_DIRECTION_NONE;
     bf4:	0fdb      	lsrs	r3, r3, #31
     bf6:	e7f6      	b.n	be6 <i2c_slave_get_direction_wait+0xe>
     bf8:	00000815 	.word	0x00000815

00000bfc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     bfc:	b510      	push	{r4, lr}
     bfe:	b082      	sub	sp, #8
     c00:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c02:	4b0e      	ldr	r3, [pc, #56]	; (c3c <sercom_set_gclk_generator+0x40>)
     c04:	781b      	ldrb	r3, [r3, #0]
     c06:	2b00      	cmp	r3, #0
     c08:	d007      	beq.n	c1a <sercom_set_gclk_generator+0x1e>
     c0a:	2900      	cmp	r1, #0
     c0c:	d105      	bne.n	c1a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     c0e:	4b0b      	ldr	r3, [pc, #44]	; (c3c <sercom_set_gclk_generator+0x40>)
     c10:	785b      	ldrb	r3, [r3, #1]
     c12:	4283      	cmp	r3, r0
     c14:	d010      	beq.n	c38 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c16:	201d      	movs	r0, #29
     c18:	e00c      	b.n	c34 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     c1a:	a901      	add	r1, sp, #4
     c1c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c1e:	2013      	movs	r0, #19
     c20:	4b07      	ldr	r3, [pc, #28]	; (c40 <sercom_set_gclk_generator+0x44>)
     c22:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c24:	2013      	movs	r0, #19
     c26:	4b07      	ldr	r3, [pc, #28]	; (c44 <sercom_set_gclk_generator+0x48>)
     c28:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     c2a:	4b04      	ldr	r3, [pc, #16]	; (c3c <sercom_set_gclk_generator+0x40>)
     c2c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c2e:	2201      	movs	r2, #1
     c30:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     c32:	2000      	movs	r0, #0
}
     c34:	b002      	add	sp, #8
     c36:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     c38:	2000      	movs	r0, #0
     c3a:	e7fb      	b.n	c34 <sercom_set_gclk_generator+0x38>
     c3c:	20000044 	.word	0x20000044
     c40:	00001449 	.word	0x00001449
     c44:	000013bd 	.word	0x000013bd

00000c48 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c48:	4b40      	ldr	r3, [pc, #256]	; (d4c <_sercom_get_default_pad+0x104>)
     c4a:	4298      	cmp	r0, r3
     c4c:	d031      	beq.n	cb2 <_sercom_get_default_pad+0x6a>
     c4e:	d90a      	bls.n	c66 <_sercom_get_default_pad+0x1e>
     c50:	4b3f      	ldr	r3, [pc, #252]	; (d50 <_sercom_get_default_pad+0x108>)
     c52:	4298      	cmp	r0, r3
     c54:	d04d      	beq.n	cf2 <_sercom_get_default_pad+0xaa>
     c56:	4b3f      	ldr	r3, [pc, #252]	; (d54 <_sercom_get_default_pad+0x10c>)
     c58:	4298      	cmp	r0, r3
     c5a:	d05a      	beq.n	d12 <_sercom_get_default_pad+0xca>
     c5c:	4b3e      	ldr	r3, [pc, #248]	; (d58 <_sercom_get_default_pad+0x110>)
     c5e:	4298      	cmp	r0, r3
     c60:	d037      	beq.n	cd2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     c62:	2000      	movs	r0, #0
}
     c64:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     c66:	4b3d      	ldr	r3, [pc, #244]	; (d5c <_sercom_get_default_pad+0x114>)
     c68:	4298      	cmp	r0, r3
     c6a:	d00c      	beq.n	c86 <_sercom_get_default_pad+0x3e>
     c6c:	4b3c      	ldr	r3, [pc, #240]	; (d60 <_sercom_get_default_pad+0x118>)
     c6e:	4298      	cmp	r0, r3
     c70:	d1f7      	bne.n	c62 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c72:	2901      	cmp	r1, #1
     c74:	d017      	beq.n	ca6 <_sercom_get_default_pad+0x5e>
     c76:	2900      	cmp	r1, #0
     c78:	d05d      	beq.n	d36 <_sercom_get_default_pad+0xee>
     c7a:	2902      	cmp	r1, #2
     c7c:	d015      	beq.n	caa <_sercom_get_default_pad+0x62>
     c7e:	2903      	cmp	r1, #3
     c80:	d015      	beq.n	cae <_sercom_get_default_pad+0x66>
	return 0;
     c82:	2000      	movs	r0, #0
     c84:	e7ee      	b.n	c64 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c86:	2901      	cmp	r1, #1
     c88:	d007      	beq.n	c9a <_sercom_get_default_pad+0x52>
     c8a:	2900      	cmp	r1, #0
     c8c:	d051      	beq.n	d32 <_sercom_get_default_pad+0xea>
     c8e:	2902      	cmp	r1, #2
     c90:	d005      	beq.n	c9e <_sercom_get_default_pad+0x56>
     c92:	2903      	cmp	r1, #3
     c94:	d005      	beq.n	ca2 <_sercom_get_default_pad+0x5a>
	return 0;
     c96:	2000      	movs	r0, #0
     c98:	e7e4      	b.n	c64 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c9a:	4832      	ldr	r0, [pc, #200]	; (d64 <_sercom_get_default_pad+0x11c>)
     c9c:	e7e2      	b.n	c64 <_sercom_get_default_pad+0x1c>
     c9e:	4832      	ldr	r0, [pc, #200]	; (d68 <_sercom_get_default_pad+0x120>)
     ca0:	e7e0      	b.n	c64 <_sercom_get_default_pad+0x1c>
     ca2:	4832      	ldr	r0, [pc, #200]	; (d6c <_sercom_get_default_pad+0x124>)
     ca4:	e7de      	b.n	c64 <_sercom_get_default_pad+0x1c>
     ca6:	4832      	ldr	r0, [pc, #200]	; (d70 <_sercom_get_default_pad+0x128>)
     ca8:	e7dc      	b.n	c64 <_sercom_get_default_pad+0x1c>
     caa:	4832      	ldr	r0, [pc, #200]	; (d74 <_sercom_get_default_pad+0x12c>)
     cac:	e7da      	b.n	c64 <_sercom_get_default_pad+0x1c>
     cae:	4832      	ldr	r0, [pc, #200]	; (d78 <_sercom_get_default_pad+0x130>)
     cb0:	e7d8      	b.n	c64 <_sercom_get_default_pad+0x1c>
     cb2:	2901      	cmp	r1, #1
     cb4:	d007      	beq.n	cc6 <_sercom_get_default_pad+0x7e>
     cb6:	2900      	cmp	r1, #0
     cb8:	d03f      	beq.n	d3a <_sercom_get_default_pad+0xf2>
     cba:	2902      	cmp	r1, #2
     cbc:	d005      	beq.n	cca <_sercom_get_default_pad+0x82>
     cbe:	2903      	cmp	r1, #3
     cc0:	d005      	beq.n	cce <_sercom_get_default_pad+0x86>
	return 0;
     cc2:	2000      	movs	r0, #0
     cc4:	e7ce      	b.n	c64 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cc6:	482d      	ldr	r0, [pc, #180]	; (d7c <_sercom_get_default_pad+0x134>)
     cc8:	e7cc      	b.n	c64 <_sercom_get_default_pad+0x1c>
     cca:	482d      	ldr	r0, [pc, #180]	; (d80 <_sercom_get_default_pad+0x138>)
     ccc:	e7ca      	b.n	c64 <_sercom_get_default_pad+0x1c>
     cce:	482d      	ldr	r0, [pc, #180]	; (d84 <_sercom_get_default_pad+0x13c>)
     cd0:	e7c8      	b.n	c64 <_sercom_get_default_pad+0x1c>
     cd2:	2901      	cmp	r1, #1
     cd4:	d007      	beq.n	ce6 <_sercom_get_default_pad+0x9e>
     cd6:	2900      	cmp	r1, #0
     cd8:	d031      	beq.n	d3e <_sercom_get_default_pad+0xf6>
     cda:	2902      	cmp	r1, #2
     cdc:	d005      	beq.n	cea <_sercom_get_default_pad+0xa2>
     cde:	2903      	cmp	r1, #3
     ce0:	d005      	beq.n	cee <_sercom_get_default_pad+0xa6>
	return 0;
     ce2:	2000      	movs	r0, #0
     ce4:	e7be      	b.n	c64 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ce6:	4828      	ldr	r0, [pc, #160]	; (d88 <_sercom_get_default_pad+0x140>)
     ce8:	e7bc      	b.n	c64 <_sercom_get_default_pad+0x1c>
     cea:	4828      	ldr	r0, [pc, #160]	; (d8c <_sercom_get_default_pad+0x144>)
     cec:	e7ba      	b.n	c64 <_sercom_get_default_pad+0x1c>
     cee:	4828      	ldr	r0, [pc, #160]	; (d90 <_sercom_get_default_pad+0x148>)
     cf0:	e7b8      	b.n	c64 <_sercom_get_default_pad+0x1c>
     cf2:	2901      	cmp	r1, #1
     cf4:	d007      	beq.n	d06 <_sercom_get_default_pad+0xbe>
     cf6:	2900      	cmp	r1, #0
     cf8:	d023      	beq.n	d42 <_sercom_get_default_pad+0xfa>
     cfa:	2902      	cmp	r1, #2
     cfc:	d005      	beq.n	d0a <_sercom_get_default_pad+0xc2>
     cfe:	2903      	cmp	r1, #3
     d00:	d005      	beq.n	d0e <_sercom_get_default_pad+0xc6>
	return 0;
     d02:	2000      	movs	r0, #0
     d04:	e7ae      	b.n	c64 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d06:	4823      	ldr	r0, [pc, #140]	; (d94 <_sercom_get_default_pad+0x14c>)
     d08:	e7ac      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d0a:	4823      	ldr	r0, [pc, #140]	; (d98 <_sercom_get_default_pad+0x150>)
     d0c:	e7aa      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d0e:	4823      	ldr	r0, [pc, #140]	; (d9c <_sercom_get_default_pad+0x154>)
     d10:	e7a8      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d12:	2901      	cmp	r1, #1
     d14:	d007      	beq.n	d26 <_sercom_get_default_pad+0xde>
     d16:	2900      	cmp	r1, #0
     d18:	d015      	beq.n	d46 <_sercom_get_default_pad+0xfe>
     d1a:	2902      	cmp	r1, #2
     d1c:	d005      	beq.n	d2a <_sercom_get_default_pad+0xe2>
     d1e:	2903      	cmp	r1, #3
     d20:	d005      	beq.n	d2e <_sercom_get_default_pad+0xe6>
	return 0;
     d22:	2000      	movs	r0, #0
     d24:	e79e      	b.n	c64 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d26:	481e      	ldr	r0, [pc, #120]	; (da0 <_sercom_get_default_pad+0x158>)
     d28:	e79c      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d2a:	481e      	ldr	r0, [pc, #120]	; (da4 <_sercom_get_default_pad+0x15c>)
     d2c:	e79a      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d2e:	481e      	ldr	r0, [pc, #120]	; (da8 <_sercom_get_default_pad+0x160>)
     d30:	e798      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d32:	481e      	ldr	r0, [pc, #120]	; (dac <_sercom_get_default_pad+0x164>)
     d34:	e796      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d36:	2003      	movs	r0, #3
     d38:	e794      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d3a:	481d      	ldr	r0, [pc, #116]	; (db0 <_sercom_get_default_pad+0x168>)
     d3c:	e792      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d3e:	481d      	ldr	r0, [pc, #116]	; (db4 <_sercom_get_default_pad+0x16c>)
     d40:	e790      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d42:	481d      	ldr	r0, [pc, #116]	; (db8 <_sercom_get_default_pad+0x170>)
     d44:	e78e      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d46:	481d      	ldr	r0, [pc, #116]	; (dbc <_sercom_get_default_pad+0x174>)
     d48:	e78c      	b.n	c64 <_sercom_get_default_pad+0x1c>
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	42001000 	.word	0x42001000
     d50:	42001800 	.word	0x42001800
     d54:	42001c00 	.word	0x42001c00
     d58:	42001400 	.word	0x42001400
     d5c:	42000800 	.word	0x42000800
     d60:	42000c00 	.word	0x42000c00
     d64:	00050003 	.word	0x00050003
     d68:	00060003 	.word	0x00060003
     d6c:	00070003 	.word	0x00070003
     d70:	00010003 	.word	0x00010003
     d74:	001e0003 	.word	0x001e0003
     d78:	001f0003 	.word	0x001f0003
     d7c:	000d0002 	.word	0x000d0002
     d80:	000e0002 	.word	0x000e0002
     d84:	000f0002 	.word	0x000f0002
     d88:	00110003 	.word	0x00110003
     d8c:	00120003 	.word	0x00120003
     d90:	00130003 	.word	0x00130003
     d94:	003f0005 	.word	0x003f0005
     d98:	003e0005 	.word	0x003e0005
     d9c:	00520005 	.word	0x00520005
     da0:	00170003 	.word	0x00170003
     da4:	00180003 	.word	0x00180003
     da8:	00190003 	.word	0x00190003
     dac:	00040003 	.word	0x00040003
     db0:	000c0002 	.word	0x000c0002
     db4:	00100003 	.word	0x00100003
     db8:	00530005 	.word	0x00530005
     dbc:	00160003 	.word	0x00160003

00000dc0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     dc0:	b530      	push	{r4, r5, lr}
     dc2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     dc4:	4b0b      	ldr	r3, [pc, #44]	; (df4 <_sercom_get_sercom_inst_index+0x34>)
     dc6:	466a      	mov	r2, sp
     dc8:	cb32      	ldmia	r3!, {r1, r4, r5}
     dca:	c232      	stmia	r2!, {r1, r4, r5}
     dcc:	cb32      	ldmia	r3!, {r1, r4, r5}
     dce:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     dd0:	9b00      	ldr	r3, [sp, #0]
     dd2:	4283      	cmp	r3, r0
     dd4:	d00b      	beq.n	dee <_sercom_get_sercom_inst_index+0x2e>
     dd6:	2301      	movs	r3, #1
     dd8:	009a      	lsls	r2, r3, #2
     dda:	4669      	mov	r1, sp
     ddc:	5852      	ldr	r2, [r2, r1]
     dde:	4282      	cmp	r2, r0
     de0:	d006      	beq.n	df0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     de2:	3301      	adds	r3, #1
     de4:	2b06      	cmp	r3, #6
     de6:	d1f7      	bne.n	dd8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     de8:	2000      	movs	r0, #0
}
     dea:	b007      	add	sp, #28
     dec:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dee:	2300      	movs	r3, #0
			return i;
     df0:	b2d8      	uxtb	r0, r3
     df2:	e7fa      	b.n	dea <_sercom_get_sercom_inst_index+0x2a>
     df4:	00003264 	.word	0x00003264

00000df8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     df8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     dfa:	2000      	movs	r0, #0
     dfc:	4b08      	ldr	r3, [pc, #32]	; (e20 <delay_init+0x28>)
     dfe:	4798      	blx	r3
     e00:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     e02:	4c08      	ldr	r4, [pc, #32]	; (e24 <delay_init+0x2c>)
     e04:	21fa      	movs	r1, #250	; 0xfa
     e06:	0089      	lsls	r1, r1, #2
     e08:	47a0      	blx	r4
     e0a:	4b07      	ldr	r3, [pc, #28]	; (e28 <delay_init+0x30>)
     e0c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     e0e:	4907      	ldr	r1, [pc, #28]	; (e2c <delay_init+0x34>)
     e10:	0028      	movs	r0, r5
     e12:	47a0      	blx	r4
     e14:	4b06      	ldr	r3, [pc, #24]	; (e30 <delay_init+0x38>)
     e16:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     e18:	2205      	movs	r2, #5
     e1a:	4b06      	ldr	r3, [pc, #24]	; (e34 <delay_init+0x3c>)
     e1c:	601a      	str	r2, [r3, #0]
}
     e1e:	bd70      	pop	{r4, r5, r6, pc}
     e20:	00001331 	.word	0x00001331
     e24:	0000183d 	.word	0x0000183d
     e28:	20000000 	.word	0x20000000
     e2c:	000f4240 	.word	0x000f4240
     e30:	20000004 	.word	0x20000004
     e34:	e000e010 	.word	0xe000e010

00000e38 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     e38:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     e3a:	4b08      	ldr	r3, [pc, #32]	; (e5c <delay_cycles_ms+0x24>)
     e3c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     e3e:	4a08      	ldr	r2, [pc, #32]	; (e60 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     e40:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e42:	2180      	movs	r1, #128	; 0x80
     e44:	0249      	lsls	r1, r1, #9
	while (n--) {
     e46:	3801      	subs	r0, #1
     e48:	d307      	bcc.n	e5a <delay_cycles_ms+0x22>
	if (n > 0) {
     e4a:	2c00      	cmp	r4, #0
     e4c:	d0fb      	beq.n	e46 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     e4e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     e50:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e52:	6813      	ldr	r3, [r2, #0]
     e54:	420b      	tst	r3, r1
     e56:	d0fc      	beq.n	e52 <delay_cycles_ms+0x1a>
     e58:	e7f5      	b.n	e46 <delay_cycles_ms+0xe>
	}
}
     e5a:	bd30      	pop	{r4, r5, pc}
     e5c:	20000000 	.word	0x20000000
     e60:	e000e010 	.word	0xe000e010

00000e64 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     e64:	4b0c      	ldr	r3, [pc, #48]	; (e98 <cpu_irq_enter_critical+0x34>)
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	2b00      	cmp	r3, #0
     e6a:	d106      	bne.n	e7a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e6c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     e70:	2b00      	cmp	r3, #0
     e72:	d007      	beq.n	e84 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     e74:	2200      	movs	r2, #0
     e76:	4b09      	ldr	r3, [pc, #36]	; (e9c <cpu_irq_enter_critical+0x38>)
     e78:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     e7a:	4a07      	ldr	r2, [pc, #28]	; (e98 <cpu_irq_enter_critical+0x34>)
     e7c:	6813      	ldr	r3, [r2, #0]
     e7e:	3301      	adds	r3, #1
     e80:	6013      	str	r3, [r2, #0]
}
     e82:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     e84:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e86:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     e8a:	2200      	movs	r2, #0
     e8c:	4b04      	ldr	r3, [pc, #16]	; (ea0 <cpu_irq_enter_critical+0x3c>)
     e8e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     e90:	3201      	adds	r2, #1
     e92:	4b02      	ldr	r3, [pc, #8]	; (e9c <cpu_irq_enter_critical+0x38>)
     e94:	701a      	strb	r2, [r3, #0]
     e96:	e7f0      	b.n	e7a <cpu_irq_enter_critical+0x16>
     e98:	20000048 	.word	0x20000048
     e9c:	2000004c 	.word	0x2000004c
     ea0:	20000008 	.word	0x20000008

00000ea4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ea4:	4b08      	ldr	r3, [pc, #32]	; (ec8 <cpu_irq_leave_critical+0x24>)
     ea6:	681a      	ldr	r2, [r3, #0]
     ea8:	3a01      	subs	r2, #1
     eaa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     eac:	681b      	ldr	r3, [r3, #0]
     eae:	2b00      	cmp	r3, #0
     eb0:	d109      	bne.n	ec6 <cpu_irq_leave_critical+0x22>
     eb2:	4b06      	ldr	r3, [pc, #24]	; (ecc <cpu_irq_leave_critical+0x28>)
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d005      	beq.n	ec6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     eba:	2201      	movs	r2, #1
     ebc:	4b04      	ldr	r3, [pc, #16]	; (ed0 <cpu_irq_leave_critical+0x2c>)
     ebe:	701a      	strb	r2, [r3, #0]
     ec0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ec4:	b662      	cpsie	i
	}
}
     ec6:	4770      	bx	lr
     ec8:	20000048 	.word	0x20000048
     ecc:	2000004c 	.word	0x2000004c
     ed0:	20000008 	.word	0x20000008

00000ed4 <system_board_init>:




void system_board_init(void)
{
     ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     ed8:	ac01      	add	r4, sp, #4
     eda:	2501      	movs	r5, #1
     edc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     ede:	2700      	movs	r7, #0
     ee0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     ee2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     ee4:	0021      	movs	r1, r4
     ee6:	2013      	movs	r0, #19
     ee8:	4e06      	ldr	r6, [pc, #24]	; (f04 <system_board_init+0x30>)
     eea:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     eec:	2280      	movs	r2, #128	; 0x80
     eee:	0312      	lsls	r2, r2, #12
     ef0:	4b05      	ldr	r3, [pc, #20]	; (f08 <system_board_init+0x34>)
     ef2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ef4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     ef6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     ef8:	0021      	movs	r1, r4
     efa:	201c      	movs	r0, #28
     efc:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     efe:	b003      	add	sp, #12
     f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	00000f0d 	.word	0x00000f0d
     f08:	41004400 	.word	0x41004400

00000f0c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     f0c:	b500      	push	{lr}
     f0e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f10:	ab01      	add	r3, sp, #4
     f12:	2280      	movs	r2, #128	; 0x80
     f14:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     f16:	780a      	ldrb	r2, [r1, #0]
     f18:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     f1a:	784a      	ldrb	r2, [r1, #1]
     f1c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     f1e:	788a      	ldrb	r2, [r1, #2]
     f20:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     f22:	0019      	movs	r1, r3
     f24:	4b01      	ldr	r3, [pc, #4]	; (f2c <port_pin_set_config+0x20>)
     f26:	4798      	blx	r3
}
     f28:	b003      	add	sp, #12
     f2a:	bd00      	pop	{pc}
     f2c:	00001541 	.word	0x00001541

00000f30 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f30:	b510      	push	{r4, lr}
	switch (clock_source) {
     f32:	2808      	cmp	r0, #8
     f34:	d803      	bhi.n	f3e <system_clock_source_get_hz+0xe>
     f36:	0080      	lsls	r0, r0, #2
     f38:	4b1c      	ldr	r3, [pc, #112]	; (fac <system_clock_source_get_hz+0x7c>)
     f3a:	581b      	ldr	r3, [r3, r0]
     f3c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     f3e:	2000      	movs	r0, #0
     f40:	e032      	b.n	fa8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     f42:	4b1b      	ldr	r3, [pc, #108]	; (fb0 <system_clock_source_get_hz+0x80>)
     f44:	6918      	ldr	r0, [r3, #16]
     f46:	e02f      	b.n	fa8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f48:	4b1a      	ldr	r3, [pc, #104]	; (fb4 <system_clock_source_get_hz+0x84>)
     f4a:	6a1b      	ldr	r3, [r3, #32]
     f4c:	059b      	lsls	r3, r3, #22
     f4e:	0f9b      	lsrs	r3, r3, #30
     f50:	4819      	ldr	r0, [pc, #100]	; (fb8 <system_clock_source_get_hz+0x88>)
     f52:	40d8      	lsrs	r0, r3
     f54:	e028      	b.n	fa8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     f56:	4b16      	ldr	r3, [pc, #88]	; (fb0 <system_clock_source_get_hz+0x80>)
     f58:	6958      	ldr	r0, [r3, #20]
     f5a:	e025      	b.n	fa8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f5c:	4b14      	ldr	r3, [pc, #80]	; (fb0 <system_clock_source_get_hz+0x80>)
     f5e:	681b      	ldr	r3, [r3, #0]
			return 0;
     f60:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f62:	079b      	lsls	r3, r3, #30
     f64:	d520      	bpl.n	fa8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f66:	4913      	ldr	r1, [pc, #76]	; (fb4 <system_clock_source_get_hz+0x84>)
     f68:	2210      	movs	r2, #16
     f6a:	68cb      	ldr	r3, [r1, #12]
     f6c:	421a      	tst	r2, r3
     f6e:	d0fc      	beq.n	f6a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     f70:	4b0f      	ldr	r3, [pc, #60]	; (fb0 <system_clock_source_get_hz+0x80>)
     f72:	681a      	ldr	r2, [r3, #0]
     f74:	2324      	movs	r3, #36	; 0x24
     f76:	4013      	ands	r3, r2
     f78:	2b04      	cmp	r3, #4
     f7a:	d001      	beq.n	f80 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     f7c:	480f      	ldr	r0, [pc, #60]	; (fbc <system_clock_source_get_hz+0x8c>)
     f7e:	e013      	b.n	fa8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f80:	2000      	movs	r0, #0
     f82:	4b0f      	ldr	r3, [pc, #60]	; (fc0 <system_clock_source_get_hz+0x90>)
     f84:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     f86:	4b0a      	ldr	r3, [pc, #40]	; (fb0 <system_clock_source_get_hz+0x80>)
     f88:	689b      	ldr	r3, [r3, #8]
     f8a:	041b      	lsls	r3, r3, #16
     f8c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f8e:	4358      	muls	r0, r3
     f90:	e00a      	b.n	fa8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f92:	2350      	movs	r3, #80	; 0x50
     f94:	4a07      	ldr	r2, [pc, #28]	; (fb4 <system_clock_source_get_hz+0x84>)
     f96:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     f98:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f9a:	075b      	lsls	r3, r3, #29
     f9c:	d504      	bpl.n	fa8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     f9e:	4b04      	ldr	r3, [pc, #16]	; (fb0 <system_clock_source_get_hz+0x80>)
     fa0:	68d8      	ldr	r0, [r3, #12]
     fa2:	e001      	b.n	fa8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     fa4:	2080      	movs	r0, #128	; 0x80
     fa6:	0200      	lsls	r0, r0, #8
	}
}
     fa8:	bd10      	pop	{r4, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	0000327c 	.word	0x0000327c
     fb0:	20000050 	.word	0x20000050
     fb4:	40000800 	.word	0x40000800
     fb8:	007a1200 	.word	0x007a1200
     fbc:	02dc6c00 	.word	0x02dc6c00
     fc0:	00001465 	.word	0x00001465

00000fc4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     fc4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     fc6:	490c      	ldr	r1, [pc, #48]	; (ff8 <system_clock_source_osc8m_set_config+0x34>)
     fc8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     fca:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     fcc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     fce:	7840      	ldrb	r0, [r0, #1]
     fd0:	2201      	movs	r2, #1
     fd2:	4010      	ands	r0, r2
     fd4:	0180      	lsls	r0, r0, #6
     fd6:	2640      	movs	r6, #64	; 0x40
     fd8:	43b3      	bics	r3, r6
     fda:	4303      	orrs	r3, r0
     fdc:	402a      	ands	r2, r5
     fde:	01d2      	lsls	r2, r2, #7
     fe0:	2080      	movs	r0, #128	; 0x80
     fe2:	4383      	bics	r3, r0
     fe4:	4313      	orrs	r3, r2
     fe6:	2203      	movs	r2, #3
     fe8:	4022      	ands	r2, r4
     fea:	0212      	lsls	r2, r2, #8
     fec:	4803      	ldr	r0, [pc, #12]	; (ffc <system_clock_source_osc8m_set_config+0x38>)
     fee:	4003      	ands	r3, r0
     ff0:	4313      	orrs	r3, r2
     ff2:	620b      	str	r3, [r1, #32]
}
     ff4:	bd70      	pop	{r4, r5, r6, pc}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	40000800 	.word	0x40000800
     ffc:	fffffcff 	.word	0xfffffcff

00001000 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1000:	b5f0      	push	{r4, r5, r6, r7, lr}
    1002:	46ce      	mov	lr, r9
    1004:	4647      	mov	r7, r8
    1006:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1008:	4b19      	ldr	r3, [pc, #100]	; (1070 <system_clock_source_osc32k_set_config+0x70>)
    100a:	4699      	mov	r9, r3
    100c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    100e:	7841      	ldrb	r1, [r0, #1]
    1010:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1012:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1014:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1016:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1018:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    101a:	7880      	ldrb	r0, [r0, #2]
    101c:	2101      	movs	r1, #1
    101e:	4008      	ands	r0, r1
    1020:	0080      	lsls	r0, r0, #2
    1022:	2204      	movs	r2, #4
    1024:	4393      	bics	r3, r2
    1026:	4303      	orrs	r3, r0
    1028:	4660      	mov	r0, ip
    102a:	4008      	ands	r0, r1
    102c:	00c0      	lsls	r0, r0, #3
    102e:	3204      	adds	r2, #4
    1030:	4393      	bics	r3, r2
    1032:	4303      	orrs	r3, r0
    1034:	0038      	movs	r0, r7
    1036:	4008      	ands	r0, r1
    1038:	0180      	lsls	r0, r0, #6
    103a:	2740      	movs	r7, #64	; 0x40
    103c:	43bb      	bics	r3, r7
    103e:	4303      	orrs	r3, r0
    1040:	0030      	movs	r0, r6
    1042:	4008      	ands	r0, r1
    1044:	01c0      	lsls	r0, r0, #7
    1046:	2680      	movs	r6, #128	; 0x80
    1048:	43b3      	bics	r3, r6
    104a:	4303      	orrs	r3, r0
    104c:	2007      	movs	r0, #7
    104e:	4005      	ands	r5, r0
    1050:	022d      	lsls	r5, r5, #8
    1052:	4808      	ldr	r0, [pc, #32]	; (1074 <system_clock_source_osc32k_set_config+0x74>)
    1054:	4003      	ands	r3, r0
    1056:	432b      	orrs	r3, r5
    1058:	4021      	ands	r1, r4
    105a:	0309      	lsls	r1, r1, #12
    105c:	4806      	ldr	r0, [pc, #24]	; (1078 <system_clock_source_osc32k_set_config+0x78>)
    105e:	4003      	ands	r3, r0
    1060:	430b      	orrs	r3, r1
    1062:	464a      	mov	r2, r9
    1064:	6193      	str	r3, [r2, #24]
}
    1066:	bc0c      	pop	{r2, r3}
    1068:	4690      	mov	r8, r2
    106a:	4699      	mov	r9, r3
    106c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    106e:	46c0      	nop			; (mov r8, r8)
    1070:	40000800 	.word	0x40000800
    1074:	fffff8ff 	.word	0xfffff8ff
    1078:	ffffefff 	.word	0xffffefff

0000107c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    107c:	2808      	cmp	r0, #8
    107e:	d803      	bhi.n	1088 <system_clock_source_enable+0xc>
    1080:	0080      	lsls	r0, r0, #2
    1082:	4b25      	ldr	r3, [pc, #148]	; (1118 <system_clock_source_enable+0x9c>)
    1084:	581b      	ldr	r3, [r3, r0]
    1086:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1088:	2017      	movs	r0, #23
    108a:	e044      	b.n	1116 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    108c:	4a23      	ldr	r2, [pc, #140]	; (111c <system_clock_source_enable+0xa0>)
    108e:	6a13      	ldr	r3, [r2, #32]
    1090:	2102      	movs	r1, #2
    1092:	430b      	orrs	r3, r1
    1094:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1096:	2000      	movs	r0, #0
    1098:	e03d      	b.n	1116 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    109a:	4a20      	ldr	r2, [pc, #128]	; (111c <system_clock_source_enable+0xa0>)
    109c:	6993      	ldr	r3, [r2, #24]
    109e:	2102      	movs	r1, #2
    10a0:	430b      	orrs	r3, r1
    10a2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    10a4:	2000      	movs	r0, #0
		break;
    10a6:	e036      	b.n	1116 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    10a8:	4a1c      	ldr	r2, [pc, #112]	; (111c <system_clock_source_enable+0xa0>)
    10aa:	8a13      	ldrh	r3, [r2, #16]
    10ac:	2102      	movs	r1, #2
    10ae:	430b      	orrs	r3, r1
    10b0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    10b2:	2000      	movs	r0, #0
		break;
    10b4:	e02f      	b.n	1116 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    10b6:	4a19      	ldr	r2, [pc, #100]	; (111c <system_clock_source_enable+0xa0>)
    10b8:	8a93      	ldrh	r3, [r2, #20]
    10ba:	2102      	movs	r1, #2
    10bc:	430b      	orrs	r3, r1
    10be:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    10c0:	2000      	movs	r0, #0
		break;
    10c2:	e028      	b.n	1116 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    10c4:	4916      	ldr	r1, [pc, #88]	; (1120 <system_clock_source_enable+0xa4>)
    10c6:	680b      	ldr	r3, [r1, #0]
    10c8:	2202      	movs	r2, #2
    10ca:	4313      	orrs	r3, r2
    10cc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    10ce:	4b13      	ldr	r3, [pc, #76]	; (111c <system_clock_source_enable+0xa0>)
    10d0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10d2:	0019      	movs	r1, r3
    10d4:	320e      	adds	r2, #14
    10d6:	68cb      	ldr	r3, [r1, #12]
    10d8:	421a      	tst	r2, r3
    10da:	d0fc      	beq.n	10d6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    10dc:	4a10      	ldr	r2, [pc, #64]	; (1120 <system_clock_source_enable+0xa4>)
    10de:	6891      	ldr	r1, [r2, #8]
    10e0:	4b0e      	ldr	r3, [pc, #56]	; (111c <system_clock_source_enable+0xa0>)
    10e2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    10e4:	6852      	ldr	r2, [r2, #4]
    10e6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    10e8:	2200      	movs	r2, #0
    10ea:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10ec:	0019      	movs	r1, r3
    10ee:	3210      	adds	r2, #16
    10f0:	68cb      	ldr	r3, [r1, #12]
    10f2:	421a      	tst	r2, r3
    10f4:	d0fc      	beq.n	10f0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    10f6:	4b0a      	ldr	r3, [pc, #40]	; (1120 <system_clock_source_enable+0xa4>)
    10f8:	681b      	ldr	r3, [r3, #0]
    10fa:	b29b      	uxth	r3, r3
    10fc:	4a07      	ldr	r2, [pc, #28]	; (111c <system_clock_source_enable+0xa0>)
    10fe:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1100:	2000      	movs	r0, #0
    1102:	e008      	b.n	1116 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1104:	4905      	ldr	r1, [pc, #20]	; (111c <system_clock_source_enable+0xa0>)
    1106:	2244      	movs	r2, #68	; 0x44
    1108:	5c8b      	ldrb	r3, [r1, r2]
    110a:	2002      	movs	r0, #2
    110c:	4303      	orrs	r3, r0
    110e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1110:	2000      	movs	r0, #0
		break;
    1112:	e000      	b.n	1116 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1114:	2000      	movs	r0, #0
}
    1116:	4770      	bx	lr
    1118:	000032a0 	.word	0x000032a0
    111c:	40000800 	.word	0x40000800
    1120:	20000050 	.word	0x20000050

00001124 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1124:	b5f0      	push	{r4, r5, r6, r7, lr}
    1126:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1128:	22c2      	movs	r2, #194	; 0xc2
    112a:	00d2      	lsls	r2, r2, #3
    112c:	4b2c      	ldr	r3, [pc, #176]	; (11e0 <system_clock_init+0xbc>)
    112e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1130:	4a2c      	ldr	r2, [pc, #176]	; (11e4 <system_clock_init+0xc0>)
    1132:	6853      	ldr	r3, [r2, #4]
    1134:	211e      	movs	r1, #30
    1136:	438b      	bics	r3, r1
    1138:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    113a:	2301      	movs	r3, #1
    113c:	466a      	mov	r2, sp
    113e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1140:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1142:	4d29      	ldr	r5, [pc, #164]	; (11e8 <system_clock_init+0xc4>)
    1144:	b2e0      	uxtb	r0, r4
    1146:	4669      	mov	r1, sp
    1148:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    114a:	3401      	adds	r4, #1
    114c:	2c25      	cmp	r4, #37	; 0x25
    114e:	d1f9      	bne.n	1144 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    1150:	4b26      	ldr	r3, [pc, #152]	; (11ec <system_clock_init+0xc8>)
    1152:	681b      	ldr	r3, [r3, #0]
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    1154:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1156:	4922      	ldr	r1, [pc, #136]	; (11e0 <system_clock_init+0xbc>)
    1158:	698a      	ldr	r2, [r1, #24]
    115a:	0e5b      	lsrs	r3, r3, #25
    115c:	041b      	lsls	r3, r3, #16
    115e:	4824      	ldr	r0, [pc, #144]	; (11f0 <system_clock_init+0xcc>)
    1160:	4002      	ands	r2, r0
    1162:	4313      	orrs	r3, r2
    1164:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1166:	a804      	add	r0, sp, #16
    1168:	2501      	movs	r5, #1
    116a:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    116c:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    116e:	2400      	movs	r4, #0
    1170:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    1172:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1174:	2307      	movs	r3, #7
    1176:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    1178:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    117a:	4b1e      	ldr	r3, [pc, #120]	; (11f4 <system_clock_init+0xd0>)
    117c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    117e:	2004      	movs	r0, #4
    1180:	4e1d      	ldr	r6, [pc, #116]	; (11f8 <system_clock_init+0xd4>)
    1182:	47b0      	blx	r6
	config->run_in_standby  = false;
    1184:	a803      	add	r0, sp, #12
    1186:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1188:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    118a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    118c:	4b1b      	ldr	r3, [pc, #108]	; (11fc <system_clock_init+0xd8>)
    118e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1190:	2006      	movs	r0, #6
    1192:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1194:	4b1a      	ldr	r3, [pc, #104]	; (1200 <system_clock_init+0xdc>)
    1196:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1198:	466b      	mov	r3, sp
    119a:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    119c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    119e:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    11a0:	2304      	movs	r3, #4
    11a2:	466a      	mov	r2, sp
    11a4:	7013      	strb	r3, [r2, #0]
    11a6:	331c      	adds	r3, #28
    11a8:	9301      	str	r3, [sp, #4]
    11aa:	4669      	mov	r1, sp
    11ac:	2002      	movs	r0, #2
    11ae:	4f15      	ldr	r7, [pc, #84]	; (1204 <system_clock_init+0xe0>)
    11b0:	47b8      	blx	r7
    11b2:	2002      	movs	r0, #2
    11b4:	4e14      	ldr	r6, [pc, #80]	; (1208 <system_clock_init+0xe4>)
    11b6:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    11b8:	4b14      	ldr	r3, [pc, #80]	; (120c <system_clock_init+0xe8>)
    11ba:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    11bc:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    11be:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    11c0:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    11c2:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    11c4:	466b      	mov	r3, sp
    11c6:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    11c8:	2306      	movs	r3, #6
    11ca:	466a      	mov	r2, sp
    11cc:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    11ce:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    11d0:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    11d2:	4669      	mov	r1, sp
    11d4:	2000      	movs	r0, #0
    11d6:	47b8      	blx	r7
    11d8:	2000      	movs	r0, #0
    11da:	47b0      	blx	r6
#endif
}
    11dc:	b007      	add	sp, #28
    11de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e0:	40000800 	.word	0x40000800
    11e4:	41004000 	.word	0x41004000
    11e8:	00001449 	.word	0x00001449
    11ec:	00806024 	.word	0x00806024
    11f0:	ff80ffff 	.word	0xff80ffff
    11f4:	00001001 	.word	0x00001001
    11f8:	0000107d 	.word	0x0000107d
    11fc:	00000fc5 	.word	0x00000fc5
    1200:	00001211 	.word	0x00001211
    1204:	00001235 	.word	0x00001235
    1208:	000012ed 	.word	0x000012ed
    120c:	40000400 	.word	0x40000400

00001210 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1210:	4a06      	ldr	r2, [pc, #24]	; (122c <system_gclk_init+0x1c>)
    1212:	6993      	ldr	r3, [r2, #24]
    1214:	2108      	movs	r1, #8
    1216:	430b      	orrs	r3, r1
    1218:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    121a:	2201      	movs	r2, #1
    121c:	4b04      	ldr	r3, [pc, #16]	; (1230 <system_gclk_init+0x20>)
    121e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1220:	0019      	movs	r1, r3
    1222:	780b      	ldrb	r3, [r1, #0]
    1224:	4213      	tst	r3, r2
    1226:	d1fc      	bne.n	1222 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1228:	4770      	bx	lr
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	40000400 	.word	0x40000400
    1230:	40000c00 	.word	0x40000c00

00001234 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1234:	b570      	push	{r4, r5, r6, lr}
    1236:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1238:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    123a:	780d      	ldrb	r5, [r1, #0]
    123c:	022d      	lsls	r5, r5, #8
    123e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1240:	784b      	ldrb	r3, [r1, #1]
    1242:	2b00      	cmp	r3, #0
    1244:	d002      	beq.n	124c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1246:	2380      	movs	r3, #128	; 0x80
    1248:	02db      	lsls	r3, r3, #11
    124a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    124c:	7a4b      	ldrb	r3, [r1, #9]
    124e:	2b00      	cmp	r3, #0
    1250:	d002      	beq.n	1258 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1252:	2380      	movs	r3, #128	; 0x80
    1254:	031b      	lsls	r3, r3, #12
    1256:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1258:	6848      	ldr	r0, [r1, #4]
    125a:	2801      	cmp	r0, #1
    125c:	d910      	bls.n	1280 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    125e:	1e43      	subs	r3, r0, #1
    1260:	4218      	tst	r0, r3
    1262:	d134      	bne.n	12ce <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1264:	2802      	cmp	r0, #2
    1266:	d930      	bls.n	12ca <system_gclk_gen_set_config+0x96>
    1268:	2302      	movs	r3, #2
    126a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    126c:	3201      	adds	r2, #1
						mask <<= 1) {
    126e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1270:	4298      	cmp	r0, r3
    1272:	d8fb      	bhi.n	126c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1274:	0212      	lsls	r2, r2, #8
    1276:	4332      	orrs	r2, r6
    1278:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    127a:	2380      	movs	r3, #128	; 0x80
    127c:	035b      	lsls	r3, r3, #13
    127e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1280:	7a0b      	ldrb	r3, [r1, #8]
    1282:	2b00      	cmp	r3, #0
    1284:	d002      	beq.n	128c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1286:	2380      	movs	r3, #128	; 0x80
    1288:	039b      	lsls	r3, r3, #14
    128a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    128c:	4a13      	ldr	r2, [pc, #76]	; (12dc <system_gclk_gen_set_config+0xa8>)
    128e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1290:	b25b      	sxtb	r3, r3
    1292:	2b00      	cmp	r3, #0
    1294:	dbfb      	blt.n	128e <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1296:	4b12      	ldr	r3, [pc, #72]	; (12e0 <system_gclk_gen_set_config+0xac>)
    1298:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    129a:	4b12      	ldr	r3, [pc, #72]	; (12e4 <system_gclk_gen_set_config+0xb0>)
    129c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    129e:	4a0f      	ldr	r2, [pc, #60]	; (12dc <system_gclk_gen_set_config+0xa8>)
    12a0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    12a2:	b25b      	sxtb	r3, r3
    12a4:	2b00      	cmp	r3, #0
    12a6:	dbfb      	blt.n	12a0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    12a8:	4b0c      	ldr	r3, [pc, #48]	; (12dc <system_gclk_gen_set_config+0xa8>)
    12aa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12ac:	001a      	movs	r2, r3
    12ae:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    12b0:	b25b      	sxtb	r3, r3
    12b2:	2b00      	cmp	r3, #0
    12b4:	dbfb      	blt.n	12ae <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    12b6:	4a09      	ldr	r2, [pc, #36]	; (12dc <system_gclk_gen_set_config+0xa8>)
    12b8:	6853      	ldr	r3, [r2, #4]
    12ba:	2180      	movs	r1, #128	; 0x80
    12bc:	0249      	lsls	r1, r1, #9
    12be:	400b      	ands	r3, r1
    12c0:	431d      	orrs	r5, r3
    12c2:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    12c4:	4b08      	ldr	r3, [pc, #32]	; (12e8 <system_gclk_gen_set_config+0xb4>)
    12c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12c8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    12ca:	2200      	movs	r2, #0
    12cc:	e7d2      	b.n	1274 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    12ce:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    12d0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    12d2:	2380      	movs	r3, #128	; 0x80
    12d4:	029b      	lsls	r3, r3, #10
    12d6:	431d      	orrs	r5, r3
    12d8:	e7d2      	b.n	1280 <system_gclk_gen_set_config+0x4c>
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	40000c00 	.word	0x40000c00
    12e0:	00000e65 	.word	0x00000e65
    12e4:	40000c08 	.word	0x40000c08
    12e8:	00000ea5 	.word	0x00000ea5

000012ec <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    12ec:	b510      	push	{r4, lr}
    12ee:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12f0:	4a0b      	ldr	r2, [pc, #44]	; (1320 <system_gclk_gen_enable+0x34>)
    12f2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12f4:	b25b      	sxtb	r3, r3
    12f6:	2b00      	cmp	r3, #0
    12f8:	dbfb      	blt.n	12f2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    12fa:	4b0a      	ldr	r3, [pc, #40]	; (1324 <system_gclk_gen_enable+0x38>)
    12fc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12fe:	4b0a      	ldr	r3, [pc, #40]	; (1328 <system_gclk_gen_enable+0x3c>)
    1300:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1302:	4a07      	ldr	r2, [pc, #28]	; (1320 <system_gclk_gen_enable+0x34>)
    1304:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1306:	b25b      	sxtb	r3, r3
    1308:	2b00      	cmp	r3, #0
    130a:	dbfb      	blt.n	1304 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    130c:	4a04      	ldr	r2, [pc, #16]	; (1320 <system_gclk_gen_enable+0x34>)
    130e:	6851      	ldr	r1, [r2, #4]
    1310:	2380      	movs	r3, #128	; 0x80
    1312:	025b      	lsls	r3, r3, #9
    1314:	430b      	orrs	r3, r1
    1316:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1318:	4b04      	ldr	r3, [pc, #16]	; (132c <system_gclk_gen_enable+0x40>)
    131a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    131c:	bd10      	pop	{r4, pc}
    131e:	46c0      	nop			; (mov r8, r8)
    1320:	40000c00 	.word	0x40000c00
    1324:	00000e65 	.word	0x00000e65
    1328:	40000c04 	.word	0x40000c04
    132c:	00000ea5 	.word	0x00000ea5

00001330 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1330:	b570      	push	{r4, r5, r6, lr}
    1332:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1334:	4a1a      	ldr	r2, [pc, #104]	; (13a0 <system_gclk_gen_get_hz+0x70>)
    1336:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1338:	b25b      	sxtb	r3, r3
    133a:	2b00      	cmp	r3, #0
    133c:	dbfb      	blt.n	1336 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    133e:	4b19      	ldr	r3, [pc, #100]	; (13a4 <system_gclk_gen_get_hz+0x74>)
    1340:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1342:	4b19      	ldr	r3, [pc, #100]	; (13a8 <system_gclk_gen_get_hz+0x78>)
    1344:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1346:	4a16      	ldr	r2, [pc, #88]	; (13a0 <system_gclk_gen_get_hz+0x70>)
    1348:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    134a:	b25b      	sxtb	r3, r3
    134c:	2b00      	cmp	r3, #0
    134e:	dbfb      	blt.n	1348 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1350:	4e13      	ldr	r6, [pc, #76]	; (13a0 <system_gclk_gen_get_hz+0x70>)
    1352:	6870      	ldr	r0, [r6, #4]
    1354:	04c0      	lsls	r0, r0, #19
    1356:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1358:	4b14      	ldr	r3, [pc, #80]	; (13ac <system_gclk_gen_get_hz+0x7c>)
    135a:	4798      	blx	r3
    135c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    135e:	4b12      	ldr	r3, [pc, #72]	; (13a8 <system_gclk_gen_get_hz+0x78>)
    1360:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1362:	6876      	ldr	r6, [r6, #4]
    1364:	02f6      	lsls	r6, r6, #11
    1366:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1368:	4b11      	ldr	r3, [pc, #68]	; (13b0 <system_gclk_gen_get_hz+0x80>)
    136a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    136c:	4a0c      	ldr	r2, [pc, #48]	; (13a0 <system_gclk_gen_get_hz+0x70>)
    136e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1370:	b25b      	sxtb	r3, r3
    1372:	2b00      	cmp	r3, #0
    1374:	dbfb      	blt.n	136e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1376:	4b0a      	ldr	r3, [pc, #40]	; (13a0 <system_gclk_gen_get_hz+0x70>)
    1378:	689c      	ldr	r4, [r3, #8]
    137a:	0224      	lsls	r4, r4, #8
    137c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    137e:	4b0d      	ldr	r3, [pc, #52]	; (13b4 <system_gclk_gen_get_hz+0x84>)
    1380:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1382:	2e00      	cmp	r6, #0
    1384:	d107      	bne.n	1396 <system_gclk_gen_get_hz+0x66>
    1386:	2c01      	cmp	r4, #1
    1388:	d907      	bls.n	139a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    138a:	0021      	movs	r1, r4
    138c:	0028      	movs	r0, r5
    138e:	4b0a      	ldr	r3, [pc, #40]	; (13b8 <system_gclk_gen_get_hz+0x88>)
    1390:	4798      	blx	r3
    1392:	0005      	movs	r5, r0
    1394:	e001      	b.n	139a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1396:	3401      	adds	r4, #1
    1398:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    139a:	0028      	movs	r0, r5
    139c:	bd70      	pop	{r4, r5, r6, pc}
    139e:	46c0      	nop			; (mov r8, r8)
    13a0:	40000c00 	.word	0x40000c00
    13a4:	00000e65 	.word	0x00000e65
    13a8:	40000c04 	.word	0x40000c04
    13ac:	00000f31 	.word	0x00000f31
    13b0:	40000c08 	.word	0x40000c08
    13b4:	00000ea5 	.word	0x00000ea5
    13b8:	0000183d 	.word	0x0000183d

000013bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    13bc:	b510      	push	{r4, lr}
    13be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13c0:	4b06      	ldr	r3, [pc, #24]	; (13dc <system_gclk_chan_enable+0x20>)
    13c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13c4:	4b06      	ldr	r3, [pc, #24]	; (13e0 <system_gclk_chan_enable+0x24>)
    13c6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    13c8:	4a06      	ldr	r2, [pc, #24]	; (13e4 <system_gclk_chan_enable+0x28>)
    13ca:	8853      	ldrh	r3, [r2, #2]
    13cc:	2180      	movs	r1, #128	; 0x80
    13ce:	01c9      	lsls	r1, r1, #7
    13d0:	430b      	orrs	r3, r1
    13d2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    13d4:	4b04      	ldr	r3, [pc, #16]	; (13e8 <system_gclk_chan_enable+0x2c>)
    13d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13d8:	bd10      	pop	{r4, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	00000e65 	.word	0x00000e65
    13e0:	40000c02 	.word	0x40000c02
    13e4:	40000c00 	.word	0x40000c00
    13e8:	00000ea5 	.word	0x00000ea5

000013ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    13ec:	b510      	push	{r4, lr}
    13ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13f0:	4b0f      	ldr	r3, [pc, #60]	; (1430 <system_gclk_chan_disable+0x44>)
    13f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13f4:	4b0f      	ldr	r3, [pc, #60]	; (1434 <system_gclk_chan_disable+0x48>)
    13f6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    13f8:	4a0f      	ldr	r2, [pc, #60]	; (1438 <system_gclk_chan_disable+0x4c>)
    13fa:	8853      	ldrh	r3, [r2, #2]
    13fc:	051b      	lsls	r3, r3, #20
    13fe:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1400:	8853      	ldrh	r3, [r2, #2]
    1402:	490e      	ldr	r1, [pc, #56]	; (143c <system_gclk_chan_disable+0x50>)
    1404:	400b      	ands	r3, r1
    1406:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1408:	8853      	ldrh	r3, [r2, #2]
    140a:	490d      	ldr	r1, [pc, #52]	; (1440 <system_gclk_chan_disable+0x54>)
    140c:	400b      	ands	r3, r1
    140e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1410:	0011      	movs	r1, r2
    1412:	2280      	movs	r2, #128	; 0x80
    1414:	01d2      	lsls	r2, r2, #7
    1416:	884b      	ldrh	r3, [r1, #2]
    1418:	4213      	tst	r3, r2
    141a:	d1fc      	bne.n	1416 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    141c:	4906      	ldr	r1, [pc, #24]	; (1438 <system_gclk_chan_disable+0x4c>)
    141e:	884a      	ldrh	r2, [r1, #2]
    1420:	0203      	lsls	r3, r0, #8
    1422:	4806      	ldr	r0, [pc, #24]	; (143c <system_gclk_chan_disable+0x50>)
    1424:	4002      	ands	r2, r0
    1426:	4313      	orrs	r3, r2
    1428:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    142a:	4b06      	ldr	r3, [pc, #24]	; (1444 <system_gclk_chan_disable+0x58>)
    142c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    142e:	bd10      	pop	{r4, pc}
    1430:	00000e65 	.word	0x00000e65
    1434:	40000c02 	.word	0x40000c02
    1438:	40000c00 	.word	0x40000c00
    143c:	fffff0ff 	.word	0xfffff0ff
    1440:	ffffbfff 	.word	0xffffbfff
    1444:	00000ea5 	.word	0x00000ea5

00001448 <system_gclk_chan_set_config>:
{
    1448:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    144a:	780c      	ldrb	r4, [r1, #0]
    144c:	0224      	lsls	r4, r4, #8
    144e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1450:	4b02      	ldr	r3, [pc, #8]	; (145c <system_gclk_chan_set_config+0x14>)
    1452:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1454:	b2a4      	uxth	r4, r4
    1456:	4b02      	ldr	r3, [pc, #8]	; (1460 <system_gclk_chan_set_config+0x18>)
    1458:	805c      	strh	r4, [r3, #2]
}
    145a:	bd10      	pop	{r4, pc}
    145c:	000013ed 	.word	0x000013ed
    1460:	40000c00 	.word	0x40000c00

00001464 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1464:	b510      	push	{r4, lr}
    1466:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1468:	4b06      	ldr	r3, [pc, #24]	; (1484 <system_gclk_chan_get_hz+0x20>)
    146a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    146c:	4b06      	ldr	r3, [pc, #24]	; (1488 <system_gclk_chan_get_hz+0x24>)
    146e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1470:	4b06      	ldr	r3, [pc, #24]	; (148c <system_gclk_chan_get_hz+0x28>)
    1472:	885c      	ldrh	r4, [r3, #2]
    1474:	0524      	lsls	r4, r4, #20
    1476:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1478:	4b05      	ldr	r3, [pc, #20]	; (1490 <system_gclk_chan_get_hz+0x2c>)
    147a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    147c:	0020      	movs	r0, r4
    147e:	4b05      	ldr	r3, [pc, #20]	; (1494 <system_gclk_chan_get_hz+0x30>)
    1480:	4798      	blx	r3
}
    1482:	bd10      	pop	{r4, pc}
    1484:	00000e65 	.word	0x00000e65
    1488:	40000c02 	.word	0x40000c02
    148c:	40000c00 	.word	0x40000c00
    1490:	00000ea5 	.word	0x00000ea5
    1494:	00001331 	.word	0x00001331

00001498 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1498:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    149a:	78d3      	ldrb	r3, [r2, #3]
    149c:	2b00      	cmp	r3, #0
    149e:	d135      	bne.n	150c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    14a0:	7813      	ldrb	r3, [r2, #0]
    14a2:	2b80      	cmp	r3, #128	; 0x80
    14a4:	d029      	beq.n	14fa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    14a6:	061b      	lsls	r3, r3, #24
    14a8:	2480      	movs	r4, #128	; 0x80
    14aa:	0264      	lsls	r4, r4, #9
    14ac:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    14ae:	7854      	ldrb	r4, [r2, #1]
    14b0:	2502      	movs	r5, #2
    14b2:	43ac      	bics	r4, r5
    14b4:	d106      	bne.n	14c4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    14b6:	7894      	ldrb	r4, [r2, #2]
    14b8:	2c00      	cmp	r4, #0
    14ba:	d120      	bne.n	14fe <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    14bc:	2480      	movs	r4, #128	; 0x80
    14be:	02a4      	lsls	r4, r4, #10
    14c0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    14c2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    14c4:	7854      	ldrb	r4, [r2, #1]
    14c6:	3c01      	subs	r4, #1
    14c8:	2c01      	cmp	r4, #1
    14ca:	d91c      	bls.n	1506 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    14cc:	040d      	lsls	r5, r1, #16
    14ce:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    14d0:	24a0      	movs	r4, #160	; 0xa0
    14d2:	05e4      	lsls	r4, r4, #23
    14d4:	432c      	orrs	r4, r5
    14d6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14d8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    14da:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    14dc:	24d0      	movs	r4, #208	; 0xd0
    14de:	0624      	lsls	r4, r4, #24
    14e0:	432c      	orrs	r4, r5
    14e2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14e4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    14e6:	78d4      	ldrb	r4, [r2, #3]
    14e8:	2c00      	cmp	r4, #0
    14ea:	d122      	bne.n	1532 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    14ec:	035b      	lsls	r3, r3, #13
    14ee:	d51c      	bpl.n	152a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    14f0:	7893      	ldrb	r3, [r2, #2]
    14f2:	2b01      	cmp	r3, #1
    14f4:	d01e      	beq.n	1534 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    14f6:	6141      	str	r1, [r0, #20]
    14f8:	e017      	b.n	152a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    14fa:	2300      	movs	r3, #0
    14fc:	e7d7      	b.n	14ae <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    14fe:	24c0      	movs	r4, #192	; 0xc0
    1500:	02e4      	lsls	r4, r4, #11
    1502:	4323      	orrs	r3, r4
    1504:	e7dd      	b.n	14c2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1506:	4c0d      	ldr	r4, [pc, #52]	; (153c <_system_pinmux_config+0xa4>)
    1508:	4023      	ands	r3, r4
    150a:	e7df      	b.n	14cc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    150c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    150e:	040c      	lsls	r4, r1, #16
    1510:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1512:	23a0      	movs	r3, #160	; 0xa0
    1514:	05db      	lsls	r3, r3, #23
    1516:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1518:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    151a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    151c:	23d0      	movs	r3, #208	; 0xd0
    151e:	061b      	lsls	r3, r3, #24
    1520:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1522:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1524:	78d3      	ldrb	r3, [r2, #3]
    1526:	2b00      	cmp	r3, #0
    1528:	d103      	bne.n	1532 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    152a:	7853      	ldrb	r3, [r2, #1]
    152c:	3b01      	subs	r3, #1
    152e:	2b01      	cmp	r3, #1
    1530:	d902      	bls.n	1538 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1532:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1534:	6181      	str	r1, [r0, #24]
    1536:	e7f8      	b.n	152a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1538:	6081      	str	r1, [r0, #8]
}
    153a:	e7fa      	b.n	1532 <_system_pinmux_config+0x9a>
    153c:	fffbffff 	.word	0xfffbffff

00001540 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1540:	b510      	push	{r4, lr}
    1542:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1544:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1546:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1548:	2900      	cmp	r1, #0
    154a:	d104      	bne.n	1556 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    154c:	0943      	lsrs	r3, r0, #5
    154e:	01db      	lsls	r3, r3, #7
    1550:	4905      	ldr	r1, [pc, #20]	; (1568 <system_pinmux_pin_set_config+0x28>)
    1552:	468c      	mov	ip, r1
    1554:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1556:	241f      	movs	r4, #31
    1558:	4020      	ands	r0, r4
    155a:	2101      	movs	r1, #1
    155c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    155e:	0018      	movs	r0, r3
    1560:	4b02      	ldr	r3, [pc, #8]	; (156c <system_pinmux_pin_set_config+0x2c>)
    1562:	4798      	blx	r3
}
    1564:	bd10      	pop	{r4, pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	41004400 	.word	0x41004400
    156c:	00001499 	.word	0x00001499

00001570 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1570:	4770      	bx	lr
	...

00001574 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1574:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1576:	4b05      	ldr	r3, [pc, #20]	; (158c <system_init+0x18>)
    1578:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    157a:	4b05      	ldr	r3, [pc, #20]	; (1590 <system_init+0x1c>)
    157c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    157e:	4b05      	ldr	r3, [pc, #20]	; (1594 <system_init+0x20>)
    1580:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1582:	4b05      	ldr	r3, [pc, #20]	; (1598 <system_init+0x24>)
    1584:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <system_init+0x28>)
    1588:	4798      	blx	r3
}
    158a:	bd10      	pop	{r4, pc}
    158c:	00001125 	.word	0x00001125
    1590:	00000ed5 	.word	0x00000ed5
    1594:	00001571 	.word	0x00001571
    1598:	00001571 	.word	0x00001571
    159c:	00001571 	.word	0x00001571

000015a0 <main>:
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
}


int main (void)
{
    15a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15a2:	46de      	mov	lr, fp
    15a4:	464f      	mov	r7, r9
    15a6:	4646      	mov	r6, r8
    15a8:	b5c0      	push	{r6, r7, lr}
    15aa:	b092      	sub	sp, #72	; 0x48
	system_init();
    15ac:	4b8b      	ldr	r3, [pc, #556]	; (17dc <main+0x23c>)
    15ae:	4798      	blx	r3
	delay_init();
    15b0:	4b8b      	ldr	r3, [pc, #556]	; (17e0 <main+0x240>)
    15b2:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    15b4:	2501      	movs	r5, #1
    15b6:	466b      	mov	r3, sp
    15b8:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    15ba:	2400      	movs	r4, #0
    15bc:	709c      	strb	r4, [r3, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    15be:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    15c0:	4669      	mov	r1, sp
    15c2:	2013      	movs	r0, #19
    15c4:	4b87      	ldr	r3, [pc, #540]	; (17e4 <main+0x244>)
    15c6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    15c8:	2280      	movs	r2, #128	; 0x80
    15ca:	0312      	lsls	r2, r2, #12
    15cc:	4b86      	ldr	r3, [pc, #536]	; (17e8 <main+0x248>)
    15ce:	619a      	str	r2, [r3, #24]
	
	uint16_t timeout = 0;
	uint8_t run = 1;
	uint8_t i_am_master = 0;
	
	struct i2c_master_packet packet_master = {
    15d0:	aa0f      	add	r2, sp, #60	; 0x3c
    15d2:	4b86      	ldr	r3, [pc, #536]	; (17ec <main+0x24c>)
    15d4:	cb43      	ldmia	r3!, {r0, r1, r6}
    15d6:	c243      	stmia	r2!, {r0, r1, r6}
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code = 0x00,
	};
	
	struct i2c_slave_packet packet_slave = {
    15d8:	aa0d      	add	r2, sp, #52	; 0x34
    15da:	cb03      	ldmia	r3!, {r0, r1}
    15dc:	c203      	stmia	r2!, {r0, r1}
		.data = write_buffer_slave,
	};
	
	enum status_code status = STATUS_BUSY;
	
	delay_ms(2000);
    15de:	20fa      	movs	r0, #250	; 0xfa
    15e0:	00c0      	lsls	r0, r0, #3
    15e2:	4b83      	ldr	r3, [pc, #524]	; (17f0 <main+0x250>)
    15e4:	4798      	blx	r3
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    15e6:	466b      	mov	r3, sp
    15e8:	701c      	strb	r4, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    15ea:	2380      	movs	r3, #128	; 0x80
    15ec:	039b      	lsls	r3, r3, #14
    15ee:	9301      	str	r3, [sp, #4]
	config->buffer_timeout = 65535;
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    15f0:	2300      	movs	r3, #0
    15f2:	466a      	mov	r2, sp
    15f4:	8154      	strh	r4, [r2, #10]
	config->address = 0;
	config->address_mask = 0;
    15f6:	81d4      	strh	r4, [r2, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    15f8:	7413      	strb	r3, [r2, #16]
#endif
	config->enable_general_call_address = false;
    15fa:	7453      	strb	r3, [r2, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    15fc:	9405      	str	r4, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
#endif
	config->generator_source = GCLK_GENERATOR_0;
    15fe:	7613      	strb	r3, [r2, #24]
	config->run_in_standby = false;
    1600:	7653      	strb	r3, [r2, #25]
	config->pinmux_pad0 = PINMUX_DEFAULT;
	config->pinmux_pad1 = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1602:	2224      	movs	r2, #36	; 0x24
    1604:	4669      	mov	r1, sp
    1606:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1608:	3201      	adds	r2, #1
    160a:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    160c:	3201      	adds	r2, #1
    160e:	548b      	strb	r3, [r1, r2]
	config_i2c_slave.address = SLAVE_1_ADDRESS;
    1610:	818d      	strh	r5, [r1, #12]
	config_i2c_slave.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    1612:	4b78      	ldr	r3, [pc, #480]	; (17f4 <main+0x254>)
    1614:	9307      	str	r3, [sp, #28]
	config_i2c_slave.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    1616:	4b78      	ldr	r3, [pc, #480]	; (17f8 <main+0x258>)
    1618:	9308      	str	r3, [sp, #32]
	config_i2c_slave.buffer_timeout = 1000;
    161a:	23fa      	movs	r3, #250	; 0xfa
    161c:	009b      	lsls	r3, r3, #2
    161e:	466a      	mov	r2, sp
    1620:	810b      	strh	r3, [r1, #8]
	i2c_slave_init(&i2c_slave_instance, EXT1_I2C_MODULE, &config_i2c_slave);
    1622:	4c76      	ldr	r4, [pc, #472]	; (17fc <main+0x25c>)
    1624:	4976      	ldr	r1, [pc, #472]	; (1800 <main+0x260>)
    1626:	0020      	movs	r0, r4
    1628:	4b76      	ldr	r3, [pc, #472]	; (1804 <main+0x264>)
    162a:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    162c:	6823      	ldr	r3, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    162e:	2203      	movs	r2, #3
    1630:	69d9      	ldr	r1, [r3, #28]
	while (i2c_slave_is_syncing(module)) {
    1632:	420a      	tst	r2, r1
    1634:	d1fc      	bne.n	1630 <main+0x90>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1636:	681a      	ldr	r2, [r3, #0]
    1638:	2102      	movs	r1, #2
    163a:	430a      	orrs	r2, r1
    163c:	601a      	str	r2, [r3, #0]
	
	configure_i2c_slave();
	
	uint8_t info_progression = 0;
    163e:	2500      	movs	r5, #0
	enum status_code status = STATUS_BUSY;
    1640:	2305      	movs	r3, #5
    1642:	469b      	mov	fp, r3
	
	while (run)
	{
		packet_slave.data = read_buffer_slave;
    1644:	4b70      	ldr	r3, [pc, #448]	; (1808 <main+0x268>)
    1646:	4699      	mov	r9, r3
			}
			// jusque la ca marche
			write_buffer_master[MSG_TYPE] = INFO_MSG;
			while (info_progression < 20)
			{
				write_buffer_master[DATA] = infos[info_progression];
    1648:	4b70      	ldr	r3, [pc, #448]	; (180c <main+0x26c>)
    164a:	4698      	mov	r8, r3
    164c:	e012      	b.n	1674 <main+0xd4>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    164e:	2280      	movs	r2, #128	; 0x80
    1650:	0312      	lsls	r2, r2, #12
    1652:	4b65      	ldr	r3, [pc, #404]	; (17e8 <main+0x248>)
    1654:	615a      	str	r2, [r3, #20]
    1656:	e01a      	b.n	168e <main+0xee>
				packet_master.data = write_buffer_master;
				if (info_progression < 14) // bug
				{
					
					while (i2c_master_write_packet_wait(&i2c_master_instance, &packet_master) != STATUS_OK)
    1658:	a90f      	add	r1, sp, #60	; 0x3c
    165a:	486d      	ldr	r0, [pc, #436]	; (1810 <main+0x270>)
    165c:	47a0      	blx	r4
    165e:	2800      	cmp	r0, #0
    1660:	d1fa      	bne.n	1658 <main+0xb8>
					{
						
					}
					info_progression++;
    1662:	3501      	adds	r5, #1
    1664:	b2ed      	uxtb	r5, r5
    1666:	3701      	adds	r7, #1
    1668:	e07a      	b.n	1760 <main+0x1c0>
			status = STATUS_BUSY;
    166a:	2305      	movs	r3, #5
    166c:	469b      	mov	fp, r3
    166e:	e001      	b.n	1674 <main+0xd4>
    1670:	2300      	movs	r3, #0
    1672:	469b      	mov	fp, r3
		packet_slave.data = read_buffer_slave;
    1674:	464b      	mov	r3, r9
    1676:	930e      	str	r3, [sp, #56]	; 0x38
			dir = i2c_slave_get_direction_wait(&i2c_slave_instance);
    1678:	4c66      	ldr	r4, [pc, #408]	; (1814 <main+0x274>)
    167a:	4860      	ldr	r0, [pc, #384]	; (17fc <main+0x25c>)
    167c:	47a0      	blx	r4
			if (dir == I2C_SLAVE_DIRECTION_READ)
    167e:	2800      	cmp	r0, #0
    1680:	d078      	beq.n	1774 <main+0x1d4>
		while (dir != I2C_SLAVE_DIRECTION_NONE)
    1682:	2802      	cmp	r0, #2
    1684:	d1f9      	bne.n	167a <main+0xda>
			if (infos[info_progression] == 14)
    1686:	4b64      	ldr	r3, [pc, #400]	; (1818 <main+0x278>)
    1688:	5d5b      	ldrb	r3, [r3, r5]
    168a:	2b0e      	cmp	r3, #14
    168c:	d0df      	beq.n	164e <main+0xae>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    168e:	4b5b      	ldr	r3, [pc, #364]	; (17fc <main+0x25c>)
    1690:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    1692:	2103      	movs	r1, #3
    1694:	69d3      	ldr	r3, [r2, #28]
	while (i2c_slave_is_syncing(module)) {
    1696:	4219      	tst	r1, r3
    1698:	d1fc      	bne.n	1694 <main+0xf4>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Disable module */
	i2c_hw->CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    169a:	6813      	ldr	r3, [r2, #0]
    169c:	2102      	movs	r1, #2
    169e:	438b      	bics	r3, r1
    16a0:	6013      	str	r3, [r2, #0]
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    16a2:	2364      	movs	r3, #100	; 0x64
    16a4:	9300      	str	r3, [sp, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    16a6:	4b5d      	ldr	r3, [pc, #372]	; (181c <main+0x27c>)
    16a8:	9301      	str	r3, [sp, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    16aa:	2300      	movs	r3, #0
    16ac:	9302      	str	r3, [sp, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    16ae:	466a      	mov	r2, sp
    16b0:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    16b2:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    16b4:	2280      	movs	r2, #128	; 0x80
    16b6:	0392      	lsls	r2, r2, #14
    16b8:	9204      	str	r2, [sp, #16]
	config->buffer_timeout   = 65535;
    16ba:	2201      	movs	r2, #1
    16bc:	4252      	negs	r2, r2
    16be:	4669      	mov	r1, sp
    16c0:	82ca      	strh	r2, [r1, #22]
	config->unknown_bus_state_timeout = 65535;
    16c2:	828a      	strh	r2, [r1, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    16c4:	3225      	adds	r2, #37	; 0x25
    16c6:	548b      	strb	r3, [r1, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    16c8:	930a      	str	r3, [sp, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    16ca:	3208      	adds	r2, #8
    16cc:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    16ce:	3201      	adds	r2, #1
    16d0:	548b      	strb	r3, [r1, r2]
	config->master_scl_low_extend_timeout  = false;
    16d2:	3201      	adds	r2, #1
    16d4:	548b      	strb	r3, [r1, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    16d6:	33d7      	adds	r3, #215	; 0xd7
    16d8:	466a      	mov	r2, sp
    16da:	860b      	strh	r3, [r1, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    16dc:	4b45      	ldr	r3, [pc, #276]	; (17f4 <main+0x254>)
    16de:	9307      	str	r3, [sp, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    16e0:	4b45      	ldr	r3, [pc, #276]	; (17f8 <main+0x258>)
    16e2:	9308      	str	r3, [sp, #32]
	i2c_master_init(&i2c_master_instance, EXT1_I2C_MODULE, &config_i2c_master);
    16e4:	4c4a      	ldr	r4, [pc, #296]	; (1810 <main+0x270>)
    16e6:	4946      	ldr	r1, [pc, #280]	; (1800 <main+0x260>)
    16e8:	0020      	movs	r0, r4
    16ea:	4b4d      	ldr	r3, [pc, #308]	; (1820 <main+0x280>)
    16ec:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16ee:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    16f0:	2107      	movs	r1, #7
    16f2:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    16f4:	4219      	tst	r1, r3
    16f6:	d1fc      	bne.n	16f2 <main+0x152>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    16f8:	6813      	ldr	r3, [r2, #0]
    16fa:	2102      	movs	r1, #2
    16fc:	430b      	orrs	r3, r1
    16fe:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1700:	4b43      	ldr	r3, [pc, #268]	; (1810 <main+0x270>)
    1702:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    1704:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1706:	2010      	movs	r0, #16
    1708:	8b51      	ldrh	r1, [r2, #26]
    170a:	4201      	tst	r1, r0
    170c:	d104      	bne.n	1718 <main+0x178>
		timeout_counter++;
    170e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1710:	42a3      	cmp	r3, r4
    1712:	d3f9      	bcc.n	1708 <main+0x168>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1714:	2310      	movs	r3, #16
    1716:	8353      	strh	r3, [r2, #26]
			write_buffer_master[MSG_TYPE] = I_AM_MASTER;
    1718:	4b3c      	ldr	r3, [pc, #240]	; (180c <main+0x26c>)
    171a:	22a0      	movs	r2, #160	; 0xa0
    171c:	701a      	strb	r2, [r3, #0]
			write_buffer_master[DATA] = MY_ADDRESS;
    171e:	2200      	movs	r2, #0
    1720:	705a      	strb	r2, [r3, #1]
			packet_master.data = write_buffer_master;
    1722:	9310      	str	r3, [sp, #64]	; 0x40
			while (status != STATUS_OK)
    1724:	465b      	mov	r3, fp
    1726:	2b00      	cmp	r3, #0
    1728:	d006      	beq.n	1738 <main+0x198>
				status = i2c_master_write_packet_wait(&i2c_master_instance, &packet_master);
    172a:	4c39      	ldr	r4, [pc, #228]	; (1810 <main+0x270>)
    172c:	4f3d      	ldr	r7, [pc, #244]	; (1824 <main+0x284>)
    172e:	a90f      	add	r1, sp, #60	; 0x3c
    1730:	0020      	movs	r0, r4
    1732:	47b8      	blx	r7
			while (status != STATUS_OK)
    1734:	2800      	cmp	r0, #0
    1736:	d1fa      	bne.n	172e <main+0x18e>
			packet_master.data = read_buffer_master;
    1738:	4b3b      	ldr	r3, [pc, #236]	; (1828 <main+0x288>)
    173a:	9310      	str	r3, [sp, #64]	; 0x40
			while (read_buffer_master[MSG_TYPE] != I_AM_READY)
    173c:	781b      	ldrb	r3, [r3, #0]
    173e:	2ba2      	cmp	r3, #162	; 0xa2
    1740:	d008      	beq.n	1754 <main+0x1b4>
				i2c_master_read_packet_wait(&i2c_master_instance, &packet_master);
    1742:	4c33      	ldr	r4, [pc, #204]	; (1810 <main+0x270>)
    1744:	4e39      	ldr	r6, [pc, #228]	; (182c <main+0x28c>)
			while (read_buffer_master[MSG_TYPE] != I_AM_READY)
    1746:	4f38      	ldr	r7, [pc, #224]	; (1828 <main+0x288>)
				i2c_master_read_packet_wait(&i2c_master_instance, &packet_master);
    1748:	a90f      	add	r1, sp, #60	; 0x3c
    174a:	0020      	movs	r0, r4
    174c:	47b0      	blx	r6
			while (read_buffer_master[MSG_TYPE] != I_AM_READY)
    174e:	783b      	ldrb	r3, [r7, #0]
    1750:	2ba2      	cmp	r3, #162	; 0xa2
    1752:	d1f9      	bne.n	1748 <main+0x1a8>
			write_buffer_master[MSG_TYPE] = INFO_MSG;
    1754:	22a4      	movs	r2, #164	; 0xa4
    1756:	4b2d      	ldr	r3, [pc, #180]	; (180c <main+0x26c>)
    1758:	701a      	strb	r2, [r3, #0]
    175a:	4f2f      	ldr	r7, [pc, #188]	; (1818 <main+0x278>)
    175c:	197f      	adds	r7, r7, r5
					while (i2c_master_write_packet_wait(&i2c_master_instance, &packet_master) != STATUS_OK)
    175e:	4c31      	ldr	r4, [pc, #196]	; (1824 <main+0x284>)
			while (info_progression < 20)
    1760:	2d13      	cmp	r5, #19
    1762:	d882      	bhi.n	166a <main+0xca>
				write_buffer_master[DATA] = infos[info_progression];
    1764:	783b      	ldrb	r3, [r7, #0]
    1766:	4642      	mov	r2, r8
    1768:	7053      	strb	r3, [r2, #1]
				packet_master.data = write_buffer_master;
    176a:	9210      	str	r2, [sp, #64]	; 0x40
				if (info_progression < 14) // bug
    176c:	2d0d      	cmp	r5, #13
    176e:	d800      	bhi.n	1772 <main+0x1d2>
    1770:	e772      	b.n	1658 <main+0xb8>
    1772:	e7fe      	b.n	1772 <main+0x1d2>
				}	
			}
		}
		else
		{
			packet_slave.data = read_buffer_slave;
    1774:	4b24      	ldr	r3, [pc, #144]	; (1808 <main+0x268>)
    1776:	930e      	str	r3, [sp, #56]	; 0x38
			while (read_buffer_slave[MSG_TYPE] != I_AM_MASTER)
    1778:	781b      	ldrb	r3, [r3, #0]
    177a:	2ba0      	cmp	r3, #160	; 0xa0
    177c:	d008      	beq.n	1790 <main+0x1f0>
			{
				i2c_slave_read_packet_wait(&i2c_slave_instance, &packet_slave);
    177e:	4f1f      	ldr	r7, [pc, #124]	; (17fc <main+0x25c>)
    1780:	4e2b      	ldr	r6, [pc, #172]	; (1830 <main+0x290>)
			while (read_buffer_slave[MSG_TYPE] != I_AM_MASTER)
    1782:	4c21      	ldr	r4, [pc, #132]	; (1808 <main+0x268>)
				i2c_slave_read_packet_wait(&i2c_slave_instance, &packet_slave);
    1784:	a90d      	add	r1, sp, #52	; 0x34
    1786:	0038      	movs	r0, r7
    1788:	47b0      	blx	r6
			while (read_buffer_slave[MSG_TYPE] != I_AM_MASTER)
    178a:	7823      	ldrb	r3, [r4, #0]
    178c:	2ba0      	cmp	r3, #160	; 0xa0
    178e:	d1f9      	bne.n	1784 <main+0x1e4>
			}
			
			uint8_t master_address = read_buffer_slave[DATA];
			write_buffer_slave[MSG_TYPE] = I_AM_READY;
    1790:	4b28      	ldr	r3, [pc, #160]	; (1834 <main+0x294>)
    1792:	22a2      	movs	r2, #162	; 0xa2
    1794:	701a      	strb	r2, [r3, #0]
			write_buffer_slave[DATA] = NO_DATA;
    1796:	325d      	adds	r2, #93	; 0x5d
    1798:	705a      	strb	r2, [r3, #1]
			packet_slave.data = write_buffer_slave;
    179a:	930e      	str	r3, [sp, #56]	; 0x38
			
			while (status != STATUS_OK)
    179c:	465b      	mov	r3, fp
    179e:	2b00      	cmp	r3, #0
    17a0:	d006      	beq.n	17b0 <main+0x210>
			{
				status = i2c_slave_write_packet_wait(&i2c_slave_instance, &packet_slave);
    17a2:	4c16      	ldr	r4, [pc, #88]	; (17fc <main+0x25c>)
    17a4:	4f24      	ldr	r7, [pc, #144]	; (1838 <main+0x298>)
    17a6:	a90d      	add	r1, sp, #52	; 0x34
    17a8:	0020      	movs	r0, r4
    17aa:	47b8      	blx	r7
			while (status != STATUS_OK)
    17ac:	2800      	cmp	r0, #0
    17ae:	d1fa      	bne.n	17a6 <main+0x206>
			}
			// ca marche jusque la
			uint8_t listen = 1;
			while (listen)
			{
				dir = i2c_slave_get_direction_wait(&i2c_slave_instance);
    17b0:	4c12      	ldr	r4, [pc, #72]	; (17fc <main+0x25c>)
    17b2:	4f18      	ldr	r7, [pc, #96]	; (1814 <main+0x274>)
				
				if (dir == I2C_SLAVE_DIRECTION_READ)
				{
					packet_slave.data = read_buffer_slave;
    17b4:	4e14      	ldr	r6, [pc, #80]	; (1808 <main+0x268>)
				dir = i2c_slave_get_direction_wait(&i2c_slave_instance);
    17b6:	0020      	movs	r0, r4
    17b8:	47b8      	blx	r7
				if (dir == I2C_SLAVE_DIRECTION_READ)
    17ba:	2800      	cmp	r0, #0
    17bc:	d1fb      	bne.n	17b6 <main+0x216>
					packet_slave.data = read_buffer_slave;
    17be:	960e      	str	r6, [sp, #56]	; 0x38
					i2c_slave_read_packet_wait(&i2c_slave_instance, &packet_slave);
    17c0:	a90d      	add	r1, sp, #52	; 0x34
    17c2:	480e      	ldr	r0, [pc, #56]	; (17fc <main+0x25c>)
    17c4:	4b1a      	ldr	r3, [pc, #104]	; (1830 <main+0x290>)
    17c6:	4798      	blx	r3
					if (packet_slave.data[DATA] == infos[info_progression])
    17c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    17ca:	785a      	ldrb	r2, [r3, #1]
    17cc:	4b12      	ldr	r3, [pc, #72]	; (1818 <main+0x278>)
    17ce:	5d5b      	ldrb	r3, [r3, r5]
    17d0:	429a      	cmp	r2, r3
    17d2:	d000      	beq.n	17d6 <main+0x236>
    17d4:	e74c      	b.n	1670 <main+0xd0>
					{
						info_progression++;
    17d6:	3501      	adds	r5, #1
    17d8:	b2ed      	uxtb	r5, r5
    17da:	e7ec      	b.n	17b6 <main+0x216>
    17dc:	00001575 	.word	0x00001575
    17e0:	00000df9 	.word	0x00000df9
    17e4:	00000f0d 	.word	0x00000f0d
    17e8:	41004400 	.word	0x41004400
    17ec:	000032c4 	.word	0x000032c4
    17f0:	00000e39 	.word	0x00000e39
    17f4:	00100002 	.word	0x00100002
    17f8:	00110002 	.word	0x00110002
    17fc:	2000007c 	.word	0x2000007c
    1800:	42000c00 	.word	0x42000c00
    1804:	0000084d 	.word	0x0000084d
    1808:	2000006c 	.word	0x2000006c
    180c:	20000020 	.word	0x20000020
    1810:	20000070 	.word	0x20000070
    1814:	00000bd9 	.word	0x00000bd9
    1818:	2000000c 	.word	0x2000000c
    181c:	00000d48 	.word	0x00000d48
    1820:	00000209 	.word	0x00000209
    1824:	000007f5 	.word	0x000007f5
    1828:	20000068 	.word	0x20000068
    182c:	000007e1 	.word	0x000007e1
    1830:	00000ac1 	.word	0x00000ac1
    1834:	20000024 	.word	0x20000024
    1838:	0000099d 	.word	0x0000099d

0000183c <__udivsi3>:
    183c:	2200      	movs	r2, #0
    183e:	0843      	lsrs	r3, r0, #1
    1840:	428b      	cmp	r3, r1
    1842:	d374      	bcc.n	192e <__udivsi3+0xf2>
    1844:	0903      	lsrs	r3, r0, #4
    1846:	428b      	cmp	r3, r1
    1848:	d35f      	bcc.n	190a <__udivsi3+0xce>
    184a:	0a03      	lsrs	r3, r0, #8
    184c:	428b      	cmp	r3, r1
    184e:	d344      	bcc.n	18da <__udivsi3+0x9e>
    1850:	0b03      	lsrs	r3, r0, #12
    1852:	428b      	cmp	r3, r1
    1854:	d328      	bcc.n	18a8 <__udivsi3+0x6c>
    1856:	0c03      	lsrs	r3, r0, #16
    1858:	428b      	cmp	r3, r1
    185a:	d30d      	bcc.n	1878 <__udivsi3+0x3c>
    185c:	22ff      	movs	r2, #255	; 0xff
    185e:	0209      	lsls	r1, r1, #8
    1860:	ba12      	rev	r2, r2
    1862:	0c03      	lsrs	r3, r0, #16
    1864:	428b      	cmp	r3, r1
    1866:	d302      	bcc.n	186e <__udivsi3+0x32>
    1868:	1212      	asrs	r2, r2, #8
    186a:	0209      	lsls	r1, r1, #8
    186c:	d065      	beq.n	193a <__udivsi3+0xfe>
    186e:	0b03      	lsrs	r3, r0, #12
    1870:	428b      	cmp	r3, r1
    1872:	d319      	bcc.n	18a8 <__udivsi3+0x6c>
    1874:	e000      	b.n	1878 <__udivsi3+0x3c>
    1876:	0a09      	lsrs	r1, r1, #8
    1878:	0bc3      	lsrs	r3, r0, #15
    187a:	428b      	cmp	r3, r1
    187c:	d301      	bcc.n	1882 <__udivsi3+0x46>
    187e:	03cb      	lsls	r3, r1, #15
    1880:	1ac0      	subs	r0, r0, r3
    1882:	4152      	adcs	r2, r2
    1884:	0b83      	lsrs	r3, r0, #14
    1886:	428b      	cmp	r3, r1
    1888:	d301      	bcc.n	188e <__udivsi3+0x52>
    188a:	038b      	lsls	r3, r1, #14
    188c:	1ac0      	subs	r0, r0, r3
    188e:	4152      	adcs	r2, r2
    1890:	0b43      	lsrs	r3, r0, #13
    1892:	428b      	cmp	r3, r1
    1894:	d301      	bcc.n	189a <__udivsi3+0x5e>
    1896:	034b      	lsls	r3, r1, #13
    1898:	1ac0      	subs	r0, r0, r3
    189a:	4152      	adcs	r2, r2
    189c:	0b03      	lsrs	r3, r0, #12
    189e:	428b      	cmp	r3, r1
    18a0:	d301      	bcc.n	18a6 <__udivsi3+0x6a>
    18a2:	030b      	lsls	r3, r1, #12
    18a4:	1ac0      	subs	r0, r0, r3
    18a6:	4152      	adcs	r2, r2
    18a8:	0ac3      	lsrs	r3, r0, #11
    18aa:	428b      	cmp	r3, r1
    18ac:	d301      	bcc.n	18b2 <__udivsi3+0x76>
    18ae:	02cb      	lsls	r3, r1, #11
    18b0:	1ac0      	subs	r0, r0, r3
    18b2:	4152      	adcs	r2, r2
    18b4:	0a83      	lsrs	r3, r0, #10
    18b6:	428b      	cmp	r3, r1
    18b8:	d301      	bcc.n	18be <__udivsi3+0x82>
    18ba:	028b      	lsls	r3, r1, #10
    18bc:	1ac0      	subs	r0, r0, r3
    18be:	4152      	adcs	r2, r2
    18c0:	0a43      	lsrs	r3, r0, #9
    18c2:	428b      	cmp	r3, r1
    18c4:	d301      	bcc.n	18ca <__udivsi3+0x8e>
    18c6:	024b      	lsls	r3, r1, #9
    18c8:	1ac0      	subs	r0, r0, r3
    18ca:	4152      	adcs	r2, r2
    18cc:	0a03      	lsrs	r3, r0, #8
    18ce:	428b      	cmp	r3, r1
    18d0:	d301      	bcc.n	18d6 <__udivsi3+0x9a>
    18d2:	020b      	lsls	r3, r1, #8
    18d4:	1ac0      	subs	r0, r0, r3
    18d6:	4152      	adcs	r2, r2
    18d8:	d2cd      	bcs.n	1876 <__udivsi3+0x3a>
    18da:	09c3      	lsrs	r3, r0, #7
    18dc:	428b      	cmp	r3, r1
    18de:	d301      	bcc.n	18e4 <__udivsi3+0xa8>
    18e0:	01cb      	lsls	r3, r1, #7
    18e2:	1ac0      	subs	r0, r0, r3
    18e4:	4152      	adcs	r2, r2
    18e6:	0983      	lsrs	r3, r0, #6
    18e8:	428b      	cmp	r3, r1
    18ea:	d301      	bcc.n	18f0 <__udivsi3+0xb4>
    18ec:	018b      	lsls	r3, r1, #6
    18ee:	1ac0      	subs	r0, r0, r3
    18f0:	4152      	adcs	r2, r2
    18f2:	0943      	lsrs	r3, r0, #5
    18f4:	428b      	cmp	r3, r1
    18f6:	d301      	bcc.n	18fc <__udivsi3+0xc0>
    18f8:	014b      	lsls	r3, r1, #5
    18fa:	1ac0      	subs	r0, r0, r3
    18fc:	4152      	adcs	r2, r2
    18fe:	0903      	lsrs	r3, r0, #4
    1900:	428b      	cmp	r3, r1
    1902:	d301      	bcc.n	1908 <__udivsi3+0xcc>
    1904:	010b      	lsls	r3, r1, #4
    1906:	1ac0      	subs	r0, r0, r3
    1908:	4152      	adcs	r2, r2
    190a:	08c3      	lsrs	r3, r0, #3
    190c:	428b      	cmp	r3, r1
    190e:	d301      	bcc.n	1914 <__udivsi3+0xd8>
    1910:	00cb      	lsls	r3, r1, #3
    1912:	1ac0      	subs	r0, r0, r3
    1914:	4152      	adcs	r2, r2
    1916:	0883      	lsrs	r3, r0, #2
    1918:	428b      	cmp	r3, r1
    191a:	d301      	bcc.n	1920 <__udivsi3+0xe4>
    191c:	008b      	lsls	r3, r1, #2
    191e:	1ac0      	subs	r0, r0, r3
    1920:	4152      	adcs	r2, r2
    1922:	0843      	lsrs	r3, r0, #1
    1924:	428b      	cmp	r3, r1
    1926:	d301      	bcc.n	192c <__udivsi3+0xf0>
    1928:	004b      	lsls	r3, r1, #1
    192a:	1ac0      	subs	r0, r0, r3
    192c:	4152      	adcs	r2, r2
    192e:	1a41      	subs	r1, r0, r1
    1930:	d200      	bcs.n	1934 <__udivsi3+0xf8>
    1932:	4601      	mov	r1, r0
    1934:	4152      	adcs	r2, r2
    1936:	4610      	mov	r0, r2
    1938:	4770      	bx	lr
    193a:	e7ff      	b.n	193c <__udivsi3+0x100>
    193c:	b501      	push	{r0, lr}
    193e:	2000      	movs	r0, #0
    1940:	f000 f806 	bl	1950 <__aeabi_idiv0>
    1944:	bd02      	pop	{r1, pc}
    1946:	46c0      	nop			; (mov r8, r8)

00001948 <__aeabi_uidivmod>:
    1948:	2900      	cmp	r1, #0
    194a:	d0f7      	beq.n	193c <__udivsi3+0x100>
    194c:	e776      	b.n	183c <__udivsi3>
    194e:	4770      	bx	lr

00001950 <__aeabi_idiv0>:
    1950:	4770      	bx	lr
    1952:	46c0      	nop			; (mov r8, r8)

00001954 <__aeabi_dadd>:
    1954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1956:	4645      	mov	r5, r8
    1958:	46de      	mov	lr, fp
    195a:	4657      	mov	r7, sl
    195c:	464e      	mov	r6, r9
    195e:	030c      	lsls	r4, r1, #12
    1960:	b5e0      	push	{r5, r6, r7, lr}
    1962:	004e      	lsls	r6, r1, #1
    1964:	0fc9      	lsrs	r1, r1, #31
    1966:	4688      	mov	r8, r1
    1968:	000d      	movs	r5, r1
    196a:	0a61      	lsrs	r1, r4, #9
    196c:	0f44      	lsrs	r4, r0, #29
    196e:	430c      	orrs	r4, r1
    1970:	00c7      	lsls	r7, r0, #3
    1972:	0319      	lsls	r1, r3, #12
    1974:	0058      	lsls	r0, r3, #1
    1976:	0fdb      	lsrs	r3, r3, #31
    1978:	469b      	mov	fp, r3
    197a:	0a4b      	lsrs	r3, r1, #9
    197c:	0f51      	lsrs	r1, r2, #29
    197e:	430b      	orrs	r3, r1
    1980:	0d76      	lsrs	r6, r6, #21
    1982:	0d40      	lsrs	r0, r0, #21
    1984:	0019      	movs	r1, r3
    1986:	00d2      	lsls	r2, r2, #3
    1988:	45d8      	cmp	r8, fp
    198a:	d100      	bne.n	198e <__aeabi_dadd+0x3a>
    198c:	e0ae      	b.n	1aec <__aeabi_dadd+0x198>
    198e:	1a35      	subs	r5, r6, r0
    1990:	2d00      	cmp	r5, #0
    1992:	dc00      	bgt.n	1996 <__aeabi_dadd+0x42>
    1994:	e0f6      	b.n	1b84 <__aeabi_dadd+0x230>
    1996:	2800      	cmp	r0, #0
    1998:	d10f      	bne.n	19ba <__aeabi_dadd+0x66>
    199a:	4313      	orrs	r3, r2
    199c:	d100      	bne.n	19a0 <__aeabi_dadd+0x4c>
    199e:	e0db      	b.n	1b58 <__aeabi_dadd+0x204>
    19a0:	1e6b      	subs	r3, r5, #1
    19a2:	2b00      	cmp	r3, #0
    19a4:	d000      	beq.n	19a8 <__aeabi_dadd+0x54>
    19a6:	e137      	b.n	1c18 <__aeabi_dadd+0x2c4>
    19a8:	1aba      	subs	r2, r7, r2
    19aa:	4297      	cmp	r7, r2
    19ac:	41bf      	sbcs	r7, r7
    19ae:	1a64      	subs	r4, r4, r1
    19b0:	427f      	negs	r7, r7
    19b2:	1be4      	subs	r4, r4, r7
    19b4:	2601      	movs	r6, #1
    19b6:	0017      	movs	r7, r2
    19b8:	e024      	b.n	1a04 <__aeabi_dadd+0xb0>
    19ba:	4bc6      	ldr	r3, [pc, #792]	; (1cd4 <__aeabi_dadd+0x380>)
    19bc:	429e      	cmp	r6, r3
    19be:	d04d      	beq.n	1a5c <__aeabi_dadd+0x108>
    19c0:	2380      	movs	r3, #128	; 0x80
    19c2:	041b      	lsls	r3, r3, #16
    19c4:	4319      	orrs	r1, r3
    19c6:	2d38      	cmp	r5, #56	; 0x38
    19c8:	dd00      	ble.n	19cc <__aeabi_dadd+0x78>
    19ca:	e107      	b.n	1bdc <__aeabi_dadd+0x288>
    19cc:	2d1f      	cmp	r5, #31
    19ce:	dd00      	ble.n	19d2 <__aeabi_dadd+0x7e>
    19d0:	e138      	b.n	1c44 <__aeabi_dadd+0x2f0>
    19d2:	2020      	movs	r0, #32
    19d4:	1b43      	subs	r3, r0, r5
    19d6:	469a      	mov	sl, r3
    19d8:	000b      	movs	r3, r1
    19da:	4650      	mov	r0, sl
    19dc:	4083      	lsls	r3, r0
    19de:	4699      	mov	r9, r3
    19e0:	0013      	movs	r3, r2
    19e2:	4648      	mov	r0, r9
    19e4:	40eb      	lsrs	r3, r5
    19e6:	4318      	orrs	r0, r3
    19e8:	0003      	movs	r3, r0
    19ea:	4650      	mov	r0, sl
    19ec:	4082      	lsls	r2, r0
    19ee:	1e50      	subs	r0, r2, #1
    19f0:	4182      	sbcs	r2, r0
    19f2:	40e9      	lsrs	r1, r5
    19f4:	431a      	orrs	r2, r3
    19f6:	1aba      	subs	r2, r7, r2
    19f8:	1a61      	subs	r1, r4, r1
    19fa:	4297      	cmp	r7, r2
    19fc:	41a4      	sbcs	r4, r4
    19fe:	0017      	movs	r7, r2
    1a00:	4264      	negs	r4, r4
    1a02:	1b0c      	subs	r4, r1, r4
    1a04:	0223      	lsls	r3, r4, #8
    1a06:	d562      	bpl.n	1ace <__aeabi_dadd+0x17a>
    1a08:	0264      	lsls	r4, r4, #9
    1a0a:	0a65      	lsrs	r5, r4, #9
    1a0c:	2d00      	cmp	r5, #0
    1a0e:	d100      	bne.n	1a12 <__aeabi_dadd+0xbe>
    1a10:	e0df      	b.n	1bd2 <__aeabi_dadd+0x27e>
    1a12:	0028      	movs	r0, r5
    1a14:	f001 fbe4 	bl	31e0 <__clzsi2>
    1a18:	0003      	movs	r3, r0
    1a1a:	3b08      	subs	r3, #8
    1a1c:	2b1f      	cmp	r3, #31
    1a1e:	dd00      	ble.n	1a22 <__aeabi_dadd+0xce>
    1a20:	e0d2      	b.n	1bc8 <__aeabi_dadd+0x274>
    1a22:	2220      	movs	r2, #32
    1a24:	003c      	movs	r4, r7
    1a26:	1ad2      	subs	r2, r2, r3
    1a28:	409d      	lsls	r5, r3
    1a2a:	40d4      	lsrs	r4, r2
    1a2c:	409f      	lsls	r7, r3
    1a2e:	4325      	orrs	r5, r4
    1a30:	429e      	cmp	r6, r3
    1a32:	dd00      	ble.n	1a36 <__aeabi_dadd+0xe2>
    1a34:	e0c4      	b.n	1bc0 <__aeabi_dadd+0x26c>
    1a36:	1b9e      	subs	r6, r3, r6
    1a38:	1c73      	adds	r3, r6, #1
    1a3a:	2b1f      	cmp	r3, #31
    1a3c:	dd00      	ble.n	1a40 <__aeabi_dadd+0xec>
    1a3e:	e0f1      	b.n	1c24 <__aeabi_dadd+0x2d0>
    1a40:	2220      	movs	r2, #32
    1a42:	0038      	movs	r0, r7
    1a44:	0029      	movs	r1, r5
    1a46:	1ad2      	subs	r2, r2, r3
    1a48:	40d8      	lsrs	r0, r3
    1a4a:	4091      	lsls	r1, r2
    1a4c:	4097      	lsls	r7, r2
    1a4e:	002c      	movs	r4, r5
    1a50:	4301      	orrs	r1, r0
    1a52:	1e78      	subs	r0, r7, #1
    1a54:	4187      	sbcs	r7, r0
    1a56:	40dc      	lsrs	r4, r3
    1a58:	2600      	movs	r6, #0
    1a5a:	430f      	orrs	r7, r1
    1a5c:	077b      	lsls	r3, r7, #29
    1a5e:	d009      	beq.n	1a74 <__aeabi_dadd+0x120>
    1a60:	230f      	movs	r3, #15
    1a62:	403b      	ands	r3, r7
    1a64:	2b04      	cmp	r3, #4
    1a66:	d005      	beq.n	1a74 <__aeabi_dadd+0x120>
    1a68:	1d3b      	adds	r3, r7, #4
    1a6a:	42bb      	cmp	r3, r7
    1a6c:	41bf      	sbcs	r7, r7
    1a6e:	427f      	negs	r7, r7
    1a70:	19e4      	adds	r4, r4, r7
    1a72:	001f      	movs	r7, r3
    1a74:	0223      	lsls	r3, r4, #8
    1a76:	d52c      	bpl.n	1ad2 <__aeabi_dadd+0x17e>
    1a78:	4b96      	ldr	r3, [pc, #600]	; (1cd4 <__aeabi_dadd+0x380>)
    1a7a:	3601      	adds	r6, #1
    1a7c:	429e      	cmp	r6, r3
    1a7e:	d100      	bne.n	1a82 <__aeabi_dadd+0x12e>
    1a80:	e09a      	b.n	1bb8 <__aeabi_dadd+0x264>
    1a82:	4645      	mov	r5, r8
    1a84:	4b94      	ldr	r3, [pc, #592]	; (1cd8 <__aeabi_dadd+0x384>)
    1a86:	08ff      	lsrs	r7, r7, #3
    1a88:	401c      	ands	r4, r3
    1a8a:	0760      	lsls	r0, r4, #29
    1a8c:	0576      	lsls	r6, r6, #21
    1a8e:	0264      	lsls	r4, r4, #9
    1a90:	4307      	orrs	r7, r0
    1a92:	0b24      	lsrs	r4, r4, #12
    1a94:	0d76      	lsrs	r6, r6, #21
    1a96:	2100      	movs	r1, #0
    1a98:	0324      	lsls	r4, r4, #12
    1a9a:	0b23      	lsrs	r3, r4, #12
    1a9c:	0d0c      	lsrs	r4, r1, #20
    1a9e:	4a8f      	ldr	r2, [pc, #572]	; (1cdc <__aeabi_dadd+0x388>)
    1aa0:	0524      	lsls	r4, r4, #20
    1aa2:	431c      	orrs	r4, r3
    1aa4:	4014      	ands	r4, r2
    1aa6:	0533      	lsls	r3, r6, #20
    1aa8:	4323      	orrs	r3, r4
    1aaa:	005b      	lsls	r3, r3, #1
    1aac:	07ed      	lsls	r5, r5, #31
    1aae:	085b      	lsrs	r3, r3, #1
    1ab0:	432b      	orrs	r3, r5
    1ab2:	0038      	movs	r0, r7
    1ab4:	0019      	movs	r1, r3
    1ab6:	bc3c      	pop	{r2, r3, r4, r5}
    1ab8:	4690      	mov	r8, r2
    1aba:	4699      	mov	r9, r3
    1abc:	46a2      	mov	sl, r4
    1abe:	46ab      	mov	fp, r5
    1ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ac2:	4664      	mov	r4, ip
    1ac4:	4304      	orrs	r4, r0
    1ac6:	d100      	bne.n	1aca <__aeabi_dadd+0x176>
    1ac8:	e211      	b.n	1eee <__aeabi_dadd+0x59a>
    1aca:	0004      	movs	r4, r0
    1acc:	4667      	mov	r7, ip
    1ace:	077b      	lsls	r3, r7, #29
    1ad0:	d1c6      	bne.n	1a60 <__aeabi_dadd+0x10c>
    1ad2:	4645      	mov	r5, r8
    1ad4:	0760      	lsls	r0, r4, #29
    1ad6:	08ff      	lsrs	r7, r7, #3
    1ad8:	4307      	orrs	r7, r0
    1ada:	08e4      	lsrs	r4, r4, #3
    1adc:	4b7d      	ldr	r3, [pc, #500]	; (1cd4 <__aeabi_dadd+0x380>)
    1ade:	429e      	cmp	r6, r3
    1ae0:	d030      	beq.n	1b44 <__aeabi_dadd+0x1f0>
    1ae2:	0324      	lsls	r4, r4, #12
    1ae4:	0576      	lsls	r6, r6, #21
    1ae6:	0b24      	lsrs	r4, r4, #12
    1ae8:	0d76      	lsrs	r6, r6, #21
    1aea:	e7d4      	b.n	1a96 <__aeabi_dadd+0x142>
    1aec:	1a33      	subs	r3, r6, r0
    1aee:	469a      	mov	sl, r3
    1af0:	2b00      	cmp	r3, #0
    1af2:	dd78      	ble.n	1be6 <__aeabi_dadd+0x292>
    1af4:	2800      	cmp	r0, #0
    1af6:	d031      	beq.n	1b5c <__aeabi_dadd+0x208>
    1af8:	4876      	ldr	r0, [pc, #472]	; (1cd4 <__aeabi_dadd+0x380>)
    1afa:	4286      	cmp	r6, r0
    1afc:	d0ae      	beq.n	1a5c <__aeabi_dadd+0x108>
    1afe:	2080      	movs	r0, #128	; 0x80
    1b00:	0400      	lsls	r0, r0, #16
    1b02:	4301      	orrs	r1, r0
    1b04:	4653      	mov	r3, sl
    1b06:	2b38      	cmp	r3, #56	; 0x38
    1b08:	dc00      	bgt.n	1b0c <__aeabi_dadd+0x1b8>
    1b0a:	e0e9      	b.n	1ce0 <__aeabi_dadd+0x38c>
    1b0c:	430a      	orrs	r2, r1
    1b0e:	1e51      	subs	r1, r2, #1
    1b10:	418a      	sbcs	r2, r1
    1b12:	2100      	movs	r1, #0
    1b14:	19d2      	adds	r2, r2, r7
    1b16:	42ba      	cmp	r2, r7
    1b18:	41bf      	sbcs	r7, r7
    1b1a:	1909      	adds	r1, r1, r4
    1b1c:	427c      	negs	r4, r7
    1b1e:	0017      	movs	r7, r2
    1b20:	190c      	adds	r4, r1, r4
    1b22:	0223      	lsls	r3, r4, #8
    1b24:	d5d3      	bpl.n	1ace <__aeabi_dadd+0x17a>
    1b26:	4b6b      	ldr	r3, [pc, #428]	; (1cd4 <__aeabi_dadd+0x380>)
    1b28:	3601      	adds	r6, #1
    1b2a:	429e      	cmp	r6, r3
    1b2c:	d100      	bne.n	1b30 <__aeabi_dadd+0x1dc>
    1b2e:	e13a      	b.n	1da6 <__aeabi_dadd+0x452>
    1b30:	2001      	movs	r0, #1
    1b32:	4b69      	ldr	r3, [pc, #420]	; (1cd8 <__aeabi_dadd+0x384>)
    1b34:	401c      	ands	r4, r3
    1b36:	087b      	lsrs	r3, r7, #1
    1b38:	4007      	ands	r7, r0
    1b3a:	431f      	orrs	r7, r3
    1b3c:	07e0      	lsls	r0, r4, #31
    1b3e:	4307      	orrs	r7, r0
    1b40:	0864      	lsrs	r4, r4, #1
    1b42:	e78b      	b.n	1a5c <__aeabi_dadd+0x108>
    1b44:	0023      	movs	r3, r4
    1b46:	433b      	orrs	r3, r7
    1b48:	d100      	bne.n	1b4c <__aeabi_dadd+0x1f8>
    1b4a:	e1cb      	b.n	1ee4 <__aeabi_dadd+0x590>
    1b4c:	2280      	movs	r2, #128	; 0x80
    1b4e:	0312      	lsls	r2, r2, #12
    1b50:	4314      	orrs	r4, r2
    1b52:	0324      	lsls	r4, r4, #12
    1b54:	0b24      	lsrs	r4, r4, #12
    1b56:	e79e      	b.n	1a96 <__aeabi_dadd+0x142>
    1b58:	002e      	movs	r6, r5
    1b5a:	e77f      	b.n	1a5c <__aeabi_dadd+0x108>
    1b5c:	0008      	movs	r0, r1
    1b5e:	4310      	orrs	r0, r2
    1b60:	d100      	bne.n	1b64 <__aeabi_dadd+0x210>
    1b62:	e0b4      	b.n	1cce <__aeabi_dadd+0x37a>
    1b64:	1e58      	subs	r0, r3, #1
    1b66:	2800      	cmp	r0, #0
    1b68:	d000      	beq.n	1b6c <__aeabi_dadd+0x218>
    1b6a:	e0de      	b.n	1d2a <__aeabi_dadd+0x3d6>
    1b6c:	18ba      	adds	r2, r7, r2
    1b6e:	42ba      	cmp	r2, r7
    1b70:	419b      	sbcs	r3, r3
    1b72:	1864      	adds	r4, r4, r1
    1b74:	425b      	negs	r3, r3
    1b76:	18e4      	adds	r4, r4, r3
    1b78:	0017      	movs	r7, r2
    1b7a:	2601      	movs	r6, #1
    1b7c:	0223      	lsls	r3, r4, #8
    1b7e:	d5a6      	bpl.n	1ace <__aeabi_dadd+0x17a>
    1b80:	2602      	movs	r6, #2
    1b82:	e7d5      	b.n	1b30 <__aeabi_dadd+0x1dc>
    1b84:	2d00      	cmp	r5, #0
    1b86:	d16e      	bne.n	1c66 <__aeabi_dadd+0x312>
    1b88:	1c70      	adds	r0, r6, #1
    1b8a:	0540      	lsls	r0, r0, #21
    1b8c:	0d40      	lsrs	r0, r0, #21
    1b8e:	2801      	cmp	r0, #1
    1b90:	dc00      	bgt.n	1b94 <__aeabi_dadd+0x240>
    1b92:	e0f9      	b.n	1d88 <__aeabi_dadd+0x434>
    1b94:	1ab8      	subs	r0, r7, r2
    1b96:	4684      	mov	ip, r0
    1b98:	4287      	cmp	r7, r0
    1b9a:	4180      	sbcs	r0, r0
    1b9c:	1ae5      	subs	r5, r4, r3
    1b9e:	4240      	negs	r0, r0
    1ba0:	1a2d      	subs	r5, r5, r0
    1ba2:	0228      	lsls	r0, r5, #8
    1ba4:	d400      	bmi.n	1ba8 <__aeabi_dadd+0x254>
    1ba6:	e089      	b.n	1cbc <__aeabi_dadd+0x368>
    1ba8:	1bd7      	subs	r7, r2, r7
    1baa:	42ba      	cmp	r2, r7
    1bac:	4192      	sbcs	r2, r2
    1bae:	1b1c      	subs	r4, r3, r4
    1bb0:	4252      	negs	r2, r2
    1bb2:	1aa5      	subs	r5, r4, r2
    1bb4:	46d8      	mov	r8, fp
    1bb6:	e729      	b.n	1a0c <__aeabi_dadd+0xb8>
    1bb8:	4645      	mov	r5, r8
    1bba:	2400      	movs	r4, #0
    1bbc:	2700      	movs	r7, #0
    1bbe:	e76a      	b.n	1a96 <__aeabi_dadd+0x142>
    1bc0:	4c45      	ldr	r4, [pc, #276]	; (1cd8 <__aeabi_dadd+0x384>)
    1bc2:	1af6      	subs	r6, r6, r3
    1bc4:	402c      	ands	r4, r5
    1bc6:	e749      	b.n	1a5c <__aeabi_dadd+0x108>
    1bc8:	003d      	movs	r5, r7
    1bca:	3828      	subs	r0, #40	; 0x28
    1bcc:	4085      	lsls	r5, r0
    1bce:	2700      	movs	r7, #0
    1bd0:	e72e      	b.n	1a30 <__aeabi_dadd+0xdc>
    1bd2:	0038      	movs	r0, r7
    1bd4:	f001 fb04 	bl	31e0 <__clzsi2>
    1bd8:	3020      	adds	r0, #32
    1bda:	e71d      	b.n	1a18 <__aeabi_dadd+0xc4>
    1bdc:	430a      	orrs	r2, r1
    1bde:	1e51      	subs	r1, r2, #1
    1be0:	418a      	sbcs	r2, r1
    1be2:	2100      	movs	r1, #0
    1be4:	e707      	b.n	19f6 <__aeabi_dadd+0xa2>
    1be6:	2b00      	cmp	r3, #0
    1be8:	d000      	beq.n	1bec <__aeabi_dadd+0x298>
    1bea:	e0f3      	b.n	1dd4 <__aeabi_dadd+0x480>
    1bec:	1c70      	adds	r0, r6, #1
    1bee:	0543      	lsls	r3, r0, #21
    1bf0:	0d5b      	lsrs	r3, r3, #21
    1bf2:	2b01      	cmp	r3, #1
    1bf4:	dc00      	bgt.n	1bf8 <__aeabi_dadd+0x2a4>
    1bf6:	e0ad      	b.n	1d54 <__aeabi_dadd+0x400>
    1bf8:	4b36      	ldr	r3, [pc, #216]	; (1cd4 <__aeabi_dadd+0x380>)
    1bfa:	4298      	cmp	r0, r3
    1bfc:	d100      	bne.n	1c00 <__aeabi_dadd+0x2ac>
    1bfe:	e0d1      	b.n	1da4 <__aeabi_dadd+0x450>
    1c00:	18ba      	adds	r2, r7, r2
    1c02:	42ba      	cmp	r2, r7
    1c04:	41bf      	sbcs	r7, r7
    1c06:	1864      	adds	r4, r4, r1
    1c08:	427f      	negs	r7, r7
    1c0a:	19e4      	adds	r4, r4, r7
    1c0c:	07e7      	lsls	r7, r4, #31
    1c0e:	0852      	lsrs	r2, r2, #1
    1c10:	4317      	orrs	r7, r2
    1c12:	0864      	lsrs	r4, r4, #1
    1c14:	0006      	movs	r6, r0
    1c16:	e721      	b.n	1a5c <__aeabi_dadd+0x108>
    1c18:	482e      	ldr	r0, [pc, #184]	; (1cd4 <__aeabi_dadd+0x380>)
    1c1a:	4285      	cmp	r5, r0
    1c1c:	d100      	bne.n	1c20 <__aeabi_dadd+0x2cc>
    1c1e:	e093      	b.n	1d48 <__aeabi_dadd+0x3f4>
    1c20:	001d      	movs	r5, r3
    1c22:	e6d0      	b.n	19c6 <__aeabi_dadd+0x72>
    1c24:	0029      	movs	r1, r5
    1c26:	3e1f      	subs	r6, #31
    1c28:	40f1      	lsrs	r1, r6
    1c2a:	2b20      	cmp	r3, #32
    1c2c:	d100      	bne.n	1c30 <__aeabi_dadd+0x2dc>
    1c2e:	e08d      	b.n	1d4c <__aeabi_dadd+0x3f8>
    1c30:	2240      	movs	r2, #64	; 0x40
    1c32:	1ad3      	subs	r3, r2, r3
    1c34:	409d      	lsls	r5, r3
    1c36:	432f      	orrs	r7, r5
    1c38:	1e7d      	subs	r5, r7, #1
    1c3a:	41af      	sbcs	r7, r5
    1c3c:	2400      	movs	r4, #0
    1c3e:	430f      	orrs	r7, r1
    1c40:	2600      	movs	r6, #0
    1c42:	e744      	b.n	1ace <__aeabi_dadd+0x17a>
    1c44:	002b      	movs	r3, r5
    1c46:	0008      	movs	r0, r1
    1c48:	3b20      	subs	r3, #32
    1c4a:	40d8      	lsrs	r0, r3
    1c4c:	0003      	movs	r3, r0
    1c4e:	2d20      	cmp	r5, #32
    1c50:	d100      	bne.n	1c54 <__aeabi_dadd+0x300>
    1c52:	e07d      	b.n	1d50 <__aeabi_dadd+0x3fc>
    1c54:	2040      	movs	r0, #64	; 0x40
    1c56:	1b45      	subs	r5, r0, r5
    1c58:	40a9      	lsls	r1, r5
    1c5a:	430a      	orrs	r2, r1
    1c5c:	1e51      	subs	r1, r2, #1
    1c5e:	418a      	sbcs	r2, r1
    1c60:	2100      	movs	r1, #0
    1c62:	431a      	orrs	r2, r3
    1c64:	e6c7      	b.n	19f6 <__aeabi_dadd+0xa2>
    1c66:	2e00      	cmp	r6, #0
    1c68:	d050      	beq.n	1d0c <__aeabi_dadd+0x3b8>
    1c6a:	4e1a      	ldr	r6, [pc, #104]	; (1cd4 <__aeabi_dadd+0x380>)
    1c6c:	42b0      	cmp	r0, r6
    1c6e:	d057      	beq.n	1d20 <__aeabi_dadd+0x3cc>
    1c70:	2680      	movs	r6, #128	; 0x80
    1c72:	426b      	negs	r3, r5
    1c74:	4699      	mov	r9, r3
    1c76:	0436      	lsls	r6, r6, #16
    1c78:	4334      	orrs	r4, r6
    1c7a:	464b      	mov	r3, r9
    1c7c:	2b38      	cmp	r3, #56	; 0x38
    1c7e:	dd00      	ble.n	1c82 <__aeabi_dadd+0x32e>
    1c80:	e0d6      	b.n	1e30 <__aeabi_dadd+0x4dc>
    1c82:	2b1f      	cmp	r3, #31
    1c84:	dd00      	ble.n	1c88 <__aeabi_dadd+0x334>
    1c86:	e135      	b.n	1ef4 <__aeabi_dadd+0x5a0>
    1c88:	2620      	movs	r6, #32
    1c8a:	1af5      	subs	r5, r6, r3
    1c8c:	0026      	movs	r6, r4
    1c8e:	40ae      	lsls	r6, r5
    1c90:	46b2      	mov	sl, r6
    1c92:	003e      	movs	r6, r7
    1c94:	40de      	lsrs	r6, r3
    1c96:	46ac      	mov	ip, r5
    1c98:	0035      	movs	r5, r6
    1c9a:	4656      	mov	r6, sl
    1c9c:	432e      	orrs	r6, r5
    1c9e:	4665      	mov	r5, ip
    1ca0:	40af      	lsls	r7, r5
    1ca2:	1e7d      	subs	r5, r7, #1
    1ca4:	41af      	sbcs	r7, r5
    1ca6:	40dc      	lsrs	r4, r3
    1ca8:	4337      	orrs	r7, r6
    1caa:	1bd7      	subs	r7, r2, r7
    1cac:	42ba      	cmp	r2, r7
    1cae:	4192      	sbcs	r2, r2
    1cb0:	1b0c      	subs	r4, r1, r4
    1cb2:	4252      	negs	r2, r2
    1cb4:	1aa4      	subs	r4, r4, r2
    1cb6:	0006      	movs	r6, r0
    1cb8:	46d8      	mov	r8, fp
    1cba:	e6a3      	b.n	1a04 <__aeabi_dadd+0xb0>
    1cbc:	4664      	mov	r4, ip
    1cbe:	4667      	mov	r7, ip
    1cc0:	432c      	orrs	r4, r5
    1cc2:	d000      	beq.n	1cc6 <__aeabi_dadd+0x372>
    1cc4:	e6a2      	b.n	1a0c <__aeabi_dadd+0xb8>
    1cc6:	2500      	movs	r5, #0
    1cc8:	2600      	movs	r6, #0
    1cca:	2700      	movs	r7, #0
    1ccc:	e706      	b.n	1adc <__aeabi_dadd+0x188>
    1cce:	001e      	movs	r6, r3
    1cd0:	e6c4      	b.n	1a5c <__aeabi_dadd+0x108>
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	000007ff 	.word	0x000007ff
    1cd8:	ff7fffff 	.word	0xff7fffff
    1cdc:	800fffff 	.word	0x800fffff
    1ce0:	2b1f      	cmp	r3, #31
    1ce2:	dc63      	bgt.n	1dac <__aeabi_dadd+0x458>
    1ce4:	2020      	movs	r0, #32
    1ce6:	1ac3      	subs	r3, r0, r3
    1ce8:	0008      	movs	r0, r1
    1cea:	4098      	lsls	r0, r3
    1cec:	469c      	mov	ip, r3
    1cee:	4683      	mov	fp, r0
    1cf0:	4653      	mov	r3, sl
    1cf2:	0010      	movs	r0, r2
    1cf4:	40d8      	lsrs	r0, r3
    1cf6:	0003      	movs	r3, r0
    1cf8:	4658      	mov	r0, fp
    1cfa:	4318      	orrs	r0, r3
    1cfc:	4663      	mov	r3, ip
    1cfe:	409a      	lsls	r2, r3
    1d00:	1e53      	subs	r3, r2, #1
    1d02:	419a      	sbcs	r2, r3
    1d04:	4653      	mov	r3, sl
    1d06:	4302      	orrs	r2, r0
    1d08:	40d9      	lsrs	r1, r3
    1d0a:	e703      	b.n	1b14 <__aeabi_dadd+0x1c0>
    1d0c:	0026      	movs	r6, r4
    1d0e:	433e      	orrs	r6, r7
    1d10:	d006      	beq.n	1d20 <__aeabi_dadd+0x3cc>
    1d12:	43eb      	mvns	r3, r5
    1d14:	4699      	mov	r9, r3
    1d16:	2b00      	cmp	r3, #0
    1d18:	d0c7      	beq.n	1caa <__aeabi_dadd+0x356>
    1d1a:	4e94      	ldr	r6, [pc, #592]	; (1f6c <__aeabi_dadd+0x618>)
    1d1c:	42b0      	cmp	r0, r6
    1d1e:	d1ac      	bne.n	1c7a <__aeabi_dadd+0x326>
    1d20:	000c      	movs	r4, r1
    1d22:	0017      	movs	r7, r2
    1d24:	0006      	movs	r6, r0
    1d26:	46d8      	mov	r8, fp
    1d28:	e698      	b.n	1a5c <__aeabi_dadd+0x108>
    1d2a:	4b90      	ldr	r3, [pc, #576]	; (1f6c <__aeabi_dadd+0x618>)
    1d2c:	459a      	cmp	sl, r3
    1d2e:	d00b      	beq.n	1d48 <__aeabi_dadd+0x3f4>
    1d30:	4682      	mov	sl, r0
    1d32:	e6e7      	b.n	1b04 <__aeabi_dadd+0x1b0>
    1d34:	2800      	cmp	r0, #0
    1d36:	d000      	beq.n	1d3a <__aeabi_dadd+0x3e6>
    1d38:	e09e      	b.n	1e78 <__aeabi_dadd+0x524>
    1d3a:	0018      	movs	r0, r3
    1d3c:	4310      	orrs	r0, r2
    1d3e:	d100      	bne.n	1d42 <__aeabi_dadd+0x3ee>
    1d40:	e0e9      	b.n	1f16 <__aeabi_dadd+0x5c2>
    1d42:	001c      	movs	r4, r3
    1d44:	0017      	movs	r7, r2
    1d46:	46d8      	mov	r8, fp
    1d48:	4e88      	ldr	r6, [pc, #544]	; (1f6c <__aeabi_dadd+0x618>)
    1d4a:	e687      	b.n	1a5c <__aeabi_dadd+0x108>
    1d4c:	2500      	movs	r5, #0
    1d4e:	e772      	b.n	1c36 <__aeabi_dadd+0x2e2>
    1d50:	2100      	movs	r1, #0
    1d52:	e782      	b.n	1c5a <__aeabi_dadd+0x306>
    1d54:	0023      	movs	r3, r4
    1d56:	433b      	orrs	r3, r7
    1d58:	2e00      	cmp	r6, #0
    1d5a:	d000      	beq.n	1d5e <__aeabi_dadd+0x40a>
    1d5c:	e0ab      	b.n	1eb6 <__aeabi_dadd+0x562>
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d100      	bne.n	1d64 <__aeabi_dadd+0x410>
    1d62:	e0e7      	b.n	1f34 <__aeabi_dadd+0x5e0>
    1d64:	000b      	movs	r3, r1
    1d66:	4313      	orrs	r3, r2
    1d68:	d100      	bne.n	1d6c <__aeabi_dadd+0x418>
    1d6a:	e677      	b.n	1a5c <__aeabi_dadd+0x108>
    1d6c:	18ba      	adds	r2, r7, r2
    1d6e:	42ba      	cmp	r2, r7
    1d70:	41bf      	sbcs	r7, r7
    1d72:	1864      	adds	r4, r4, r1
    1d74:	427f      	negs	r7, r7
    1d76:	19e4      	adds	r4, r4, r7
    1d78:	0223      	lsls	r3, r4, #8
    1d7a:	d400      	bmi.n	1d7e <__aeabi_dadd+0x42a>
    1d7c:	e0f2      	b.n	1f64 <__aeabi_dadd+0x610>
    1d7e:	4b7c      	ldr	r3, [pc, #496]	; (1f70 <__aeabi_dadd+0x61c>)
    1d80:	0017      	movs	r7, r2
    1d82:	401c      	ands	r4, r3
    1d84:	0006      	movs	r6, r0
    1d86:	e669      	b.n	1a5c <__aeabi_dadd+0x108>
    1d88:	0020      	movs	r0, r4
    1d8a:	4338      	orrs	r0, r7
    1d8c:	2e00      	cmp	r6, #0
    1d8e:	d1d1      	bne.n	1d34 <__aeabi_dadd+0x3e0>
    1d90:	2800      	cmp	r0, #0
    1d92:	d15b      	bne.n	1e4c <__aeabi_dadd+0x4f8>
    1d94:	001c      	movs	r4, r3
    1d96:	4314      	orrs	r4, r2
    1d98:	d100      	bne.n	1d9c <__aeabi_dadd+0x448>
    1d9a:	e0a8      	b.n	1eee <__aeabi_dadd+0x59a>
    1d9c:	001c      	movs	r4, r3
    1d9e:	0017      	movs	r7, r2
    1da0:	46d8      	mov	r8, fp
    1da2:	e65b      	b.n	1a5c <__aeabi_dadd+0x108>
    1da4:	0006      	movs	r6, r0
    1da6:	2400      	movs	r4, #0
    1da8:	2700      	movs	r7, #0
    1daa:	e697      	b.n	1adc <__aeabi_dadd+0x188>
    1dac:	4650      	mov	r0, sl
    1dae:	000b      	movs	r3, r1
    1db0:	3820      	subs	r0, #32
    1db2:	40c3      	lsrs	r3, r0
    1db4:	4699      	mov	r9, r3
    1db6:	4653      	mov	r3, sl
    1db8:	2b20      	cmp	r3, #32
    1dba:	d100      	bne.n	1dbe <__aeabi_dadd+0x46a>
    1dbc:	e095      	b.n	1eea <__aeabi_dadd+0x596>
    1dbe:	2340      	movs	r3, #64	; 0x40
    1dc0:	4650      	mov	r0, sl
    1dc2:	1a1b      	subs	r3, r3, r0
    1dc4:	4099      	lsls	r1, r3
    1dc6:	430a      	orrs	r2, r1
    1dc8:	1e51      	subs	r1, r2, #1
    1dca:	418a      	sbcs	r2, r1
    1dcc:	464b      	mov	r3, r9
    1dce:	2100      	movs	r1, #0
    1dd0:	431a      	orrs	r2, r3
    1dd2:	e69f      	b.n	1b14 <__aeabi_dadd+0x1c0>
    1dd4:	2e00      	cmp	r6, #0
    1dd6:	d130      	bne.n	1e3a <__aeabi_dadd+0x4e6>
    1dd8:	0026      	movs	r6, r4
    1dda:	433e      	orrs	r6, r7
    1ddc:	d067      	beq.n	1eae <__aeabi_dadd+0x55a>
    1dde:	43db      	mvns	r3, r3
    1de0:	469a      	mov	sl, r3
    1de2:	2b00      	cmp	r3, #0
    1de4:	d01c      	beq.n	1e20 <__aeabi_dadd+0x4cc>
    1de6:	4e61      	ldr	r6, [pc, #388]	; (1f6c <__aeabi_dadd+0x618>)
    1de8:	42b0      	cmp	r0, r6
    1dea:	d060      	beq.n	1eae <__aeabi_dadd+0x55a>
    1dec:	4653      	mov	r3, sl
    1dee:	2b38      	cmp	r3, #56	; 0x38
    1df0:	dd00      	ble.n	1df4 <__aeabi_dadd+0x4a0>
    1df2:	e096      	b.n	1f22 <__aeabi_dadd+0x5ce>
    1df4:	2b1f      	cmp	r3, #31
    1df6:	dd00      	ble.n	1dfa <__aeabi_dadd+0x4a6>
    1df8:	e09f      	b.n	1f3a <__aeabi_dadd+0x5e6>
    1dfa:	2620      	movs	r6, #32
    1dfc:	1af3      	subs	r3, r6, r3
    1dfe:	0026      	movs	r6, r4
    1e00:	409e      	lsls	r6, r3
    1e02:	469c      	mov	ip, r3
    1e04:	46b3      	mov	fp, r6
    1e06:	4653      	mov	r3, sl
    1e08:	003e      	movs	r6, r7
    1e0a:	40de      	lsrs	r6, r3
    1e0c:	0033      	movs	r3, r6
    1e0e:	465e      	mov	r6, fp
    1e10:	431e      	orrs	r6, r3
    1e12:	4663      	mov	r3, ip
    1e14:	409f      	lsls	r7, r3
    1e16:	1e7b      	subs	r3, r7, #1
    1e18:	419f      	sbcs	r7, r3
    1e1a:	4653      	mov	r3, sl
    1e1c:	40dc      	lsrs	r4, r3
    1e1e:	4337      	orrs	r7, r6
    1e20:	18bf      	adds	r7, r7, r2
    1e22:	4297      	cmp	r7, r2
    1e24:	4192      	sbcs	r2, r2
    1e26:	1864      	adds	r4, r4, r1
    1e28:	4252      	negs	r2, r2
    1e2a:	18a4      	adds	r4, r4, r2
    1e2c:	0006      	movs	r6, r0
    1e2e:	e678      	b.n	1b22 <__aeabi_dadd+0x1ce>
    1e30:	4327      	orrs	r7, r4
    1e32:	1e7c      	subs	r4, r7, #1
    1e34:	41a7      	sbcs	r7, r4
    1e36:	2400      	movs	r4, #0
    1e38:	e737      	b.n	1caa <__aeabi_dadd+0x356>
    1e3a:	4e4c      	ldr	r6, [pc, #304]	; (1f6c <__aeabi_dadd+0x618>)
    1e3c:	42b0      	cmp	r0, r6
    1e3e:	d036      	beq.n	1eae <__aeabi_dadd+0x55a>
    1e40:	2680      	movs	r6, #128	; 0x80
    1e42:	425b      	negs	r3, r3
    1e44:	0436      	lsls	r6, r6, #16
    1e46:	469a      	mov	sl, r3
    1e48:	4334      	orrs	r4, r6
    1e4a:	e7cf      	b.n	1dec <__aeabi_dadd+0x498>
    1e4c:	0018      	movs	r0, r3
    1e4e:	4310      	orrs	r0, r2
    1e50:	d100      	bne.n	1e54 <__aeabi_dadd+0x500>
    1e52:	e603      	b.n	1a5c <__aeabi_dadd+0x108>
    1e54:	1ab8      	subs	r0, r7, r2
    1e56:	4684      	mov	ip, r0
    1e58:	4567      	cmp	r7, ip
    1e5a:	41ad      	sbcs	r5, r5
    1e5c:	1ae0      	subs	r0, r4, r3
    1e5e:	426d      	negs	r5, r5
    1e60:	1b40      	subs	r0, r0, r5
    1e62:	0205      	lsls	r5, r0, #8
    1e64:	d400      	bmi.n	1e68 <__aeabi_dadd+0x514>
    1e66:	e62c      	b.n	1ac2 <__aeabi_dadd+0x16e>
    1e68:	1bd7      	subs	r7, r2, r7
    1e6a:	42ba      	cmp	r2, r7
    1e6c:	4192      	sbcs	r2, r2
    1e6e:	1b1c      	subs	r4, r3, r4
    1e70:	4252      	negs	r2, r2
    1e72:	1aa4      	subs	r4, r4, r2
    1e74:	46d8      	mov	r8, fp
    1e76:	e5f1      	b.n	1a5c <__aeabi_dadd+0x108>
    1e78:	0018      	movs	r0, r3
    1e7a:	4310      	orrs	r0, r2
    1e7c:	d100      	bne.n	1e80 <__aeabi_dadd+0x52c>
    1e7e:	e763      	b.n	1d48 <__aeabi_dadd+0x3f4>
    1e80:	08f8      	lsrs	r0, r7, #3
    1e82:	0767      	lsls	r7, r4, #29
    1e84:	4307      	orrs	r7, r0
    1e86:	2080      	movs	r0, #128	; 0x80
    1e88:	08e4      	lsrs	r4, r4, #3
    1e8a:	0300      	lsls	r0, r0, #12
    1e8c:	4204      	tst	r4, r0
    1e8e:	d008      	beq.n	1ea2 <__aeabi_dadd+0x54e>
    1e90:	08dd      	lsrs	r5, r3, #3
    1e92:	4205      	tst	r5, r0
    1e94:	d105      	bne.n	1ea2 <__aeabi_dadd+0x54e>
    1e96:	08d2      	lsrs	r2, r2, #3
    1e98:	0759      	lsls	r1, r3, #29
    1e9a:	4311      	orrs	r1, r2
    1e9c:	000f      	movs	r7, r1
    1e9e:	002c      	movs	r4, r5
    1ea0:	46d8      	mov	r8, fp
    1ea2:	0f7b      	lsrs	r3, r7, #29
    1ea4:	00e4      	lsls	r4, r4, #3
    1ea6:	431c      	orrs	r4, r3
    1ea8:	00ff      	lsls	r7, r7, #3
    1eaa:	4e30      	ldr	r6, [pc, #192]	; (1f6c <__aeabi_dadd+0x618>)
    1eac:	e5d6      	b.n	1a5c <__aeabi_dadd+0x108>
    1eae:	000c      	movs	r4, r1
    1eb0:	0017      	movs	r7, r2
    1eb2:	0006      	movs	r6, r0
    1eb4:	e5d2      	b.n	1a5c <__aeabi_dadd+0x108>
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d038      	beq.n	1f2c <__aeabi_dadd+0x5d8>
    1eba:	000b      	movs	r3, r1
    1ebc:	4313      	orrs	r3, r2
    1ebe:	d100      	bne.n	1ec2 <__aeabi_dadd+0x56e>
    1ec0:	e742      	b.n	1d48 <__aeabi_dadd+0x3f4>
    1ec2:	08f8      	lsrs	r0, r7, #3
    1ec4:	0767      	lsls	r7, r4, #29
    1ec6:	4307      	orrs	r7, r0
    1ec8:	2080      	movs	r0, #128	; 0x80
    1eca:	08e4      	lsrs	r4, r4, #3
    1ecc:	0300      	lsls	r0, r0, #12
    1ece:	4204      	tst	r4, r0
    1ed0:	d0e7      	beq.n	1ea2 <__aeabi_dadd+0x54e>
    1ed2:	08cb      	lsrs	r3, r1, #3
    1ed4:	4203      	tst	r3, r0
    1ed6:	d1e4      	bne.n	1ea2 <__aeabi_dadd+0x54e>
    1ed8:	08d2      	lsrs	r2, r2, #3
    1eda:	0749      	lsls	r1, r1, #29
    1edc:	4311      	orrs	r1, r2
    1ede:	000f      	movs	r7, r1
    1ee0:	001c      	movs	r4, r3
    1ee2:	e7de      	b.n	1ea2 <__aeabi_dadd+0x54e>
    1ee4:	2700      	movs	r7, #0
    1ee6:	2400      	movs	r4, #0
    1ee8:	e5d5      	b.n	1a96 <__aeabi_dadd+0x142>
    1eea:	2100      	movs	r1, #0
    1eec:	e76b      	b.n	1dc6 <__aeabi_dadd+0x472>
    1eee:	2500      	movs	r5, #0
    1ef0:	2700      	movs	r7, #0
    1ef2:	e5f3      	b.n	1adc <__aeabi_dadd+0x188>
    1ef4:	464e      	mov	r6, r9
    1ef6:	0025      	movs	r5, r4
    1ef8:	3e20      	subs	r6, #32
    1efa:	40f5      	lsrs	r5, r6
    1efc:	464b      	mov	r3, r9
    1efe:	002e      	movs	r6, r5
    1f00:	2b20      	cmp	r3, #32
    1f02:	d02d      	beq.n	1f60 <__aeabi_dadd+0x60c>
    1f04:	2540      	movs	r5, #64	; 0x40
    1f06:	1aed      	subs	r5, r5, r3
    1f08:	40ac      	lsls	r4, r5
    1f0a:	4327      	orrs	r7, r4
    1f0c:	1e7c      	subs	r4, r7, #1
    1f0e:	41a7      	sbcs	r7, r4
    1f10:	2400      	movs	r4, #0
    1f12:	4337      	orrs	r7, r6
    1f14:	e6c9      	b.n	1caa <__aeabi_dadd+0x356>
    1f16:	2480      	movs	r4, #128	; 0x80
    1f18:	2500      	movs	r5, #0
    1f1a:	0324      	lsls	r4, r4, #12
    1f1c:	4e13      	ldr	r6, [pc, #76]	; (1f6c <__aeabi_dadd+0x618>)
    1f1e:	2700      	movs	r7, #0
    1f20:	e5dc      	b.n	1adc <__aeabi_dadd+0x188>
    1f22:	4327      	orrs	r7, r4
    1f24:	1e7c      	subs	r4, r7, #1
    1f26:	41a7      	sbcs	r7, r4
    1f28:	2400      	movs	r4, #0
    1f2a:	e779      	b.n	1e20 <__aeabi_dadd+0x4cc>
    1f2c:	000c      	movs	r4, r1
    1f2e:	0017      	movs	r7, r2
    1f30:	4e0e      	ldr	r6, [pc, #56]	; (1f6c <__aeabi_dadd+0x618>)
    1f32:	e593      	b.n	1a5c <__aeabi_dadd+0x108>
    1f34:	000c      	movs	r4, r1
    1f36:	0017      	movs	r7, r2
    1f38:	e590      	b.n	1a5c <__aeabi_dadd+0x108>
    1f3a:	4656      	mov	r6, sl
    1f3c:	0023      	movs	r3, r4
    1f3e:	3e20      	subs	r6, #32
    1f40:	40f3      	lsrs	r3, r6
    1f42:	4699      	mov	r9, r3
    1f44:	4653      	mov	r3, sl
    1f46:	2b20      	cmp	r3, #32
    1f48:	d00e      	beq.n	1f68 <__aeabi_dadd+0x614>
    1f4a:	2340      	movs	r3, #64	; 0x40
    1f4c:	4656      	mov	r6, sl
    1f4e:	1b9b      	subs	r3, r3, r6
    1f50:	409c      	lsls	r4, r3
    1f52:	4327      	orrs	r7, r4
    1f54:	1e7c      	subs	r4, r7, #1
    1f56:	41a7      	sbcs	r7, r4
    1f58:	464b      	mov	r3, r9
    1f5a:	2400      	movs	r4, #0
    1f5c:	431f      	orrs	r7, r3
    1f5e:	e75f      	b.n	1e20 <__aeabi_dadd+0x4cc>
    1f60:	2400      	movs	r4, #0
    1f62:	e7d2      	b.n	1f0a <__aeabi_dadd+0x5b6>
    1f64:	0017      	movs	r7, r2
    1f66:	e5b2      	b.n	1ace <__aeabi_dadd+0x17a>
    1f68:	2400      	movs	r4, #0
    1f6a:	e7f2      	b.n	1f52 <__aeabi_dadd+0x5fe>
    1f6c:	000007ff 	.word	0x000007ff
    1f70:	ff7fffff 	.word	0xff7fffff

00001f74 <__aeabi_ddiv>:
    1f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f76:	4657      	mov	r7, sl
    1f78:	4645      	mov	r5, r8
    1f7a:	46de      	mov	lr, fp
    1f7c:	464e      	mov	r6, r9
    1f7e:	b5e0      	push	{r5, r6, r7, lr}
    1f80:	004c      	lsls	r4, r1, #1
    1f82:	030e      	lsls	r6, r1, #12
    1f84:	b087      	sub	sp, #28
    1f86:	4683      	mov	fp, r0
    1f88:	4692      	mov	sl, r2
    1f8a:	001d      	movs	r5, r3
    1f8c:	4680      	mov	r8, r0
    1f8e:	0b36      	lsrs	r6, r6, #12
    1f90:	0d64      	lsrs	r4, r4, #21
    1f92:	0fcf      	lsrs	r7, r1, #31
    1f94:	2c00      	cmp	r4, #0
    1f96:	d04f      	beq.n	2038 <STACK_SIZE+0x38>
    1f98:	4b6f      	ldr	r3, [pc, #444]	; (2158 <STACK_SIZE+0x158>)
    1f9a:	429c      	cmp	r4, r3
    1f9c:	d035      	beq.n	200a <STACK_SIZE+0xa>
    1f9e:	2380      	movs	r3, #128	; 0x80
    1fa0:	0f42      	lsrs	r2, r0, #29
    1fa2:	041b      	lsls	r3, r3, #16
    1fa4:	00f6      	lsls	r6, r6, #3
    1fa6:	4313      	orrs	r3, r2
    1fa8:	4333      	orrs	r3, r6
    1faa:	4699      	mov	r9, r3
    1fac:	00c3      	lsls	r3, r0, #3
    1fae:	4698      	mov	r8, r3
    1fb0:	4b6a      	ldr	r3, [pc, #424]	; (215c <STACK_SIZE+0x15c>)
    1fb2:	2600      	movs	r6, #0
    1fb4:	469c      	mov	ip, r3
    1fb6:	2300      	movs	r3, #0
    1fb8:	4464      	add	r4, ip
    1fba:	9303      	str	r3, [sp, #12]
    1fbc:	032b      	lsls	r3, r5, #12
    1fbe:	0b1b      	lsrs	r3, r3, #12
    1fc0:	469b      	mov	fp, r3
    1fc2:	006b      	lsls	r3, r5, #1
    1fc4:	0fed      	lsrs	r5, r5, #31
    1fc6:	4650      	mov	r0, sl
    1fc8:	0d5b      	lsrs	r3, r3, #21
    1fca:	9501      	str	r5, [sp, #4]
    1fcc:	d05e      	beq.n	208c <STACK_SIZE+0x8c>
    1fce:	4a62      	ldr	r2, [pc, #392]	; (2158 <STACK_SIZE+0x158>)
    1fd0:	4293      	cmp	r3, r2
    1fd2:	d053      	beq.n	207c <STACK_SIZE+0x7c>
    1fd4:	465a      	mov	r2, fp
    1fd6:	00d1      	lsls	r1, r2, #3
    1fd8:	2280      	movs	r2, #128	; 0x80
    1fda:	0f40      	lsrs	r0, r0, #29
    1fdc:	0412      	lsls	r2, r2, #16
    1fde:	4302      	orrs	r2, r0
    1fe0:	430a      	orrs	r2, r1
    1fe2:	4693      	mov	fp, r2
    1fe4:	4652      	mov	r2, sl
    1fe6:	00d1      	lsls	r1, r2, #3
    1fe8:	4a5c      	ldr	r2, [pc, #368]	; (215c <STACK_SIZE+0x15c>)
    1fea:	4694      	mov	ip, r2
    1fec:	2200      	movs	r2, #0
    1fee:	4463      	add	r3, ip
    1ff0:	0038      	movs	r0, r7
    1ff2:	4068      	eors	r0, r5
    1ff4:	4684      	mov	ip, r0
    1ff6:	9002      	str	r0, [sp, #8]
    1ff8:	1ae4      	subs	r4, r4, r3
    1ffa:	4316      	orrs	r6, r2
    1ffc:	2e0f      	cmp	r6, #15
    1ffe:	d900      	bls.n	2002 <STACK_SIZE+0x2>
    2000:	e0b4      	b.n	216c <STACK_SIZE+0x16c>
    2002:	4b57      	ldr	r3, [pc, #348]	; (2160 <STACK_SIZE+0x160>)
    2004:	00b6      	lsls	r6, r6, #2
    2006:	599b      	ldr	r3, [r3, r6]
    2008:	469f      	mov	pc, r3
    200a:	0003      	movs	r3, r0
    200c:	4333      	orrs	r3, r6
    200e:	4699      	mov	r9, r3
    2010:	d16c      	bne.n	20ec <STACK_SIZE+0xec>
    2012:	2300      	movs	r3, #0
    2014:	4698      	mov	r8, r3
    2016:	3302      	adds	r3, #2
    2018:	2608      	movs	r6, #8
    201a:	9303      	str	r3, [sp, #12]
    201c:	e7ce      	b.n	1fbc <__aeabi_ddiv+0x48>
    201e:	46cb      	mov	fp, r9
    2020:	4641      	mov	r1, r8
    2022:	9a03      	ldr	r2, [sp, #12]
    2024:	9701      	str	r7, [sp, #4]
    2026:	2a02      	cmp	r2, #2
    2028:	d165      	bne.n	20f6 <STACK_SIZE+0xf6>
    202a:	9b01      	ldr	r3, [sp, #4]
    202c:	4c4a      	ldr	r4, [pc, #296]	; (2158 <STACK_SIZE+0x158>)
    202e:	469c      	mov	ip, r3
    2030:	2300      	movs	r3, #0
    2032:	2200      	movs	r2, #0
    2034:	4698      	mov	r8, r3
    2036:	e06b      	b.n	2110 <STACK_SIZE+0x110>
    2038:	0003      	movs	r3, r0
    203a:	4333      	orrs	r3, r6
    203c:	4699      	mov	r9, r3
    203e:	d04e      	beq.n	20de <STACK_SIZE+0xde>
    2040:	2e00      	cmp	r6, #0
    2042:	d100      	bne.n	2046 <STACK_SIZE+0x46>
    2044:	e1bc      	b.n	23c0 <STACK_SIZE+0x3c0>
    2046:	0030      	movs	r0, r6
    2048:	f001 f8ca 	bl	31e0 <__clzsi2>
    204c:	0003      	movs	r3, r0
    204e:	3b0b      	subs	r3, #11
    2050:	2b1c      	cmp	r3, #28
    2052:	dd00      	ble.n	2056 <STACK_SIZE+0x56>
    2054:	e1ac      	b.n	23b0 <STACK_SIZE+0x3b0>
    2056:	221d      	movs	r2, #29
    2058:	1ad3      	subs	r3, r2, r3
    205a:	465a      	mov	r2, fp
    205c:	0001      	movs	r1, r0
    205e:	40da      	lsrs	r2, r3
    2060:	3908      	subs	r1, #8
    2062:	408e      	lsls	r6, r1
    2064:	0013      	movs	r3, r2
    2066:	4333      	orrs	r3, r6
    2068:	4699      	mov	r9, r3
    206a:	465b      	mov	r3, fp
    206c:	408b      	lsls	r3, r1
    206e:	4698      	mov	r8, r3
    2070:	2300      	movs	r3, #0
    2072:	4c3c      	ldr	r4, [pc, #240]	; (2164 <STACK_SIZE+0x164>)
    2074:	2600      	movs	r6, #0
    2076:	1a24      	subs	r4, r4, r0
    2078:	9303      	str	r3, [sp, #12]
    207a:	e79f      	b.n	1fbc <__aeabi_ddiv+0x48>
    207c:	4651      	mov	r1, sl
    207e:	465a      	mov	r2, fp
    2080:	4311      	orrs	r1, r2
    2082:	d129      	bne.n	20d8 <STACK_SIZE+0xd8>
    2084:	2200      	movs	r2, #0
    2086:	4693      	mov	fp, r2
    2088:	3202      	adds	r2, #2
    208a:	e7b1      	b.n	1ff0 <__aeabi_ddiv+0x7c>
    208c:	4659      	mov	r1, fp
    208e:	4301      	orrs	r1, r0
    2090:	d01e      	beq.n	20d0 <STACK_SIZE+0xd0>
    2092:	465b      	mov	r3, fp
    2094:	2b00      	cmp	r3, #0
    2096:	d100      	bne.n	209a <STACK_SIZE+0x9a>
    2098:	e19e      	b.n	23d8 <STACK_SIZE+0x3d8>
    209a:	4658      	mov	r0, fp
    209c:	f001 f8a0 	bl	31e0 <__clzsi2>
    20a0:	0003      	movs	r3, r0
    20a2:	3b0b      	subs	r3, #11
    20a4:	2b1c      	cmp	r3, #28
    20a6:	dd00      	ble.n	20aa <STACK_SIZE+0xaa>
    20a8:	e18f      	b.n	23ca <STACK_SIZE+0x3ca>
    20aa:	0002      	movs	r2, r0
    20ac:	4659      	mov	r1, fp
    20ae:	3a08      	subs	r2, #8
    20b0:	4091      	lsls	r1, r2
    20b2:	468b      	mov	fp, r1
    20b4:	211d      	movs	r1, #29
    20b6:	1acb      	subs	r3, r1, r3
    20b8:	4651      	mov	r1, sl
    20ba:	40d9      	lsrs	r1, r3
    20bc:	000b      	movs	r3, r1
    20be:	4659      	mov	r1, fp
    20c0:	430b      	orrs	r3, r1
    20c2:	4651      	mov	r1, sl
    20c4:	469b      	mov	fp, r3
    20c6:	4091      	lsls	r1, r2
    20c8:	4b26      	ldr	r3, [pc, #152]	; (2164 <STACK_SIZE+0x164>)
    20ca:	2200      	movs	r2, #0
    20cc:	1a1b      	subs	r3, r3, r0
    20ce:	e78f      	b.n	1ff0 <__aeabi_ddiv+0x7c>
    20d0:	2300      	movs	r3, #0
    20d2:	2201      	movs	r2, #1
    20d4:	469b      	mov	fp, r3
    20d6:	e78b      	b.n	1ff0 <__aeabi_ddiv+0x7c>
    20d8:	4651      	mov	r1, sl
    20da:	2203      	movs	r2, #3
    20dc:	e788      	b.n	1ff0 <__aeabi_ddiv+0x7c>
    20de:	2300      	movs	r3, #0
    20e0:	4698      	mov	r8, r3
    20e2:	3301      	adds	r3, #1
    20e4:	2604      	movs	r6, #4
    20e6:	2400      	movs	r4, #0
    20e8:	9303      	str	r3, [sp, #12]
    20ea:	e767      	b.n	1fbc <__aeabi_ddiv+0x48>
    20ec:	2303      	movs	r3, #3
    20ee:	46b1      	mov	r9, r6
    20f0:	9303      	str	r3, [sp, #12]
    20f2:	260c      	movs	r6, #12
    20f4:	e762      	b.n	1fbc <__aeabi_ddiv+0x48>
    20f6:	2a03      	cmp	r2, #3
    20f8:	d100      	bne.n	20fc <STACK_SIZE+0xfc>
    20fa:	e25c      	b.n	25b6 <STACK_SIZE+0x5b6>
    20fc:	9b01      	ldr	r3, [sp, #4]
    20fe:	2a01      	cmp	r2, #1
    2100:	d000      	beq.n	2104 <STACK_SIZE+0x104>
    2102:	e1e4      	b.n	24ce <STACK_SIZE+0x4ce>
    2104:	4013      	ands	r3, r2
    2106:	469c      	mov	ip, r3
    2108:	2300      	movs	r3, #0
    210a:	2400      	movs	r4, #0
    210c:	2200      	movs	r2, #0
    210e:	4698      	mov	r8, r3
    2110:	2100      	movs	r1, #0
    2112:	0312      	lsls	r2, r2, #12
    2114:	0b13      	lsrs	r3, r2, #12
    2116:	0d0a      	lsrs	r2, r1, #20
    2118:	0512      	lsls	r2, r2, #20
    211a:	431a      	orrs	r2, r3
    211c:	0523      	lsls	r3, r4, #20
    211e:	4c12      	ldr	r4, [pc, #72]	; (2168 <STACK_SIZE+0x168>)
    2120:	4640      	mov	r0, r8
    2122:	4022      	ands	r2, r4
    2124:	4313      	orrs	r3, r2
    2126:	4662      	mov	r2, ip
    2128:	005b      	lsls	r3, r3, #1
    212a:	07d2      	lsls	r2, r2, #31
    212c:	085b      	lsrs	r3, r3, #1
    212e:	4313      	orrs	r3, r2
    2130:	0019      	movs	r1, r3
    2132:	b007      	add	sp, #28
    2134:	bc3c      	pop	{r2, r3, r4, r5}
    2136:	4690      	mov	r8, r2
    2138:	4699      	mov	r9, r3
    213a:	46a2      	mov	sl, r4
    213c:	46ab      	mov	fp, r5
    213e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2140:	2300      	movs	r3, #0
    2142:	2280      	movs	r2, #128	; 0x80
    2144:	469c      	mov	ip, r3
    2146:	0312      	lsls	r2, r2, #12
    2148:	4698      	mov	r8, r3
    214a:	4c03      	ldr	r4, [pc, #12]	; (2158 <STACK_SIZE+0x158>)
    214c:	e7e0      	b.n	2110 <STACK_SIZE+0x110>
    214e:	2300      	movs	r3, #0
    2150:	4c01      	ldr	r4, [pc, #4]	; (2158 <STACK_SIZE+0x158>)
    2152:	2200      	movs	r2, #0
    2154:	4698      	mov	r8, r3
    2156:	e7db      	b.n	2110 <STACK_SIZE+0x110>
    2158:	000007ff 	.word	0x000007ff
    215c:	fffffc01 	.word	0xfffffc01
    2160:	000032d8 	.word	0x000032d8
    2164:	fffffc0d 	.word	0xfffffc0d
    2168:	800fffff 	.word	0x800fffff
    216c:	45d9      	cmp	r9, fp
    216e:	d900      	bls.n	2172 <STACK_SIZE+0x172>
    2170:	e139      	b.n	23e6 <STACK_SIZE+0x3e6>
    2172:	d100      	bne.n	2176 <STACK_SIZE+0x176>
    2174:	e134      	b.n	23e0 <STACK_SIZE+0x3e0>
    2176:	2300      	movs	r3, #0
    2178:	4646      	mov	r6, r8
    217a:	464d      	mov	r5, r9
    217c:	469a      	mov	sl, r3
    217e:	3c01      	subs	r4, #1
    2180:	465b      	mov	r3, fp
    2182:	0e0a      	lsrs	r2, r1, #24
    2184:	021b      	lsls	r3, r3, #8
    2186:	431a      	orrs	r2, r3
    2188:	020b      	lsls	r3, r1, #8
    218a:	0c17      	lsrs	r7, r2, #16
    218c:	9303      	str	r3, [sp, #12]
    218e:	0413      	lsls	r3, r2, #16
    2190:	0c1b      	lsrs	r3, r3, #16
    2192:	0039      	movs	r1, r7
    2194:	0028      	movs	r0, r5
    2196:	4690      	mov	r8, r2
    2198:	9301      	str	r3, [sp, #4]
    219a:	f7ff fb4f 	bl	183c <__udivsi3>
    219e:	0002      	movs	r2, r0
    21a0:	9b01      	ldr	r3, [sp, #4]
    21a2:	4683      	mov	fp, r0
    21a4:	435a      	muls	r2, r3
    21a6:	0028      	movs	r0, r5
    21a8:	0039      	movs	r1, r7
    21aa:	4691      	mov	r9, r2
    21ac:	f7ff fbcc 	bl	1948 <__aeabi_uidivmod>
    21b0:	0c35      	lsrs	r5, r6, #16
    21b2:	0409      	lsls	r1, r1, #16
    21b4:	430d      	orrs	r5, r1
    21b6:	45a9      	cmp	r9, r5
    21b8:	d90d      	bls.n	21d6 <STACK_SIZE+0x1d6>
    21ba:	465b      	mov	r3, fp
    21bc:	4445      	add	r5, r8
    21be:	3b01      	subs	r3, #1
    21c0:	45a8      	cmp	r8, r5
    21c2:	d900      	bls.n	21c6 <STACK_SIZE+0x1c6>
    21c4:	e13a      	b.n	243c <STACK_SIZE+0x43c>
    21c6:	45a9      	cmp	r9, r5
    21c8:	d800      	bhi.n	21cc <STACK_SIZE+0x1cc>
    21ca:	e137      	b.n	243c <STACK_SIZE+0x43c>
    21cc:	2302      	movs	r3, #2
    21ce:	425b      	negs	r3, r3
    21d0:	469c      	mov	ip, r3
    21d2:	4445      	add	r5, r8
    21d4:	44e3      	add	fp, ip
    21d6:	464b      	mov	r3, r9
    21d8:	1aeb      	subs	r3, r5, r3
    21da:	0039      	movs	r1, r7
    21dc:	0018      	movs	r0, r3
    21de:	9304      	str	r3, [sp, #16]
    21e0:	f7ff fb2c 	bl	183c <__udivsi3>
    21e4:	9b01      	ldr	r3, [sp, #4]
    21e6:	0005      	movs	r5, r0
    21e8:	4343      	muls	r3, r0
    21ea:	0039      	movs	r1, r7
    21ec:	9804      	ldr	r0, [sp, #16]
    21ee:	4699      	mov	r9, r3
    21f0:	f7ff fbaa 	bl	1948 <__aeabi_uidivmod>
    21f4:	0433      	lsls	r3, r6, #16
    21f6:	0409      	lsls	r1, r1, #16
    21f8:	0c1b      	lsrs	r3, r3, #16
    21fa:	430b      	orrs	r3, r1
    21fc:	4599      	cmp	r9, r3
    21fe:	d909      	bls.n	2214 <STACK_SIZE+0x214>
    2200:	4443      	add	r3, r8
    2202:	1e6a      	subs	r2, r5, #1
    2204:	4598      	cmp	r8, r3
    2206:	d900      	bls.n	220a <STACK_SIZE+0x20a>
    2208:	e11a      	b.n	2440 <STACK_SIZE+0x440>
    220a:	4599      	cmp	r9, r3
    220c:	d800      	bhi.n	2210 <STACK_SIZE+0x210>
    220e:	e117      	b.n	2440 <STACK_SIZE+0x440>
    2210:	3d02      	subs	r5, #2
    2212:	4443      	add	r3, r8
    2214:	464a      	mov	r2, r9
    2216:	1a9b      	subs	r3, r3, r2
    2218:	465a      	mov	r2, fp
    221a:	0412      	lsls	r2, r2, #16
    221c:	432a      	orrs	r2, r5
    221e:	9903      	ldr	r1, [sp, #12]
    2220:	4693      	mov	fp, r2
    2222:	0c10      	lsrs	r0, r2, #16
    2224:	0c0a      	lsrs	r2, r1, #16
    2226:	4691      	mov	r9, r2
    2228:	0409      	lsls	r1, r1, #16
    222a:	465a      	mov	r2, fp
    222c:	0c09      	lsrs	r1, r1, #16
    222e:	464e      	mov	r6, r9
    2230:	000d      	movs	r5, r1
    2232:	0412      	lsls	r2, r2, #16
    2234:	0c12      	lsrs	r2, r2, #16
    2236:	4345      	muls	r5, r0
    2238:	9105      	str	r1, [sp, #20]
    223a:	4351      	muls	r1, r2
    223c:	4372      	muls	r2, r6
    223e:	4370      	muls	r0, r6
    2240:	1952      	adds	r2, r2, r5
    2242:	0c0e      	lsrs	r6, r1, #16
    2244:	18b2      	adds	r2, r6, r2
    2246:	4295      	cmp	r5, r2
    2248:	d903      	bls.n	2252 <STACK_SIZE+0x252>
    224a:	2580      	movs	r5, #128	; 0x80
    224c:	026d      	lsls	r5, r5, #9
    224e:	46ac      	mov	ip, r5
    2250:	4460      	add	r0, ip
    2252:	0c15      	lsrs	r5, r2, #16
    2254:	0409      	lsls	r1, r1, #16
    2256:	0412      	lsls	r2, r2, #16
    2258:	0c09      	lsrs	r1, r1, #16
    225a:	1828      	adds	r0, r5, r0
    225c:	1852      	adds	r2, r2, r1
    225e:	4283      	cmp	r3, r0
    2260:	d200      	bcs.n	2264 <STACK_SIZE+0x264>
    2262:	e0ce      	b.n	2402 <STACK_SIZE+0x402>
    2264:	d100      	bne.n	2268 <STACK_SIZE+0x268>
    2266:	e0c8      	b.n	23fa <STACK_SIZE+0x3fa>
    2268:	1a1d      	subs	r5, r3, r0
    226a:	4653      	mov	r3, sl
    226c:	1a9e      	subs	r6, r3, r2
    226e:	45b2      	cmp	sl, r6
    2270:	4192      	sbcs	r2, r2
    2272:	4252      	negs	r2, r2
    2274:	1aab      	subs	r3, r5, r2
    2276:	469a      	mov	sl, r3
    2278:	4598      	cmp	r8, r3
    227a:	d100      	bne.n	227e <STACK_SIZE+0x27e>
    227c:	e117      	b.n	24ae <STACK_SIZE+0x4ae>
    227e:	0039      	movs	r1, r7
    2280:	0018      	movs	r0, r3
    2282:	f7ff fadb 	bl	183c <__udivsi3>
    2286:	9b01      	ldr	r3, [sp, #4]
    2288:	0005      	movs	r5, r0
    228a:	4343      	muls	r3, r0
    228c:	0039      	movs	r1, r7
    228e:	4650      	mov	r0, sl
    2290:	9304      	str	r3, [sp, #16]
    2292:	f7ff fb59 	bl	1948 <__aeabi_uidivmod>
    2296:	9804      	ldr	r0, [sp, #16]
    2298:	040b      	lsls	r3, r1, #16
    229a:	0c31      	lsrs	r1, r6, #16
    229c:	4319      	orrs	r1, r3
    229e:	4288      	cmp	r0, r1
    22a0:	d909      	bls.n	22b6 <STACK_SIZE+0x2b6>
    22a2:	4441      	add	r1, r8
    22a4:	1e6b      	subs	r3, r5, #1
    22a6:	4588      	cmp	r8, r1
    22a8:	d900      	bls.n	22ac <STACK_SIZE+0x2ac>
    22aa:	e107      	b.n	24bc <STACK_SIZE+0x4bc>
    22ac:	4288      	cmp	r0, r1
    22ae:	d800      	bhi.n	22b2 <STACK_SIZE+0x2b2>
    22b0:	e104      	b.n	24bc <STACK_SIZE+0x4bc>
    22b2:	3d02      	subs	r5, #2
    22b4:	4441      	add	r1, r8
    22b6:	9b04      	ldr	r3, [sp, #16]
    22b8:	1acb      	subs	r3, r1, r3
    22ba:	0018      	movs	r0, r3
    22bc:	0039      	movs	r1, r7
    22be:	9304      	str	r3, [sp, #16]
    22c0:	f7ff fabc 	bl	183c <__udivsi3>
    22c4:	9b01      	ldr	r3, [sp, #4]
    22c6:	4682      	mov	sl, r0
    22c8:	4343      	muls	r3, r0
    22ca:	0039      	movs	r1, r7
    22cc:	9804      	ldr	r0, [sp, #16]
    22ce:	9301      	str	r3, [sp, #4]
    22d0:	f7ff fb3a 	bl	1948 <__aeabi_uidivmod>
    22d4:	9801      	ldr	r0, [sp, #4]
    22d6:	040b      	lsls	r3, r1, #16
    22d8:	0431      	lsls	r1, r6, #16
    22da:	0c09      	lsrs	r1, r1, #16
    22dc:	4319      	orrs	r1, r3
    22de:	4288      	cmp	r0, r1
    22e0:	d90d      	bls.n	22fe <STACK_SIZE+0x2fe>
    22e2:	4653      	mov	r3, sl
    22e4:	4441      	add	r1, r8
    22e6:	3b01      	subs	r3, #1
    22e8:	4588      	cmp	r8, r1
    22ea:	d900      	bls.n	22ee <STACK_SIZE+0x2ee>
    22ec:	e0e8      	b.n	24c0 <STACK_SIZE+0x4c0>
    22ee:	4288      	cmp	r0, r1
    22f0:	d800      	bhi.n	22f4 <STACK_SIZE+0x2f4>
    22f2:	e0e5      	b.n	24c0 <STACK_SIZE+0x4c0>
    22f4:	2302      	movs	r3, #2
    22f6:	425b      	negs	r3, r3
    22f8:	469c      	mov	ip, r3
    22fa:	4441      	add	r1, r8
    22fc:	44e2      	add	sl, ip
    22fe:	9b01      	ldr	r3, [sp, #4]
    2300:	042d      	lsls	r5, r5, #16
    2302:	1ace      	subs	r6, r1, r3
    2304:	4651      	mov	r1, sl
    2306:	4329      	orrs	r1, r5
    2308:	9d05      	ldr	r5, [sp, #20]
    230a:	464f      	mov	r7, r9
    230c:	002a      	movs	r2, r5
    230e:	040b      	lsls	r3, r1, #16
    2310:	0c08      	lsrs	r0, r1, #16
    2312:	0c1b      	lsrs	r3, r3, #16
    2314:	435a      	muls	r2, r3
    2316:	4345      	muls	r5, r0
    2318:	437b      	muls	r3, r7
    231a:	4378      	muls	r0, r7
    231c:	195b      	adds	r3, r3, r5
    231e:	0c17      	lsrs	r7, r2, #16
    2320:	18fb      	adds	r3, r7, r3
    2322:	429d      	cmp	r5, r3
    2324:	d903      	bls.n	232e <STACK_SIZE+0x32e>
    2326:	2580      	movs	r5, #128	; 0x80
    2328:	026d      	lsls	r5, r5, #9
    232a:	46ac      	mov	ip, r5
    232c:	4460      	add	r0, ip
    232e:	0c1d      	lsrs	r5, r3, #16
    2330:	0412      	lsls	r2, r2, #16
    2332:	041b      	lsls	r3, r3, #16
    2334:	0c12      	lsrs	r2, r2, #16
    2336:	1828      	adds	r0, r5, r0
    2338:	189b      	adds	r3, r3, r2
    233a:	4286      	cmp	r6, r0
    233c:	d200      	bcs.n	2340 <STACK_SIZE+0x340>
    233e:	e093      	b.n	2468 <STACK_SIZE+0x468>
    2340:	d100      	bne.n	2344 <STACK_SIZE+0x344>
    2342:	e08e      	b.n	2462 <STACK_SIZE+0x462>
    2344:	2301      	movs	r3, #1
    2346:	4319      	orrs	r1, r3
    2348:	4ba0      	ldr	r3, [pc, #640]	; (25cc <STACK_SIZE+0x5cc>)
    234a:	18e3      	adds	r3, r4, r3
    234c:	2b00      	cmp	r3, #0
    234e:	dc00      	bgt.n	2352 <STACK_SIZE+0x352>
    2350:	e099      	b.n	2486 <STACK_SIZE+0x486>
    2352:	074a      	lsls	r2, r1, #29
    2354:	d000      	beq.n	2358 <STACK_SIZE+0x358>
    2356:	e09e      	b.n	2496 <STACK_SIZE+0x496>
    2358:	465a      	mov	r2, fp
    235a:	01d2      	lsls	r2, r2, #7
    235c:	d506      	bpl.n	236c <STACK_SIZE+0x36c>
    235e:	465a      	mov	r2, fp
    2360:	4b9b      	ldr	r3, [pc, #620]	; (25d0 <STACK_SIZE+0x5d0>)
    2362:	401a      	ands	r2, r3
    2364:	2380      	movs	r3, #128	; 0x80
    2366:	4693      	mov	fp, r2
    2368:	00db      	lsls	r3, r3, #3
    236a:	18e3      	adds	r3, r4, r3
    236c:	4a99      	ldr	r2, [pc, #612]	; (25d4 <STACK_SIZE+0x5d4>)
    236e:	4293      	cmp	r3, r2
    2370:	dd68      	ble.n	2444 <STACK_SIZE+0x444>
    2372:	2301      	movs	r3, #1
    2374:	9a02      	ldr	r2, [sp, #8]
    2376:	4c98      	ldr	r4, [pc, #608]	; (25d8 <STACK_SIZE+0x5d8>)
    2378:	401a      	ands	r2, r3
    237a:	2300      	movs	r3, #0
    237c:	4694      	mov	ip, r2
    237e:	4698      	mov	r8, r3
    2380:	2200      	movs	r2, #0
    2382:	e6c5      	b.n	2110 <STACK_SIZE+0x110>
    2384:	2280      	movs	r2, #128	; 0x80
    2386:	464b      	mov	r3, r9
    2388:	0312      	lsls	r2, r2, #12
    238a:	4213      	tst	r3, r2
    238c:	d00a      	beq.n	23a4 <STACK_SIZE+0x3a4>
    238e:	465b      	mov	r3, fp
    2390:	4213      	tst	r3, r2
    2392:	d106      	bne.n	23a2 <STACK_SIZE+0x3a2>
    2394:	431a      	orrs	r2, r3
    2396:	0312      	lsls	r2, r2, #12
    2398:	0b12      	lsrs	r2, r2, #12
    239a:	46ac      	mov	ip, r5
    239c:	4688      	mov	r8, r1
    239e:	4c8e      	ldr	r4, [pc, #568]	; (25d8 <STACK_SIZE+0x5d8>)
    23a0:	e6b6      	b.n	2110 <STACK_SIZE+0x110>
    23a2:	464b      	mov	r3, r9
    23a4:	431a      	orrs	r2, r3
    23a6:	0312      	lsls	r2, r2, #12
    23a8:	0b12      	lsrs	r2, r2, #12
    23aa:	46bc      	mov	ip, r7
    23ac:	4c8a      	ldr	r4, [pc, #552]	; (25d8 <STACK_SIZE+0x5d8>)
    23ae:	e6af      	b.n	2110 <STACK_SIZE+0x110>
    23b0:	0003      	movs	r3, r0
    23b2:	465a      	mov	r2, fp
    23b4:	3b28      	subs	r3, #40	; 0x28
    23b6:	409a      	lsls	r2, r3
    23b8:	2300      	movs	r3, #0
    23ba:	4691      	mov	r9, r2
    23bc:	4698      	mov	r8, r3
    23be:	e657      	b.n	2070 <STACK_SIZE+0x70>
    23c0:	4658      	mov	r0, fp
    23c2:	f000 ff0d 	bl	31e0 <__clzsi2>
    23c6:	3020      	adds	r0, #32
    23c8:	e640      	b.n	204c <STACK_SIZE+0x4c>
    23ca:	0003      	movs	r3, r0
    23cc:	4652      	mov	r2, sl
    23ce:	3b28      	subs	r3, #40	; 0x28
    23d0:	409a      	lsls	r2, r3
    23d2:	2100      	movs	r1, #0
    23d4:	4693      	mov	fp, r2
    23d6:	e677      	b.n	20c8 <STACK_SIZE+0xc8>
    23d8:	f000 ff02 	bl	31e0 <__clzsi2>
    23dc:	3020      	adds	r0, #32
    23de:	e65f      	b.n	20a0 <STACK_SIZE+0xa0>
    23e0:	4588      	cmp	r8, r1
    23e2:	d200      	bcs.n	23e6 <STACK_SIZE+0x3e6>
    23e4:	e6c7      	b.n	2176 <STACK_SIZE+0x176>
    23e6:	464b      	mov	r3, r9
    23e8:	07de      	lsls	r6, r3, #31
    23ea:	085d      	lsrs	r5, r3, #1
    23ec:	4643      	mov	r3, r8
    23ee:	085b      	lsrs	r3, r3, #1
    23f0:	431e      	orrs	r6, r3
    23f2:	4643      	mov	r3, r8
    23f4:	07db      	lsls	r3, r3, #31
    23f6:	469a      	mov	sl, r3
    23f8:	e6c2      	b.n	2180 <STACK_SIZE+0x180>
    23fa:	2500      	movs	r5, #0
    23fc:	4592      	cmp	sl, r2
    23fe:	d300      	bcc.n	2402 <STACK_SIZE+0x402>
    2400:	e733      	b.n	226a <STACK_SIZE+0x26a>
    2402:	9e03      	ldr	r6, [sp, #12]
    2404:	4659      	mov	r1, fp
    2406:	46b4      	mov	ip, r6
    2408:	44e2      	add	sl, ip
    240a:	45b2      	cmp	sl, r6
    240c:	41ad      	sbcs	r5, r5
    240e:	426d      	negs	r5, r5
    2410:	4445      	add	r5, r8
    2412:	18eb      	adds	r3, r5, r3
    2414:	3901      	subs	r1, #1
    2416:	4598      	cmp	r8, r3
    2418:	d207      	bcs.n	242a <STACK_SIZE+0x42a>
    241a:	4298      	cmp	r0, r3
    241c:	d900      	bls.n	2420 <STACK_SIZE+0x420>
    241e:	e07f      	b.n	2520 <STACK_SIZE+0x520>
    2420:	d100      	bne.n	2424 <STACK_SIZE+0x424>
    2422:	e0bc      	b.n	259e <STACK_SIZE+0x59e>
    2424:	1a1d      	subs	r5, r3, r0
    2426:	468b      	mov	fp, r1
    2428:	e71f      	b.n	226a <STACK_SIZE+0x26a>
    242a:	4598      	cmp	r8, r3
    242c:	d1fa      	bne.n	2424 <STACK_SIZE+0x424>
    242e:	9d03      	ldr	r5, [sp, #12]
    2430:	4555      	cmp	r5, sl
    2432:	d9f2      	bls.n	241a <STACK_SIZE+0x41a>
    2434:	4643      	mov	r3, r8
    2436:	468b      	mov	fp, r1
    2438:	1a1d      	subs	r5, r3, r0
    243a:	e716      	b.n	226a <STACK_SIZE+0x26a>
    243c:	469b      	mov	fp, r3
    243e:	e6ca      	b.n	21d6 <STACK_SIZE+0x1d6>
    2440:	0015      	movs	r5, r2
    2442:	e6e7      	b.n	2214 <STACK_SIZE+0x214>
    2444:	465a      	mov	r2, fp
    2446:	08c9      	lsrs	r1, r1, #3
    2448:	0752      	lsls	r2, r2, #29
    244a:	430a      	orrs	r2, r1
    244c:	055b      	lsls	r3, r3, #21
    244e:	4690      	mov	r8, r2
    2450:	0d5c      	lsrs	r4, r3, #21
    2452:	465a      	mov	r2, fp
    2454:	2301      	movs	r3, #1
    2456:	9902      	ldr	r1, [sp, #8]
    2458:	0252      	lsls	r2, r2, #9
    245a:	4019      	ands	r1, r3
    245c:	0b12      	lsrs	r2, r2, #12
    245e:	468c      	mov	ip, r1
    2460:	e656      	b.n	2110 <STACK_SIZE+0x110>
    2462:	2b00      	cmp	r3, #0
    2464:	d100      	bne.n	2468 <STACK_SIZE+0x468>
    2466:	e76f      	b.n	2348 <STACK_SIZE+0x348>
    2468:	4446      	add	r6, r8
    246a:	1e4a      	subs	r2, r1, #1
    246c:	45b0      	cmp	r8, r6
    246e:	d929      	bls.n	24c4 <STACK_SIZE+0x4c4>
    2470:	0011      	movs	r1, r2
    2472:	4286      	cmp	r6, r0
    2474:	d000      	beq.n	2478 <STACK_SIZE+0x478>
    2476:	e765      	b.n	2344 <STACK_SIZE+0x344>
    2478:	9a03      	ldr	r2, [sp, #12]
    247a:	4293      	cmp	r3, r2
    247c:	d000      	beq.n	2480 <STACK_SIZE+0x480>
    247e:	e761      	b.n	2344 <STACK_SIZE+0x344>
    2480:	e762      	b.n	2348 <STACK_SIZE+0x348>
    2482:	2101      	movs	r1, #1
    2484:	4249      	negs	r1, r1
    2486:	2001      	movs	r0, #1
    2488:	1ac2      	subs	r2, r0, r3
    248a:	2a38      	cmp	r2, #56	; 0x38
    248c:	dd21      	ble.n	24d2 <STACK_SIZE+0x4d2>
    248e:	9b02      	ldr	r3, [sp, #8]
    2490:	4003      	ands	r3, r0
    2492:	469c      	mov	ip, r3
    2494:	e638      	b.n	2108 <STACK_SIZE+0x108>
    2496:	220f      	movs	r2, #15
    2498:	400a      	ands	r2, r1
    249a:	2a04      	cmp	r2, #4
    249c:	d100      	bne.n	24a0 <STACK_SIZE+0x4a0>
    249e:	e75b      	b.n	2358 <STACK_SIZE+0x358>
    24a0:	000a      	movs	r2, r1
    24a2:	1d11      	adds	r1, r2, #4
    24a4:	4291      	cmp	r1, r2
    24a6:	4192      	sbcs	r2, r2
    24a8:	4252      	negs	r2, r2
    24aa:	4493      	add	fp, r2
    24ac:	e754      	b.n	2358 <STACK_SIZE+0x358>
    24ae:	4b47      	ldr	r3, [pc, #284]	; (25cc <STACK_SIZE+0x5cc>)
    24b0:	18e3      	adds	r3, r4, r3
    24b2:	2b00      	cmp	r3, #0
    24b4:	dde5      	ble.n	2482 <STACK_SIZE+0x482>
    24b6:	2201      	movs	r2, #1
    24b8:	4252      	negs	r2, r2
    24ba:	e7f2      	b.n	24a2 <STACK_SIZE+0x4a2>
    24bc:	001d      	movs	r5, r3
    24be:	e6fa      	b.n	22b6 <STACK_SIZE+0x2b6>
    24c0:	469a      	mov	sl, r3
    24c2:	e71c      	b.n	22fe <STACK_SIZE+0x2fe>
    24c4:	42b0      	cmp	r0, r6
    24c6:	d839      	bhi.n	253c <STACK_SIZE+0x53c>
    24c8:	d06e      	beq.n	25a8 <STACK_SIZE+0x5a8>
    24ca:	0011      	movs	r1, r2
    24cc:	e73a      	b.n	2344 <STACK_SIZE+0x344>
    24ce:	9302      	str	r3, [sp, #8]
    24d0:	e73a      	b.n	2348 <STACK_SIZE+0x348>
    24d2:	2a1f      	cmp	r2, #31
    24d4:	dc3c      	bgt.n	2550 <STACK_SIZE+0x550>
    24d6:	2320      	movs	r3, #32
    24d8:	1a9b      	subs	r3, r3, r2
    24da:	000c      	movs	r4, r1
    24dc:	4658      	mov	r0, fp
    24de:	4099      	lsls	r1, r3
    24e0:	4098      	lsls	r0, r3
    24e2:	1e4b      	subs	r3, r1, #1
    24e4:	4199      	sbcs	r1, r3
    24e6:	465b      	mov	r3, fp
    24e8:	40d4      	lsrs	r4, r2
    24ea:	40d3      	lsrs	r3, r2
    24ec:	4320      	orrs	r0, r4
    24ee:	4308      	orrs	r0, r1
    24f0:	001a      	movs	r2, r3
    24f2:	0743      	lsls	r3, r0, #29
    24f4:	d009      	beq.n	250a <STACK_SIZE+0x50a>
    24f6:	230f      	movs	r3, #15
    24f8:	4003      	ands	r3, r0
    24fa:	2b04      	cmp	r3, #4
    24fc:	d005      	beq.n	250a <STACK_SIZE+0x50a>
    24fe:	0001      	movs	r1, r0
    2500:	1d08      	adds	r0, r1, #4
    2502:	4288      	cmp	r0, r1
    2504:	419b      	sbcs	r3, r3
    2506:	425b      	negs	r3, r3
    2508:	18d2      	adds	r2, r2, r3
    250a:	0213      	lsls	r3, r2, #8
    250c:	d53a      	bpl.n	2584 <STACK_SIZE+0x584>
    250e:	2301      	movs	r3, #1
    2510:	9a02      	ldr	r2, [sp, #8]
    2512:	2401      	movs	r4, #1
    2514:	401a      	ands	r2, r3
    2516:	2300      	movs	r3, #0
    2518:	4694      	mov	ip, r2
    251a:	4698      	mov	r8, r3
    251c:	2200      	movs	r2, #0
    251e:	e5f7      	b.n	2110 <STACK_SIZE+0x110>
    2520:	2102      	movs	r1, #2
    2522:	4249      	negs	r1, r1
    2524:	468c      	mov	ip, r1
    2526:	9d03      	ldr	r5, [sp, #12]
    2528:	44e3      	add	fp, ip
    252a:	46ac      	mov	ip, r5
    252c:	44e2      	add	sl, ip
    252e:	45aa      	cmp	sl, r5
    2530:	41ad      	sbcs	r5, r5
    2532:	426d      	negs	r5, r5
    2534:	4445      	add	r5, r8
    2536:	18ed      	adds	r5, r5, r3
    2538:	1a2d      	subs	r5, r5, r0
    253a:	e696      	b.n	226a <STACK_SIZE+0x26a>
    253c:	1e8a      	subs	r2, r1, #2
    253e:	9903      	ldr	r1, [sp, #12]
    2540:	004d      	lsls	r5, r1, #1
    2542:	428d      	cmp	r5, r1
    2544:	4189      	sbcs	r1, r1
    2546:	4249      	negs	r1, r1
    2548:	4441      	add	r1, r8
    254a:	1876      	adds	r6, r6, r1
    254c:	9503      	str	r5, [sp, #12]
    254e:	e78f      	b.n	2470 <STACK_SIZE+0x470>
    2550:	201f      	movs	r0, #31
    2552:	4240      	negs	r0, r0
    2554:	1ac3      	subs	r3, r0, r3
    2556:	4658      	mov	r0, fp
    2558:	40d8      	lsrs	r0, r3
    255a:	0003      	movs	r3, r0
    255c:	2a20      	cmp	r2, #32
    255e:	d028      	beq.n	25b2 <STACK_SIZE+0x5b2>
    2560:	2040      	movs	r0, #64	; 0x40
    2562:	465d      	mov	r5, fp
    2564:	1a82      	subs	r2, r0, r2
    2566:	4095      	lsls	r5, r2
    2568:	4329      	orrs	r1, r5
    256a:	1e4a      	subs	r2, r1, #1
    256c:	4191      	sbcs	r1, r2
    256e:	4319      	orrs	r1, r3
    2570:	2307      	movs	r3, #7
    2572:	2200      	movs	r2, #0
    2574:	400b      	ands	r3, r1
    2576:	d009      	beq.n	258c <STACK_SIZE+0x58c>
    2578:	230f      	movs	r3, #15
    257a:	2200      	movs	r2, #0
    257c:	400b      	ands	r3, r1
    257e:	0008      	movs	r0, r1
    2580:	2b04      	cmp	r3, #4
    2582:	d1bd      	bne.n	2500 <STACK_SIZE+0x500>
    2584:	0001      	movs	r1, r0
    2586:	0753      	lsls	r3, r2, #29
    2588:	0252      	lsls	r2, r2, #9
    258a:	0b12      	lsrs	r2, r2, #12
    258c:	08c9      	lsrs	r1, r1, #3
    258e:	4319      	orrs	r1, r3
    2590:	2301      	movs	r3, #1
    2592:	4688      	mov	r8, r1
    2594:	9902      	ldr	r1, [sp, #8]
    2596:	2400      	movs	r4, #0
    2598:	4019      	ands	r1, r3
    259a:	468c      	mov	ip, r1
    259c:	e5b8      	b.n	2110 <STACK_SIZE+0x110>
    259e:	4552      	cmp	r2, sl
    25a0:	d8be      	bhi.n	2520 <STACK_SIZE+0x520>
    25a2:	468b      	mov	fp, r1
    25a4:	2500      	movs	r5, #0
    25a6:	e660      	b.n	226a <STACK_SIZE+0x26a>
    25a8:	9d03      	ldr	r5, [sp, #12]
    25aa:	429d      	cmp	r5, r3
    25ac:	d3c6      	bcc.n	253c <STACK_SIZE+0x53c>
    25ae:	0011      	movs	r1, r2
    25b0:	e762      	b.n	2478 <STACK_SIZE+0x478>
    25b2:	2500      	movs	r5, #0
    25b4:	e7d8      	b.n	2568 <STACK_SIZE+0x568>
    25b6:	2280      	movs	r2, #128	; 0x80
    25b8:	465b      	mov	r3, fp
    25ba:	0312      	lsls	r2, r2, #12
    25bc:	431a      	orrs	r2, r3
    25be:	9b01      	ldr	r3, [sp, #4]
    25c0:	0312      	lsls	r2, r2, #12
    25c2:	0b12      	lsrs	r2, r2, #12
    25c4:	469c      	mov	ip, r3
    25c6:	4688      	mov	r8, r1
    25c8:	4c03      	ldr	r4, [pc, #12]	; (25d8 <STACK_SIZE+0x5d8>)
    25ca:	e5a1      	b.n	2110 <STACK_SIZE+0x110>
    25cc:	000003ff 	.word	0x000003ff
    25d0:	feffffff 	.word	0xfeffffff
    25d4:	000007fe 	.word	0x000007fe
    25d8:	000007ff 	.word	0x000007ff

000025dc <__aeabi_dmul>:
    25dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25de:	4657      	mov	r7, sl
    25e0:	4645      	mov	r5, r8
    25e2:	46de      	mov	lr, fp
    25e4:	464e      	mov	r6, r9
    25e6:	b5e0      	push	{r5, r6, r7, lr}
    25e8:	030c      	lsls	r4, r1, #12
    25ea:	4698      	mov	r8, r3
    25ec:	004e      	lsls	r6, r1, #1
    25ee:	0b23      	lsrs	r3, r4, #12
    25f0:	b087      	sub	sp, #28
    25f2:	0007      	movs	r7, r0
    25f4:	4692      	mov	sl, r2
    25f6:	469b      	mov	fp, r3
    25f8:	0d76      	lsrs	r6, r6, #21
    25fa:	0fcd      	lsrs	r5, r1, #31
    25fc:	2e00      	cmp	r6, #0
    25fe:	d06b      	beq.n	26d8 <__aeabi_dmul+0xfc>
    2600:	4b6d      	ldr	r3, [pc, #436]	; (27b8 <__aeabi_dmul+0x1dc>)
    2602:	429e      	cmp	r6, r3
    2604:	d035      	beq.n	2672 <__aeabi_dmul+0x96>
    2606:	2480      	movs	r4, #128	; 0x80
    2608:	465b      	mov	r3, fp
    260a:	0f42      	lsrs	r2, r0, #29
    260c:	0424      	lsls	r4, r4, #16
    260e:	00db      	lsls	r3, r3, #3
    2610:	4314      	orrs	r4, r2
    2612:	431c      	orrs	r4, r3
    2614:	00c3      	lsls	r3, r0, #3
    2616:	4699      	mov	r9, r3
    2618:	4b68      	ldr	r3, [pc, #416]	; (27bc <__aeabi_dmul+0x1e0>)
    261a:	46a3      	mov	fp, r4
    261c:	469c      	mov	ip, r3
    261e:	2300      	movs	r3, #0
    2620:	2700      	movs	r7, #0
    2622:	4466      	add	r6, ip
    2624:	9302      	str	r3, [sp, #8]
    2626:	4643      	mov	r3, r8
    2628:	031c      	lsls	r4, r3, #12
    262a:	005a      	lsls	r2, r3, #1
    262c:	0fdb      	lsrs	r3, r3, #31
    262e:	4650      	mov	r0, sl
    2630:	0b24      	lsrs	r4, r4, #12
    2632:	0d52      	lsrs	r2, r2, #21
    2634:	4698      	mov	r8, r3
    2636:	d100      	bne.n	263a <__aeabi_dmul+0x5e>
    2638:	e076      	b.n	2728 <__aeabi_dmul+0x14c>
    263a:	4b5f      	ldr	r3, [pc, #380]	; (27b8 <__aeabi_dmul+0x1dc>)
    263c:	429a      	cmp	r2, r3
    263e:	d06d      	beq.n	271c <__aeabi_dmul+0x140>
    2640:	2380      	movs	r3, #128	; 0x80
    2642:	0f41      	lsrs	r1, r0, #29
    2644:	041b      	lsls	r3, r3, #16
    2646:	430b      	orrs	r3, r1
    2648:	495c      	ldr	r1, [pc, #368]	; (27bc <__aeabi_dmul+0x1e0>)
    264a:	00e4      	lsls	r4, r4, #3
    264c:	468c      	mov	ip, r1
    264e:	431c      	orrs	r4, r3
    2650:	00c3      	lsls	r3, r0, #3
    2652:	2000      	movs	r0, #0
    2654:	4462      	add	r2, ip
    2656:	4641      	mov	r1, r8
    2658:	18b6      	adds	r6, r6, r2
    265a:	4069      	eors	r1, r5
    265c:	1c72      	adds	r2, r6, #1
    265e:	9101      	str	r1, [sp, #4]
    2660:	4694      	mov	ip, r2
    2662:	4307      	orrs	r7, r0
    2664:	2f0f      	cmp	r7, #15
    2666:	d900      	bls.n	266a <__aeabi_dmul+0x8e>
    2668:	e0b0      	b.n	27cc <__aeabi_dmul+0x1f0>
    266a:	4a55      	ldr	r2, [pc, #340]	; (27c0 <__aeabi_dmul+0x1e4>)
    266c:	00bf      	lsls	r7, r7, #2
    266e:	59d2      	ldr	r2, [r2, r7]
    2670:	4697      	mov	pc, r2
    2672:	465b      	mov	r3, fp
    2674:	4303      	orrs	r3, r0
    2676:	4699      	mov	r9, r3
    2678:	d000      	beq.n	267c <__aeabi_dmul+0xa0>
    267a:	e087      	b.n	278c <__aeabi_dmul+0x1b0>
    267c:	2300      	movs	r3, #0
    267e:	469b      	mov	fp, r3
    2680:	3302      	adds	r3, #2
    2682:	2708      	movs	r7, #8
    2684:	9302      	str	r3, [sp, #8]
    2686:	e7ce      	b.n	2626 <__aeabi_dmul+0x4a>
    2688:	4642      	mov	r2, r8
    268a:	9201      	str	r2, [sp, #4]
    268c:	2802      	cmp	r0, #2
    268e:	d067      	beq.n	2760 <__aeabi_dmul+0x184>
    2690:	2803      	cmp	r0, #3
    2692:	d100      	bne.n	2696 <__aeabi_dmul+0xba>
    2694:	e20e      	b.n	2ab4 <__aeabi_dmul+0x4d8>
    2696:	2801      	cmp	r0, #1
    2698:	d000      	beq.n	269c <__aeabi_dmul+0xc0>
    269a:	e162      	b.n	2962 <__aeabi_dmul+0x386>
    269c:	2300      	movs	r3, #0
    269e:	2400      	movs	r4, #0
    26a0:	2200      	movs	r2, #0
    26a2:	4699      	mov	r9, r3
    26a4:	9901      	ldr	r1, [sp, #4]
    26a6:	4001      	ands	r1, r0
    26a8:	b2cd      	uxtb	r5, r1
    26aa:	2100      	movs	r1, #0
    26ac:	0312      	lsls	r2, r2, #12
    26ae:	0d0b      	lsrs	r3, r1, #20
    26b0:	0b12      	lsrs	r2, r2, #12
    26b2:	051b      	lsls	r3, r3, #20
    26b4:	4313      	orrs	r3, r2
    26b6:	4a43      	ldr	r2, [pc, #268]	; (27c4 <__aeabi_dmul+0x1e8>)
    26b8:	0524      	lsls	r4, r4, #20
    26ba:	4013      	ands	r3, r2
    26bc:	431c      	orrs	r4, r3
    26be:	0064      	lsls	r4, r4, #1
    26c0:	07ed      	lsls	r5, r5, #31
    26c2:	0864      	lsrs	r4, r4, #1
    26c4:	432c      	orrs	r4, r5
    26c6:	4648      	mov	r0, r9
    26c8:	0021      	movs	r1, r4
    26ca:	b007      	add	sp, #28
    26cc:	bc3c      	pop	{r2, r3, r4, r5}
    26ce:	4690      	mov	r8, r2
    26d0:	4699      	mov	r9, r3
    26d2:	46a2      	mov	sl, r4
    26d4:	46ab      	mov	fp, r5
    26d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26d8:	4303      	orrs	r3, r0
    26da:	4699      	mov	r9, r3
    26dc:	d04f      	beq.n	277e <__aeabi_dmul+0x1a2>
    26de:	465b      	mov	r3, fp
    26e0:	2b00      	cmp	r3, #0
    26e2:	d100      	bne.n	26e6 <__aeabi_dmul+0x10a>
    26e4:	e189      	b.n	29fa <__aeabi_dmul+0x41e>
    26e6:	4658      	mov	r0, fp
    26e8:	f000 fd7a 	bl	31e0 <__clzsi2>
    26ec:	0003      	movs	r3, r0
    26ee:	3b0b      	subs	r3, #11
    26f0:	2b1c      	cmp	r3, #28
    26f2:	dd00      	ble.n	26f6 <__aeabi_dmul+0x11a>
    26f4:	e17a      	b.n	29ec <__aeabi_dmul+0x410>
    26f6:	221d      	movs	r2, #29
    26f8:	1ad3      	subs	r3, r2, r3
    26fa:	003a      	movs	r2, r7
    26fc:	0001      	movs	r1, r0
    26fe:	465c      	mov	r4, fp
    2700:	40da      	lsrs	r2, r3
    2702:	3908      	subs	r1, #8
    2704:	408c      	lsls	r4, r1
    2706:	0013      	movs	r3, r2
    2708:	408f      	lsls	r7, r1
    270a:	4323      	orrs	r3, r4
    270c:	469b      	mov	fp, r3
    270e:	46b9      	mov	r9, r7
    2710:	2300      	movs	r3, #0
    2712:	4e2d      	ldr	r6, [pc, #180]	; (27c8 <__aeabi_dmul+0x1ec>)
    2714:	2700      	movs	r7, #0
    2716:	1a36      	subs	r6, r6, r0
    2718:	9302      	str	r3, [sp, #8]
    271a:	e784      	b.n	2626 <__aeabi_dmul+0x4a>
    271c:	4653      	mov	r3, sl
    271e:	4323      	orrs	r3, r4
    2720:	d12a      	bne.n	2778 <__aeabi_dmul+0x19c>
    2722:	2400      	movs	r4, #0
    2724:	2002      	movs	r0, #2
    2726:	e796      	b.n	2656 <__aeabi_dmul+0x7a>
    2728:	4653      	mov	r3, sl
    272a:	4323      	orrs	r3, r4
    272c:	d020      	beq.n	2770 <__aeabi_dmul+0x194>
    272e:	2c00      	cmp	r4, #0
    2730:	d100      	bne.n	2734 <__aeabi_dmul+0x158>
    2732:	e157      	b.n	29e4 <__aeabi_dmul+0x408>
    2734:	0020      	movs	r0, r4
    2736:	f000 fd53 	bl	31e0 <__clzsi2>
    273a:	0003      	movs	r3, r0
    273c:	3b0b      	subs	r3, #11
    273e:	2b1c      	cmp	r3, #28
    2740:	dd00      	ble.n	2744 <__aeabi_dmul+0x168>
    2742:	e149      	b.n	29d8 <__aeabi_dmul+0x3fc>
    2744:	211d      	movs	r1, #29
    2746:	1acb      	subs	r3, r1, r3
    2748:	4651      	mov	r1, sl
    274a:	0002      	movs	r2, r0
    274c:	40d9      	lsrs	r1, r3
    274e:	4653      	mov	r3, sl
    2750:	3a08      	subs	r2, #8
    2752:	4094      	lsls	r4, r2
    2754:	4093      	lsls	r3, r2
    2756:	430c      	orrs	r4, r1
    2758:	4a1b      	ldr	r2, [pc, #108]	; (27c8 <__aeabi_dmul+0x1ec>)
    275a:	1a12      	subs	r2, r2, r0
    275c:	2000      	movs	r0, #0
    275e:	e77a      	b.n	2656 <__aeabi_dmul+0x7a>
    2760:	2501      	movs	r5, #1
    2762:	9b01      	ldr	r3, [sp, #4]
    2764:	4c14      	ldr	r4, [pc, #80]	; (27b8 <__aeabi_dmul+0x1dc>)
    2766:	401d      	ands	r5, r3
    2768:	2300      	movs	r3, #0
    276a:	2200      	movs	r2, #0
    276c:	4699      	mov	r9, r3
    276e:	e79c      	b.n	26aa <__aeabi_dmul+0xce>
    2770:	2400      	movs	r4, #0
    2772:	2200      	movs	r2, #0
    2774:	2001      	movs	r0, #1
    2776:	e76e      	b.n	2656 <__aeabi_dmul+0x7a>
    2778:	4653      	mov	r3, sl
    277a:	2003      	movs	r0, #3
    277c:	e76b      	b.n	2656 <__aeabi_dmul+0x7a>
    277e:	2300      	movs	r3, #0
    2780:	469b      	mov	fp, r3
    2782:	3301      	adds	r3, #1
    2784:	2704      	movs	r7, #4
    2786:	2600      	movs	r6, #0
    2788:	9302      	str	r3, [sp, #8]
    278a:	e74c      	b.n	2626 <__aeabi_dmul+0x4a>
    278c:	2303      	movs	r3, #3
    278e:	4681      	mov	r9, r0
    2790:	270c      	movs	r7, #12
    2792:	9302      	str	r3, [sp, #8]
    2794:	e747      	b.n	2626 <__aeabi_dmul+0x4a>
    2796:	2280      	movs	r2, #128	; 0x80
    2798:	2300      	movs	r3, #0
    279a:	2500      	movs	r5, #0
    279c:	0312      	lsls	r2, r2, #12
    279e:	4699      	mov	r9, r3
    27a0:	4c05      	ldr	r4, [pc, #20]	; (27b8 <__aeabi_dmul+0x1dc>)
    27a2:	e782      	b.n	26aa <__aeabi_dmul+0xce>
    27a4:	465c      	mov	r4, fp
    27a6:	464b      	mov	r3, r9
    27a8:	9802      	ldr	r0, [sp, #8]
    27aa:	e76f      	b.n	268c <__aeabi_dmul+0xb0>
    27ac:	465c      	mov	r4, fp
    27ae:	464b      	mov	r3, r9
    27b0:	9501      	str	r5, [sp, #4]
    27b2:	9802      	ldr	r0, [sp, #8]
    27b4:	e76a      	b.n	268c <__aeabi_dmul+0xb0>
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	000007ff 	.word	0x000007ff
    27bc:	fffffc01 	.word	0xfffffc01
    27c0:	00003318 	.word	0x00003318
    27c4:	800fffff 	.word	0x800fffff
    27c8:	fffffc0d 	.word	0xfffffc0d
    27cc:	464a      	mov	r2, r9
    27ce:	4649      	mov	r1, r9
    27d0:	0c17      	lsrs	r7, r2, #16
    27d2:	0c1a      	lsrs	r2, r3, #16
    27d4:	041b      	lsls	r3, r3, #16
    27d6:	0c1b      	lsrs	r3, r3, #16
    27d8:	0408      	lsls	r0, r1, #16
    27da:	0019      	movs	r1, r3
    27dc:	0c00      	lsrs	r0, r0, #16
    27de:	4341      	muls	r1, r0
    27e0:	0015      	movs	r5, r2
    27e2:	4688      	mov	r8, r1
    27e4:	0019      	movs	r1, r3
    27e6:	437d      	muls	r5, r7
    27e8:	4379      	muls	r1, r7
    27ea:	9503      	str	r5, [sp, #12]
    27ec:	4689      	mov	r9, r1
    27ee:	0029      	movs	r1, r5
    27f0:	0015      	movs	r5, r2
    27f2:	4345      	muls	r5, r0
    27f4:	444d      	add	r5, r9
    27f6:	9502      	str	r5, [sp, #8]
    27f8:	4645      	mov	r5, r8
    27fa:	0c2d      	lsrs	r5, r5, #16
    27fc:	46aa      	mov	sl, r5
    27fe:	9d02      	ldr	r5, [sp, #8]
    2800:	4455      	add	r5, sl
    2802:	45a9      	cmp	r9, r5
    2804:	d906      	bls.n	2814 <__aeabi_dmul+0x238>
    2806:	468a      	mov	sl, r1
    2808:	2180      	movs	r1, #128	; 0x80
    280a:	0249      	lsls	r1, r1, #9
    280c:	4689      	mov	r9, r1
    280e:	44ca      	add	sl, r9
    2810:	4651      	mov	r1, sl
    2812:	9103      	str	r1, [sp, #12]
    2814:	0c29      	lsrs	r1, r5, #16
    2816:	9104      	str	r1, [sp, #16]
    2818:	4641      	mov	r1, r8
    281a:	0409      	lsls	r1, r1, #16
    281c:	042d      	lsls	r5, r5, #16
    281e:	0c09      	lsrs	r1, r1, #16
    2820:	4688      	mov	r8, r1
    2822:	0029      	movs	r1, r5
    2824:	0c25      	lsrs	r5, r4, #16
    2826:	0424      	lsls	r4, r4, #16
    2828:	4441      	add	r1, r8
    282a:	0c24      	lsrs	r4, r4, #16
    282c:	9105      	str	r1, [sp, #20]
    282e:	0021      	movs	r1, r4
    2830:	4341      	muls	r1, r0
    2832:	4688      	mov	r8, r1
    2834:	0021      	movs	r1, r4
    2836:	4379      	muls	r1, r7
    2838:	468a      	mov	sl, r1
    283a:	4368      	muls	r0, r5
    283c:	4641      	mov	r1, r8
    283e:	4450      	add	r0, sl
    2840:	4681      	mov	r9, r0
    2842:	0c08      	lsrs	r0, r1, #16
    2844:	4448      	add	r0, r9
    2846:	436f      	muls	r7, r5
    2848:	4582      	cmp	sl, r0
    284a:	d903      	bls.n	2854 <__aeabi_dmul+0x278>
    284c:	2180      	movs	r1, #128	; 0x80
    284e:	0249      	lsls	r1, r1, #9
    2850:	4689      	mov	r9, r1
    2852:	444f      	add	r7, r9
    2854:	0c01      	lsrs	r1, r0, #16
    2856:	4689      	mov	r9, r1
    2858:	0039      	movs	r1, r7
    285a:	4449      	add	r1, r9
    285c:	9102      	str	r1, [sp, #8]
    285e:	4641      	mov	r1, r8
    2860:	040f      	lsls	r7, r1, #16
    2862:	9904      	ldr	r1, [sp, #16]
    2864:	0c3f      	lsrs	r7, r7, #16
    2866:	4688      	mov	r8, r1
    2868:	0400      	lsls	r0, r0, #16
    286a:	19c0      	adds	r0, r0, r7
    286c:	4480      	add	r8, r0
    286e:	4641      	mov	r1, r8
    2870:	9104      	str	r1, [sp, #16]
    2872:	4659      	mov	r1, fp
    2874:	0c0f      	lsrs	r7, r1, #16
    2876:	0409      	lsls	r1, r1, #16
    2878:	0c09      	lsrs	r1, r1, #16
    287a:	4688      	mov	r8, r1
    287c:	4359      	muls	r1, r3
    287e:	468a      	mov	sl, r1
    2880:	0039      	movs	r1, r7
    2882:	4351      	muls	r1, r2
    2884:	4689      	mov	r9, r1
    2886:	4641      	mov	r1, r8
    2888:	434a      	muls	r2, r1
    288a:	4651      	mov	r1, sl
    288c:	0c09      	lsrs	r1, r1, #16
    288e:	468b      	mov	fp, r1
    2890:	437b      	muls	r3, r7
    2892:	18d2      	adds	r2, r2, r3
    2894:	445a      	add	r2, fp
    2896:	4293      	cmp	r3, r2
    2898:	d903      	bls.n	28a2 <__aeabi_dmul+0x2c6>
    289a:	2380      	movs	r3, #128	; 0x80
    289c:	025b      	lsls	r3, r3, #9
    289e:	469b      	mov	fp, r3
    28a0:	44d9      	add	r9, fp
    28a2:	4651      	mov	r1, sl
    28a4:	0409      	lsls	r1, r1, #16
    28a6:	0c09      	lsrs	r1, r1, #16
    28a8:	468a      	mov	sl, r1
    28aa:	4641      	mov	r1, r8
    28ac:	4361      	muls	r1, r4
    28ae:	437c      	muls	r4, r7
    28b0:	0c13      	lsrs	r3, r2, #16
    28b2:	0412      	lsls	r2, r2, #16
    28b4:	444b      	add	r3, r9
    28b6:	4452      	add	r2, sl
    28b8:	46a1      	mov	r9, r4
    28ba:	468a      	mov	sl, r1
    28bc:	003c      	movs	r4, r7
    28be:	4641      	mov	r1, r8
    28c0:	436c      	muls	r4, r5
    28c2:	434d      	muls	r5, r1
    28c4:	4651      	mov	r1, sl
    28c6:	444d      	add	r5, r9
    28c8:	0c0f      	lsrs	r7, r1, #16
    28ca:	197d      	adds	r5, r7, r5
    28cc:	45a9      	cmp	r9, r5
    28ce:	d903      	bls.n	28d8 <__aeabi_dmul+0x2fc>
    28d0:	2180      	movs	r1, #128	; 0x80
    28d2:	0249      	lsls	r1, r1, #9
    28d4:	4688      	mov	r8, r1
    28d6:	4444      	add	r4, r8
    28d8:	9f04      	ldr	r7, [sp, #16]
    28da:	9903      	ldr	r1, [sp, #12]
    28dc:	46b8      	mov	r8, r7
    28de:	4441      	add	r1, r8
    28e0:	468b      	mov	fp, r1
    28e2:	4583      	cmp	fp, r0
    28e4:	4180      	sbcs	r0, r0
    28e6:	4241      	negs	r1, r0
    28e8:	4688      	mov	r8, r1
    28ea:	4651      	mov	r1, sl
    28ec:	0408      	lsls	r0, r1, #16
    28ee:	042f      	lsls	r7, r5, #16
    28f0:	0c00      	lsrs	r0, r0, #16
    28f2:	183f      	adds	r7, r7, r0
    28f4:	4658      	mov	r0, fp
    28f6:	9902      	ldr	r1, [sp, #8]
    28f8:	1810      	adds	r0, r2, r0
    28fa:	4689      	mov	r9, r1
    28fc:	4290      	cmp	r0, r2
    28fe:	4192      	sbcs	r2, r2
    2900:	444f      	add	r7, r9
    2902:	46ba      	mov	sl, r7
    2904:	4252      	negs	r2, r2
    2906:	4699      	mov	r9, r3
    2908:	4693      	mov	fp, r2
    290a:	44c2      	add	sl, r8
    290c:	44d1      	add	r9, sl
    290e:	44cb      	add	fp, r9
    2910:	428f      	cmp	r7, r1
    2912:	41bf      	sbcs	r7, r7
    2914:	45c2      	cmp	sl, r8
    2916:	4189      	sbcs	r1, r1
    2918:	4599      	cmp	r9, r3
    291a:	419b      	sbcs	r3, r3
    291c:	4593      	cmp	fp, r2
    291e:	4192      	sbcs	r2, r2
    2920:	427f      	negs	r7, r7
    2922:	4249      	negs	r1, r1
    2924:	0c2d      	lsrs	r5, r5, #16
    2926:	4252      	negs	r2, r2
    2928:	430f      	orrs	r7, r1
    292a:	425b      	negs	r3, r3
    292c:	4313      	orrs	r3, r2
    292e:	197f      	adds	r7, r7, r5
    2930:	18ff      	adds	r7, r7, r3
    2932:	465b      	mov	r3, fp
    2934:	193c      	adds	r4, r7, r4
    2936:	0ddb      	lsrs	r3, r3, #23
    2938:	9a05      	ldr	r2, [sp, #20]
    293a:	0264      	lsls	r4, r4, #9
    293c:	431c      	orrs	r4, r3
    293e:	0243      	lsls	r3, r0, #9
    2940:	4313      	orrs	r3, r2
    2942:	1e5d      	subs	r5, r3, #1
    2944:	41ab      	sbcs	r3, r5
    2946:	465a      	mov	r2, fp
    2948:	0dc0      	lsrs	r0, r0, #23
    294a:	4303      	orrs	r3, r0
    294c:	0252      	lsls	r2, r2, #9
    294e:	4313      	orrs	r3, r2
    2950:	01e2      	lsls	r2, r4, #7
    2952:	d556      	bpl.n	2a02 <__aeabi_dmul+0x426>
    2954:	2001      	movs	r0, #1
    2956:	085a      	lsrs	r2, r3, #1
    2958:	4003      	ands	r3, r0
    295a:	4313      	orrs	r3, r2
    295c:	07e2      	lsls	r2, r4, #31
    295e:	4313      	orrs	r3, r2
    2960:	0864      	lsrs	r4, r4, #1
    2962:	485a      	ldr	r0, [pc, #360]	; (2acc <__aeabi_dmul+0x4f0>)
    2964:	4460      	add	r0, ip
    2966:	2800      	cmp	r0, #0
    2968:	dd4d      	ble.n	2a06 <__aeabi_dmul+0x42a>
    296a:	075a      	lsls	r2, r3, #29
    296c:	d009      	beq.n	2982 <__aeabi_dmul+0x3a6>
    296e:	220f      	movs	r2, #15
    2970:	401a      	ands	r2, r3
    2972:	2a04      	cmp	r2, #4
    2974:	d005      	beq.n	2982 <__aeabi_dmul+0x3a6>
    2976:	1d1a      	adds	r2, r3, #4
    2978:	429a      	cmp	r2, r3
    297a:	419b      	sbcs	r3, r3
    297c:	425b      	negs	r3, r3
    297e:	18e4      	adds	r4, r4, r3
    2980:	0013      	movs	r3, r2
    2982:	01e2      	lsls	r2, r4, #7
    2984:	d504      	bpl.n	2990 <__aeabi_dmul+0x3b4>
    2986:	2080      	movs	r0, #128	; 0x80
    2988:	4a51      	ldr	r2, [pc, #324]	; (2ad0 <__aeabi_dmul+0x4f4>)
    298a:	00c0      	lsls	r0, r0, #3
    298c:	4014      	ands	r4, r2
    298e:	4460      	add	r0, ip
    2990:	4a50      	ldr	r2, [pc, #320]	; (2ad4 <__aeabi_dmul+0x4f8>)
    2992:	4290      	cmp	r0, r2
    2994:	dd00      	ble.n	2998 <__aeabi_dmul+0x3bc>
    2996:	e6e3      	b.n	2760 <__aeabi_dmul+0x184>
    2998:	2501      	movs	r5, #1
    299a:	08db      	lsrs	r3, r3, #3
    299c:	0762      	lsls	r2, r4, #29
    299e:	431a      	orrs	r2, r3
    29a0:	0264      	lsls	r4, r4, #9
    29a2:	9b01      	ldr	r3, [sp, #4]
    29a4:	4691      	mov	r9, r2
    29a6:	0b22      	lsrs	r2, r4, #12
    29a8:	0544      	lsls	r4, r0, #21
    29aa:	0d64      	lsrs	r4, r4, #21
    29ac:	401d      	ands	r5, r3
    29ae:	e67c      	b.n	26aa <__aeabi_dmul+0xce>
    29b0:	2280      	movs	r2, #128	; 0x80
    29b2:	4659      	mov	r1, fp
    29b4:	0312      	lsls	r2, r2, #12
    29b6:	4211      	tst	r1, r2
    29b8:	d008      	beq.n	29cc <__aeabi_dmul+0x3f0>
    29ba:	4214      	tst	r4, r2
    29bc:	d106      	bne.n	29cc <__aeabi_dmul+0x3f0>
    29be:	4322      	orrs	r2, r4
    29c0:	0312      	lsls	r2, r2, #12
    29c2:	0b12      	lsrs	r2, r2, #12
    29c4:	4645      	mov	r5, r8
    29c6:	4699      	mov	r9, r3
    29c8:	4c43      	ldr	r4, [pc, #268]	; (2ad8 <__aeabi_dmul+0x4fc>)
    29ca:	e66e      	b.n	26aa <__aeabi_dmul+0xce>
    29cc:	465b      	mov	r3, fp
    29ce:	431a      	orrs	r2, r3
    29d0:	0312      	lsls	r2, r2, #12
    29d2:	0b12      	lsrs	r2, r2, #12
    29d4:	4c40      	ldr	r4, [pc, #256]	; (2ad8 <__aeabi_dmul+0x4fc>)
    29d6:	e668      	b.n	26aa <__aeabi_dmul+0xce>
    29d8:	0003      	movs	r3, r0
    29da:	4654      	mov	r4, sl
    29dc:	3b28      	subs	r3, #40	; 0x28
    29de:	409c      	lsls	r4, r3
    29e0:	2300      	movs	r3, #0
    29e2:	e6b9      	b.n	2758 <__aeabi_dmul+0x17c>
    29e4:	f000 fbfc 	bl	31e0 <__clzsi2>
    29e8:	3020      	adds	r0, #32
    29ea:	e6a6      	b.n	273a <__aeabi_dmul+0x15e>
    29ec:	0003      	movs	r3, r0
    29ee:	3b28      	subs	r3, #40	; 0x28
    29f0:	409f      	lsls	r7, r3
    29f2:	2300      	movs	r3, #0
    29f4:	46bb      	mov	fp, r7
    29f6:	4699      	mov	r9, r3
    29f8:	e68a      	b.n	2710 <__aeabi_dmul+0x134>
    29fa:	f000 fbf1 	bl	31e0 <__clzsi2>
    29fe:	3020      	adds	r0, #32
    2a00:	e674      	b.n	26ec <__aeabi_dmul+0x110>
    2a02:	46b4      	mov	ip, r6
    2a04:	e7ad      	b.n	2962 <__aeabi_dmul+0x386>
    2a06:	2501      	movs	r5, #1
    2a08:	1a2a      	subs	r2, r5, r0
    2a0a:	2a38      	cmp	r2, #56	; 0x38
    2a0c:	dd06      	ble.n	2a1c <__aeabi_dmul+0x440>
    2a0e:	9b01      	ldr	r3, [sp, #4]
    2a10:	2400      	movs	r4, #0
    2a12:	401d      	ands	r5, r3
    2a14:	2300      	movs	r3, #0
    2a16:	2200      	movs	r2, #0
    2a18:	4699      	mov	r9, r3
    2a1a:	e646      	b.n	26aa <__aeabi_dmul+0xce>
    2a1c:	2a1f      	cmp	r2, #31
    2a1e:	dc21      	bgt.n	2a64 <__aeabi_dmul+0x488>
    2a20:	2520      	movs	r5, #32
    2a22:	0020      	movs	r0, r4
    2a24:	1aad      	subs	r5, r5, r2
    2a26:	001e      	movs	r6, r3
    2a28:	40ab      	lsls	r3, r5
    2a2a:	40a8      	lsls	r0, r5
    2a2c:	40d6      	lsrs	r6, r2
    2a2e:	1e5d      	subs	r5, r3, #1
    2a30:	41ab      	sbcs	r3, r5
    2a32:	4330      	orrs	r0, r6
    2a34:	4318      	orrs	r0, r3
    2a36:	40d4      	lsrs	r4, r2
    2a38:	0743      	lsls	r3, r0, #29
    2a3a:	d009      	beq.n	2a50 <__aeabi_dmul+0x474>
    2a3c:	230f      	movs	r3, #15
    2a3e:	4003      	ands	r3, r0
    2a40:	2b04      	cmp	r3, #4
    2a42:	d005      	beq.n	2a50 <__aeabi_dmul+0x474>
    2a44:	0003      	movs	r3, r0
    2a46:	1d18      	adds	r0, r3, #4
    2a48:	4298      	cmp	r0, r3
    2a4a:	419b      	sbcs	r3, r3
    2a4c:	425b      	negs	r3, r3
    2a4e:	18e4      	adds	r4, r4, r3
    2a50:	0223      	lsls	r3, r4, #8
    2a52:	d521      	bpl.n	2a98 <__aeabi_dmul+0x4bc>
    2a54:	2501      	movs	r5, #1
    2a56:	9b01      	ldr	r3, [sp, #4]
    2a58:	2401      	movs	r4, #1
    2a5a:	401d      	ands	r5, r3
    2a5c:	2300      	movs	r3, #0
    2a5e:	2200      	movs	r2, #0
    2a60:	4699      	mov	r9, r3
    2a62:	e622      	b.n	26aa <__aeabi_dmul+0xce>
    2a64:	251f      	movs	r5, #31
    2a66:	0021      	movs	r1, r4
    2a68:	426d      	negs	r5, r5
    2a6a:	1a28      	subs	r0, r5, r0
    2a6c:	40c1      	lsrs	r1, r0
    2a6e:	0008      	movs	r0, r1
    2a70:	2a20      	cmp	r2, #32
    2a72:	d01d      	beq.n	2ab0 <__aeabi_dmul+0x4d4>
    2a74:	355f      	adds	r5, #95	; 0x5f
    2a76:	1aaa      	subs	r2, r5, r2
    2a78:	4094      	lsls	r4, r2
    2a7a:	4323      	orrs	r3, r4
    2a7c:	1e5c      	subs	r4, r3, #1
    2a7e:	41a3      	sbcs	r3, r4
    2a80:	2507      	movs	r5, #7
    2a82:	4303      	orrs	r3, r0
    2a84:	401d      	ands	r5, r3
    2a86:	2200      	movs	r2, #0
    2a88:	2d00      	cmp	r5, #0
    2a8a:	d009      	beq.n	2aa0 <__aeabi_dmul+0x4c4>
    2a8c:	220f      	movs	r2, #15
    2a8e:	2400      	movs	r4, #0
    2a90:	401a      	ands	r2, r3
    2a92:	0018      	movs	r0, r3
    2a94:	2a04      	cmp	r2, #4
    2a96:	d1d6      	bne.n	2a46 <__aeabi_dmul+0x46a>
    2a98:	0003      	movs	r3, r0
    2a9a:	0765      	lsls	r5, r4, #29
    2a9c:	0264      	lsls	r4, r4, #9
    2a9e:	0b22      	lsrs	r2, r4, #12
    2aa0:	08db      	lsrs	r3, r3, #3
    2aa2:	432b      	orrs	r3, r5
    2aa4:	2501      	movs	r5, #1
    2aa6:	4699      	mov	r9, r3
    2aa8:	9b01      	ldr	r3, [sp, #4]
    2aaa:	2400      	movs	r4, #0
    2aac:	401d      	ands	r5, r3
    2aae:	e5fc      	b.n	26aa <__aeabi_dmul+0xce>
    2ab0:	2400      	movs	r4, #0
    2ab2:	e7e2      	b.n	2a7a <__aeabi_dmul+0x49e>
    2ab4:	2280      	movs	r2, #128	; 0x80
    2ab6:	2501      	movs	r5, #1
    2ab8:	0312      	lsls	r2, r2, #12
    2aba:	4322      	orrs	r2, r4
    2abc:	9901      	ldr	r1, [sp, #4]
    2abe:	0312      	lsls	r2, r2, #12
    2ac0:	0b12      	lsrs	r2, r2, #12
    2ac2:	400d      	ands	r5, r1
    2ac4:	4699      	mov	r9, r3
    2ac6:	4c04      	ldr	r4, [pc, #16]	; (2ad8 <__aeabi_dmul+0x4fc>)
    2ac8:	e5ef      	b.n	26aa <__aeabi_dmul+0xce>
    2aca:	46c0      	nop			; (mov r8, r8)
    2acc:	000003ff 	.word	0x000003ff
    2ad0:	feffffff 	.word	0xfeffffff
    2ad4:	000007fe 	.word	0x000007fe
    2ad8:	000007ff 	.word	0x000007ff

00002adc <__aeabi_dsub>:
    2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ade:	4646      	mov	r6, r8
    2ae0:	46d6      	mov	lr, sl
    2ae2:	464f      	mov	r7, r9
    2ae4:	030c      	lsls	r4, r1, #12
    2ae6:	b5c0      	push	{r6, r7, lr}
    2ae8:	0fcd      	lsrs	r5, r1, #31
    2aea:	004e      	lsls	r6, r1, #1
    2aec:	0a61      	lsrs	r1, r4, #9
    2aee:	0f44      	lsrs	r4, r0, #29
    2af0:	430c      	orrs	r4, r1
    2af2:	00c1      	lsls	r1, r0, #3
    2af4:	0058      	lsls	r0, r3, #1
    2af6:	0d40      	lsrs	r0, r0, #21
    2af8:	4684      	mov	ip, r0
    2afa:	468a      	mov	sl, r1
    2afc:	000f      	movs	r7, r1
    2afe:	0319      	lsls	r1, r3, #12
    2b00:	0f50      	lsrs	r0, r2, #29
    2b02:	0a49      	lsrs	r1, r1, #9
    2b04:	4301      	orrs	r1, r0
    2b06:	48c6      	ldr	r0, [pc, #792]	; (2e20 <__aeabi_dsub+0x344>)
    2b08:	0d76      	lsrs	r6, r6, #21
    2b0a:	46a8      	mov	r8, r5
    2b0c:	0fdb      	lsrs	r3, r3, #31
    2b0e:	00d2      	lsls	r2, r2, #3
    2b10:	4584      	cmp	ip, r0
    2b12:	d100      	bne.n	2b16 <__aeabi_dsub+0x3a>
    2b14:	e0d8      	b.n	2cc8 <__aeabi_dsub+0x1ec>
    2b16:	2001      	movs	r0, #1
    2b18:	4043      	eors	r3, r0
    2b1a:	42ab      	cmp	r3, r5
    2b1c:	d100      	bne.n	2b20 <__aeabi_dsub+0x44>
    2b1e:	e0a6      	b.n	2c6e <__aeabi_dsub+0x192>
    2b20:	4660      	mov	r0, ip
    2b22:	1a35      	subs	r5, r6, r0
    2b24:	2d00      	cmp	r5, #0
    2b26:	dc00      	bgt.n	2b2a <__aeabi_dsub+0x4e>
    2b28:	e105      	b.n	2d36 <__aeabi_dsub+0x25a>
    2b2a:	2800      	cmp	r0, #0
    2b2c:	d110      	bne.n	2b50 <__aeabi_dsub+0x74>
    2b2e:	000b      	movs	r3, r1
    2b30:	4313      	orrs	r3, r2
    2b32:	d100      	bne.n	2b36 <__aeabi_dsub+0x5a>
    2b34:	e0d7      	b.n	2ce6 <__aeabi_dsub+0x20a>
    2b36:	1e6b      	subs	r3, r5, #1
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d000      	beq.n	2b3e <__aeabi_dsub+0x62>
    2b3c:	e14b      	b.n	2dd6 <__aeabi_dsub+0x2fa>
    2b3e:	4653      	mov	r3, sl
    2b40:	1a9f      	subs	r7, r3, r2
    2b42:	45ba      	cmp	sl, r7
    2b44:	4180      	sbcs	r0, r0
    2b46:	1a64      	subs	r4, r4, r1
    2b48:	4240      	negs	r0, r0
    2b4a:	1a24      	subs	r4, r4, r0
    2b4c:	2601      	movs	r6, #1
    2b4e:	e01e      	b.n	2b8e <__aeabi_dsub+0xb2>
    2b50:	4bb3      	ldr	r3, [pc, #716]	; (2e20 <__aeabi_dsub+0x344>)
    2b52:	429e      	cmp	r6, r3
    2b54:	d048      	beq.n	2be8 <__aeabi_dsub+0x10c>
    2b56:	2380      	movs	r3, #128	; 0x80
    2b58:	041b      	lsls	r3, r3, #16
    2b5a:	4319      	orrs	r1, r3
    2b5c:	2d38      	cmp	r5, #56	; 0x38
    2b5e:	dd00      	ble.n	2b62 <__aeabi_dsub+0x86>
    2b60:	e119      	b.n	2d96 <__aeabi_dsub+0x2ba>
    2b62:	2d1f      	cmp	r5, #31
    2b64:	dd00      	ble.n	2b68 <__aeabi_dsub+0x8c>
    2b66:	e14c      	b.n	2e02 <__aeabi_dsub+0x326>
    2b68:	2320      	movs	r3, #32
    2b6a:	000f      	movs	r7, r1
    2b6c:	1b5b      	subs	r3, r3, r5
    2b6e:	0010      	movs	r0, r2
    2b70:	409a      	lsls	r2, r3
    2b72:	409f      	lsls	r7, r3
    2b74:	40e8      	lsrs	r0, r5
    2b76:	1e53      	subs	r3, r2, #1
    2b78:	419a      	sbcs	r2, r3
    2b7a:	40e9      	lsrs	r1, r5
    2b7c:	4307      	orrs	r7, r0
    2b7e:	4317      	orrs	r7, r2
    2b80:	4653      	mov	r3, sl
    2b82:	1bdf      	subs	r7, r3, r7
    2b84:	1a61      	subs	r1, r4, r1
    2b86:	45ba      	cmp	sl, r7
    2b88:	41a4      	sbcs	r4, r4
    2b8a:	4264      	negs	r4, r4
    2b8c:	1b0c      	subs	r4, r1, r4
    2b8e:	0223      	lsls	r3, r4, #8
    2b90:	d400      	bmi.n	2b94 <__aeabi_dsub+0xb8>
    2b92:	e0c5      	b.n	2d20 <__aeabi_dsub+0x244>
    2b94:	0264      	lsls	r4, r4, #9
    2b96:	0a65      	lsrs	r5, r4, #9
    2b98:	2d00      	cmp	r5, #0
    2b9a:	d100      	bne.n	2b9e <__aeabi_dsub+0xc2>
    2b9c:	e0f6      	b.n	2d8c <__aeabi_dsub+0x2b0>
    2b9e:	0028      	movs	r0, r5
    2ba0:	f000 fb1e 	bl	31e0 <__clzsi2>
    2ba4:	0003      	movs	r3, r0
    2ba6:	3b08      	subs	r3, #8
    2ba8:	2b1f      	cmp	r3, #31
    2baa:	dd00      	ble.n	2bae <__aeabi_dsub+0xd2>
    2bac:	e0e9      	b.n	2d82 <__aeabi_dsub+0x2a6>
    2bae:	2220      	movs	r2, #32
    2bb0:	003c      	movs	r4, r7
    2bb2:	1ad2      	subs	r2, r2, r3
    2bb4:	409d      	lsls	r5, r3
    2bb6:	40d4      	lsrs	r4, r2
    2bb8:	409f      	lsls	r7, r3
    2bba:	4325      	orrs	r5, r4
    2bbc:	429e      	cmp	r6, r3
    2bbe:	dd00      	ble.n	2bc2 <__aeabi_dsub+0xe6>
    2bc0:	e0db      	b.n	2d7a <__aeabi_dsub+0x29e>
    2bc2:	1b9e      	subs	r6, r3, r6
    2bc4:	1c73      	adds	r3, r6, #1
    2bc6:	2b1f      	cmp	r3, #31
    2bc8:	dd00      	ble.n	2bcc <__aeabi_dsub+0xf0>
    2bca:	e10a      	b.n	2de2 <__aeabi_dsub+0x306>
    2bcc:	2220      	movs	r2, #32
    2bce:	0038      	movs	r0, r7
    2bd0:	1ad2      	subs	r2, r2, r3
    2bd2:	0029      	movs	r1, r5
    2bd4:	4097      	lsls	r7, r2
    2bd6:	002c      	movs	r4, r5
    2bd8:	4091      	lsls	r1, r2
    2bda:	40d8      	lsrs	r0, r3
    2bdc:	1e7a      	subs	r2, r7, #1
    2bde:	4197      	sbcs	r7, r2
    2be0:	40dc      	lsrs	r4, r3
    2be2:	2600      	movs	r6, #0
    2be4:	4301      	orrs	r1, r0
    2be6:	430f      	orrs	r7, r1
    2be8:	077b      	lsls	r3, r7, #29
    2bea:	d009      	beq.n	2c00 <__aeabi_dsub+0x124>
    2bec:	230f      	movs	r3, #15
    2bee:	403b      	ands	r3, r7
    2bf0:	2b04      	cmp	r3, #4
    2bf2:	d005      	beq.n	2c00 <__aeabi_dsub+0x124>
    2bf4:	1d3b      	adds	r3, r7, #4
    2bf6:	42bb      	cmp	r3, r7
    2bf8:	41bf      	sbcs	r7, r7
    2bfa:	427f      	negs	r7, r7
    2bfc:	19e4      	adds	r4, r4, r7
    2bfe:	001f      	movs	r7, r3
    2c00:	0223      	lsls	r3, r4, #8
    2c02:	d525      	bpl.n	2c50 <__aeabi_dsub+0x174>
    2c04:	4b86      	ldr	r3, [pc, #536]	; (2e20 <__aeabi_dsub+0x344>)
    2c06:	3601      	adds	r6, #1
    2c08:	429e      	cmp	r6, r3
    2c0a:	d100      	bne.n	2c0e <__aeabi_dsub+0x132>
    2c0c:	e0af      	b.n	2d6e <__aeabi_dsub+0x292>
    2c0e:	4b85      	ldr	r3, [pc, #532]	; (2e24 <__aeabi_dsub+0x348>)
    2c10:	2501      	movs	r5, #1
    2c12:	401c      	ands	r4, r3
    2c14:	4643      	mov	r3, r8
    2c16:	0762      	lsls	r2, r4, #29
    2c18:	08ff      	lsrs	r7, r7, #3
    2c1a:	0264      	lsls	r4, r4, #9
    2c1c:	0576      	lsls	r6, r6, #21
    2c1e:	4317      	orrs	r7, r2
    2c20:	0b24      	lsrs	r4, r4, #12
    2c22:	0d76      	lsrs	r6, r6, #21
    2c24:	401d      	ands	r5, r3
    2c26:	2100      	movs	r1, #0
    2c28:	0324      	lsls	r4, r4, #12
    2c2a:	0b23      	lsrs	r3, r4, #12
    2c2c:	0d0c      	lsrs	r4, r1, #20
    2c2e:	4a7e      	ldr	r2, [pc, #504]	; (2e28 <__aeabi_dsub+0x34c>)
    2c30:	0524      	lsls	r4, r4, #20
    2c32:	431c      	orrs	r4, r3
    2c34:	4014      	ands	r4, r2
    2c36:	0533      	lsls	r3, r6, #20
    2c38:	4323      	orrs	r3, r4
    2c3a:	005b      	lsls	r3, r3, #1
    2c3c:	07ed      	lsls	r5, r5, #31
    2c3e:	085b      	lsrs	r3, r3, #1
    2c40:	432b      	orrs	r3, r5
    2c42:	0038      	movs	r0, r7
    2c44:	0019      	movs	r1, r3
    2c46:	bc1c      	pop	{r2, r3, r4}
    2c48:	4690      	mov	r8, r2
    2c4a:	4699      	mov	r9, r3
    2c4c:	46a2      	mov	sl, r4
    2c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c50:	2501      	movs	r5, #1
    2c52:	4643      	mov	r3, r8
    2c54:	0762      	lsls	r2, r4, #29
    2c56:	08ff      	lsrs	r7, r7, #3
    2c58:	4317      	orrs	r7, r2
    2c5a:	08e4      	lsrs	r4, r4, #3
    2c5c:	401d      	ands	r5, r3
    2c5e:	4b70      	ldr	r3, [pc, #448]	; (2e20 <__aeabi_dsub+0x344>)
    2c60:	429e      	cmp	r6, r3
    2c62:	d036      	beq.n	2cd2 <__aeabi_dsub+0x1f6>
    2c64:	0324      	lsls	r4, r4, #12
    2c66:	0576      	lsls	r6, r6, #21
    2c68:	0b24      	lsrs	r4, r4, #12
    2c6a:	0d76      	lsrs	r6, r6, #21
    2c6c:	e7db      	b.n	2c26 <__aeabi_dsub+0x14a>
    2c6e:	4663      	mov	r3, ip
    2c70:	1af3      	subs	r3, r6, r3
    2c72:	2b00      	cmp	r3, #0
    2c74:	dc00      	bgt.n	2c78 <__aeabi_dsub+0x19c>
    2c76:	e094      	b.n	2da2 <__aeabi_dsub+0x2c6>
    2c78:	4660      	mov	r0, ip
    2c7a:	2800      	cmp	r0, #0
    2c7c:	d035      	beq.n	2cea <__aeabi_dsub+0x20e>
    2c7e:	4868      	ldr	r0, [pc, #416]	; (2e20 <__aeabi_dsub+0x344>)
    2c80:	4286      	cmp	r6, r0
    2c82:	d0b1      	beq.n	2be8 <__aeabi_dsub+0x10c>
    2c84:	2780      	movs	r7, #128	; 0x80
    2c86:	043f      	lsls	r7, r7, #16
    2c88:	4339      	orrs	r1, r7
    2c8a:	2b38      	cmp	r3, #56	; 0x38
    2c8c:	dc00      	bgt.n	2c90 <__aeabi_dsub+0x1b4>
    2c8e:	e0fd      	b.n	2e8c <__aeabi_dsub+0x3b0>
    2c90:	430a      	orrs	r2, r1
    2c92:	0017      	movs	r7, r2
    2c94:	2100      	movs	r1, #0
    2c96:	1e7a      	subs	r2, r7, #1
    2c98:	4197      	sbcs	r7, r2
    2c9a:	4457      	add	r7, sl
    2c9c:	4557      	cmp	r7, sl
    2c9e:	4180      	sbcs	r0, r0
    2ca0:	1909      	adds	r1, r1, r4
    2ca2:	4244      	negs	r4, r0
    2ca4:	190c      	adds	r4, r1, r4
    2ca6:	0223      	lsls	r3, r4, #8
    2ca8:	d53a      	bpl.n	2d20 <__aeabi_dsub+0x244>
    2caa:	4b5d      	ldr	r3, [pc, #372]	; (2e20 <__aeabi_dsub+0x344>)
    2cac:	3601      	adds	r6, #1
    2cae:	429e      	cmp	r6, r3
    2cb0:	d100      	bne.n	2cb4 <__aeabi_dsub+0x1d8>
    2cb2:	e14b      	b.n	2f4c <__aeabi_dsub+0x470>
    2cb4:	2201      	movs	r2, #1
    2cb6:	4b5b      	ldr	r3, [pc, #364]	; (2e24 <__aeabi_dsub+0x348>)
    2cb8:	401c      	ands	r4, r3
    2cba:	087b      	lsrs	r3, r7, #1
    2cbc:	4017      	ands	r7, r2
    2cbe:	431f      	orrs	r7, r3
    2cc0:	07e2      	lsls	r2, r4, #31
    2cc2:	4317      	orrs	r7, r2
    2cc4:	0864      	lsrs	r4, r4, #1
    2cc6:	e78f      	b.n	2be8 <__aeabi_dsub+0x10c>
    2cc8:	0008      	movs	r0, r1
    2cca:	4310      	orrs	r0, r2
    2ccc:	d000      	beq.n	2cd0 <__aeabi_dsub+0x1f4>
    2cce:	e724      	b.n	2b1a <__aeabi_dsub+0x3e>
    2cd0:	e721      	b.n	2b16 <__aeabi_dsub+0x3a>
    2cd2:	0023      	movs	r3, r4
    2cd4:	433b      	orrs	r3, r7
    2cd6:	d100      	bne.n	2cda <__aeabi_dsub+0x1fe>
    2cd8:	e1b9      	b.n	304e <__aeabi_dsub+0x572>
    2cda:	2280      	movs	r2, #128	; 0x80
    2cdc:	0312      	lsls	r2, r2, #12
    2cde:	4314      	orrs	r4, r2
    2ce0:	0324      	lsls	r4, r4, #12
    2ce2:	0b24      	lsrs	r4, r4, #12
    2ce4:	e79f      	b.n	2c26 <__aeabi_dsub+0x14a>
    2ce6:	002e      	movs	r6, r5
    2ce8:	e77e      	b.n	2be8 <__aeabi_dsub+0x10c>
    2cea:	0008      	movs	r0, r1
    2cec:	4310      	orrs	r0, r2
    2cee:	d100      	bne.n	2cf2 <__aeabi_dsub+0x216>
    2cf0:	e0ca      	b.n	2e88 <__aeabi_dsub+0x3ac>
    2cf2:	1e58      	subs	r0, r3, #1
    2cf4:	4684      	mov	ip, r0
    2cf6:	2800      	cmp	r0, #0
    2cf8:	d000      	beq.n	2cfc <__aeabi_dsub+0x220>
    2cfa:	e0e7      	b.n	2ecc <__aeabi_dsub+0x3f0>
    2cfc:	4452      	add	r2, sl
    2cfe:	4552      	cmp	r2, sl
    2d00:	4180      	sbcs	r0, r0
    2d02:	1864      	adds	r4, r4, r1
    2d04:	4240      	negs	r0, r0
    2d06:	1824      	adds	r4, r4, r0
    2d08:	0017      	movs	r7, r2
    2d0a:	2601      	movs	r6, #1
    2d0c:	0223      	lsls	r3, r4, #8
    2d0e:	d507      	bpl.n	2d20 <__aeabi_dsub+0x244>
    2d10:	2602      	movs	r6, #2
    2d12:	e7cf      	b.n	2cb4 <__aeabi_dsub+0x1d8>
    2d14:	4664      	mov	r4, ip
    2d16:	432c      	orrs	r4, r5
    2d18:	d100      	bne.n	2d1c <__aeabi_dsub+0x240>
    2d1a:	e1b3      	b.n	3084 <__aeabi_dsub+0x5a8>
    2d1c:	002c      	movs	r4, r5
    2d1e:	4667      	mov	r7, ip
    2d20:	077b      	lsls	r3, r7, #29
    2d22:	d000      	beq.n	2d26 <__aeabi_dsub+0x24a>
    2d24:	e762      	b.n	2bec <__aeabi_dsub+0x110>
    2d26:	0763      	lsls	r3, r4, #29
    2d28:	08ff      	lsrs	r7, r7, #3
    2d2a:	431f      	orrs	r7, r3
    2d2c:	2501      	movs	r5, #1
    2d2e:	4643      	mov	r3, r8
    2d30:	08e4      	lsrs	r4, r4, #3
    2d32:	401d      	ands	r5, r3
    2d34:	e793      	b.n	2c5e <__aeabi_dsub+0x182>
    2d36:	2d00      	cmp	r5, #0
    2d38:	d178      	bne.n	2e2c <__aeabi_dsub+0x350>
    2d3a:	1c75      	adds	r5, r6, #1
    2d3c:	056d      	lsls	r5, r5, #21
    2d3e:	0d6d      	lsrs	r5, r5, #21
    2d40:	2d01      	cmp	r5, #1
    2d42:	dc00      	bgt.n	2d46 <__aeabi_dsub+0x26a>
    2d44:	e0f2      	b.n	2f2c <__aeabi_dsub+0x450>
    2d46:	4650      	mov	r0, sl
    2d48:	1a80      	subs	r0, r0, r2
    2d4a:	4582      	cmp	sl, r0
    2d4c:	41bf      	sbcs	r7, r7
    2d4e:	1a65      	subs	r5, r4, r1
    2d50:	427f      	negs	r7, r7
    2d52:	1bed      	subs	r5, r5, r7
    2d54:	4684      	mov	ip, r0
    2d56:	0228      	lsls	r0, r5, #8
    2d58:	d400      	bmi.n	2d5c <__aeabi_dsub+0x280>
    2d5a:	e08c      	b.n	2e76 <__aeabi_dsub+0x39a>
    2d5c:	4650      	mov	r0, sl
    2d5e:	1a17      	subs	r7, r2, r0
    2d60:	42ba      	cmp	r2, r7
    2d62:	4192      	sbcs	r2, r2
    2d64:	1b0c      	subs	r4, r1, r4
    2d66:	4255      	negs	r5, r2
    2d68:	1b65      	subs	r5, r4, r5
    2d6a:	4698      	mov	r8, r3
    2d6c:	e714      	b.n	2b98 <__aeabi_dsub+0xbc>
    2d6e:	2501      	movs	r5, #1
    2d70:	4643      	mov	r3, r8
    2d72:	2400      	movs	r4, #0
    2d74:	401d      	ands	r5, r3
    2d76:	2700      	movs	r7, #0
    2d78:	e755      	b.n	2c26 <__aeabi_dsub+0x14a>
    2d7a:	4c2a      	ldr	r4, [pc, #168]	; (2e24 <__aeabi_dsub+0x348>)
    2d7c:	1af6      	subs	r6, r6, r3
    2d7e:	402c      	ands	r4, r5
    2d80:	e732      	b.n	2be8 <__aeabi_dsub+0x10c>
    2d82:	003d      	movs	r5, r7
    2d84:	3828      	subs	r0, #40	; 0x28
    2d86:	4085      	lsls	r5, r0
    2d88:	2700      	movs	r7, #0
    2d8a:	e717      	b.n	2bbc <__aeabi_dsub+0xe0>
    2d8c:	0038      	movs	r0, r7
    2d8e:	f000 fa27 	bl	31e0 <__clzsi2>
    2d92:	3020      	adds	r0, #32
    2d94:	e706      	b.n	2ba4 <__aeabi_dsub+0xc8>
    2d96:	430a      	orrs	r2, r1
    2d98:	0017      	movs	r7, r2
    2d9a:	2100      	movs	r1, #0
    2d9c:	1e7a      	subs	r2, r7, #1
    2d9e:	4197      	sbcs	r7, r2
    2da0:	e6ee      	b.n	2b80 <__aeabi_dsub+0xa4>
    2da2:	2b00      	cmp	r3, #0
    2da4:	d000      	beq.n	2da8 <__aeabi_dsub+0x2cc>
    2da6:	e0e5      	b.n	2f74 <__aeabi_dsub+0x498>
    2da8:	1c73      	adds	r3, r6, #1
    2daa:	469c      	mov	ip, r3
    2dac:	055b      	lsls	r3, r3, #21
    2dae:	0d5b      	lsrs	r3, r3, #21
    2db0:	2b01      	cmp	r3, #1
    2db2:	dc00      	bgt.n	2db6 <__aeabi_dsub+0x2da>
    2db4:	e09f      	b.n	2ef6 <__aeabi_dsub+0x41a>
    2db6:	4b1a      	ldr	r3, [pc, #104]	; (2e20 <__aeabi_dsub+0x344>)
    2db8:	459c      	cmp	ip, r3
    2dba:	d100      	bne.n	2dbe <__aeabi_dsub+0x2e2>
    2dbc:	e0c5      	b.n	2f4a <__aeabi_dsub+0x46e>
    2dbe:	4452      	add	r2, sl
    2dc0:	4552      	cmp	r2, sl
    2dc2:	4180      	sbcs	r0, r0
    2dc4:	1864      	adds	r4, r4, r1
    2dc6:	4240      	negs	r0, r0
    2dc8:	1824      	adds	r4, r4, r0
    2dca:	07e7      	lsls	r7, r4, #31
    2dcc:	0852      	lsrs	r2, r2, #1
    2dce:	4317      	orrs	r7, r2
    2dd0:	0864      	lsrs	r4, r4, #1
    2dd2:	4666      	mov	r6, ip
    2dd4:	e708      	b.n	2be8 <__aeabi_dsub+0x10c>
    2dd6:	4812      	ldr	r0, [pc, #72]	; (2e20 <__aeabi_dsub+0x344>)
    2dd8:	4285      	cmp	r5, r0
    2dda:	d100      	bne.n	2dde <__aeabi_dsub+0x302>
    2ddc:	e085      	b.n	2eea <__aeabi_dsub+0x40e>
    2dde:	001d      	movs	r5, r3
    2de0:	e6bc      	b.n	2b5c <__aeabi_dsub+0x80>
    2de2:	0029      	movs	r1, r5
    2de4:	3e1f      	subs	r6, #31
    2de6:	40f1      	lsrs	r1, r6
    2de8:	2b20      	cmp	r3, #32
    2dea:	d100      	bne.n	2dee <__aeabi_dsub+0x312>
    2dec:	e07f      	b.n	2eee <__aeabi_dsub+0x412>
    2dee:	2240      	movs	r2, #64	; 0x40
    2df0:	1ad3      	subs	r3, r2, r3
    2df2:	409d      	lsls	r5, r3
    2df4:	432f      	orrs	r7, r5
    2df6:	1e7d      	subs	r5, r7, #1
    2df8:	41af      	sbcs	r7, r5
    2dfa:	2400      	movs	r4, #0
    2dfc:	430f      	orrs	r7, r1
    2dfe:	2600      	movs	r6, #0
    2e00:	e78e      	b.n	2d20 <__aeabi_dsub+0x244>
    2e02:	002b      	movs	r3, r5
    2e04:	000f      	movs	r7, r1
    2e06:	3b20      	subs	r3, #32
    2e08:	40df      	lsrs	r7, r3
    2e0a:	2d20      	cmp	r5, #32
    2e0c:	d071      	beq.n	2ef2 <__aeabi_dsub+0x416>
    2e0e:	2340      	movs	r3, #64	; 0x40
    2e10:	1b5d      	subs	r5, r3, r5
    2e12:	40a9      	lsls	r1, r5
    2e14:	430a      	orrs	r2, r1
    2e16:	1e51      	subs	r1, r2, #1
    2e18:	418a      	sbcs	r2, r1
    2e1a:	2100      	movs	r1, #0
    2e1c:	4317      	orrs	r7, r2
    2e1e:	e6af      	b.n	2b80 <__aeabi_dsub+0xa4>
    2e20:	000007ff 	.word	0x000007ff
    2e24:	ff7fffff 	.word	0xff7fffff
    2e28:	800fffff 	.word	0x800fffff
    2e2c:	2e00      	cmp	r6, #0
    2e2e:	d03e      	beq.n	2eae <__aeabi_dsub+0x3d2>
    2e30:	4eb3      	ldr	r6, [pc, #716]	; (3100 <__aeabi_dsub+0x624>)
    2e32:	45b4      	cmp	ip, r6
    2e34:	d045      	beq.n	2ec2 <__aeabi_dsub+0x3e6>
    2e36:	2680      	movs	r6, #128	; 0x80
    2e38:	0436      	lsls	r6, r6, #16
    2e3a:	426d      	negs	r5, r5
    2e3c:	4334      	orrs	r4, r6
    2e3e:	2d38      	cmp	r5, #56	; 0x38
    2e40:	dd00      	ble.n	2e44 <__aeabi_dsub+0x368>
    2e42:	e0a8      	b.n	2f96 <__aeabi_dsub+0x4ba>
    2e44:	2d1f      	cmp	r5, #31
    2e46:	dd00      	ble.n	2e4a <__aeabi_dsub+0x36e>
    2e48:	e11f      	b.n	308a <__aeabi_dsub+0x5ae>
    2e4a:	2620      	movs	r6, #32
    2e4c:	0027      	movs	r7, r4
    2e4e:	4650      	mov	r0, sl
    2e50:	1b76      	subs	r6, r6, r5
    2e52:	40b7      	lsls	r7, r6
    2e54:	40e8      	lsrs	r0, r5
    2e56:	4307      	orrs	r7, r0
    2e58:	4650      	mov	r0, sl
    2e5a:	40b0      	lsls	r0, r6
    2e5c:	1e46      	subs	r6, r0, #1
    2e5e:	41b0      	sbcs	r0, r6
    2e60:	40ec      	lsrs	r4, r5
    2e62:	4338      	orrs	r0, r7
    2e64:	1a17      	subs	r7, r2, r0
    2e66:	42ba      	cmp	r2, r7
    2e68:	4192      	sbcs	r2, r2
    2e6a:	1b0c      	subs	r4, r1, r4
    2e6c:	4252      	negs	r2, r2
    2e6e:	1aa4      	subs	r4, r4, r2
    2e70:	4666      	mov	r6, ip
    2e72:	4698      	mov	r8, r3
    2e74:	e68b      	b.n	2b8e <__aeabi_dsub+0xb2>
    2e76:	4664      	mov	r4, ip
    2e78:	4667      	mov	r7, ip
    2e7a:	432c      	orrs	r4, r5
    2e7c:	d000      	beq.n	2e80 <__aeabi_dsub+0x3a4>
    2e7e:	e68b      	b.n	2b98 <__aeabi_dsub+0xbc>
    2e80:	2500      	movs	r5, #0
    2e82:	2600      	movs	r6, #0
    2e84:	2700      	movs	r7, #0
    2e86:	e6ea      	b.n	2c5e <__aeabi_dsub+0x182>
    2e88:	001e      	movs	r6, r3
    2e8a:	e6ad      	b.n	2be8 <__aeabi_dsub+0x10c>
    2e8c:	2b1f      	cmp	r3, #31
    2e8e:	dc60      	bgt.n	2f52 <__aeabi_dsub+0x476>
    2e90:	2720      	movs	r7, #32
    2e92:	1af8      	subs	r0, r7, r3
    2e94:	000f      	movs	r7, r1
    2e96:	4684      	mov	ip, r0
    2e98:	4087      	lsls	r7, r0
    2e9a:	0010      	movs	r0, r2
    2e9c:	40d8      	lsrs	r0, r3
    2e9e:	4307      	orrs	r7, r0
    2ea0:	4660      	mov	r0, ip
    2ea2:	4082      	lsls	r2, r0
    2ea4:	1e50      	subs	r0, r2, #1
    2ea6:	4182      	sbcs	r2, r0
    2ea8:	40d9      	lsrs	r1, r3
    2eaa:	4317      	orrs	r7, r2
    2eac:	e6f5      	b.n	2c9a <__aeabi_dsub+0x1be>
    2eae:	0026      	movs	r6, r4
    2eb0:	4650      	mov	r0, sl
    2eb2:	4306      	orrs	r6, r0
    2eb4:	d005      	beq.n	2ec2 <__aeabi_dsub+0x3e6>
    2eb6:	43ed      	mvns	r5, r5
    2eb8:	2d00      	cmp	r5, #0
    2eba:	d0d3      	beq.n	2e64 <__aeabi_dsub+0x388>
    2ebc:	4e90      	ldr	r6, [pc, #576]	; (3100 <__aeabi_dsub+0x624>)
    2ebe:	45b4      	cmp	ip, r6
    2ec0:	d1bd      	bne.n	2e3e <__aeabi_dsub+0x362>
    2ec2:	000c      	movs	r4, r1
    2ec4:	0017      	movs	r7, r2
    2ec6:	4666      	mov	r6, ip
    2ec8:	4698      	mov	r8, r3
    2eca:	e68d      	b.n	2be8 <__aeabi_dsub+0x10c>
    2ecc:	488c      	ldr	r0, [pc, #560]	; (3100 <__aeabi_dsub+0x624>)
    2ece:	4283      	cmp	r3, r0
    2ed0:	d00b      	beq.n	2eea <__aeabi_dsub+0x40e>
    2ed2:	4663      	mov	r3, ip
    2ed4:	e6d9      	b.n	2c8a <__aeabi_dsub+0x1ae>
    2ed6:	2d00      	cmp	r5, #0
    2ed8:	d000      	beq.n	2edc <__aeabi_dsub+0x400>
    2eda:	e096      	b.n	300a <__aeabi_dsub+0x52e>
    2edc:	0008      	movs	r0, r1
    2ede:	4310      	orrs	r0, r2
    2ee0:	d100      	bne.n	2ee4 <__aeabi_dsub+0x408>
    2ee2:	e0e2      	b.n	30aa <__aeabi_dsub+0x5ce>
    2ee4:	000c      	movs	r4, r1
    2ee6:	0017      	movs	r7, r2
    2ee8:	4698      	mov	r8, r3
    2eea:	4e85      	ldr	r6, [pc, #532]	; (3100 <__aeabi_dsub+0x624>)
    2eec:	e67c      	b.n	2be8 <__aeabi_dsub+0x10c>
    2eee:	2500      	movs	r5, #0
    2ef0:	e780      	b.n	2df4 <__aeabi_dsub+0x318>
    2ef2:	2100      	movs	r1, #0
    2ef4:	e78e      	b.n	2e14 <__aeabi_dsub+0x338>
    2ef6:	0023      	movs	r3, r4
    2ef8:	4650      	mov	r0, sl
    2efa:	4303      	orrs	r3, r0
    2efc:	2e00      	cmp	r6, #0
    2efe:	d000      	beq.n	2f02 <__aeabi_dsub+0x426>
    2f00:	e0a8      	b.n	3054 <__aeabi_dsub+0x578>
    2f02:	2b00      	cmp	r3, #0
    2f04:	d100      	bne.n	2f08 <__aeabi_dsub+0x42c>
    2f06:	e0de      	b.n	30c6 <__aeabi_dsub+0x5ea>
    2f08:	000b      	movs	r3, r1
    2f0a:	4313      	orrs	r3, r2
    2f0c:	d100      	bne.n	2f10 <__aeabi_dsub+0x434>
    2f0e:	e66b      	b.n	2be8 <__aeabi_dsub+0x10c>
    2f10:	4452      	add	r2, sl
    2f12:	4552      	cmp	r2, sl
    2f14:	4180      	sbcs	r0, r0
    2f16:	1864      	adds	r4, r4, r1
    2f18:	4240      	negs	r0, r0
    2f1a:	1824      	adds	r4, r4, r0
    2f1c:	0017      	movs	r7, r2
    2f1e:	0223      	lsls	r3, r4, #8
    2f20:	d400      	bmi.n	2f24 <__aeabi_dsub+0x448>
    2f22:	e6fd      	b.n	2d20 <__aeabi_dsub+0x244>
    2f24:	4b77      	ldr	r3, [pc, #476]	; (3104 <__aeabi_dsub+0x628>)
    2f26:	4666      	mov	r6, ip
    2f28:	401c      	ands	r4, r3
    2f2a:	e65d      	b.n	2be8 <__aeabi_dsub+0x10c>
    2f2c:	0025      	movs	r5, r4
    2f2e:	4650      	mov	r0, sl
    2f30:	4305      	orrs	r5, r0
    2f32:	2e00      	cmp	r6, #0
    2f34:	d1cf      	bne.n	2ed6 <__aeabi_dsub+0x3fa>
    2f36:	2d00      	cmp	r5, #0
    2f38:	d14f      	bne.n	2fda <__aeabi_dsub+0x4fe>
    2f3a:	000c      	movs	r4, r1
    2f3c:	4314      	orrs	r4, r2
    2f3e:	d100      	bne.n	2f42 <__aeabi_dsub+0x466>
    2f40:	e0a0      	b.n	3084 <__aeabi_dsub+0x5a8>
    2f42:	000c      	movs	r4, r1
    2f44:	0017      	movs	r7, r2
    2f46:	4698      	mov	r8, r3
    2f48:	e64e      	b.n	2be8 <__aeabi_dsub+0x10c>
    2f4a:	4666      	mov	r6, ip
    2f4c:	2400      	movs	r4, #0
    2f4e:	2700      	movs	r7, #0
    2f50:	e685      	b.n	2c5e <__aeabi_dsub+0x182>
    2f52:	001f      	movs	r7, r3
    2f54:	0008      	movs	r0, r1
    2f56:	3f20      	subs	r7, #32
    2f58:	40f8      	lsrs	r0, r7
    2f5a:	0007      	movs	r7, r0
    2f5c:	2b20      	cmp	r3, #32
    2f5e:	d100      	bne.n	2f62 <__aeabi_dsub+0x486>
    2f60:	e08e      	b.n	3080 <__aeabi_dsub+0x5a4>
    2f62:	2040      	movs	r0, #64	; 0x40
    2f64:	1ac3      	subs	r3, r0, r3
    2f66:	4099      	lsls	r1, r3
    2f68:	430a      	orrs	r2, r1
    2f6a:	1e51      	subs	r1, r2, #1
    2f6c:	418a      	sbcs	r2, r1
    2f6e:	2100      	movs	r1, #0
    2f70:	4317      	orrs	r7, r2
    2f72:	e692      	b.n	2c9a <__aeabi_dsub+0x1be>
    2f74:	2e00      	cmp	r6, #0
    2f76:	d114      	bne.n	2fa2 <__aeabi_dsub+0x4c6>
    2f78:	0026      	movs	r6, r4
    2f7a:	4650      	mov	r0, sl
    2f7c:	4306      	orrs	r6, r0
    2f7e:	d062      	beq.n	3046 <__aeabi_dsub+0x56a>
    2f80:	43db      	mvns	r3, r3
    2f82:	2b00      	cmp	r3, #0
    2f84:	d15c      	bne.n	3040 <__aeabi_dsub+0x564>
    2f86:	1887      	adds	r7, r0, r2
    2f88:	4297      	cmp	r7, r2
    2f8a:	4192      	sbcs	r2, r2
    2f8c:	1864      	adds	r4, r4, r1
    2f8e:	4252      	negs	r2, r2
    2f90:	18a4      	adds	r4, r4, r2
    2f92:	4666      	mov	r6, ip
    2f94:	e687      	b.n	2ca6 <__aeabi_dsub+0x1ca>
    2f96:	4650      	mov	r0, sl
    2f98:	4320      	orrs	r0, r4
    2f9a:	1e44      	subs	r4, r0, #1
    2f9c:	41a0      	sbcs	r0, r4
    2f9e:	2400      	movs	r4, #0
    2fa0:	e760      	b.n	2e64 <__aeabi_dsub+0x388>
    2fa2:	4e57      	ldr	r6, [pc, #348]	; (3100 <__aeabi_dsub+0x624>)
    2fa4:	45b4      	cmp	ip, r6
    2fa6:	d04e      	beq.n	3046 <__aeabi_dsub+0x56a>
    2fa8:	2680      	movs	r6, #128	; 0x80
    2faa:	0436      	lsls	r6, r6, #16
    2fac:	425b      	negs	r3, r3
    2fae:	4334      	orrs	r4, r6
    2fb0:	2b38      	cmp	r3, #56	; 0x38
    2fb2:	dd00      	ble.n	2fb6 <__aeabi_dsub+0x4da>
    2fb4:	e07f      	b.n	30b6 <__aeabi_dsub+0x5da>
    2fb6:	2b1f      	cmp	r3, #31
    2fb8:	dd00      	ble.n	2fbc <__aeabi_dsub+0x4e0>
    2fba:	e08b      	b.n	30d4 <__aeabi_dsub+0x5f8>
    2fbc:	2620      	movs	r6, #32
    2fbe:	0027      	movs	r7, r4
    2fc0:	4650      	mov	r0, sl
    2fc2:	1af6      	subs	r6, r6, r3
    2fc4:	40b7      	lsls	r7, r6
    2fc6:	40d8      	lsrs	r0, r3
    2fc8:	4307      	orrs	r7, r0
    2fca:	4650      	mov	r0, sl
    2fcc:	40b0      	lsls	r0, r6
    2fce:	1e46      	subs	r6, r0, #1
    2fd0:	41b0      	sbcs	r0, r6
    2fd2:	4307      	orrs	r7, r0
    2fd4:	40dc      	lsrs	r4, r3
    2fd6:	18bf      	adds	r7, r7, r2
    2fd8:	e7d6      	b.n	2f88 <__aeabi_dsub+0x4ac>
    2fda:	000d      	movs	r5, r1
    2fdc:	4315      	orrs	r5, r2
    2fde:	d100      	bne.n	2fe2 <__aeabi_dsub+0x506>
    2fe0:	e602      	b.n	2be8 <__aeabi_dsub+0x10c>
    2fe2:	4650      	mov	r0, sl
    2fe4:	1a80      	subs	r0, r0, r2
    2fe6:	4582      	cmp	sl, r0
    2fe8:	41bf      	sbcs	r7, r7
    2fea:	1a65      	subs	r5, r4, r1
    2fec:	427f      	negs	r7, r7
    2fee:	1bed      	subs	r5, r5, r7
    2ff0:	4684      	mov	ip, r0
    2ff2:	0228      	lsls	r0, r5, #8
    2ff4:	d400      	bmi.n	2ff8 <__aeabi_dsub+0x51c>
    2ff6:	e68d      	b.n	2d14 <__aeabi_dsub+0x238>
    2ff8:	4650      	mov	r0, sl
    2ffa:	1a17      	subs	r7, r2, r0
    2ffc:	42ba      	cmp	r2, r7
    2ffe:	4192      	sbcs	r2, r2
    3000:	1b0c      	subs	r4, r1, r4
    3002:	4252      	negs	r2, r2
    3004:	1aa4      	subs	r4, r4, r2
    3006:	4698      	mov	r8, r3
    3008:	e5ee      	b.n	2be8 <__aeabi_dsub+0x10c>
    300a:	000d      	movs	r5, r1
    300c:	4315      	orrs	r5, r2
    300e:	d100      	bne.n	3012 <__aeabi_dsub+0x536>
    3010:	e76b      	b.n	2eea <__aeabi_dsub+0x40e>
    3012:	4650      	mov	r0, sl
    3014:	0767      	lsls	r7, r4, #29
    3016:	08c0      	lsrs	r0, r0, #3
    3018:	4307      	orrs	r7, r0
    301a:	2080      	movs	r0, #128	; 0x80
    301c:	08e4      	lsrs	r4, r4, #3
    301e:	0300      	lsls	r0, r0, #12
    3020:	4204      	tst	r4, r0
    3022:	d007      	beq.n	3034 <__aeabi_dsub+0x558>
    3024:	08cd      	lsrs	r5, r1, #3
    3026:	4205      	tst	r5, r0
    3028:	d104      	bne.n	3034 <__aeabi_dsub+0x558>
    302a:	002c      	movs	r4, r5
    302c:	4698      	mov	r8, r3
    302e:	08d7      	lsrs	r7, r2, #3
    3030:	0749      	lsls	r1, r1, #29
    3032:	430f      	orrs	r7, r1
    3034:	0f7b      	lsrs	r3, r7, #29
    3036:	00e4      	lsls	r4, r4, #3
    3038:	431c      	orrs	r4, r3
    303a:	00ff      	lsls	r7, r7, #3
    303c:	4e30      	ldr	r6, [pc, #192]	; (3100 <__aeabi_dsub+0x624>)
    303e:	e5d3      	b.n	2be8 <__aeabi_dsub+0x10c>
    3040:	4e2f      	ldr	r6, [pc, #188]	; (3100 <__aeabi_dsub+0x624>)
    3042:	45b4      	cmp	ip, r6
    3044:	d1b4      	bne.n	2fb0 <__aeabi_dsub+0x4d4>
    3046:	000c      	movs	r4, r1
    3048:	0017      	movs	r7, r2
    304a:	4666      	mov	r6, ip
    304c:	e5cc      	b.n	2be8 <__aeabi_dsub+0x10c>
    304e:	2700      	movs	r7, #0
    3050:	2400      	movs	r4, #0
    3052:	e5e8      	b.n	2c26 <__aeabi_dsub+0x14a>
    3054:	2b00      	cmp	r3, #0
    3056:	d039      	beq.n	30cc <__aeabi_dsub+0x5f0>
    3058:	000b      	movs	r3, r1
    305a:	4313      	orrs	r3, r2
    305c:	d100      	bne.n	3060 <__aeabi_dsub+0x584>
    305e:	e744      	b.n	2eea <__aeabi_dsub+0x40e>
    3060:	08c0      	lsrs	r0, r0, #3
    3062:	0767      	lsls	r7, r4, #29
    3064:	4307      	orrs	r7, r0
    3066:	2080      	movs	r0, #128	; 0x80
    3068:	08e4      	lsrs	r4, r4, #3
    306a:	0300      	lsls	r0, r0, #12
    306c:	4204      	tst	r4, r0
    306e:	d0e1      	beq.n	3034 <__aeabi_dsub+0x558>
    3070:	08cb      	lsrs	r3, r1, #3
    3072:	4203      	tst	r3, r0
    3074:	d1de      	bne.n	3034 <__aeabi_dsub+0x558>
    3076:	08d7      	lsrs	r7, r2, #3
    3078:	0749      	lsls	r1, r1, #29
    307a:	430f      	orrs	r7, r1
    307c:	001c      	movs	r4, r3
    307e:	e7d9      	b.n	3034 <__aeabi_dsub+0x558>
    3080:	2100      	movs	r1, #0
    3082:	e771      	b.n	2f68 <__aeabi_dsub+0x48c>
    3084:	2500      	movs	r5, #0
    3086:	2700      	movs	r7, #0
    3088:	e5e9      	b.n	2c5e <__aeabi_dsub+0x182>
    308a:	002e      	movs	r6, r5
    308c:	0027      	movs	r7, r4
    308e:	3e20      	subs	r6, #32
    3090:	40f7      	lsrs	r7, r6
    3092:	2d20      	cmp	r5, #32
    3094:	d02f      	beq.n	30f6 <__aeabi_dsub+0x61a>
    3096:	2640      	movs	r6, #64	; 0x40
    3098:	1b75      	subs	r5, r6, r5
    309a:	40ac      	lsls	r4, r5
    309c:	4650      	mov	r0, sl
    309e:	4320      	orrs	r0, r4
    30a0:	1e44      	subs	r4, r0, #1
    30a2:	41a0      	sbcs	r0, r4
    30a4:	2400      	movs	r4, #0
    30a6:	4338      	orrs	r0, r7
    30a8:	e6dc      	b.n	2e64 <__aeabi_dsub+0x388>
    30aa:	2480      	movs	r4, #128	; 0x80
    30ac:	2500      	movs	r5, #0
    30ae:	0324      	lsls	r4, r4, #12
    30b0:	4e13      	ldr	r6, [pc, #76]	; (3100 <__aeabi_dsub+0x624>)
    30b2:	2700      	movs	r7, #0
    30b4:	e5d3      	b.n	2c5e <__aeabi_dsub+0x182>
    30b6:	4650      	mov	r0, sl
    30b8:	4320      	orrs	r0, r4
    30ba:	0007      	movs	r7, r0
    30bc:	1e78      	subs	r0, r7, #1
    30be:	4187      	sbcs	r7, r0
    30c0:	2400      	movs	r4, #0
    30c2:	18bf      	adds	r7, r7, r2
    30c4:	e760      	b.n	2f88 <__aeabi_dsub+0x4ac>
    30c6:	000c      	movs	r4, r1
    30c8:	0017      	movs	r7, r2
    30ca:	e58d      	b.n	2be8 <__aeabi_dsub+0x10c>
    30cc:	000c      	movs	r4, r1
    30ce:	0017      	movs	r7, r2
    30d0:	4e0b      	ldr	r6, [pc, #44]	; (3100 <__aeabi_dsub+0x624>)
    30d2:	e589      	b.n	2be8 <__aeabi_dsub+0x10c>
    30d4:	001e      	movs	r6, r3
    30d6:	0027      	movs	r7, r4
    30d8:	3e20      	subs	r6, #32
    30da:	40f7      	lsrs	r7, r6
    30dc:	2b20      	cmp	r3, #32
    30de:	d00c      	beq.n	30fa <__aeabi_dsub+0x61e>
    30e0:	2640      	movs	r6, #64	; 0x40
    30e2:	1af3      	subs	r3, r6, r3
    30e4:	409c      	lsls	r4, r3
    30e6:	4650      	mov	r0, sl
    30e8:	4320      	orrs	r0, r4
    30ea:	1e44      	subs	r4, r0, #1
    30ec:	41a0      	sbcs	r0, r4
    30ee:	4307      	orrs	r7, r0
    30f0:	2400      	movs	r4, #0
    30f2:	18bf      	adds	r7, r7, r2
    30f4:	e748      	b.n	2f88 <__aeabi_dsub+0x4ac>
    30f6:	2400      	movs	r4, #0
    30f8:	e7d0      	b.n	309c <__aeabi_dsub+0x5c0>
    30fa:	2400      	movs	r4, #0
    30fc:	e7f3      	b.n	30e6 <__aeabi_dsub+0x60a>
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	000007ff 	.word	0x000007ff
    3104:	ff7fffff 	.word	0xff7fffff

00003108 <__aeabi_d2iz>:
    3108:	b530      	push	{r4, r5, lr}
    310a:	4d13      	ldr	r5, [pc, #76]	; (3158 <__aeabi_d2iz+0x50>)
    310c:	030a      	lsls	r2, r1, #12
    310e:	004b      	lsls	r3, r1, #1
    3110:	0b12      	lsrs	r2, r2, #12
    3112:	0d5b      	lsrs	r3, r3, #21
    3114:	0fc9      	lsrs	r1, r1, #31
    3116:	2400      	movs	r4, #0
    3118:	42ab      	cmp	r3, r5
    311a:	dd10      	ble.n	313e <__aeabi_d2iz+0x36>
    311c:	4c0f      	ldr	r4, [pc, #60]	; (315c <__aeabi_d2iz+0x54>)
    311e:	42a3      	cmp	r3, r4
    3120:	dc0f      	bgt.n	3142 <__aeabi_d2iz+0x3a>
    3122:	2480      	movs	r4, #128	; 0x80
    3124:	4d0e      	ldr	r5, [pc, #56]	; (3160 <__aeabi_d2iz+0x58>)
    3126:	0364      	lsls	r4, r4, #13
    3128:	4322      	orrs	r2, r4
    312a:	1aed      	subs	r5, r5, r3
    312c:	2d1f      	cmp	r5, #31
    312e:	dd0b      	ble.n	3148 <__aeabi_d2iz+0x40>
    3130:	480c      	ldr	r0, [pc, #48]	; (3164 <__aeabi_d2iz+0x5c>)
    3132:	1ac3      	subs	r3, r0, r3
    3134:	40da      	lsrs	r2, r3
    3136:	4254      	negs	r4, r2
    3138:	2900      	cmp	r1, #0
    313a:	d100      	bne.n	313e <__aeabi_d2iz+0x36>
    313c:	0014      	movs	r4, r2
    313e:	0020      	movs	r0, r4
    3140:	bd30      	pop	{r4, r5, pc}
    3142:	4b09      	ldr	r3, [pc, #36]	; (3168 <__aeabi_d2iz+0x60>)
    3144:	18cc      	adds	r4, r1, r3
    3146:	e7fa      	b.n	313e <__aeabi_d2iz+0x36>
    3148:	4c08      	ldr	r4, [pc, #32]	; (316c <__aeabi_d2iz+0x64>)
    314a:	40e8      	lsrs	r0, r5
    314c:	46a4      	mov	ip, r4
    314e:	4463      	add	r3, ip
    3150:	409a      	lsls	r2, r3
    3152:	4302      	orrs	r2, r0
    3154:	e7ef      	b.n	3136 <__aeabi_d2iz+0x2e>
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	000003fe 	.word	0x000003fe
    315c:	0000041d 	.word	0x0000041d
    3160:	00000433 	.word	0x00000433
    3164:	00000413 	.word	0x00000413
    3168:	7fffffff 	.word	0x7fffffff
    316c:	fffffbed 	.word	0xfffffbed

00003170 <__aeabi_ui2d>:
    3170:	b510      	push	{r4, lr}
    3172:	1e04      	subs	r4, r0, #0
    3174:	d028      	beq.n	31c8 <__aeabi_ui2d+0x58>
    3176:	f000 f833 	bl	31e0 <__clzsi2>
    317a:	4b15      	ldr	r3, [pc, #84]	; (31d0 <__aeabi_ui2d+0x60>)
    317c:	4a15      	ldr	r2, [pc, #84]	; (31d4 <__aeabi_ui2d+0x64>)
    317e:	1a1b      	subs	r3, r3, r0
    3180:	1ad2      	subs	r2, r2, r3
    3182:	2a1f      	cmp	r2, #31
    3184:	dd15      	ble.n	31b2 <__aeabi_ui2d+0x42>
    3186:	4a14      	ldr	r2, [pc, #80]	; (31d8 <__aeabi_ui2d+0x68>)
    3188:	1ad2      	subs	r2, r2, r3
    318a:	4094      	lsls	r4, r2
    318c:	2200      	movs	r2, #0
    318e:	0324      	lsls	r4, r4, #12
    3190:	055b      	lsls	r3, r3, #21
    3192:	0b24      	lsrs	r4, r4, #12
    3194:	0d5b      	lsrs	r3, r3, #21
    3196:	2100      	movs	r1, #0
    3198:	0010      	movs	r0, r2
    319a:	0324      	lsls	r4, r4, #12
    319c:	0d0a      	lsrs	r2, r1, #20
    319e:	0b24      	lsrs	r4, r4, #12
    31a0:	0512      	lsls	r2, r2, #20
    31a2:	4322      	orrs	r2, r4
    31a4:	4c0d      	ldr	r4, [pc, #52]	; (31dc <__aeabi_ui2d+0x6c>)
    31a6:	051b      	lsls	r3, r3, #20
    31a8:	4022      	ands	r2, r4
    31aa:	4313      	orrs	r3, r2
    31ac:	005b      	lsls	r3, r3, #1
    31ae:	0859      	lsrs	r1, r3, #1
    31b0:	bd10      	pop	{r4, pc}
    31b2:	0021      	movs	r1, r4
    31b4:	4091      	lsls	r1, r2
    31b6:	000a      	movs	r2, r1
    31b8:	210b      	movs	r1, #11
    31ba:	1a08      	subs	r0, r1, r0
    31bc:	40c4      	lsrs	r4, r0
    31be:	055b      	lsls	r3, r3, #21
    31c0:	0324      	lsls	r4, r4, #12
    31c2:	0b24      	lsrs	r4, r4, #12
    31c4:	0d5b      	lsrs	r3, r3, #21
    31c6:	e7e6      	b.n	3196 <__aeabi_ui2d+0x26>
    31c8:	2300      	movs	r3, #0
    31ca:	2400      	movs	r4, #0
    31cc:	2200      	movs	r2, #0
    31ce:	e7e2      	b.n	3196 <__aeabi_ui2d+0x26>
    31d0:	0000041e 	.word	0x0000041e
    31d4:	00000433 	.word	0x00000433
    31d8:	00000413 	.word	0x00000413
    31dc:	800fffff 	.word	0x800fffff

000031e0 <__clzsi2>:
    31e0:	211c      	movs	r1, #28
    31e2:	2301      	movs	r3, #1
    31e4:	041b      	lsls	r3, r3, #16
    31e6:	4298      	cmp	r0, r3
    31e8:	d301      	bcc.n	31ee <__clzsi2+0xe>
    31ea:	0c00      	lsrs	r0, r0, #16
    31ec:	3910      	subs	r1, #16
    31ee:	0a1b      	lsrs	r3, r3, #8
    31f0:	4298      	cmp	r0, r3
    31f2:	d301      	bcc.n	31f8 <__clzsi2+0x18>
    31f4:	0a00      	lsrs	r0, r0, #8
    31f6:	3908      	subs	r1, #8
    31f8:	091b      	lsrs	r3, r3, #4
    31fa:	4298      	cmp	r0, r3
    31fc:	d301      	bcc.n	3202 <__clzsi2+0x22>
    31fe:	0900      	lsrs	r0, r0, #4
    3200:	3904      	subs	r1, #4
    3202:	a202      	add	r2, pc, #8	; (adr r2, 320c <__clzsi2+0x2c>)
    3204:	5c10      	ldrb	r0, [r2, r0]
    3206:	1840      	adds	r0, r0, r1
    3208:	4770      	bx	lr
    320a:	46c0      	nop			; (mov r8, r8)
    320c:	02020304 	.word	0x02020304
    3210:	01010101 	.word	0x01010101
	...

0000321c <__libc_init_array>:
    321c:	b570      	push	{r4, r5, r6, lr}
    321e:	2600      	movs	r6, #0
    3220:	4d0c      	ldr	r5, [pc, #48]	; (3254 <__libc_init_array+0x38>)
    3222:	4c0d      	ldr	r4, [pc, #52]	; (3258 <__libc_init_array+0x3c>)
    3224:	1b64      	subs	r4, r4, r5
    3226:	10a4      	asrs	r4, r4, #2
    3228:	42a6      	cmp	r6, r4
    322a:	d109      	bne.n	3240 <__libc_init_array+0x24>
    322c:	2600      	movs	r6, #0
    322e:	f000 f893 	bl	3358 <_init>
    3232:	4d0a      	ldr	r5, [pc, #40]	; (325c <__libc_init_array+0x40>)
    3234:	4c0a      	ldr	r4, [pc, #40]	; (3260 <__libc_init_array+0x44>)
    3236:	1b64      	subs	r4, r4, r5
    3238:	10a4      	asrs	r4, r4, #2
    323a:	42a6      	cmp	r6, r4
    323c:	d105      	bne.n	324a <__libc_init_array+0x2e>
    323e:	bd70      	pop	{r4, r5, r6, pc}
    3240:	00b3      	lsls	r3, r6, #2
    3242:	58eb      	ldr	r3, [r5, r3]
    3244:	4798      	blx	r3
    3246:	3601      	adds	r6, #1
    3248:	e7ee      	b.n	3228 <__libc_init_array+0xc>
    324a:	00b3      	lsls	r3, r6, #2
    324c:	58eb      	ldr	r3, [r5, r3]
    324e:	4798      	blx	r3
    3250:	3601      	adds	r6, #1
    3252:	e7f2      	b.n	323a <__libc_init_array+0x1e>
    3254:	00003364 	.word	0x00003364
    3258:	00003364 	.word	0x00003364
    325c:	00003364 	.word	0x00003364
    3260:	00003368 	.word	0x00003368
    3264:	42000800 	.word	0x42000800
    3268:	42000c00 	.word	0x42000c00
    326c:	42001000 	.word	0x42001000
    3270:	42001400 	.word	0x42001400
    3274:	42001800 	.word	0x42001800
    3278:	42001c00 	.word	0x42001c00
    327c:	00000f42 	.word	0x00000f42
    3280:	00000f3e 	.word	0x00000f3e
    3284:	00000f3e 	.word	0x00000f3e
    3288:	00000fa4 	.word	0x00000fa4
    328c:	00000fa4 	.word	0x00000fa4
    3290:	00000f56 	.word	0x00000f56
    3294:	00000f48 	.word	0x00000f48
    3298:	00000f5c 	.word	0x00000f5c
    329c:	00000f92 	.word	0x00000f92
    32a0:	000010a8 	.word	0x000010a8
    32a4:	00001088 	.word	0x00001088
    32a8:	00001088 	.word	0x00001088
    32ac:	00001114 	.word	0x00001114
    32b0:	0000109a 	.word	0x0000109a
    32b4:	000010b6 	.word	0x000010b6
    32b8:	0000108c 	.word	0x0000108c
    32bc:	000010c4 	.word	0x000010c4
    32c0:	00001104 	.word	0x00001104
    32c4:	00020001 	.word	0x00020001
    32c8:	20000020 	.word	0x20000020
    32cc:	00000000 	.word	0x00000000
    32d0:	00000002 	.word	0x00000002
    32d4:	20000024 	.word	0x20000024
    32d8:	0000216c 	.word	0x0000216c
    32dc:	0000214e 	.word	0x0000214e
    32e0:	00002108 	.word	0x00002108
    32e4:	00002026 	.word	0x00002026
    32e8:	00002108 	.word	0x00002108
    32ec:	00002140 	.word	0x00002140
    32f0:	00002108 	.word	0x00002108
    32f4:	00002026 	.word	0x00002026
    32f8:	0000214e 	.word	0x0000214e
    32fc:	0000214e 	.word	0x0000214e
    3300:	00002140 	.word	0x00002140
    3304:	00002026 	.word	0x00002026
    3308:	0000201e 	.word	0x0000201e
    330c:	0000201e 	.word	0x0000201e
    3310:	0000201e 	.word	0x0000201e
    3314:	00002384 	.word	0x00002384
    3318:	000027cc 	.word	0x000027cc
    331c:	0000268c 	.word	0x0000268c
    3320:	0000268c 	.word	0x0000268c
    3324:	00002688 	.word	0x00002688
    3328:	000027a4 	.word	0x000027a4
    332c:	000027a4 	.word	0x000027a4
    3330:	00002796 	.word	0x00002796
    3334:	00002688 	.word	0x00002688
    3338:	000027a4 	.word	0x000027a4
    333c:	00002796 	.word	0x00002796
    3340:	000027a4 	.word	0x000027a4
    3344:	00002688 	.word	0x00002688
    3348:	000027ac 	.word	0x000027ac
    334c:	000027ac 	.word	0x000027ac
    3350:	000027ac 	.word	0x000027ac
    3354:	000029b0 	.word	0x000029b0

00003358 <_init>:
    3358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    335e:	bc08      	pop	{r3}
    3360:	469e      	mov	lr, r3
    3362:	4770      	bx	lr

00003364 <__init_array_start>:
    3364:	000000dd 	.word	0x000000dd

00003368 <_fini>:
    3368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    336e:	bc08      	pop	{r3}
    3370:	469e      	mov	lr, r3
    3372:	4770      	bx	lr

00003374 <__fini_array_start>:
    3374:	000000b5 	.word	0x000000b5
