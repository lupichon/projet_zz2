
initial_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fd0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000024  20000000  00002fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b4  20000024  00002ff4  00020024  2**2
                  ALLOC
  3 .stack        00002000  200000d8  000030a8  00020024  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025737  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035a9  00000000  00000000  000457dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000477d  00000000  00000000  00048d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000488  00000000  00000000  0004d502  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000488  00000000  00000000  0004d98a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015956  00000000  00000000  0004de12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ba61  00000000  00000000  00063768  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008bb06  00000000  00000000  0006f1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c30  00000000  00000000  000facd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stabstr      00000072  00000000  00000000  000fb900  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 20 00 20 19 01 00 00 15 01 00 00 15 01 00 00     . . ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 fd 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 0d 0c 00 00 1d 0c 00 00     ................
      6c:	2d 0c 00 00 3d 0c 00 00 4d 0c 00 00 5d 0c 00 00     -...=...M...]...
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000024 	.word	0x20000024
      d4:	00000000 	.word	0x00000000
      d8:	00002fd0 	.word	0x00002fd0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000028 	.word	0x20000028
     108:	00002fd0 	.word	0x00002fd0
     10c:	00002fd0 	.word	0x00002fd0
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00002fd0 	.word	0x00002fd0
     1c8:	20000000 	.word	0x20000000
     1cc:	20000024 	.word	0x20000024
     1d0:	20000004 	.word	0x20000004
     1d4:	20000024 	.word	0x20000024
     1d8:	200000d8 	.word	0x200000d8
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00002e7d 	.word	0x00002e7d
     1f8:	000012dd 	.word	0x000012dd

000001fc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     1fc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1fe:	2200      	movs	r2, #0
     200:	4b10      	ldr	r3, [pc, #64]	; (244 <EIC_Handler+0x48>)
     202:	701a      	strb	r2, [r3, #0]
     204:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     206:	4910      	ldr	r1, [pc, #64]	; (248 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     208:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     20a:	4e10      	ldr	r6, [pc, #64]	; (24c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     20c:	4c0d      	ldr	r4, [pc, #52]	; (244 <EIC_Handler+0x48>)
     20e:	e00a      	b.n	226 <EIC_Handler+0x2a>
		return eics[eic_index];
     210:	490d      	ldr	r1, [pc, #52]	; (248 <EIC_Handler+0x4c>)
     212:	e008      	b.n	226 <EIC_Handler+0x2a>
     214:	7823      	ldrb	r3, [r4, #0]
     216:	3301      	adds	r3, #1
     218:	b2db      	uxtb	r3, r3
     21a:	7023      	strb	r3, [r4, #0]
     21c:	2b0f      	cmp	r3, #15
     21e:	d810      	bhi.n	242 <EIC_Handler+0x46>
		return NULL;
     220:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     222:	2b1f      	cmp	r3, #31
     224:	d9f4      	bls.n	210 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     226:	0028      	movs	r0, r5
     228:	4018      	ands	r0, r3
     22a:	2201      	movs	r2, #1
     22c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     22e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     230:	4210      	tst	r0, r2
     232:	d0ef      	beq.n	214 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     234:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     236:	009b      	lsls	r3, r3, #2
     238:	599b      	ldr	r3, [r3, r6]
     23a:	2b00      	cmp	r3, #0
     23c:	d0ea      	beq.n	214 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     23e:	4798      	blx	r3
     240:	e7e8      	b.n	214 <EIC_Handler+0x18>
			}
		}
	}
}
     242:	bd70      	pop	{r4, r5, r6, pc}
     244:	2000007c 	.word	0x2000007c
     248:	40001800 	.word	0x40001800
     24c:	20000080 	.word	0x20000080

00000250 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     250:	4a04      	ldr	r2, [pc, #16]	; (264 <_extint_enable+0x14>)
     252:	7813      	ldrb	r3, [r2, #0]
     254:	2102      	movs	r1, #2
     256:	430b      	orrs	r3, r1
     258:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     25a:	7853      	ldrb	r3, [r2, #1]
     25c:	b25b      	sxtb	r3, r3
     25e:	2b00      	cmp	r3, #0
     260:	dbfb      	blt.n	25a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     262:	4770      	bx	lr
     264:	40001800 	.word	0x40001800

00000268 <_system_extint_init>:
{
     268:	b500      	push	{lr}
     26a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     26c:	4a12      	ldr	r2, [pc, #72]	; (2b8 <_system_extint_init+0x50>)
     26e:	6993      	ldr	r3, [r2, #24]
     270:	2140      	movs	r1, #64	; 0x40
     272:	430b      	orrs	r3, r1
     274:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     276:	a901      	add	r1, sp, #4
     278:	2300      	movs	r3, #0
     27a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     27c:	2005      	movs	r0, #5
     27e:	4b0f      	ldr	r3, [pc, #60]	; (2bc <_system_extint_init+0x54>)
     280:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     282:	2005      	movs	r0, #5
     284:	4b0e      	ldr	r3, [pc, #56]	; (2c0 <_system_extint_init+0x58>)
     286:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     288:	4a0e      	ldr	r2, [pc, #56]	; (2c4 <_system_extint_init+0x5c>)
     28a:	7813      	ldrb	r3, [r2, #0]
     28c:	2101      	movs	r1, #1
     28e:	430b      	orrs	r3, r1
     290:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     292:	7853      	ldrb	r3, [r2, #1]
     294:	b25b      	sxtb	r3, r3
     296:	2b00      	cmp	r3, #0
     298:	dbfb      	blt.n	292 <_system_extint_init+0x2a>
     29a:	4b0b      	ldr	r3, [pc, #44]	; (2c8 <_system_extint_init+0x60>)
     29c:	0019      	movs	r1, r3
     29e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     2a0:	2200      	movs	r2, #0
     2a2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2a4:	4299      	cmp	r1, r3
     2a6:	d1fc      	bne.n	2a2 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2a8:	2210      	movs	r2, #16
     2aa:	4b08      	ldr	r3, [pc, #32]	; (2cc <_system_extint_init+0x64>)
     2ac:	601a      	str	r2, [r3, #0]
	_extint_enable();
     2ae:	4b08      	ldr	r3, [pc, #32]	; (2d0 <_system_extint_init+0x68>)
     2b0:	4798      	blx	r3
}
     2b2:	b003      	add	sp, #12
     2b4:	bd00      	pop	{pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	40000400 	.word	0x40000400
     2bc:	00001185 	.word	0x00001185
     2c0:	000010f9 	.word	0x000010f9
     2c4:	40001800 	.word	0x40001800
     2c8:	20000080 	.word	0x20000080
     2cc:	e000e100 	.word	0xe000e100
     2d0:	00000251 	.word	0x00000251

000002d4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     2d4:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     2d6:	2207      	movs	r2, #7
     2d8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     2da:	421a      	tst	r2, r3
     2dc:	d1fc      	bne.n	2d8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     2de:	4770      	bx	lr

000002e0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2e2:	46d6      	mov	lr, sl
     2e4:	464f      	mov	r7, r9
     2e6:	4646      	mov	r6, r8
     2e8:	b5c0      	push	{r6, r7, lr}
     2ea:	b08a      	sub	sp, #40	; 0x28
     2ec:	0006      	movs	r6, r0
     2ee:	000f      	movs	r7, r1
     2f0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     2f2:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     2f4:	0008      	movs	r0, r1
     2f6:	4b97      	ldr	r3, [pc, #604]	; (554 <i2c_master_init+0x274>)
     2f8:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2fa:	4a97      	ldr	r2, [pc, #604]	; (558 <i2c_master_init+0x278>)
     2fc:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     2fe:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     300:	2301      	movs	r3, #1
     302:	40ab      	lsls	r3, r5
     304:	430b      	orrs	r3, r1
     306:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     308:	a909      	add	r1, sp, #36	; 0x24
     30a:	7b23      	ldrb	r3, [r4, #12]
     30c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     30e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     310:	b2c5      	uxtb	r5, r0
     312:	0028      	movs	r0, r5
     314:	4b91      	ldr	r3, [pc, #580]	; (55c <i2c_master_init+0x27c>)
     316:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     318:	0028      	movs	r0, r5
     31a:	4b91      	ldr	r3, [pc, #580]	; (560 <i2c_master_init+0x280>)
     31c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     31e:	7b20      	ldrb	r0, [r4, #12]
     320:	2100      	movs	r1, #0
     322:	4b90      	ldr	r3, [pc, #576]	; (564 <i2c_master_init+0x284>)
     324:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     326:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     328:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     32a:	079b      	lsls	r3, r3, #30
     32c:	d505      	bpl.n	33a <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     32e:	b00a      	add	sp, #40	; 0x28
     330:	bc1c      	pop	{r2, r3, r4}
     332:	4690      	mov	r8, r2
     334:	4699      	mov	r9, r3
     336:	46a2      	mov	sl, r4
     338:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     33a:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     33c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     33e:	07db      	lsls	r3, r3, #31
     340:	d4f5      	bmi.n	32e <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     342:	2314      	movs	r3, #20
     344:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     346:	6833      	ldr	r3, [r6, #0]
     348:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     34a:	0018      	movs	r0, r3
     34c:	4b81      	ldr	r3, [pc, #516]	; (554 <i2c_master_init+0x274>)
     34e:	4798      	blx	r3
     350:	0005      	movs	r5, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     352:	2380      	movs	r3, #128	; 0x80
     354:	aa08      	add	r2, sp, #32
     356:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     358:	2300      	movs	r3, #0
     35a:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     35c:	2201      	movs	r2, #1
     35e:	a908      	add	r1, sp, #32
     360:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     362:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     364:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     366:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     368:	2800      	cmp	r0, #0
     36a:	d100      	bne.n	36e <i2c_master_init+0x8e>
     36c:	e0af      	b.n	4ce <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     36e:	ab08      	add	r3, sp, #32
     370:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     372:	2302      	movs	r3, #2
     374:	aa08      	add	r2, sp, #32
     376:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     378:	0c00      	lsrs	r0, r0, #16
     37a:	b2c0      	uxtb	r0, r0
     37c:	0011      	movs	r1, r2
     37e:	4b7a      	ldr	r3, [pc, #488]	; (568 <i2c_master_init+0x288>)
     380:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     382:	2f00      	cmp	r7, #0
     384:	d100      	bne.n	388 <i2c_master_init+0xa8>
     386:	e0a7      	b.n	4d8 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     388:	ab08      	add	r3, sp, #32
     38a:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     38c:	2302      	movs	r3, #2
     38e:	aa08      	add	r2, sp, #32
     390:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     392:	0c3f      	lsrs	r7, r7, #16
     394:	b2f8      	uxtb	r0, r7
     396:	0011      	movs	r1, r2
     398:	4b73      	ldr	r3, [pc, #460]	; (568 <i2c_master_init+0x288>)
     39a:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     39c:	8aa3      	ldrh	r3, [r4, #20]
     39e:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     3a0:	8ae3      	ldrh	r3, [r4, #22]
     3a2:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     3a4:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     3a6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     3a8:	2b00      	cmp	r3, #0
     3aa:	d104      	bne.n	3b6 <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     3ac:	4b6f      	ldr	r3, [pc, #444]	; (56c <i2c_master_init+0x28c>)
     3ae:	789b      	ldrb	r3, [r3, #2]
     3b0:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     3b2:	0fdb      	lsrs	r3, r3, #31
     3b4:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     3b6:	68a1      	ldr	r1, [r4, #8]
     3b8:	6923      	ldr	r3, [r4, #16]
     3ba:	430b      	orrs	r3, r1
     3bc:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     3be:	2224      	movs	r2, #36	; 0x24
     3c0:	5ca2      	ldrb	r2, [r4, r2]
     3c2:	2a00      	cmp	r2, #0
     3c4:	d002      	beq.n	3cc <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     3c6:	2280      	movs	r2, #128	; 0x80
     3c8:	05d2      	lsls	r2, r2, #23
     3ca:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     3cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     3ce:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     3d0:	222c      	movs	r2, #44	; 0x2c
     3d2:	5ca2      	ldrb	r2, [r4, r2]
     3d4:	2a00      	cmp	r2, #0
     3d6:	d103      	bne.n	3e0 <i2c_master_init+0x100>
     3d8:	2280      	movs	r2, #128	; 0x80
     3da:	0492      	lsls	r2, r2, #18
     3dc:	4291      	cmp	r1, r2
     3de:	d102      	bne.n	3e6 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     3e0:	2280      	movs	r2, #128	; 0x80
     3e2:	0512      	lsls	r2, r2, #20
     3e4:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     3e6:	222d      	movs	r2, #45	; 0x2d
     3e8:	5ca2      	ldrb	r2, [r4, r2]
     3ea:	2a00      	cmp	r2, #0
     3ec:	d002      	beq.n	3f4 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     3ee:	2280      	movs	r2, #128	; 0x80
     3f0:	0412      	lsls	r2, r2, #16
     3f2:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     3f4:	222e      	movs	r2, #46	; 0x2e
     3f6:	5ca2      	ldrb	r2, [r4, r2]
     3f8:	2a00      	cmp	r2, #0
     3fa:	d002      	beq.n	402 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     3fc:	2280      	movs	r2, #128	; 0x80
     3fe:	03d2      	lsls	r2, r2, #15
     400:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     402:	4642      	mov	r2, r8
     404:	6812      	ldr	r2, [r2, #0]
     406:	4313      	orrs	r3, r2
     408:	4642      	mov	r2, r8
     40a:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     40c:	2380      	movs	r3, #128	; 0x80
     40e:	005b      	lsls	r3, r3, #1
     410:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     412:	0028      	movs	r0, r5
     414:	3014      	adds	r0, #20
     416:	b2c0      	uxtb	r0, r0
     418:	4b55      	ldr	r3, [pc, #340]	; (570 <i2c_master_init+0x290>)
     41a:	4798      	blx	r3
     41c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     41e:	23fa      	movs	r3, #250	; 0xfa
     420:	009b      	lsls	r3, r3, #2
     422:	6822      	ldr	r2, [r4, #0]
     424:	435a      	muls	r2, r3
     426:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     428:	6863      	ldr	r3, [r4, #4]
     42a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     42c:	4d51      	ldr	r5, [pc, #324]	; (574 <i2c_master_init+0x294>)
     42e:	47a8      	blx	r5
     430:	9000      	str	r0, [sp, #0]
     432:	9101      	str	r1, [sp, #4]
     434:	464b      	mov	r3, r9
     436:	0058      	lsls	r0, r3, #1
     438:	47a8      	blx	r5
     43a:	9002      	str	r0, [sp, #8]
     43c:	9103      	str	r1, [sp, #12]
     43e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     440:	47a8      	blx	r5
     442:	9004      	str	r0, [sp, #16]
     444:	9105      	str	r1, [sp, #20]
     446:	4f4c      	ldr	r7, [pc, #304]	; (578 <i2c_master_init+0x298>)
     448:	4a4c      	ldr	r2, [pc, #304]	; (57c <i2c_master_init+0x29c>)
     44a:	4b4d      	ldr	r3, [pc, #308]	; (580 <i2c_master_init+0x2a0>)
     44c:	9800      	ldr	r0, [sp, #0]
     44e:	9901      	ldr	r1, [sp, #4]
     450:	47b8      	blx	r7
     452:	0002      	movs	r2, r0
     454:	000b      	movs	r3, r1
     456:	9804      	ldr	r0, [sp, #16]
     458:	9905      	ldr	r1, [sp, #20]
     45a:	47b8      	blx	r7
     45c:	4e49      	ldr	r6, [pc, #292]	; (584 <i2c_master_init+0x2a4>)
     45e:	2200      	movs	r2, #0
     460:	4b49      	ldr	r3, [pc, #292]	; (588 <i2c_master_init+0x2a8>)
     462:	47b0      	blx	r6
     464:	9004      	str	r0, [sp, #16]
     466:	9105      	str	r1, [sp, #20]
     468:	4648      	mov	r0, r9
     46a:	47a8      	blx	r5
     46c:	0002      	movs	r2, r0
     46e:	000b      	movs	r3, r1
     470:	9804      	ldr	r0, [sp, #16]
     472:	9905      	ldr	r1, [sp, #20]
     474:	47b8      	blx	r7
     476:	0002      	movs	r2, r0
     478:	000b      	movs	r3, r1
     47a:	4d44      	ldr	r5, [pc, #272]	; (58c <i2c_master_init+0x2ac>)
     47c:	9800      	ldr	r0, [sp, #0]
     47e:	9901      	ldr	r1, [sp, #4]
     480:	47a8      	blx	r5
     482:	9a02      	ldr	r2, [sp, #8]
     484:	9b03      	ldr	r3, [sp, #12]
     486:	47b0      	blx	r6
     488:	2200      	movs	r2, #0
     48a:	4b41      	ldr	r3, [pc, #260]	; (590 <i2c_master_init+0x2b0>)
     48c:	47a8      	blx	r5
     48e:	9a02      	ldr	r2, [sp, #8]
     490:	9b03      	ldr	r3, [sp, #12]
     492:	4d40      	ldr	r5, [pc, #256]	; (594 <i2c_master_init+0x2b4>)
     494:	47a8      	blx	r5
     496:	4b40      	ldr	r3, [pc, #256]	; (598 <i2c_master_init+0x2b8>)
     498:	4798      	blx	r3
     49a:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     49c:	2380      	movs	r3, #128	; 0x80
     49e:	049b      	lsls	r3, r3, #18
     4a0:	68a2      	ldr	r2, [r4, #8]
     4a2:	429a      	cmp	r2, r3
     4a4:	d01e      	beq.n	4e4 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4a6:	0003      	movs	r3, r0
     4a8:	2040      	movs	r0, #64	; 0x40
     4aa:	2dff      	cmp	r5, #255	; 0xff
     4ac:	d900      	bls.n	4b0 <i2c_master_init+0x1d0>
     4ae:	e73e      	b.n	32e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     4b0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     4b2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4b4:	25ff      	movs	r5, #255	; 0xff
     4b6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     4b8:	0624      	lsls	r4, r4, #24
     4ba:	4325      	orrs	r5, r4
     4bc:	0400      	lsls	r0, r0, #16
     4be:	23ff      	movs	r3, #255	; 0xff
     4c0:	041b      	lsls	r3, r3, #16
     4c2:	4018      	ands	r0, r3
     4c4:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4c6:	4643      	mov	r3, r8
     4c8:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     4ca:	2000      	movs	r0, #0
     4cc:	e72f      	b.n	32e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     4ce:	2100      	movs	r1, #0
     4d0:	4640      	mov	r0, r8
     4d2:	4b32      	ldr	r3, [pc, #200]	; (59c <i2c_master_init+0x2bc>)
     4d4:	4798      	blx	r3
     4d6:	e74a      	b.n	36e <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     4d8:	2101      	movs	r1, #1
     4da:	4640      	mov	r0, r8
     4dc:	4b2f      	ldr	r3, [pc, #188]	; (59c <i2c_master_init+0x2bc>)
     4de:	4798      	blx	r3
     4e0:	0007      	movs	r7, r0
     4e2:	e751      	b.n	388 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     4e4:	26fa      	movs	r6, #250	; 0xfa
     4e6:	00b6      	lsls	r6, r6, #2
     4e8:	4653      	mov	r3, sl
     4ea:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     4ec:	9800      	ldr	r0, [sp, #0]
     4ee:	9901      	ldr	r1, [sp, #4]
     4f0:	0002      	movs	r2, r0
     4f2:	000b      	movs	r3, r1
     4f4:	4c23      	ldr	r4, [pc, #140]	; (584 <i2c_master_init+0x2a4>)
     4f6:	47a0      	blx	r4
     4f8:	9000      	str	r0, [sp, #0]
     4fa:	9101      	str	r1, [sp, #4]
     4fc:	0030      	movs	r0, r6
     4fe:	4b1d      	ldr	r3, [pc, #116]	; (574 <i2c_master_init+0x294>)
     500:	4798      	blx	r3
     502:	2200      	movs	r2, #0
     504:	4b26      	ldr	r3, [pc, #152]	; (5a0 <i2c_master_init+0x2c0>)
     506:	47b8      	blx	r7
     508:	0002      	movs	r2, r0
     50a:	000b      	movs	r3, r1
     50c:	9800      	ldr	r0, [sp, #0]
     50e:	9901      	ldr	r1, [sp, #4]
     510:	4c20      	ldr	r4, [pc, #128]	; (594 <i2c_master_init+0x2b4>)
     512:	47a0      	blx	r4
     514:	2200      	movs	r2, #0
     516:	4b1e      	ldr	r3, [pc, #120]	; (590 <i2c_master_init+0x2b0>)
     518:	4c1c      	ldr	r4, [pc, #112]	; (58c <i2c_master_init+0x2ac>)
     51a:	47a0      	blx	r4
     51c:	4b1e      	ldr	r3, [pc, #120]	; (598 <i2c_master_init+0x2b8>)
     51e:	4798      	blx	r3
     520:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     522:	d00c      	beq.n	53e <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     524:	0031      	movs	r1, r6
     526:	9807      	ldr	r0, [sp, #28]
     528:	4b1e      	ldr	r3, [pc, #120]	; (5a4 <i2c_master_init+0x2c4>)
     52a:	4798      	blx	r3
     52c:	3802      	subs	r0, #2
     52e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     530:	002b      	movs	r3, r5
     532:	2dff      	cmp	r5, #255	; 0xff
     534:	d80c      	bhi.n	550 <i2c_master_init+0x270>
     536:	28ff      	cmp	r0, #255	; 0xff
     538:	d9bc      	bls.n	4b4 <i2c_master_init+0x1d4>
     53a:	2040      	movs	r0, #64	; 0x40
     53c:	e6f7      	b.n	32e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     53e:	0071      	lsls	r1, r6, #1
     540:	1e48      	subs	r0, r1, #1
     542:	9b07      	ldr	r3, [sp, #28]
     544:	469c      	mov	ip, r3
     546:	4460      	add	r0, ip
     548:	4b16      	ldr	r3, [pc, #88]	; (5a4 <i2c_master_init+0x2c4>)
     54a:	4798      	blx	r3
     54c:	3801      	subs	r0, #1
     54e:	e7ef      	b.n	530 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     550:	2040      	movs	r0, #64	; 0x40
     552:	e6ec      	b.n	32e <i2c_master_init+0x4e>
     554:	00000a9d 	.word	0x00000a9d
     558:	40000400 	.word	0x40000400
     55c:	00001185 	.word	0x00001185
     560:	000010f9 	.word	0x000010f9
     564:	000008d9 	.word	0x000008d9
     568:	0000127d 	.word	0x0000127d
     56c:	41002000 	.word	0x41002000
     570:	000011a1 	.word	0x000011a1
     574:	00002dd1 	.word	0x00002dd1
     578:	0000223d 	.word	0x0000223d
     57c:	e826d695 	.word	0xe826d695
     580:	3e112e0b 	.word	0x3e112e0b
     584:	000015b5 	.word	0x000015b5
     588:	40240000 	.word	0x40240000
     58c:	0000273d 	.word	0x0000273d
     590:	3ff00000 	.word	0x3ff00000
     594:	00001bd5 	.word	0x00001bd5
     598:	00002d69 	.word	0x00002d69
     59c:	00000925 	.word	0x00000925
     5a0:	40080000 	.word	0x40080000
     5a4:	0000149d 	.word	0x0000149d

000005a8 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5a8:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     5aa:	7e1a      	ldrb	r2, [r3, #24]
     5ac:	0792      	lsls	r2, r2, #30
     5ae:	d507      	bpl.n	5c0 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     5b0:	2202      	movs	r2, #2
     5b2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     5b4:	8b5b      	ldrh	r3, [r3, #26]
     5b6:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     5b8:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     5ba:	17db      	asrs	r3, r3, #31
     5bc:	4018      	ands	r0, r3
}
     5be:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     5c0:	8b5a      	ldrh	r2, [r3, #26]
     5c2:	0752      	lsls	r2, r2, #29
     5c4:	d506      	bpl.n	5d4 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5c6:	6859      	ldr	r1, [r3, #4]
     5c8:	22c0      	movs	r2, #192	; 0xc0
     5ca:	0292      	lsls	r2, r2, #10
     5cc:	430a      	orrs	r2, r1
     5ce:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     5d0:	2018      	movs	r0, #24
     5d2:	e7f4      	b.n	5be <_i2c_master_address_response+0x16>
	return STATUS_OK;
     5d4:	2000      	movs	r0, #0
     5d6:	e7f2      	b.n	5be <_i2c_master_address_response+0x16>

000005d8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     5d8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5da:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     5dc:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     5de:	2401      	movs	r4, #1
     5e0:	2502      	movs	r5, #2
     5e2:	7e11      	ldrb	r1, [r2, #24]
     5e4:	4221      	tst	r1, r4
     5e6:	d10b      	bne.n	600 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     5e8:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     5ea:	4229      	tst	r1, r5
     5ec:	d106      	bne.n	5fc <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     5ee:	3301      	adds	r3, #1
     5f0:	b29b      	uxth	r3, r3
     5f2:	8901      	ldrh	r1, [r0, #8]
     5f4:	4299      	cmp	r1, r3
     5f6:	d8f4      	bhi.n	5e2 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     5f8:	2012      	movs	r0, #18
     5fa:	e002      	b.n	602 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     5fc:	2000      	movs	r0, #0
     5fe:	e000      	b.n	602 <_i2c_master_wait_for_bus+0x2a>
     600:	2000      	movs	r0, #0
}
     602:	bd30      	pop	{r4, r5, pc}

00000604 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     604:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     606:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     608:	6862      	ldr	r2, [r4, #4]
     60a:	2380      	movs	r3, #128	; 0x80
     60c:	02db      	lsls	r3, r3, #11
     60e:	4313      	orrs	r3, r2
     610:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     612:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     614:	4b02      	ldr	r3, [pc, #8]	; (620 <_i2c_master_send_hs_master_code+0x1c>)
     616:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     618:	2301      	movs	r3, #1
     61a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     61c:	bd10      	pop	{r4, pc}
     61e:	46c0      	nop			; (mov r8, r8)
     620:	000005d9 	.word	0x000005d9

00000624 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     624:	b5f0      	push	{r4, r5, r6, r7, lr}
     626:	46de      	mov	lr, fp
     628:	4657      	mov	r7, sl
     62a:	464e      	mov	r6, r9
     62c:	4645      	mov	r5, r8
     62e:	b5e0      	push	{r5, r6, r7, lr}
     630:	b083      	sub	sp, #12
     632:	0006      	movs	r6, r0
     634:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     636:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     638:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     63a:	4b32      	ldr	r3, [pc, #200]	; (704 <_i2c_master_write_packet+0xe0>)
     63c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     63e:	7a7b      	ldrb	r3, [r7, #9]
     640:	2b00      	cmp	r3, #0
     642:	d11d      	bne.n	680 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     644:	686b      	ldr	r3, [r5, #4]
     646:	4a30      	ldr	r2, [pc, #192]	; (708 <_i2c_master_write_packet+0xe4>)
     648:	4013      	ands	r3, r2
     64a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     64c:	7a3b      	ldrb	r3, [r7, #8]
     64e:	2b00      	cmp	r3, #0
     650:	d01b      	beq.n	68a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     652:	883b      	ldrh	r3, [r7, #0]
     654:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     656:	7a7a      	ldrb	r2, [r7, #9]
     658:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     65a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     65c:	2280      	movs	r2, #128	; 0x80
     65e:	0212      	lsls	r2, r2, #8
     660:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     662:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     664:	0030      	movs	r0, r6
     666:	4b29      	ldr	r3, [pc, #164]	; (70c <_i2c_master_write_packet+0xe8>)
     668:	4798      	blx	r3
     66a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     66c:	2800      	cmp	r0, #0
     66e:	d013      	beq.n	698 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     670:	9801      	ldr	r0, [sp, #4]
     672:	b003      	add	sp, #12
     674:	bc3c      	pop	{r2, r3, r4, r5}
     676:	4690      	mov	r8, r2
     678:	4699      	mov	r9, r3
     67a:	46a2      	mov	sl, r4
     67c:	46ab      	mov	fp, r5
     67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     680:	7ab9      	ldrb	r1, [r7, #10]
     682:	0030      	movs	r0, r6
     684:	4b22      	ldr	r3, [pc, #136]	; (710 <_i2c_master_write_packet+0xec>)
     686:	4798      	blx	r3
     688:	e7dc      	b.n	644 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     68a:	883b      	ldrh	r3, [r7, #0]
     68c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     68e:	7a7a      	ldrb	r2, [r7, #9]
     690:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     692:	4313      	orrs	r3, r2
     694:	626b      	str	r3, [r5, #36]	; 0x24
     696:	e7e5      	b.n	664 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     698:	0030      	movs	r0, r6
     69a:	4b1e      	ldr	r3, [pc, #120]	; (714 <_i2c_master_write_packet+0xf0>)
     69c:	4798      	blx	r3
     69e:	1e03      	subs	r3, r0, #0
     6a0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     6a2:	d1e5      	bne.n	670 <_i2c_master_write_packet+0x4c>
     6a4:	46a0      	mov	r8, r4
     6a6:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6a8:	3320      	adds	r3, #32
     6aa:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     6ac:	4b15      	ldr	r3, [pc, #84]	; (704 <_i2c_master_write_packet+0xe0>)
     6ae:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     6b0:	4b16      	ldr	r3, [pc, #88]	; (70c <_i2c_master_write_packet+0xe8>)
     6b2:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     6b4:	4544      	cmp	r4, r8
     6b6:	d015      	beq.n	6e4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6b8:	8b6b      	ldrh	r3, [r5, #26]
     6ba:	464a      	mov	r2, r9
     6bc:	4213      	tst	r3, r2
     6be:	d01d      	beq.n	6fc <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     6c0:	0030      	movs	r0, r6
     6c2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     6c4:	687b      	ldr	r3, [r7, #4]
     6c6:	5d1a      	ldrb	r2, [r3, r4]
     6c8:	2328      	movs	r3, #40	; 0x28
     6ca:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     6cc:	0030      	movs	r0, r6
     6ce:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     6d0:	2800      	cmp	r0, #0
     6d2:	d106      	bne.n	6e2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6d4:	8b6b      	ldrh	r3, [r5, #26]
     6d6:	3401      	adds	r4, #1
     6d8:	075b      	lsls	r3, r3, #29
     6da:	d5eb      	bpl.n	6b4 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     6dc:	231e      	movs	r3, #30
     6de:	9301      	str	r3, [sp, #4]
     6e0:	e000      	b.n	6e4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     6e2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     6e4:	7ab3      	ldrb	r3, [r6, #10]
     6e6:	2b00      	cmp	r3, #0
     6e8:	d0c2      	beq.n	670 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     6ea:	0030      	movs	r0, r6
     6ec:	4b05      	ldr	r3, [pc, #20]	; (704 <_i2c_master_write_packet+0xe0>)
     6ee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6f0:	686a      	ldr	r2, [r5, #4]
     6f2:	23c0      	movs	r3, #192	; 0xc0
     6f4:	029b      	lsls	r3, r3, #10
     6f6:	4313      	orrs	r3, r2
     6f8:	606b      	str	r3, [r5, #4]
     6fa:	e7b9      	b.n	670 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     6fc:	2341      	movs	r3, #65	; 0x41
     6fe:	9301      	str	r3, [sp, #4]
     700:	e7b6      	b.n	670 <_i2c_master_write_packet+0x4c>
     702:	46c0      	nop			; (mov r8, r8)
     704:	000002d5 	.word	0x000002d5
     708:	fffbffff 	.word	0xfffbffff
     70c:	000005d9 	.word	0x000005d9
     710:	00000605 	.word	0x00000605
     714:	000005a9 	.word	0x000005a9

00000718 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     718:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     71a:	2301      	movs	r3, #1
     71c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     71e:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     720:	4b01      	ldr	r3, [pc, #4]	; (728 <i2c_master_write_packet_wait+0x10>)
     722:	4798      	blx	r3
}
     724:	bd10      	pop	{r4, pc}
     726:	46c0      	nop			; (mov r8, r8)
     728:	00000625 	.word	0x00000625

0000072c <_i2c_slave_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_slave_wait_for_bus(
		struct i2c_slave_module *const module)
{
     72c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     72e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply */
	uint16_t timeout_counter = 0;
     730:	2300      	movs	r3, #0
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     732:	2404      	movs	r4, #4
     734:	2501      	movs	r5, #1
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     736:	2602      	movs	r6, #2
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     738:	7e11      	ldrb	r1, [r2, #24]
     73a:	4221      	tst	r1, r4
     73c:	d10e      	bne.n	75c <_i2c_slave_wait_for_bus+0x30>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     73e:	7e11      	ldrb	r1, [r2, #24]
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     740:	4229      	tst	r1, r5
     742:	d10d      	bne.n	760 <_i2c_slave_wait_for_bus+0x34>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH))) {
     744:	7e11      	ldrb	r1, [r2, #24]
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     746:	4231      	tst	r1, r6
     748:	d106      	bne.n	758 <_i2c_slave_wait_for_bus+0x2c>

		/* Check timeout condition */
		if (++timeout_counter >= module->buffer_timeout) {
     74a:	3301      	adds	r3, #1
     74c:	b29b      	uxth	r3, r3
     74e:	88c1      	ldrh	r1, [r0, #6]
     750:	4299      	cmp	r1, r3
     752:	d8f1      	bhi.n	738 <_i2c_slave_wait_for_bus+0xc>
			return STATUS_ERR_TIMEOUT;
     754:	2012      	movs	r0, #18
     756:	e002      	b.n	75e <_i2c_slave_wait_for_bus+0x32>
		}
	}
	return STATUS_OK;
     758:	2000      	movs	r0, #0
     75a:	e000      	b.n	75e <_i2c_slave_wait_for_bus+0x32>
     75c:	2000      	movs	r0, #0
}
     75e:	bd70      	pop	{r4, r5, r6, pc}
	return STATUS_OK;
     760:	2000      	movs	r0, #0
     762:	e7fc      	b.n	75e <_i2c_slave_wait_for_bus+0x32>

00000764 <i2c_slave_init>:
{
     764:	b5f0      	push	{r4, r5, r6, r7, lr}
     766:	b085      	sub	sp, #20
     768:	0005      	movs	r5, r0
     76a:	000c      	movs	r4, r1
     76c:	0016      	movs	r6, r2
	module->hw = hw;
     76e:	6029      	str	r1, [r5, #0]
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     770:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     772:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     774:	079b      	lsls	r3, r3, #30
     776:	d501      	bpl.n	77c <i2c_slave_init+0x18>
}
     778:	b005      	add	sp, #20
     77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     77c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     77e:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     780:	07db      	lsls	r3, r3, #31
     782:	d4f9      	bmi.n	778 <i2c_slave_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     784:	0008      	movs	r0, r1
     786:	4b43      	ldr	r3, [pc, #268]	; (894 <i2c_slave_init+0x130>)
     788:	4798      	blx	r3
     78a:	4b43      	ldr	r3, [pc, #268]	; (898 <i2c_slave_init+0x134>)
     78c:	469c      	mov	ip, r3
     78e:	6a19      	ldr	r1, [r3, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     790:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     792:	2701      	movs	r7, #1
     794:	003a      	movs	r2, r7
     796:	409a      	lsls	r2, r3
     798:	0013      	movs	r3, r2
     79a:	430b      	orrs	r3, r1
     79c:	4662      	mov	r2, ip
     79e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     7a0:	a903      	add	r1, sp, #12
     7a2:	7e33      	ldrb	r3, [r6, #24]
     7a4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7a6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     7a8:	b2c3      	uxtb	r3, r0
     7aa:	9301      	str	r3, [sp, #4]
     7ac:	0018      	movs	r0, r3
     7ae:	4b3b      	ldr	r3, [pc, #236]	; (89c <i2c_slave_init+0x138>)
     7b0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     7b2:	9801      	ldr	r0, [sp, #4]
     7b4:	4b3a      	ldr	r3, [pc, #232]	; (8a0 <i2c_slave_init+0x13c>)
     7b6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     7b8:	7e30      	ldrb	r0, [r6, #24]
     7ba:	2100      	movs	r1, #0
     7bc:	4b39      	ldr	r3, [pc, #228]	; (8a4 <i2c_slave_init+0x140>)
     7be:	4798      	blx	r3
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     7c0:	2310      	movs	r3, #16
     7c2:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     7c4:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     7c6:	8933      	ldrh	r3, [r6, #8]
     7c8:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     7ca:	7c33      	ldrb	r3, [r6, #16]
     7cc:	722b      	strb	r3, [r5, #8]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7ce:	2380      	movs	r3, #128	; 0x80
     7d0:	aa02      	add	r2, sp, #8
     7d2:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7d4:	2300      	movs	r3, #0
     7d6:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     7d8:	7097      	strb	r7, [r2, #2]
	config->powersave    = false;
     7da:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     7dc:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     7de:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     7e0:	2800      	cmp	r0, #0
     7e2:	d04b      	beq.n	87c <i2c_slave_init+0x118>
	pin_conf.mux_position = pad0 & 0xFFFF;
     7e4:	ab02      	add	r3, sp, #8
     7e6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     7e8:	2302      	movs	r3, #2
     7ea:	aa02      	add	r2, sp, #8
     7ec:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     7ee:	0c00      	lsrs	r0, r0, #16
     7f0:	b2c0      	uxtb	r0, r0
     7f2:	0011      	movs	r1, r2
     7f4:	4b2c      	ldr	r3, [pc, #176]	; (8a8 <i2c_slave_init+0x144>)
     7f6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     7f8:	2d00      	cmp	r5, #0
     7fa:	d044      	beq.n	886 <i2c_slave_init+0x122>
	pin_conf.mux_position = pad1 & 0xFFFF;
     7fc:	ab02      	add	r3, sp, #8
     7fe:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     800:	2302      	movs	r3, #2
     802:	aa02      	add	r2, sp, #8
     804:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     806:	0c2d      	lsrs	r5, r5, #16
     808:	b2e8      	uxtb	r0, r5
     80a:	0011      	movs	r1, r2
     80c:	4b26      	ldr	r3, [pc, #152]	; (8a8 <i2c_slave_init+0x144>)
     80e:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     810:	7e73      	ldrb	r3, [r6, #25]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     812:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     814:	2b00      	cmp	r3, #0
     816:	d104      	bne.n	822 <i2c_slave_init+0xbe>
     818:	4b24      	ldr	r3, [pc, #144]	; (8ac <i2c_slave_init+0x148>)
     81a:	789b      	ldrb	r3, [r3, #2]
     81c:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     81e:	0fdb      	lsrs	r3, r3, #31
     820:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     822:	2325      	movs	r3, #37	; 0x25
     824:	5cf3      	ldrb	r3, [r6, r3]
     826:	2b00      	cmp	r3, #0
     828:	d104      	bne.n	834 <i2c_slave_init+0xd0>
     82a:	2380      	movs	r3, #128	; 0x80
     82c:	049b      	lsls	r3, r3, #18
     82e:	6971      	ldr	r1, [r6, #20]
     830:	4299      	cmp	r1, r3
     832:	d102      	bne.n	83a <i2c_slave_init+0xd6>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     834:	2380      	movs	r3, #128	; 0x80
     836:	051b      	lsls	r3, r3, #20
     838:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     83a:	6820      	ldr	r0, [r4, #0]
     83c:	6873      	ldr	r3, [r6, #4]
     83e:	6971      	ldr	r1, [r6, #20]
     840:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     842:	2124      	movs	r1, #36	; 0x24
     844:	5c71      	ldrb	r1, [r6, r1]
     846:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     848:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     84a:	2126      	movs	r1, #38	; 0x26
     84c:	5c71      	ldrb	r1, [r6, r1]
     84e:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     850:	430b      	orrs	r3, r1
     852:	4303      	orrs	r3, r0
     854:	4313      	orrs	r3, r2
     856:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     858:	8972      	ldrh	r2, [r6, #10]
     85a:	2380      	movs	r3, #128	; 0x80
     85c:	005b      	lsls	r3, r3, #1
     85e:	4313      	orrs	r3, r2
     860:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     862:	89b3      	ldrh	r3, [r6, #12]
     864:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     866:	89f2      	ldrh	r2, [r6, #14]
     868:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     86a:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     86c:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     86e:	4313      	orrs	r3, r2
     870:	7c32      	ldrb	r2, [r6, #16]
     872:	03d2      	lsls	r2, r2, #15
     874:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     876:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     878:	2000      	movs	r0, #0
     87a:	e77d      	b.n	778 <i2c_slave_init+0x14>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     87c:	2100      	movs	r1, #0
     87e:	0020      	movs	r0, r4
     880:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <i2c_slave_init+0x14c>)
     882:	4798      	blx	r3
     884:	e7ae      	b.n	7e4 <i2c_slave_init+0x80>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     886:	2101      	movs	r1, #1
     888:	0020      	movs	r0, r4
     88a:	4b09      	ldr	r3, [pc, #36]	; (8b0 <i2c_slave_init+0x14c>)
     88c:	4798      	blx	r3
     88e:	0005      	movs	r5, r0
     890:	e7b4      	b.n	7fc <i2c_slave_init+0x98>
     892:	46c0      	nop			; (mov r8, r8)
     894:	00000a9d 	.word	0x00000a9d
     898:	40000400 	.word	0x40000400
     89c:	00001185 	.word	0x00001185
     8a0:	000010f9 	.word	0x000010f9
     8a4:	000008d9 	.word	0x000008d9
     8a8:	0000127d 	.word	0x0000127d
     8ac:	41002000 	.word	0x41002000
     8b0:	00000925 	.word	0x00000925

000008b4 <i2c_slave_get_direction_wait>:
 * \retval I2C_SLAVE_DIRECTION_READ   Write request from master
 * \retval I2C_SLAVE_DIRECTION_WRITE  Read request from master
 */
enum i2c_slave_direction i2c_slave_get_direction_wait(
		struct i2c_slave_module *const module)
{
     8b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     8b6:	6804      	ldr	r4, [r0, #0]

	enum status_code status;

	/* Wait for address interrupt */
	status = _i2c_slave_wait_for_bus(module);
     8b8:	4b06      	ldr	r3, [pc, #24]	; (8d4 <i2c_slave_get_direction_wait+0x20>)
     8ba:	4798      	blx	r3

	if (status != STATUS_OK) {
		/* Timeout, return */
		return I2C_SLAVE_DIRECTION_NONE;
     8bc:	2302      	movs	r3, #2
	if (status != STATUS_OK) {
     8be:	2800      	cmp	r0, #0
     8c0:	d001      	beq.n	8c6 <i2c_slave_get_direction_wait+0x12>
		return I2C_SLAVE_DIRECTION_WRITE;
	} else {
		/* Write request from master */
		return I2C_SLAVE_DIRECTION_READ;
	}
}
     8c2:	0018      	movs	r0, r3
     8c4:	bd10      	pop	{r4, pc}
	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     8c6:	7e22      	ldrb	r2, [r4, #24]
     8c8:	0792      	lsls	r2, r2, #30
     8ca:	d5fa      	bpl.n	8c2 <i2c_slave_get_direction_wait+0xe>
	if ((i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR)) {
     8cc:	8b63      	ldrh	r3, [r4, #26]
     8ce:	071b      	lsls	r3, r3, #28
		return I2C_SLAVE_DIRECTION_NONE;
     8d0:	0fdb      	lsrs	r3, r3, #31
     8d2:	e7f6      	b.n	8c2 <i2c_slave_get_direction_wait+0xe>
     8d4:	0000072d 	.word	0x0000072d

000008d8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     8d8:	b510      	push	{r4, lr}
     8da:	b082      	sub	sp, #8
     8dc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     8de:	4b0e      	ldr	r3, [pc, #56]	; (918 <sercom_set_gclk_generator+0x40>)
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d007      	beq.n	8f6 <sercom_set_gclk_generator+0x1e>
     8e6:	2900      	cmp	r1, #0
     8e8:	d105      	bne.n	8f6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     8ea:	4b0b      	ldr	r3, [pc, #44]	; (918 <sercom_set_gclk_generator+0x40>)
     8ec:	785b      	ldrb	r3, [r3, #1]
     8ee:	4283      	cmp	r3, r0
     8f0:	d010      	beq.n	914 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     8f2:	201d      	movs	r0, #29
     8f4:	e00c      	b.n	910 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     8f6:	a901      	add	r1, sp, #4
     8f8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8fa:	2013      	movs	r0, #19
     8fc:	4b07      	ldr	r3, [pc, #28]	; (91c <sercom_set_gclk_generator+0x44>)
     8fe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     900:	2013      	movs	r0, #19
     902:	4b07      	ldr	r3, [pc, #28]	; (920 <sercom_set_gclk_generator+0x48>)
     904:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     906:	4b04      	ldr	r3, [pc, #16]	; (918 <sercom_set_gclk_generator+0x40>)
     908:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     90a:	2201      	movs	r2, #1
     90c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     90e:	2000      	movs	r0, #0
}
     910:	b002      	add	sp, #8
     912:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     914:	2000      	movs	r0, #0
     916:	e7fb      	b.n	910 <sercom_set_gclk_generator+0x38>
     918:	20000040 	.word	0x20000040
     91c:	00001185 	.word	0x00001185
     920:	000010f9 	.word	0x000010f9

00000924 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     924:	4b40      	ldr	r3, [pc, #256]	; (a28 <_sercom_get_default_pad+0x104>)
     926:	4298      	cmp	r0, r3
     928:	d031      	beq.n	98e <_sercom_get_default_pad+0x6a>
     92a:	d90a      	bls.n	942 <_sercom_get_default_pad+0x1e>
     92c:	4b3f      	ldr	r3, [pc, #252]	; (a2c <_sercom_get_default_pad+0x108>)
     92e:	4298      	cmp	r0, r3
     930:	d04d      	beq.n	9ce <_sercom_get_default_pad+0xaa>
     932:	4b3f      	ldr	r3, [pc, #252]	; (a30 <_sercom_get_default_pad+0x10c>)
     934:	4298      	cmp	r0, r3
     936:	d05a      	beq.n	9ee <_sercom_get_default_pad+0xca>
     938:	4b3e      	ldr	r3, [pc, #248]	; (a34 <_sercom_get_default_pad+0x110>)
     93a:	4298      	cmp	r0, r3
     93c:	d037      	beq.n	9ae <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     93e:	2000      	movs	r0, #0
}
     940:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     942:	4b3d      	ldr	r3, [pc, #244]	; (a38 <_sercom_get_default_pad+0x114>)
     944:	4298      	cmp	r0, r3
     946:	d00c      	beq.n	962 <_sercom_get_default_pad+0x3e>
     948:	4b3c      	ldr	r3, [pc, #240]	; (a3c <_sercom_get_default_pad+0x118>)
     94a:	4298      	cmp	r0, r3
     94c:	d1f7      	bne.n	93e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     94e:	2901      	cmp	r1, #1
     950:	d017      	beq.n	982 <_sercom_get_default_pad+0x5e>
     952:	2900      	cmp	r1, #0
     954:	d05d      	beq.n	a12 <_sercom_get_default_pad+0xee>
     956:	2902      	cmp	r1, #2
     958:	d015      	beq.n	986 <_sercom_get_default_pad+0x62>
     95a:	2903      	cmp	r1, #3
     95c:	d015      	beq.n	98a <_sercom_get_default_pad+0x66>
	return 0;
     95e:	2000      	movs	r0, #0
     960:	e7ee      	b.n	940 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     962:	2901      	cmp	r1, #1
     964:	d007      	beq.n	976 <_sercom_get_default_pad+0x52>
     966:	2900      	cmp	r1, #0
     968:	d051      	beq.n	a0e <_sercom_get_default_pad+0xea>
     96a:	2902      	cmp	r1, #2
     96c:	d005      	beq.n	97a <_sercom_get_default_pad+0x56>
     96e:	2903      	cmp	r1, #3
     970:	d005      	beq.n	97e <_sercom_get_default_pad+0x5a>
	return 0;
     972:	2000      	movs	r0, #0
     974:	e7e4      	b.n	940 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     976:	4832      	ldr	r0, [pc, #200]	; (a40 <_sercom_get_default_pad+0x11c>)
     978:	e7e2      	b.n	940 <_sercom_get_default_pad+0x1c>
     97a:	4832      	ldr	r0, [pc, #200]	; (a44 <_sercom_get_default_pad+0x120>)
     97c:	e7e0      	b.n	940 <_sercom_get_default_pad+0x1c>
     97e:	4832      	ldr	r0, [pc, #200]	; (a48 <_sercom_get_default_pad+0x124>)
     980:	e7de      	b.n	940 <_sercom_get_default_pad+0x1c>
     982:	4832      	ldr	r0, [pc, #200]	; (a4c <_sercom_get_default_pad+0x128>)
     984:	e7dc      	b.n	940 <_sercom_get_default_pad+0x1c>
     986:	4832      	ldr	r0, [pc, #200]	; (a50 <_sercom_get_default_pad+0x12c>)
     988:	e7da      	b.n	940 <_sercom_get_default_pad+0x1c>
     98a:	4832      	ldr	r0, [pc, #200]	; (a54 <_sercom_get_default_pad+0x130>)
     98c:	e7d8      	b.n	940 <_sercom_get_default_pad+0x1c>
     98e:	2901      	cmp	r1, #1
     990:	d007      	beq.n	9a2 <_sercom_get_default_pad+0x7e>
     992:	2900      	cmp	r1, #0
     994:	d03f      	beq.n	a16 <_sercom_get_default_pad+0xf2>
     996:	2902      	cmp	r1, #2
     998:	d005      	beq.n	9a6 <_sercom_get_default_pad+0x82>
     99a:	2903      	cmp	r1, #3
     99c:	d005      	beq.n	9aa <_sercom_get_default_pad+0x86>
	return 0;
     99e:	2000      	movs	r0, #0
     9a0:	e7ce      	b.n	940 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9a2:	482d      	ldr	r0, [pc, #180]	; (a58 <_sercom_get_default_pad+0x134>)
     9a4:	e7cc      	b.n	940 <_sercom_get_default_pad+0x1c>
     9a6:	482d      	ldr	r0, [pc, #180]	; (a5c <_sercom_get_default_pad+0x138>)
     9a8:	e7ca      	b.n	940 <_sercom_get_default_pad+0x1c>
     9aa:	482d      	ldr	r0, [pc, #180]	; (a60 <_sercom_get_default_pad+0x13c>)
     9ac:	e7c8      	b.n	940 <_sercom_get_default_pad+0x1c>
     9ae:	2901      	cmp	r1, #1
     9b0:	d007      	beq.n	9c2 <_sercom_get_default_pad+0x9e>
     9b2:	2900      	cmp	r1, #0
     9b4:	d031      	beq.n	a1a <_sercom_get_default_pad+0xf6>
     9b6:	2902      	cmp	r1, #2
     9b8:	d005      	beq.n	9c6 <_sercom_get_default_pad+0xa2>
     9ba:	2903      	cmp	r1, #3
     9bc:	d005      	beq.n	9ca <_sercom_get_default_pad+0xa6>
	return 0;
     9be:	2000      	movs	r0, #0
     9c0:	e7be      	b.n	940 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9c2:	4828      	ldr	r0, [pc, #160]	; (a64 <_sercom_get_default_pad+0x140>)
     9c4:	e7bc      	b.n	940 <_sercom_get_default_pad+0x1c>
     9c6:	4828      	ldr	r0, [pc, #160]	; (a68 <_sercom_get_default_pad+0x144>)
     9c8:	e7ba      	b.n	940 <_sercom_get_default_pad+0x1c>
     9ca:	4828      	ldr	r0, [pc, #160]	; (a6c <_sercom_get_default_pad+0x148>)
     9cc:	e7b8      	b.n	940 <_sercom_get_default_pad+0x1c>
     9ce:	2901      	cmp	r1, #1
     9d0:	d007      	beq.n	9e2 <_sercom_get_default_pad+0xbe>
     9d2:	2900      	cmp	r1, #0
     9d4:	d023      	beq.n	a1e <_sercom_get_default_pad+0xfa>
     9d6:	2902      	cmp	r1, #2
     9d8:	d005      	beq.n	9e6 <_sercom_get_default_pad+0xc2>
     9da:	2903      	cmp	r1, #3
     9dc:	d005      	beq.n	9ea <_sercom_get_default_pad+0xc6>
	return 0;
     9de:	2000      	movs	r0, #0
     9e0:	e7ae      	b.n	940 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9e2:	4823      	ldr	r0, [pc, #140]	; (a70 <_sercom_get_default_pad+0x14c>)
     9e4:	e7ac      	b.n	940 <_sercom_get_default_pad+0x1c>
     9e6:	4823      	ldr	r0, [pc, #140]	; (a74 <_sercom_get_default_pad+0x150>)
     9e8:	e7aa      	b.n	940 <_sercom_get_default_pad+0x1c>
     9ea:	4823      	ldr	r0, [pc, #140]	; (a78 <_sercom_get_default_pad+0x154>)
     9ec:	e7a8      	b.n	940 <_sercom_get_default_pad+0x1c>
     9ee:	2901      	cmp	r1, #1
     9f0:	d007      	beq.n	a02 <_sercom_get_default_pad+0xde>
     9f2:	2900      	cmp	r1, #0
     9f4:	d015      	beq.n	a22 <_sercom_get_default_pad+0xfe>
     9f6:	2902      	cmp	r1, #2
     9f8:	d005      	beq.n	a06 <_sercom_get_default_pad+0xe2>
     9fa:	2903      	cmp	r1, #3
     9fc:	d005      	beq.n	a0a <_sercom_get_default_pad+0xe6>
	return 0;
     9fe:	2000      	movs	r0, #0
     a00:	e79e      	b.n	940 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a02:	481e      	ldr	r0, [pc, #120]	; (a7c <_sercom_get_default_pad+0x158>)
     a04:	e79c      	b.n	940 <_sercom_get_default_pad+0x1c>
     a06:	481e      	ldr	r0, [pc, #120]	; (a80 <_sercom_get_default_pad+0x15c>)
     a08:	e79a      	b.n	940 <_sercom_get_default_pad+0x1c>
     a0a:	481e      	ldr	r0, [pc, #120]	; (a84 <_sercom_get_default_pad+0x160>)
     a0c:	e798      	b.n	940 <_sercom_get_default_pad+0x1c>
     a0e:	481e      	ldr	r0, [pc, #120]	; (a88 <_sercom_get_default_pad+0x164>)
     a10:	e796      	b.n	940 <_sercom_get_default_pad+0x1c>
     a12:	2003      	movs	r0, #3
     a14:	e794      	b.n	940 <_sercom_get_default_pad+0x1c>
     a16:	481d      	ldr	r0, [pc, #116]	; (a8c <_sercom_get_default_pad+0x168>)
     a18:	e792      	b.n	940 <_sercom_get_default_pad+0x1c>
     a1a:	481d      	ldr	r0, [pc, #116]	; (a90 <_sercom_get_default_pad+0x16c>)
     a1c:	e790      	b.n	940 <_sercom_get_default_pad+0x1c>
     a1e:	481d      	ldr	r0, [pc, #116]	; (a94 <_sercom_get_default_pad+0x170>)
     a20:	e78e      	b.n	940 <_sercom_get_default_pad+0x1c>
     a22:	481d      	ldr	r0, [pc, #116]	; (a98 <_sercom_get_default_pad+0x174>)
     a24:	e78c      	b.n	940 <_sercom_get_default_pad+0x1c>
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	42001000 	.word	0x42001000
     a2c:	42001800 	.word	0x42001800
     a30:	42001c00 	.word	0x42001c00
     a34:	42001400 	.word	0x42001400
     a38:	42000800 	.word	0x42000800
     a3c:	42000c00 	.word	0x42000c00
     a40:	00050003 	.word	0x00050003
     a44:	00060003 	.word	0x00060003
     a48:	00070003 	.word	0x00070003
     a4c:	00010003 	.word	0x00010003
     a50:	001e0003 	.word	0x001e0003
     a54:	001f0003 	.word	0x001f0003
     a58:	000d0002 	.word	0x000d0002
     a5c:	000e0002 	.word	0x000e0002
     a60:	000f0002 	.word	0x000f0002
     a64:	00110003 	.word	0x00110003
     a68:	00120003 	.word	0x00120003
     a6c:	00130003 	.word	0x00130003
     a70:	003f0005 	.word	0x003f0005
     a74:	003e0005 	.word	0x003e0005
     a78:	00520005 	.word	0x00520005
     a7c:	00170003 	.word	0x00170003
     a80:	00180003 	.word	0x00180003
     a84:	00190003 	.word	0x00190003
     a88:	00040003 	.word	0x00040003
     a8c:	000c0002 	.word	0x000c0002
     a90:	00100003 	.word	0x00100003
     a94:	00530005 	.word	0x00530005
     a98:	00160003 	.word	0x00160003

00000a9c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a9c:	b530      	push	{r4, r5, lr}
     a9e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     aa0:	4b0b      	ldr	r3, [pc, #44]	; (ad0 <_sercom_get_sercom_inst_index+0x34>)
     aa2:	466a      	mov	r2, sp
     aa4:	cb32      	ldmia	r3!, {r1, r4, r5}
     aa6:	c232      	stmia	r2!, {r1, r4, r5}
     aa8:	cb32      	ldmia	r3!, {r1, r4, r5}
     aaa:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     aac:	9b00      	ldr	r3, [sp, #0]
     aae:	4283      	cmp	r3, r0
     ab0:	d00b      	beq.n	aca <_sercom_get_sercom_inst_index+0x2e>
     ab2:	2301      	movs	r3, #1
     ab4:	009a      	lsls	r2, r3, #2
     ab6:	4669      	mov	r1, sp
     ab8:	5852      	ldr	r2, [r2, r1]
     aba:	4282      	cmp	r2, r0
     abc:	d006      	beq.n	acc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     abe:	3301      	adds	r3, #1
     ac0:	2b06      	cmp	r3, #6
     ac2:	d1f7      	bne.n	ab4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     ac4:	2000      	movs	r0, #0
}
     ac6:	b007      	add	sp, #28
     ac8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     aca:	2300      	movs	r3, #0
			return i;
     acc:	b2d8      	uxtb	r0, r3
     ace:	e7fa      	b.n	ac6 <_sercom_get_sercom_inst_index+0x2a>
     ad0:	00002ec4 	.word	0x00002ec4

00000ad4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     ad4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     ad6:	2000      	movs	r0, #0
     ad8:	4b08      	ldr	r3, [pc, #32]	; (afc <delay_init+0x28>)
     ada:	4798      	blx	r3
     adc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     ade:	4c08      	ldr	r4, [pc, #32]	; (b00 <delay_init+0x2c>)
     ae0:	21fa      	movs	r1, #250	; 0xfa
     ae2:	0089      	lsls	r1, r1, #2
     ae4:	47a0      	blx	r4
     ae6:	4b07      	ldr	r3, [pc, #28]	; (b04 <delay_init+0x30>)
     ae8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     aea:	4907      	ldr	r1, [pc, #28]	; (b08 <delay_init+0x34>)
     aec:	0028      	movs	r0, r5
     aee:	47a0      	blx	r4
     af0:	4b06      	ldr	r3, [pc, #24]	; (b0c <delay_init+0x38>)
     af2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     af4:	2205      	movs	r2, #5
     af6:	4b06      	ldr	r3, [pc, #24]	; (b10 <delay_init+0x3c>)
     af8:	601a      	str	r2, [r3, #0]
}
     afa:	bd70      	pop	{r4, r5, r6, pc}
     afc:	0000106d 	.word	0x0000106d
     b00:	0000149d 	.word	0x0000149d
     b04:	20000000 	.word	0x20000000
     b08:	000f4240 	.word	0x000f4240
     b0c:	20000004 	.word	0x20000004
     b10:	e000e010 	.word	0xe000e010

00000b14 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     b14:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     b16:	4b08      	ldr	r3, [pc, #32]	; (b38 <delay_cycles_ms+0x24>)
     b18:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     b1a:	4a08      	ldr	r2, [pc, #32]	; (b3c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     b1c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b1e:	2180      	movs	r1, #128	; 0x80
     b20:	0249      	lsls	r1, r1, #9
	while (n--) {
     b22:	3801      	subs	r0, #1
     b24:	d307      	bcc.n	b36 <delay_cycles_ms+0x22>
	if (n > 0) {
     b26:	2c00      	cmp	r4, #0
     b28:	d0fb      	beq.n	b22 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     b2a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     b2c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b2e:	6813      	ldr	r3, [r2, #0]
     b30:	420b      	tst	r3, r1
     b32:	d0fc      	beq.n	b2e <delay_cycles_ms+0x1a>
     b34:	e7f5      	b.n	b22 <delay_cycles_ms+0xe>
	}
}
     b36:	bd30      	pop	{r4, r5, pc}
     b38:	20000000 	.word	0x20000000
     b3c:	e000e010 	.word	0xe000e010

00000b40 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     b40:	4b0c      	ldr	r3, [pc, #48]	; (b74 <cpu_irq_enter_critical+0x34>)
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	2b00      	cmp	r3, #0
     b46:	d106      	bne.n	b56 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     b48:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     b4c:	2b00      	cmp	r3, #0
     b4e:	d007      	beq.n	b60 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     b50:	2200      	movs	r2, #0
     b52:	4b09      	ldr	r3, [pc, #36]	; (b78 <cpu_irq_enter_critical+0x38>)
     b54:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     b56:	4a07      	ldr	r2, [pc, #28]	; (b74 <cpu_irq_enter_critical+0x34>)
     b58:	6813      	ldr	r3, [r2, #0]
     b5a:	3301      	adds	r3, #1
     b5c:	6013      	str	r3, [r2, #0]
}
     b5e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     b60:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     b62:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     b66:	2200      	movs	r2, #0
     b68:	4b04      	ldr	r3, [pc, #16]	; (b7c <cpu_irq_enter_critical+0x3c>)
     b6a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     b6c:	3201      	adds	r2, #1
     b6e:	4b02      	ldr	r3, [pc, #8]	; (b78 <cpu_irq_enter_critical+0x38>)
     b70:	701a      	strb	r2, [r3, #0]
     b72:	e7f0      	b.n	b56 <cpu_irq_enter_critical+0x16>
     b74:	20000044 	.word	0x20000044
     b78:	20000048 	.word	0x20000048
     b7c:	20000008 	.word	0x20000008

00000b80 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     b80:	4b08      	ldr	r3, [pc, #32]	; (ba4 <cpu_irq_leave_critical+0x24>)
     b82:	681a      	ldr	r2, [r3, #0]
     b84:	3a01      	subs	r2, #1
     b86:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     b88:	681b      	ldr	r3, [r3, #0]
     b8a:	2b00      	cmp	r3, #0
     b8c:	d109      	bne.n	ba2 <cpu_irq_leave_critical+0x22>
     b8e:	4b06      	ldr	r3, [pc, #24]	; (ba8 <cpu_irq_leave_critical+0x28>)
     b90:	781b      	ldrb	r3, [r3, #0]
     b92:	2b00      	cmp	r3, #0
     b94:	d005      	beq.n	ba2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     b96:	2201      	movs	r2, #1
     b98:	4b04      	ldr	r3, [pc, #16]	; (bac <cpu_irq_leave_critical+0x2c>)
     b9a:	701a      	strb	r2, [r3, #0]
     b9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ba0:	b662      	cpsie	i
	}
}
     ba2:	4770      	bx	lr
     ba4:	20000044 	.word	0x20000044
     ba8:	20000048 	.word	0x20000048
     bac:	20000008 	.word	0x20000008

00000bb0 <system_board_init>:




void system_board_init(void)
{
     bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bb2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     bb4:	ac01      	add	r4, sp, #4
     bb6:	2501      	movs	r5, #1
     bb8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     bba:	2700      	movs	r7, #0
     bbc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     bbe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     bc0:	0021      	movs	r1, r4
     bc2:	2013      	movs	r0, #19
     bc4:	4e06      	ldr	r6, [pc, #24]	; (be0 <system_board_init+0x30>)
     bc6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     bc8:	2280      	movs	r2, #128	; 0x80
     bca:	0312      	lsls	r2, r2, #12
     bcc:	4b05      	ldr	r3, [pc, #20]	; (be4 <system_board_init+0x34>)
     bce:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     bd0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     bd2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     bd4:	0021      	movs	r1, r4
     bd6:	201c      	movs	r0, #28
     bd8:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     bda:	b003      	add	sp, #12
     bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	00000be9 	.word	0x00000be9
     be4:	41004400 	.word	0x41004400

00000be8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     be8:	b500      	push	{lr}
     bea:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     bec:	ab01      	add	r3, sp, #4
     bee:	2280      	movs	r2, #128	; 0x80
     bf0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     bf2:	780a      	ldrb	r2, [r1, #0]
     bf4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     bf6:	784a      	ldrb	r2, [r1, #1]
     bf8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     bfa:	788a      	ldrb	r2, [r1, #2]
     bfc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     bfe:	0019      	movs	r1, r3
     c00:	4b01      	ldr	r3, [pc, #4]	; (c08 <port_pin_set_config+0x20>)
     c02:	4798      	blx	r3
}
     c04:	b003      	add	sp, #12
     c06:	bd00      	pop	{pc}
     c08:	0000127d 	.word	0x0000127d

00000c0c <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c0c:	b510      	push	{r4, lr}
     c0e:	4b02      	ldr	r3, [pc, #8]	; (c18 <SERCOM0_Handler+0xc>)
     c10:	681b      	ldr	r3, [r3, #0]
     c12:	2000      	movs	r0, #0
     c14:	4798      	blx	r3
     c16:	bd10      	pop	{r4, pc}
     c18:	2000004c 	.word	0x2000004c

00000c1c <SERCOM1_Handler>:
     c1c:	b510      	push	{r4, lr}
     c1e:	4b02      	ldr	r3, [pc, #8]	; (c28 <SERCOM1_Handler+0xc>)
     c20:	685b      	ldr	r3, [r3, #4]
     c22:	2001      	movs	r0, #1
     c24:	4798      	blx	r3
     c26:	bd10      	pop	{r4, pc}
     c28:	2000004c 	.word	0x2000004c

00000c2c <SERCOM2_Handler>:
     c2c:	b510      	push	{r4, lr}
     c2e:	4b02      	ldr	r3, [pc, #8]	; (c38 <SERCOM2_Handler+0xc>)
     c30:	689b      	ldr	r3, [r3, #8]
     c32:	2002      	movs	r0, #2
     c34:	4798      	blx	r3
     c36:	bd10      	pop	{r4, pc}
     c38:	2000004c 	.word	0x2000004c

00000c3c <SERCOM3_Handler>:
     c3c:	b510      	push	{r4, lr}
     c3e:	4b02      	ldr	r3, [pc, #8]	; (c48 <SERCOM3_Handler+0xc>)
     c40:	68db      	ldr	r3, [r3, #12]
     c42:	2003      	movs	r0, #3
     c44:	4798      	blx	r3
     c46:	bd10      	pop	{r4, pc}
     c48:	2000004c 	.word	0x2000004c

00000c4c <SERCOM4_Handler>:
     c4c:	b510      	push	{r4, lr}
     c4e:	4b02      	ldr	r3, [pc, #8]	; (c58 <SERCOM4_Handler+0xc>)
     c50:	691b      	ldr	r3, [r3, #16]
     c52:	2004      	movs	r0, #4
     c54:	4798      	blx	r3
     c56:	bd10      	pop	{r4, pc}
     c58:	2000004c 	.word	0x2000004c

00000c5c <SERCOM5_Handler>:
     c5c:	b510      	push	{r4, lr}
     c5e:	4b02      	ldr	r3, [pc, #8]	; (c68 <SERCOM5_Handler+0xc>)
     c60:	695b      	ldr	r3, [r3, #20]
     c62:	2005      	movs	r0, #5
     c64:	4798      	blx	r3
     c66:	bd10      	pop	{r4, pc}
     c68:	2000004c 	.word	0x2000004c

00000c6c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c6c:	b510      	push	{r4, lr}
	switch (clock_source) {
     c6e:	2808      	cmp	r0, #8
     c70:	d803      	bhi.n	c7a <system_clock_source_get_hz+0xe>
     c72:	0080      	lsls	r0, r0, #2
     c74:	4b1c      	ldr	r3, [pc, #112]	; (ce8 <system_clock_source_get_hz+0x7c>)
     c76:	581b      	ldr	r3, [r3, r0]
     c78:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     c7a:	2000      	movs	r0, #0
     c7c:	e032      	b.n	ce4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     c7e:	4b1b      	ldr	r3, [pc, #108]	; (cec <system_clock_source_get_hz+0x80>)
     c80:	6918      	ldr	r0, [r3, #16]
     c82:	e02f      	b.n	ce4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     c84:	4b1a      	ldr	r3, [pc, #104]	; (cf0 <system_clock_source_get_hz+0x84>)
     c86:	6a1b      	ldr	r3, [r3, #32]
     c88:	059b      	lsls	r3, r3, #22
     c8a:	0f9b      	lsrs	r3, r3, #30
     c8c:	4819      	ldr	r0, [pc, #100]	; (cf4 <system_clock_source_get_hz+0x88>)
     c8e:	40d8      	lsrs	r0, r3
     c90:	e028      	b.n	ce4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     c92:	4b16      	ldr	r3, [pc, #88]	; (cec <system_clock_source_get_hz+0x80>)
     c94:	6958      	ldr	r0, [r3, #20]
     c96:	e025      	b.n	ce4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c98:	4b14      	ldr	r3, [pc, #80]	; (cec <system_clock_source_get_hz+0x80>)
     c9a:	681b      	ldr	r3, [r3, #0]
			return 0;
     c9c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c9e:	079b      	lsls	r3, r3, #30
     ca0:	d520      	bpl.n	ce4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ca2:	4913      	ldr	r1, [pc, #76]	; (cf0 <system_clock_source_get_hz+0x84>)
     ca4:	2210      	movs	r2, #16
     ca6:	68cb      	ldr	r3, [r1, #12]
     ca8:	421a      	tst	r2, r3
     caa:	d0fc      	beq.n	ca6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     cac:	4b0f      	ldr	r3, [pc, #60]	; (cec <system_clock_source_get_hz+0x80>)
     cae:	681a      	ldr	r2, [r3, #0]
     cb0:	2324      	movs	r3, #36	; 0x24
     cb2:	4013      	ands	r3, r2
     cb4:	2b04      	cmp	r3, #4
     cb6:	d001      	beq.n	cbc <system_clock_source_get_hz+0x50>
			return 48000000UL;
     cb8:	480f      	ldr	r0, [pc, #60]	; (cf8 <system_clock_source_get_hz+0x8c>)
     cba:	e013      	b.n	ce4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cbc:	2000      	movs	r0, #0
     cbe:	4b0f      	ldr	r3, [pc, #60]	; (cfc <system_clock_source_get_hz+0x90>)
     cc0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     cc2:	4b0a      	ldr	r3, [pc, #40]	; (cec <system_clock_source_get_hz+0x80>)
     cc4:	689b      	ldr	r3, [r3, #8]
     cc6:	041b      	lsls	r3, r3, #16
     cc8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cca:	4358      	muls	r0, r3
     ccc:	e00a      	b.n	ce4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cce:	2350      	movs	r3, #80	; 0x50
     cd0:	4a07      	ldr	r2, [pc, #28]	; (cf0 <system_clock_source_get_hz+0x84>)
     cd2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     cd4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cd6:	075b      	lsls	r3, r3, #29
     cd8:	d504      	bpl.n	ce4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     cda:	4b04      	ldr	r3, [pc, #16]	; (cec <system_clock_source_get_hz+0x80>)
     cdc:	68d8      	ldr	r0, [r3, #12]
     cde:	e001      	b.n	ce4 <system_clock_source_get_hz+0x78>
		return 32768UL;
     ce0:	2080      	movs	r0, #128	; 0x80
     ce2:	0200      	lsls	r0, r0, #8
	}
}
     ce4:	bd10      	pop	{r4, pc}
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	00002edc 	.word	0x00002edc
     cec:	20000064 	.word	0x20000064
     cf0:	40000800 	.word	0x40000800
     cf4:	007a1200 	.word	0x007a1200
     cf8:	02dc6c00 	.word	0x02dc6c00
     cfc:	000011a1 	.word	0x000011a1

00000d00 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d00:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d02:	490c      	ldr	r1, [pc, #48]	; (d34 <system_clock_source_osc8m_set_config+0x34>)
     d04:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d06:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d08:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d0a:	7840      	ldrb	r0, [r0, #1]
     d0c:	2201      	movs	r2, #1
     d0e:	4010      	ands	r0, r2
     d10:	0180      	lsls	r0, r0, #6
     d12:	2640      	movs	r6, #64	; 0x40
     d14:	43b3      	bics	r3, r6
     d16:	4303      	orrs	r3, r0
     d18:	402a      	ands	r2, r5
     d1a:	01d2      	lsls	r2, r2, #7
     d1c:	2080      	movs	r0, #128	; 0x80
     d1e:	4383      	bics	r3, r0
     d20:	4313      	orrs	r3, r2
     d22:	2203      	movs	r2, #3
     d24:	4022      	ands	r2, r4
     d26:	0212      	lsls	r2, r2, #8
     d28:	4803      	ldr	r0, [pc, #12]	; (d38 <system_clock_source_osc8m_set_config+0x38>)
     d2a:	4003      	ands	r3, r0
     d2c:	4313      	orrs	r3, r2
     d2e:	620b      	str	r3, [r1, #32]
}
     d30:	bd70      	pop	{r4, r5, r6, pc}
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	40000800 	.word	0x40000800
     d38:	fffffcff 	.word	0xfffffcff

00000d3c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d3e:	46ce      	mov	lr, r9
     d40:	4647      	mov	r7, r8
     d42:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     d44:	4b19      	ldr	r3, [pc, #100]	; (dac <system_clock_source_osc32k_set_config+0x70>)
     d46:	4699      	mov	r9, r3
     d48:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     d4a:	7841      	ldrb	r1, [r0, #1]
     d4c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     d4e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d50:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     d52:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     d54:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
     d56:	7880      	ldrb	r0, [r0, #2]
     d58:	2101      	movs	r1, #1
     d5a:	4008      	ands	r0, r1
     d5c:	0080      	lsls	r0, r0, #2
     d5e:	2204      	movs	r2, #4
     d60:	4393      	bics	r3, r2
     d62:	4303      	orrs	r3, r0
     d64:	4660      	mov	r0, ip
     d66:	4008      	ands	r0, r1
     d68:	00c0      	lsls	r0, r0, #3
     d6a:	3204      	adds	r2, #4
     d6c:	4393      	bics	r3, r2
     d6e:	4303      	orrs	r3, r0
     d70:	0038      	movs	r0, r7
     d72:	4008      	ands	r0, r1
     d74:	0180      	lsls	r0, r0, #6
     d76:	2740      	movs	r7, #64	; 0x40
     d78:	43bb      	bics	r3, r7
     d7a:	4303      	orrs	r3, r0
     d7c:	0030      	movs	r0, r6
     d7e:	4008      	ands	r0, r1
     d80:	01c0      	lsls	r0, r0, #7
     d82:	2680      	movs	r6, #128	; 0x80
     d84:	43b3      	bics	r3, r6
     d86:	4303      	orrs	r3, r0
     d88:	2007      	movs	r0, #7
     d8a:	4005      	ands	r5, r0
     d8c:	022d      	lsls	r5, r5, #8
     d8e:	4808      	ldr	r0, [pc, #32]	; (db0 <system_clock_source_osc32k_set_config+0x74>)
     d90:	4003      	ands	r3, r0
     d92:	432b      	orrs	r3, r5
     d94:	4021      	ands	r1, r4
     d96:	0309      	lsls	r1, r1, #12
     d98:	4806      	ldr	r0, [pc, #24]	; (db4 <system_clock_source_osc32k_set_config+0x78>)
     d9a:	4003      	ands	r3, r0
     d9c:	430b      	orrs	r3, r1
     d9e:	464a      	mov	r2, r9
     da0:	6193      	str	r3, [r2, #24]
}
     da2:	bc0c      	pop	{r2, r3}
     da4:	4690      	mov	r8, r2
     da6:	4699      	mov	r9, r3
     da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	40000800 	.word	0x40000800
     db0:	fffff8ff 	.word	0xfffff8ff
     db4:	ffffefff 	.word	0xffffefff

00000db8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     db8:	2808      	cmp	r0, #8
     dba:	d803      	bhi.n	dc4 <system_clock_source_enable+0xc>
     dbc:	0080      	lsls	r0, r0, #2
     dbe:	4b25      	ldr	r3, [pc, #148]	; (e54 <system_clock_source_enable+0x9c>)
     dc0:	581b      	ldr	r3, [r3, r0]
     dc2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     dc4:	2017      	movs	r0, #23
     dc6:	e044      	b.n	e52 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     dc8:	4a23      	ldr	r2, [pc, #140]	; (e58 <system_clock_source_enable+0xa0>)
     dca:	6a13      	ldr	r3, [r2, #32]
     dcc:	2102      	movs	r1, #2
     dce:	430b      	orrs	r3, r1
     dd0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     dd2:	2000      	movs	r0, #0
     dd4:	e03d      	b.n	e52 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     dd6:	4a20      	ldr	r2, [pc, #128]	; (e58 <system_clock_source_enable+0xa0>)
     dd8:	6993      	ldr	r3, [r2, #24]
     dda:	2102      	movs	r1, #2
     ddc:	430b      	orrs	r3, r1
     dde:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     de0:	2000      	movs	r0, #0
		break;
     de2:	e036      	b.n	e52 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     de4:	4a1c      	ldr	r2, [pc, #112]	; (e58 <system_clock_source_enable+0xa0>)
     de6:	8a13      	ldrh	r3, [r2, #16]
     de8:	2102      	movs	r1, #2
     dea:	430b      	orrs	r3, r1
     dec:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     dee:	2000      	movs	r0, #0
		break;
     df0:	e02f      	b.n	e52 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     df2:	4a19      	ldr	r2, [pc, #100]	; (e58 <system_clock_source_enable+0xa0>)
     df4:	8a93      	ldrh	r3, [r2, #20]
     df6:	2102      	movs	r1, #2
     df8:	430b      	orrs	r3, r1
     dfa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     dfc:	2000      	movs	r0, #0
		break;
     dfe:	e028      	b.n	e52 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     e00:	4916      	ldr	r1, [pc, #88]	; (e5c <system_clock_source_enable+0xa4>)
     e02:	680b      	ldr	r3, [r1, #0]
     e04:	2202      	movs	r2, #2
     e06:	4313      	orrs	r3, r2
     e08:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     e0a:	4b13      	ldr	r3, [pc, #76]	; (e58 <system_clock_source_enable+0xa0>)
     e0c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e0e:	0019      	movs	r1, r3
     e10:	320e      	adds	r2, #14
     e12:	68cb      	ldr	r3, [r1, #12]
     e14:	421a      	tst	r2, r3
     e16:	d0fc      	beq.n	e12 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     e18:	4a10      	ldr	r2, [pc, #64]	; (e5c <system_clock_source_enable+0xa4>)
     e1a:	6891      	ldr	r1, [r2, #8]
     e1c:	4b0e      	ldr	r3, [pc, #56]	; (e58 <system_clock_source_enable+0xa0>)
     e1e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     e20:	6852      	ldr	r2, [r2, #4]
     e22:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     e24:	2200      	movs	r2, #0
     e26:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e28:	0019      	movs	r1, r3
     e2a:	3210      	adds	r2, #16
     e2c:	68cb      	ldr	r3, [r1, #12]
     e2e:	421a      	tst	r2, r3
     e30:	d0fc      	beq.n	e2c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     e32:	4b0a      	ldr	r3, [pc, #40]	; (e5c <system_clock_source_enable+0xa4>)
     e34:	681b      	ldr	r3, [r3, #0]
     e36:	b29b      	uxth	r3, r3
     e38:	4a07      	ldr	r2, [pc, #28]	; (e58 <system_clock_source_enable+0xa0>)
     e3a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     e3c:	2000      	movs	r0, #0
     e3e:	e008      	b.n	e52 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     e40:	4905      	ldr	r1, [pc, #20]	; (e58 <system_clock_source_enable+0xa0>)
     e42:	2244      	movs	r2, #68	; 0x44
     e44:	5c8b      	ldrb	r3, [r1, r2]
     e46:	2002      	movs	r0, #2
     e48:	4303      	orrs	r3, r0
     e4a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     e4c:	2000      	movs	r0, #0
		break;
     e4e:	e000      	b.n	e52 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     e50:	2000      	movs	r0, #0
}
     e52:	4770      	bx	lr
     e54:	00002f00 	.word	0x00002f00
     e58:	40000800 	.word	0x40000800
     e5c:	20000064 	.word	0x20000064

00000e60 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e60:	b5f0      	push	{r4, r5, r6, r7, lr}
     e62:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e64:	22c2      	movs	r2, #194	; 0xc2
     e66:	00d2      	lsls	r2, r2, #3
     e68:	4b2c      	ldr	r3, [pc, #176]	; (f1c <system_clock_init+0xbc>)
     e6a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e6c:	4a2c      	ldr	r2, [pc, #176]	; (f20 <system_clock_init+0xc0>)
     e6e:	6853      	ldr	r3, [r2, #4]
     e70:	211e      	movs	r1, #30
     e72:	438b      	bics	r3, r1
     e74:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     e76:	2301      	movs	r3, #1
     e78:	466a      	mov	r2, sp
     e7a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e7c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e7e:	4d29      	ldr	r5, [pc, #164]	; (f24 <system_clock_init+0xc4>)
     e80:	b2e0      	uxtb	r0, r4
     e82:	4669      	mov	r1, sp
     e84:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e86:	3401      	adds	r4, #1
     e88:	2c25      	cmp	r4, #37	; 0x25
     e8a:	d1f9      	bne.n	e80 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
     e8c:	4b26      	ldr	r3, [pc, #152]	; (f28 <system_clock_init+0xc8>)
     e8e:	681b      	ldr	r3, [r3, #0]
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
     e90:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
     e92:	4922      	ldr	r1, [pc, #136]	; (f1c <system_clock_init+0xbc>)
     e94:	698a      	ldr	r2, [r1, #24]
     e96:	0e5b      	lsrs	r3, r3, #25
     e98:	041b      	lsls	r3, r3, #16
     e9a:	4824      	ldr	r0, [pc, #144]	; (f2c <system_clock_init+0xcc>)
     e9c:	4002      	ands	r2, r0
     e9e:	4313      	orrs	r3, r2
     ea0:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
     ea2:	a804      	add	r0, sp, #16
     ea4:	2501      	movs	r5, #1
     ea6:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
     ea8:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
     eaa:	2400      	movs	r4, #0
     eac:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
     eae:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     eb0:	2307      	movs	r3, #7
     eb2:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
     eb4:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
     eb6:	4b1e      	ldr	r3, [pc, #120]	; (f30 <system_clock_init+0xd0>)
     eb8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     eba:	2004      	movs	r0, #4
     ebc:	4e1d      	ldr	r6, [pc, #116]	; (f34 <system_clock_init+0xd4>)
     ebe:	47b0      	blx	r6
	config->run_in_standby  = false;
     ec0:	a803      	add	r0, sp, #12
     ec2:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     ec4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     ec6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ec8:	4b1b      	ldr	r3, [pc, #108]	; (f38 <system_clock_init+0xd8>)
     eca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     ecc:	2006      	movs	r0, #6
     ece:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     ed0:	4b1a      	ldr	r3, [pc, #104]	; (f3c <system_clock_init+0xdc>)
     ed2:	4798      	blx	r3
	config->high_when_disabled = false;
     ed4:	466b      	mov	r3, sp
     ed6:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
     ed8:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     eda:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     edc:	2304      	movs	r3, #4
     ede:	466a      	mov	r2, sp
     ee0:	7013      	strb	r3, [r2, #0]
     ee2:	331c      	adds	r3, #28
     ee4:	9301      	str	r3, [sp, #4]
     ee6:	4669      	mov	r1, sp
     ee8:	2002      	movs	r0, #2
     eea:	4f15      	ldr	r7, [pc, #84]	; (f40 <system_clock_init+0xe0>)
     eec:	47b8      	blx	r7
     eee:	2002      	movs	r0, #2
     ef0:	4e14      	ldr	r6, [pc, #80]	; (f44 <system_clock_init+0xe4>)
     ef2:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
     ef4:	4b14      	ldr	r3, [pc, #80]	; (f48 <system_clock_init+0xe8>)
     ef6:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     ef8:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     efa:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     efc:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     efe:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     f00:	466b      	mov	r3, sp
     f02:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     f04:	2306      	movs	r3, #6
     f06:	466a      	mov	r2, sp
     f08:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     f0a:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     f0c:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f0e:	4669      	mov	r1, sp
     f10:	2000      	movs	r0, #0
     f12:	47b8      	blx	r7
     f14:	2000      	movs	r0, #0
     f16:	47b0      	blx	r6
#endif
}
     f18:	b007      	add	sp, #28
     f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f1c:	40000800 	.word	0x40000800
     f20:	41004000 	.word	0x41004000
     f24:	00001185 	.word	0x00001185
     f28:	00806024 	.word	0x00806024
     f2c:	ff80ffff 	.word	0xff80ffff
     f30:	00000d3d 	.word	0x00000d3d
     f34:	00000db9 	.word	0x00000db9
     f38:	00000d01 	.word	0x00000d01
     f3c:	00000f4d 	.word	0x00000f4d
     f40:	00000f71 	.word	0x00000f71
     f44:	00001029 	.word	0x00001029
     f48:	40000400 	.word	0x40000400

00000f4c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     f4c:	4a06      	ldr	r2, [pc, #24]	; (f68 <system_gclk_init+0x1c>)
     f4e:	6993      	ldr	r3, [r2, #24]
     f50:	2108      	movs	r1, #8
     f52:	430b      	orrs	r3, r1
     f54:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     f56:	2201      	movs	r2, #1
     f58:	4b04      	ldr	r3, [pc, #16]	; (f6c <system_gclk_init+0x20>)
     f5a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     f5c:	0019      	movs	r1, r3
     f5e:	780b      	ldrb	r3, [r1, #0]
     f60:	4213      	tst	r3, r2
     f62:	d1fc      	bne.n	f5e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     f64:	4770      	bx	lr
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	40000400 	.word	0x40000400
     f6c:	40000c00 	.word	0x40000c00

00000f70 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     f70:	b570      	push	{r4, r5, r6, lr}
     f72:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     f74:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f76:	780d      	ldrb	r5, [r1, #0]
     f78:	022d      	lsls	r5, r5, #8
     f7a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     f7c:	784b      	ldrb	r3, [r1, #1]
     f7e:	2b00      	cmp	r3, #0
     f80:	d002      	beq.n	f88 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     f82:	2380      	movs	r3, #128	; 0x80
     f84:	02db      	lsls	r3, r3, #11
     f86:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     f88:	7a4b      	ldrb	r3, [r1, #9]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d002      	beq.n	f94 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     f8e:	2380      	movs	r3, #128	; 0x80
     f90:	031b      	lsls	r3, r3, #12
     f92:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     f94:	6848      	ldr	r0, [r1, #4]
     f96:	2801      	cmp	r0, #1
     f98:	d910      	bls.n	fbc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     f9a:	1e43      	subs	r3, r0, #1
     f9c:	4218      	tst	r0, r3
     f9e:	d134      	bne.n	100a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     fa0:	2802      	cmp	r0, #2
     fa2:	d930      	bls.n	1006 <system_gclk_gen_set_config+0x96>
     fa4:	2302      	movs	r3, #2
     fa6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     fa8:	3201      	adds	r2, #1
						mask <<= 1) {
     faa:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     fac:	4298      	cmp	r0, r3
     fae:	d8fb      	bhi.n	fa8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     fb0:	0212      	lsls	r2, r2, #8
     fb2:	4332      	orrs	r2, r6
     fb4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     fb6:	2380      	movs	r3, #128	; 0x80
     fb8:	035b      	lsls	r3, r3, #13
     fba:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     fbc:	7a0b      	ldrb	r3, [r1, #8]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d002      	beq.n	fc8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     fc2:	2380      	movs	r3, #128	; 0x80
     fc4:	039b      	lsls	r3, r3, #14
     fc6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fc8:	4a13      	ldr	r2, [pc, #76]	; (1018 <system_gclk_gen_set_config+0xa8>)
     fca:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     fcc:	b25b      	sxtb	r3, r3
     fce:	2b00      	cmp	r3, #0
     fd0:	dbfb      	blt.n	fca <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     fd2:	4b12      	ldr	r3, [pc, #72]	; (101c <system_gclk_gen_set_config+0xac>)
     fd4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     fd6:	4b12      	ldr	r3, [pc, #72]	; (1020 <system_gclk_gen_set_config+0xb0>)
     fd8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fda:	4a0f      	ldr	r2, [pc, #60]	; (1018 <system_gclk_gen_set_config+0xa8>)
     fdc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     fde:	b25b      	sxtb	r3, r3
     fe0:	2b00      	cmp	r3, #0
     fe2:	dbfb      	blt.n	fdc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     fe4:	4b0c      	ldr	r3, [pc, #48]	; (1018 <system_gclk_gen_set_config+0xa8>)
     fe6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fe8:	001a      	movs	r2, r3
     fea:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     fec:	b25b      	sxtb	r3, r3
     fee:	2b00      	cmp	r3, #0
     ff0:	dbfb      	blt.n	fea <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     ff2:	4a09      	ldr	r2, [pc, #36]	; (1018 <system_gclk_gen_set_config+0xa8>)
     ff4:	6853      	ldr	r3, [r2, #4]
     ff6:	2180      	movs	r1, #128	; 0x80
     ff8:	0249      	lsls	r1, r1, #9
     ffa:	400b      	ands	r3, r1
     ffc:	431d      	orrs	r5, r3
     ffe:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1000:	4b08      	ldr	r3, [pc, #32]	; (1024 <system_gclk_gen_set_config+0xb4>)
    1002:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1004:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1006:	2200      	movs	r2, #0
    1008:	e7d2      	b.n	fb0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    100a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    100c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    100e:	2380      	movs	r3, #128	; 0x80
    1010:	029b      	lsls	r3, r3, #10
    1012:	431d      	orrs	r5, r3
    1014:	e7d2      	b.n	fbc <system_gclk_gen_set_config+0x4c>
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	40000c00 	.word	0x40000c00
    101c:	00000b41 	.word	0x00000b41
    1020:	40000c08 	.word	0x40000c08
    1024:	00000b81 	.word	0x00000b81

00001028 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1028:	b510      	push	{r4, lr}
    102a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    102c:	4a0b      	ldr	r2, [pc, #44]	; (105c <system_gclk_gen_enable+0x34>)
    102e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1030:	b25b      	sxtb	r3, r3
    1032:	2b00      	cmp	r3, #0
    1034:	dbfb      	blt.n	102e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1036:	4b0a      	ldr	r3, [pc, #40]	; (1060 <system_gclk_gen_enable+0x38>)
    1038:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    103a:	4b0a      	ldr	r3, [pc, #40]	; (1064 <system_gclk_gen_enable+0x3c>)
    103c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    103e:	4a07      	ldr	r2, [pc, #28]	; (105c <system_gclk_gen_enable+0x34>)
    1040:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1042:	b25b      	sxtb	r3, r3
    1044:	2b00      	cmp	r3, #0
    1046:	dbfb      	blt.n	1040 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1048:	4a04      	ldr	r2, [pc, #16]	; (105c <system_gclk_gen_enable+0x34>)
    104a:	6851      	ldr	r1, [r2, #4]
    104c:	2380      	movs	r3, #128	; 0x80
    104e:	025b      	lsls	r3, r3, #9
    1050:	430b      	orrs	r3, r1
    1052:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1054:	4b04      	ldr	r3, [pc, #16]	; (1068 <system_gclk_gen_enable+0x40>)
    1056:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1058:	bd10      	pop	{r4, pc}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	40000c00 	.word	0x40000c00
    1060:	00000b41 	.word	0x00000b41
    1064:	40000c04 	.word	0x40000c04
    1068:	00000b81 	.word	0x00000b81

0000106c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    106c:	b570      	push	{r4, r5, r6, lr}
    106e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1070:	4a1a      	ldr	r2, [pc, #104]	; (10dc <system_gclk_gen_get_hz+0x70>)
    1072:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1074:	b25b      	sxtb	r3, r3
    1076:	2b00      	cmp	r3, #0
    1078:	dbfb      	blt.n	1072 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    107a:	4b19      	ldr	r3, [pc, #100]	; (10e0 <system_gclk_gen_get_hz+0x74>)
    107c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    107e:	4b19      	ldr	r3, [pc, #100]	; (10e4 <system_gclk_gen_get_hz+0x78>)
    1080:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1082:	4a16      	ldr	r2, [pc, #88]	; (10dc <system_gclk_gen_get_hz+0x70>)
    1084:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1086:	b25b      	sxtb	r3, r3
    1088:	2b00      	cmp	r3, #0
    108a:	dbfb      	blt.n	1084 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    108c:	4e13      	ldr	r6, [pc, #76]	; (10dc <system_gclk_gen_get_hz+0x70>)
    108e:	6870      	ldr	r0, [r6, #4]
    1090:	04c0      	lsls	r0, r0, #19
    1092:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1094:	4b14      	ldr	r3, [pc, #80]	; (10e8 <system_gclk_gen_get_hz+0x7c>)
    1096:	4798      	blx	r3
    1098:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    109a:	4b12      	ldr	r3, [pc, #72]	; (10e4 <system_gclk_gen_get_hz+0x78>)
    109c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    109e:	6876      	ldr	r6, [r6, #4]
    10a0:	02f6      	lsls	r6, r6, #11
    10a2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    10a4:	4b11      	ldr	r3, [pc, #68]	; (10ec <system_gclk_gen_get_hz+0x80>)
    10a6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10a8:	4a0c      	ldr	r2, [pc, #48]	; (10dc <system_gclk_gen_get_hz+0x70>)
    10aa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10ac:	b25b      	sxtb	r3, r3
    10ae:	2b00      	cmp	r3, #0
    10b0:	dbfb      	blt.n	10aa <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    10b2:	4b0a      	ldr	r3, [pc, #40]	; (10dc <system_gclk_gen_get_hz+0x70>)
    10b4:	689c      	ldr	r4, [r3, #8]
    10b6:	0224      	lsls	r4, r4, #8
    10b8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    10ba:	4b0d      	ldr	r3, [pc, #52]	; (10f0 <system_gclk_gen_get_hz+0x84>)
    10bc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    10be:	2e00      	cmp	r6, #0
    10c0:	d107      	bne.n	10d2 <system_gclk_gen_get_hz+0x66>
    10c2:	2c01      	cmp	r4, #1
    10c4:	d907      	bls.n	10d6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    10c6:	0021      	movs	r1, r4
    10c8:	0028      	movs	r0, r5
    10ca:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <system_gclk_gen_get_hz+0x88>)
    10cc:	4798      	blx	r3
    10ce:	0005      	movs	r5, r0
    10d0:	e001      	b.n	10d6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    10d2:	3401      	adds	r4, #1
    10d4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    10d6:	0028      	movs	r0, r5
    10d8:	bd70      	pop	{r4, r5, r6, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	40000c00 	.word	0x40000c00
    10e0:	00000b41 	.word	0x00000b41
    10e4:	40000c04 	.word	0x40000c04
    10e8:	00000c6d 	.word	0x00000c6d
    10ec:	40000c08 	.word	0x40000c08
    10f0:	00000b81 	.word	0x00000b81
    10f4:	0000149d 	.word	0x0000149d

000010f8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    10f8:	b510      	push	{r4, lr}
    10fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10fc:	4b06      	ldr	r3, [pc, #24]	; (1118 <system_gclk_chan_enable+0x20>)
    10fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1100:	4b06      	ldr	r3, [pc, #24]	; (111c <system_gclk_chan_enable+0x24>)
    1102:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1104:	4a06      	ldr	r2, [pc, #24]	; (1120 <system_gclk_chan_enable+0x28>)
    1106:	8853      	ldrh	r3, [r2, #2]
    1108:	2180      	movs	r1, #128	; 0x80
    110a:	01c9      	lsls	r1, r1, #7
    110c:	430b      	orrs	r3, r1
    110e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1110:	4b04      	ldr	r3, [pc, #16]	; (1124 <system_gclk_chan_enable+0x2c>)
    1112:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1114:	bd10      	pop	{r4, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	00000b41 	.word	0x00000b41
    111c:	40000c02 	.word	0x40000c02
    1120:	40000c00 	.word	0x40000c00
    1124:	00000b81 	.word	0x00000b81

00001128 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1128:	b510      	push	{r4, lr}
    112a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    112c:	4b0f      	ldr	r3, [pc, #60]	; (116c <system_gclk_chan_disable+0x44>)
    112e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1130:	4b0f      	ldr	r3, [pc, #60]	; (1170 <system_gclk_chan_disable+0x48>)
    1132:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1134:	4a0f      	ldr	r2, [pc, #60]	; (1174 <system_gclk_chan_disable+0x4c>)
    1136:	8853      	ldrh	r3, [r2, #2]
    1138:	051b      	lsls	r3, r3, #20
    113a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    113c:	8853      	ldrh	r3, [r2, #2]
    113e:	490e      	ldr	r1, [pc, #56]	; (1178 <system_gclk_chan_disable+0x50>)
    1140:	400b      	ands	r3, r1
    1142:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1144:	8853      	ldrh	r3, [r2, #2]
    1146:	490d      	ldr	r1, [pc, #52]	; (117c <system_gclk_chan_disable+0x54>)
    1148:	400b      	ands	r3, r1
    114a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    114c:	0011      	movs	r1, r2
    114e:	2280      	movs	r2, #128	; 0x80
    1150:	01d2      	lsls	r2, r2, #7
    1152:	884b      	ldrh	r3, [r1, #2]
    1154:	4213      	tst	r3, r2
    1156:	d1fc      	bne.n	1152 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1158:	4906      	ldr	r1, [pc, #24]	; (1174 <system_gclk_chan_disable+0x4c>)
    115a:	884a      	ldrh	r2, [r1, #2]
    115c:	0203      	lsls	r3, r0, #8
    115e:	4806      	ldr	r0, [pc, #24]	; (1178 <system_gclk_chan_disable+0x50>)
    1160:	4002      	ands	r2, r0
    1162:	4313      	orrs	r3, r2
    1164:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1166:	4b06      	ldr	r3, [pc, #24]	; (1180 <system_gclk_chan_disable+0x58>)
    1168:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    116a:	bd10      	pop	{r4, pc}
    116c:	00000b41 	.word	0x00000b41
    1170:	40000c02 	.word	0x40000c02
    1174:	40000c00 	.word	0x40000c00
    1178:	fffff0ff 	.word	0xfffff0ff
    117c:	ffffbfff 	.word	0xffffbfff
    1180:	00000b81 	.word	0x00000b81

00001184 <system_gclk_chan_set_config>:
{
    1184:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1186:	780c      	ldrb	r4, [r1, #0]
    1188:	0224      	lsls	r4, r4, #8
    118a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    118c:	4b02      	ldr	r3, [pc, #8]	; (1198 <system_gclk_chan_set_config+0x14>)
    118e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1190:	b2a4      	uxth	r4, r4
    1192:	4b02      	ldr	r3, [pc, #8]	; (119c <system_gclk_chan_set_config+0x18>)
    1194:	805c      	strh	r4, [r3, #2]
}
    1196:	bd10      	pop	{r4, pc}
    1198:	00001129 	.word	0x00001129
    119c:	40000c00 	.word	0x40000c00

000011a0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    11a0:	b510      	push	{r4, lr}
    11a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11a4:	4b06      	ldr	r3, [pc, #24]	; (11c0 <system_gclk_chan_get_hz+0x20>)
    11a6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11a8:	4b06      	ldr	r3, [pc, #24]	; (11c4 <system_gclk_chan_get_hz+0x24>)
    11aa:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    11ac:	4b06      	ldr	r3, [pc, #24]	; (11c8 <system_gclk_chan_get_hz+0x28>)
    11ae:	885c      	ldrh	r4, [r3, #2]
    11b0:	0524      	lsls	r4, r4, #20
    11b2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    11b4:	4b05      	ldr	r3, [pc, #20]	; (11cc <system_gclk_chan_get_hz+0x2c>)
    11b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    11b8:	0020      	movs	r0, r4
    11ba:	4b05      	ldr	r3, [pc, #20]	; (11d0 <system_gclk_chan_get_hz+0x30>)
    11bc:	4798      	blx	r3
}
    11be:	bd10      	pop	{r4, pc}
    11c0:	00000b41 	.word	0x00000b41
    11c4:	40000c02 	.word	0x40000c02
    11c8:	40000c00 	.word	0x40000c00
    11cc:	00000b81 	.word	0x00000b81
    11d0:	0000106d 	.word	0x0000106d

000011d4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    11d4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    11d6:	78d3      	ldrb	r3, [r2, #3]
    11d8:	2b00      	cmp	r3, #0
    11da:	d135      	bne.n	1248 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    11dc:	7813      	ldrb	r3, [r2, #0]
    11de:	2b80      	cmp	r3, #128	; 0x80
    11e0:	d029      	beq.n	1236 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    11e2:	061b      	lsls	r3, r3, #24
    11e4:	2480      	movs	r4, #128	; 0x80
    11e6:	0264      	lsls	r4, r4, #9
    11e8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    11ea:	7854      	ldrb	r4, [r2, #1]
    11ec:	2502      	movs	r5, #2
    11ee:	43ac      	bics	r4, r5
    11f0:	d106      	bne.n	1200 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    11f2:	7894      	ldrb	r4, [r2, #2]
    11f4:	2c00      	cmp	r4, #0
    11f6:	d120      	bne.n	123a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    11f8:	2480      	movs	r4, #128	; 0x80
    11fa:	02a4      	lsls	r4, r4, #10
    11fc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    11fe:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1200:	7854      	ldrb	r4, [r2, #1]
    1202:	3c01      	subs	r4, #1
    1204:	2c01      	cmp	r4, #1
    1206:	d91c      	bls.n	1242 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1208:	040d      	lsls	r5, r1, #16
    120a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    120c:	24a0      	movs	r4, #160	; 0xa0
    120e:	05e4      	lsls	r4, r4, #23
    1210:	432c      	orrs	r4, r5
    1212:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1214:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1216:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1218:	24d0      	movs	r4, #208	; 0xd0
    121a:	0624      	lsls	r4, r4, #24
    121c:	432c      	orrs	r4, r5
    121e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1220:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1222:	78d4      	ldrb	r4, [r2, #3]
    1224:	2c00      	cmp	r4, #0
    1226:	d122      	bne.n	126e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1228:	035b      	lsls	r3, r3, #13
    122a:	d51c      	bpl.n	1266 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    122c:	7893      	ldrb	r3, [r2, #2]
    122e:	2b01      	cmp	r3, #1
    1230:	d01e      	beq.n	1270 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1232:	6141      	str	r1, [r0, #20]
    1234:	e017      	b.n	1266 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1236:	2300      	movs	r3, #0
    1238:	e7d7      	b.n	11ea <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    123a:	24c0      	movs	r4, #192	; 0xc0
    123c:	02e4      	lsls	r4, r4, #11
    123e:	4323      	orrs	r3, r4
    1240:	e7dd      	b.n	11fe <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1242:	4c0d      	ldr	r4, [pc, #52]	; (1278 <_system_pinmux_config+0xa4>)
    1244:	4023      	ands	r3, r4
    1246:	e7df      	b.n	1208 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1248:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    124a:	040c      	lsls	r4, r1, #16
    124c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    124e:	23a0      	movs	r3, #160	; 0xa0
    1250:	05db      	lsls	r3, r3, #23
    1252:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1254:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1256:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1258:	23d0      	movs	r3, #208	; 0xd0
    125a:	061b      	lsls	r3, r3, #24
    125c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    125e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1260:	78d3      	ldrb	r3, [r2, #3]
    1262:	2b00      	cmp	r3, #0
    1264:	d103      	bne.n	126e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1266:	7853      	ldrb	r3, [r2, #1]
    1268:	3b01      	subs	r3, #1
    126a:	2b01      	cmp	r3, #1
    126c:	d902      	bls.n	1274 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    126e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1270:	6181      	str	r1, [r0, #24]
    1272:	e7f8      	b.n	1266 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1274:	6081      	str	r1, [r0, #8]
}
    1276:	e7fa      	b.n	126e <_system_pinmux_config+0x9a>
    1278:	fffbffff 	.word	0xfffbffff

0000127c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    127c:	b510      	push	{r4, lr}
    127e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1280:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1282:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1284:	2900      	cmp	r1, #0
    1286:	d104      	bne.n	1292 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1288:	0943      	lsrs	r3, r0, #5
    128a:	01db      	lsls	r3, r3, #7
    128c:	4905      	ldr	r1, [pc, #20]	; (12a4 <system_pinmux_pin_set_config+0x28>)
    128e:	468c      	mov	ip, r1
    1290:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1292:	241f      	movs	r4, #31
    1294:	4020      	ands	r0, r4
    1296:	2101      	movs	r1, #1
    1298:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    129a:	0018      	movs	r0, r3
    129c:	4b02      	ldr	r3, [pc, #8]	; (12a8 <system_pinmux_pin_set_config+0x2c>)
    129e:	4798      	blx	r3
}
    12a0:	bd10      	pop	{r4, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	41004400 	.word	0x41004400
    12a8:	000011d5 	.word	0x000011d5

000012ac <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    12ac:	4770      	bx	lr
	...

000012b0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    12b0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    12b2:	4b05      	ldr	r3, [pc, #20]	; (12c8 <system_init+0x18>)
    12b4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    12b6:	4b05      	ldr	r3, [pc, #20]	; (12cc <system_init+0x1c>)
    12b8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    12ba:	4b05      	ldr	r3, [pc, #20]	; (12d0 <system_init+0x20>)
    12bc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    12be:	4b05      	ldr	r3, [pc, #20]	; (12d4 <system_init+0x24>)
    12c0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    12c2:	4b05      	ldr	r3, [pc, #20]	; (12d8 <system_init+0x28>)
    12c4:	4798      	blx	r3
}
    12c6:	bd10      	pop	{r4, pc}
    12c8:	00000e61 	.word	0x00000e61
    12cc:	00000bb1 	.word	0x00000bb1
    12d0:	000012ad 	.word	0x000012ad
    12d4:	00000269 	.word	0x00000269
    12d8:	000012ad 	.word	0x000012ad

000012dc <main>:
{
	
}

int main (void)
{
    12dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12de:	46c6      	mov	lr, r8
    12e0:	b500      	push	{lr}
    12e2:	b090      	sub	sp, #64	; 0x40
	system_init();
    12e4:	4b5a      	ldr	r3, [pc, #360]	; (1450 <main+0x174>)
    12e6:	4798      	blx	r3
	delay_init();
    12e8:	4b5a      	ldr	r3, [pc, #360]	; (1454 <main+0x178>)
    12ea:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    12ec:	2501      	movs	r5, #1
    12ee:	466b      	mov	r3, sp
    12f0:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    12f2:	2400      	movs	r4, #0
    12f4:	709c      	strb	r4, [r3, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    12f6:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    12f8:	4669      	mov	r1, sp
    12fa:	2013      	movs	r0, #19
    12fc:	4b56      	ldr	r3, [pc, #344]	; (1458 <main+0x17c>)
    12fe:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1300:	2280      	movs	r2, #128	; 0x80
    1302:	0312      	lsls	r2, r2, #12
    1304:	4b55      	ldr	r3, [pc, #340]	; (145c <main+0x180>)
    1306:	619a      	str	r2, [r3, #24]
	
	uint16_t timeout = 0;
	uint8_t run = 1;
	uint8_t i_am_master = 0;
	
	struct i2c_master_packet packet_master = {
    1308:	aa0d      	add	r2, sp, #52	; 0x34
    130a:	4b55      	ldr	r3, [pc, #340]	; (1460 <main+0x184>)
    130c:	cb43      	ldmia	r3!, {r0, r1, r6}
    130e:	c243      	stmia	r2!, {r0, r1, r6}
	
	enum status_code status = STATUS_BUSY;
	
	uint8_t info_progression = 0;
	
	delay_ms(5000);
    1310:	4854      	ldr	r0, [pc, #336]	; (1464 <main+0x188>)
    1312:	4b55      	ldr	r3, [pc, #340]	; (1468 <main+0x18c>)
    1314:	4798      	blx	r3
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    1316:	466b      	mov	r3, sp
    1318:	701c      	strb	r4, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    131a:	2380      	movs	r3, #128	; 0x80
    131c:	039b      	lsls	r3, r3, #14
    131e:	9301      	str	r3, [sp, #4]
	config->buffer_timeout = 65535;
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    1320:	2300      	movs	r3, #0
    1322:	466a      	mov	r2, sp
    1324:	8154      	strh	r4, [r2, #10]
	config->address = 0;
	config->address_mask = 0;
    1326:	81d4      	strh	r4, [r2, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    1328:	7413      	strb	r3, [r2, #16]
#endif
	config->enable_general_call_address = false;
    132a:	7453      	strb	r3, [r2, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    132c:	9405      	str	r4, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
#endif
	config->generator_source = GCLK_GENERATOR_0;
    132e:	7613      	strb	r3, [r2, #24]
	config->run_in_standby = false;
    1330:	7653      	strb	r3, [r2, #25]
	config->pinmux_pad0 = PINMUX_DEFAULT;
	config->pinmux_pad1 = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1332:	2224      	movs	r2, #36	; 0x24
    1334:	4669      	mov	r1, sp
    1336:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1338:	3201      	adds	r2, #1
    133a:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    133c:	3201      	adds	r2, #1
    133e:	548b      	strb	r3, [r1, r2]
	config_i2c_slave.address = SLAVE_1_ADDRESS;
    1340:	818d      	strh	r5, [r1, #12]
	config_i2c_slave.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    1342:	4b4a      	ldr	r3, [pc, #296]	; (146c <main+0x190>)
    1344:	9307      	str	r3, [sp, #28]
	config_i2c_slave.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    1346:	4b4a      	ldr	r3, [pc, #296]	; (1470 <main+0x194>)
    1348:	9308      	str	r3, [sp, #32]
	config_i2c_slave.buffer_timeout = 1000;
    134a:	23fa      	movs	r3, #250	; 0xfa
    134c:	009b      	lsls	r3, r3, #2
    134e:	466a      	mov	r2, sp
    1350:	810b      	strh	r3, [r1, #8]
	i2c_slave_init(&i2c_slave_instance, EXT1_I2C_MODULE, &config_i2c_slave);
    1352:	4c48      	ldr	r4, [pc, #288]	; (1474 <main+0x198>)
    1354:	4948      	ldr	r1, [pc, #288]	; (1478 <main+0x19c>)
    1356:	0020      	movs	r0, r4
    1358:	4b48      	ldr	r3, [pc, #288]	; (147c <main+0x1a0>)
    135a:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    135c:	6823      	ldr	r3, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    135e:	2203      	movs	r2, #3
    1360:	69d9      	ldr	r1, [r3, #28]
	while (i2c_slave_is_syncing(module)) {
    1362:	420a      	tst	r2, r1
    1364:	d1fc      	bne.n	1360 <main+0x84>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1366:	681a      	ldr	r2, [r3, #0]
    1368:	2102      	movs	r1, #2
    136a:	430a      	orrs	r2, r1
    136c:	601a      	str	r2, [r3, #0]
	enum status_code status = STATUS_BUSY;
    136e:	2405      	movs	r4, #5
	uint8_t i_am_master = 0;
    1370:	2500      	movs	r5, #0
	packet_slave.data = read_buffer_slave;
	configure_i2c_slave();
	while (run)
	{
		enum i2c_slave_direction dir = i2c_slave_get_direction_wait(&i2c_slave_instance);
    1372:	4e43      	ldr	r6, [pc, #268]	; (1480 <main+0x1a4>)
			port_pin_set_output_level(LED_0_PIN,LED_0_ACTIVE);
		}

		if (i_am_master)
		{
			if (infos[info_progression] == 14)
    1374:	4b43      	ldr	r3, [pc, #268]	; (1484 <main+0x1a8>)
    1376:	4698      	mov	r8, r3
    1378:	e059      	b.n	142e <main+0x152>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    137a:	4b3e      	ldr	r3, [pc, #248]	; (1474 <main+0x198>)
    137c:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    137e:	2103      	movs	r1, #3
    1380:	69d3      	ldr	r3, [r2, #28]
	while (i2c_slave_is_syncing(module)) {
    1382:	4219      	tst	r1, r3
    1384:	d1fc      	bne.n	1380 <main+0xa4>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Disable module */
	i2c_hw->CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1386:	6813      	ldr	r3, [r2, #0]
    1388:	2102      	movs	r1, #2
    138a:	438b      	bics	r3, r1
    138c:	6013      	str	r3, [r2, #0]
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    138e:	2364      	movs	r3, #100	; 0x64
    1390:	9300      	str	r3, [sp, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1392:	4b3d      	ldr	r3, [pc, #244]	; (1488 <main+0x1ac>)
    1394:	9301      	str	r3, [sp, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1396:	2300      	movs	r3, #0
    1398:	9302      	str	r3, [sp, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    139a:	466a      	mov	r2, sp
    139c:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    139e:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    13a0:	2280      	movs	r2, #128	; 0x80
    13a2:	0392      	lsls	r2, r2, #14
    13a4:	9204      	str	r2, [sp, #16]
	config->buffer_timeout   = 65535;
    13a6:	2201      	movs	r2, #1
    13a8:	4252      	negs	r2, r2
    13aa:	4669      	mov	r1, sp
    13ac:	82ca      	strh	r2, [r1, #22]
	config->unknown_bus_state_timeout = 65535;
    13ae:	828a      	strh	r2, [r1, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    13b0:	3225      	adds	r2, #37	; 0x25
    13b2:	548b      	strb	r3, [r1, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    13b4:	930a      	str	r3, [sp, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    13b6:	3208      	adds	r2, #8
    13b8:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    13ba:	3201      	adds	r2, #1
    13bc:	548b      	strb	r3, [r1, r2]
	config->master_scl_low_extend_timeout  = false;
    13be:	3201      	adds	r2, #1
    13c0:	548b      	strb	r3, [r1, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    13c2:	33d7      	adds	r3, #215	; 0xd7
    13c4:	466a      	mov	r2, sp
    13c6:	860b      	strh	r3, [r1, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    13c8:	4b28      	ldr	r3, [pc, #160]	; (146c <main+0x190>)
    13ca:	9307      	str	r3, [sp, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    13cc:	4b28      	ldr	r3, [pc, #160]	; (1470 <main+0x194>)
    13ce:	9308      	str	r3, [sp, #32]
	i2c_master_init(&i2c_master_instance, EXT1_I2C_MODULE, &config_i2c_master);
    13d0:	4d2e      	ldr	r5, [pc, #184]	; (148c <main+0x1b0>)
    13d2:	4929      	ldr	r1, [pc, #164]	; (1478 <main+0x19c>)
    13d4:	0028      	movs	r0, r5
    13d6:	4b2e      	ldr	r3, [pc, #184]	; (1490 <main+0x1b4>)
    13d8:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13da:	682a      	ldr	r2, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    13dc:	2107      	movs	r1, #7
    13de:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    13e0:	4219      	tst	r1, r3
    13e2:	d1fc      	bne.n	13de <main+0x102>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    13e4:	6813      	ldr	r3, [r2, #0]
    13e6:	2102      	movs	r1, #2
    13e8:	430b      	orrs	r3, r1
    13ea:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    13ec:	4b27      	ldr	r3, [pc, #156]	; (148c <main+0x1b0>)
    13ee:	88dd      	ldrh	r5, [r3, #6]
	uint32_t timeout_counter = 0;
    13f0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    13f2:	2010      	movs	r0, #16
    13f4:	8b51      	ldrh	r1, [r2, #26]
    13f6:	4201      	tst	r1, r0
    13f8:	d104      	bne.n	1404 <main+0x128>
		timeout_counter++;
    13fa:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    13fc:	42ab      	cmp	r3, r5
    13fe:	d3f9      	bcc.n	13f4 <main+0x118>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1400:	2310      	movs	r3, #16
    1402:	8353      	strh	r3, [r2, #26]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1404:	2280      	movs	r2, #128	; 0x80
    1406:	0312      	lsls	r2, r2, #12
    1408:	4b14      	ldr	r3, [pc, #80]	; (145c <main+0x180>)
    140a:	615a      	str	r2, [r3, #20]
    140c:	e015      	b.n	143a <main+0x15e>
			{
				port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
			}
			write_buffer_master[MSG_TYPE] = I_AM_MASTER;
    140e:	4b21      	ldr	r3, [pc, #132]	; (1494 <main+0x1b8>)
    1410:	22a0      	movs	r2, #160	; 0xa0
    1412:	701a      	strb	r2, [r3, #0]
			write_buffer_master[DATA] = MY_ADDRESS;
    1414:	2200      	movs	r2, #0
    1416:	705a      	strb	r2, [r3, #1]
			packet_master.data = write_buffer_master;
    1418:	930e      	str	r3, [sp, #56]	; 0x38
			
			while (status != STATUS_OK)
    141a:	2c00      	cmp	r4, #0
    141c:	d016      	beq.n	144c <main+0x170>
			{
				status = i2c_master_write_packet_wait(&i2c_master_instance, &packet_master);
    141e:	4d1b      	ldr	r5, [pc, #108]	; (148c <main+0x1b0>)
    1420:	4f1d      	ldr	r7, [pc, #116]	; (1498 <main+0x1bc>)
    1422:	a90d      	add	r1, sp, #52	; 0x34
    1424:	0028      	movs	r0, r5
    1426:	47b8      	blx	r7
    1428:	1e04      	subs	r4, r0, #0
			while (status != STATUS_OK)
    142a:	d1fa      	bne.n	1422 <main+0x146>
    142c:	2501      	movs	r5, #1
		enum i2c_slave_direction dir = i2c_slave_get_direction_wait(&i2c_slave_instance);
    142e:	4811      	ldr	r0, [pc, #68]	; (1474 <main+0x198>)
    1430:	47b0      	blx	r6
		if(dir == I2C_SLAVE_DIRECTION_NONE)
    1432:	2802      	cmp	r0, #2
    1434:	d0a1      	beq.n	137a <main+0x9e>
		if (i_am_master)
    1436:	2d00      	cmp	r5, #0
    1438:	d0f9      	beq.n	142e <main+0x152>
			if (infos[info_progression] == 14)
    143a:	4643      	mov	r3, r8
    143c:	781b      	ldrb	r3, [r3, #0]
    143e:	2b0e      	cmp	r3, #14
    1440:	d1e5      	bne.n	140e <main+0x132>
    1442:	2280      	movs	r2, #128	; 0x80
    1444:	0312      	lsls	r2, r2, #12
    1446:	4b05      	ldr	r3, [pc, #20]	; (145c <main+0x180>)
    1448:	615a      	str	r2, [r3, #20]
    144a:	e7e0      	b.n	140e <main+0x132>
			while (status != STATUS_OK)
    144c:	2501      	movs	r5, #1
    144e:	e7ee      	b.n	142e <main+0x152>
    1450:	000012b1 	.word	0x000012b1
    1454:	00000ad5 	.word	0x00000ad5
    1458:	00000be9 	.word	0x00000be9
    145c:	41004400 	.word	0x41004400
    1460:	00002f24 	.word	0x00002f24
    1464:	00001388 	.word	0x00001388
    1468:	00000b15 	.word	0x00000b15
    146c:	00100002 	.word	0x00100002
    1470:	00110002 	.word	0x00110002
    1474:	200000cc 	.word	0x200000cc
    1478:	42000c00 	.word	0x42000c00
    147c:	00000765 	.word	0x00000765
    1480:	000008b5 	.word	0x000008b5
    1484:	2000000c 	.word	0x2000000c
    1488:	00000d48 	.word	0x00000d48
    148c:	200000c0 	.word	0x200000c0
    1490:	000002e1 	.word	0x000002e1
    1494:	20000020 	.word	0x20000020
    1498:	00000719 	.word	0x00000719

0000149c <__udivsi3>:
    149c:	2200      	movs	r2, #0
    149e:	0843      	lsrs	r3, r0, #1
    14a0:	428b      	cmp	r3, r1
    14a2:	d374      	bcc.n	158e <__udivsi3+0xf2>
    14a4:	0903      	lsrs	r3, r0, #4
    14a6:	428b      	cmp	r3, r1
    14a8:	d35f      	bcc.n	156a <__udivsi3+0xce>
    14aa:	0a03      	lsrs	r3, r0, #8
    14ac:	428b      	cmp	r3, r1
    14ae:	d344      	bcc.n	153a <__udivsi3+0x9e>
    14b0:	0b03      	lsrs	r3, r0, #12
    14b2:	428b      	cmp	r3, r1
    14b4:	d328      	bcc.n	1508 <__udivsi3+0x6c>
    14b6:	0c03      	lsrs	r3, r0, #16
    14b8:	428b      	cmp	r3, r1
    14ba:	d30d      	bcc.n	14d8 <__udivsi3+0x3c>
    14bc:	22ff      	movs	r2, #255	; 0xff
    14be:	0209      	lsls	r1, r1, #8
    14c0:	ba12      	rev	r2, r2
    14c2:	0c03      	lsrs	r3, r0, #16
    14c4:	428b      	cmp	r3, r1
    14c6:	d302      	bcc.n	14ce <__udivsi3+0x32>
    14c8:	1212      	asrs	r2, r2, #8
    14ca:	0209      	lsls	r1, r1, #8
    14cc:	d065      	beq.n	159a <__udivsi3+0xfe>
    14ce:	0b03      	lsrs	r3, r0, #12
    14d0:	428b      	cmp	r3, r1
    14d2:	d319      	bcc.n	1508 <__udivsi3+0x6c>
    14d4:	e000      	b.n	14d8 <__udivsi3+0x3c>
    14d6:	0a09      	lsrs	r1, r1, #8
    14d8:	0bc3      	lsrs	r3, r0, #15
    14da:	428b      	cmp	r3, r1
    14dc:	d301      	bcc.n	14e2 <__udivsi3+0x46>
    14de:	03cb      	lsls	r3, r1, #15
    14e0:	1ac0      	subs	r0, r0, r3
    14e2:	4152      	adcs	r2, r2
    14e4:	0b83      	lsrs	r3, r0, #14
    14e6:	428b      	cmp	r3, r1
    14e8:	d301      	bcc.n	14ee <__udivsi3+0x52>
    14ea:	038b      	lsls	r3, r1, #14
    14ec:	1ac0      	subs	r0, r0, r3
    14ee:	4152      	adcs	r2, r2
    14f0:	0b43      	lsrs	r3, r0, #13
    14f2:	428b      	cmp	r3, r1
    14f4:	d301      	bcc.n	14fa <__udivsi3+0x5e>
    14f6:	034b      	lsls	r3, r1, #13
    14f8:	1ac0      	subs	r0, r0, r3
    14fa:	4152      	adcs	r2, r2
    14fc:	0b03      	lsrs	r3, r0, #12
    14fe:	428b      	cmp	r3, r1
    1500:	d301      	bcc.n	1506 <__udivsi3+0x6a>
    1502:	030b      	lsls	r3, r1, #12
    1504:	1ac0      	subs	r0, r0, r3
    1506:	4152      	adcs	r2, r2
    1508:	0ac3      	lsrs	r3, r0, #11
    150a:	428b      	cmp	r3, r1
    150c:	d301      	bcc.n	1512 <__udivsi3+0x76>
    150e:	02cb      	lsls	r3, r1, #11
    1510:	1ac0      	subs	r0, r0, r3
    1512:	4152      	adcs	r2, r2
    1514:	0a83      	lsrs	r3, r0, #10
    1516:	428b      	cmp	r3, r1
    1518:	d301      	bcc.n	151e <__udivsi3+0x82>
    151a:	028b      	lsls	r3, r1, #10
    151c:	1ac0      	subs	r0, r0, r3
    151e:	4152      	adcs	r2, r2
    1520:	0a43      	lsrs	r3, r0, #9
    1522:	428b      	cmp	r3, r1
    1524:	d301      	bcc.n	152a <__udivsi3+0x8e>
    1526:	024b      	lsls	r3, r1, #9
    1528:	1ac0      	subs	r0, r0, r3
    152a:	4152      	adcs	r2, r2
    152c:	0a03      	lsrs	r3, r0, #8
    152e:	428b      	cmp	r3, r1
    1530:	d301      	bcc.n	1536 <__udivsi3+0x9a>
    1532:	020b      	lsls	r3, r1, #8
    1534:	1ac0      	subs	r0, r0, r3
    1536:	4152      	adcs	r2, r2
    1538:	d2cd      	bcs.n	14d6 <__udivsi3+0x3a>
    153a:	09c3      	lsrs	r3, r0, #7
    153c:	428b      	cmp	r3, r1
    153e:	d301      	bcc.n	1544 <__udivsi3+0xa8>
    1540:	01cb      	lsls	r3, r1, #7
    1542:	1ac0      	subs	r0, r0, r3
    1544:	4152      	adcs	r2, r2
    1546:	0983      	lsrs	r3, r0, #6
    1548:	428b      	cmp	r3, r1
    154a:	d301      	bcc.n	1550 <__udivsi3+0xb4>
    154c:	018b      	lsls	r3, r1, #6
    154e:	1ac0      	subs	r0, r0, r3
    1550:	4152      	adcs	r2, r2
    1552:	0943      	lsrs	r3, r0, #5
    1554:	428b      	cmp	r3, r1
    1556:	d301      	bcc.n	155c <__udivsi3+0xc0>
    1558:	014b      	lsls	r3, r1, #5
    155a:	1ac0      	subs	r0, r0, r3
    155c:	4152      	adcs	r2, r2
    155e:	0903      	lsrs	r3, r0, #4
    1560:	428b      	cmp	r3, r1
    1562:	d301      	bcc.n	1568 <__udivsi3+0xcc>
    1564:	010b      	lsls	r3, r1, #4
    1566:	1ac0      	subs	r0, r0, r3
    1568:	4152      	adcs	r2, r2
    156a:	08c3      	lsrs	r3, r0, #3
    156c:	428b      	cmp	r3, r1
    156e:	d301      	bcc.n	1574 <__udivsi3+0xd8>
    1570:	00cb      	lsls	r3, r1, #3
    1572:	1ac0      	subs	r0, r0, r3
    1574:	4152      	adcs	r2, r2
    1576:	0883      	lsrs	r3, r0, #2
    1578:	428b      	cmp	r3, r1
    157a:	d301      	bcc.n	1580 <__udivsi3+0xe4>
    157c:	008b      	lsls	r3, r1, #2
    157e:	1ac0      	subs	r0, r0, r3
    1580:	4152      	adcs	r2, r2
    1582:	0843      	lsrs	r3, r0, #1
    1584:	428b      	cmp	r3, r1
    1586:	d301      	bcc.n	158c <__udivsi3+0xf0>
    1588:	004b      	lsls	r3, r1, #1
    158a:	1ac0      	subs	r0, r0, r3
    158c:	4152      	adcs	r2, r2
    158e:	1a41      	subs	r1, r0, r1
    1590:	d200      	bcs.n	1594 <__udivsi3+0xf8>
    1592:	4601      	mov	r1, r0
    1594:	4152      	adcs	r2, r2
    1596:	4610      	mov	r0, r2
    1598:	4770      	bx	lr
    159a:	e7ff      	b.n	159c <__udivsi3+0x100>
    159c:	b501      	push	{r0, lr}
    159e:	2000      	movs	r0, #0
    15a0:	f000 f806 	bl	15b0 <__aeabi_idiv0>
    15a4:	bd02      	pop	{r1, pc}
    15a6:	46c0      	nop			; (mov r8, r8)

000015a8 <__aeabi_uidivmod>:
    15a8:	2900      	cmp	r1, #0
    15aa:	d0f7      	beq.n	159c <__udivsi3+0x100>
    15ac:	e776      	b.n	149c <__udivsi3>
    15ae:	4770      	bx	lr

000015b0 <__aeabi_idiv0>:
    15b0:	4770      	bx	lr
    15b2:	46c0      	nop			; (mov r8, r8)

000015b4 <__aeabi_dadd>:
    15b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15b6:	4645      	mov	r5, r8
    15b8:	46de      	mov	lr, fp
    15ba:	4657      	mov	r7, sl
    15bc:	464e      	mov	r6, r9
    15be:	030c      	lsls	r4, r1, #12
    15c0:	b5e0      	push	{r5, r6, r7, lr}
    15c2:	004e      	lsls	r6, r1, #1
    15c4:	0fc9      	lsrs	r1, r1, #31
    15c6:	4688      	mov	r8, r1
    15c8:	000d      	movs	r5, r1
    15ca:	0a61      	lsrs	r1, r4, #9
    15cc:	0f44      	lsrs	r4, r0, #29
    15ce:	430c      	orrs	r4, r1
    15d0:	00c7      	lsls	r7, r0, #3
    15d2:	0319      	lsls	r1, r3, #12
    15d4:	0058      	lsls	r0, r3, #1
    15d6:	0fdb      	lsrs	r3, r3, #31
    15d8:	469b      	mov	fp, r3
    15da:	0a4b      	lsrs	r3, r1, #9
    15dc:	0f51      	lsrs	r1, r2, #29
    15de:	430b      	orrs	r3, r1
    15e0:	0d76      	lsrs	r6, r6, #21
    15e2:	0d40      	lsrs	r0, r0, #21
    15e4:	0019      	movs	r1, r3
    15e6:	00d2      	lsls	r2, r2, #3
    15e8:	45d8      	cmp	r8, fp
    15ea:	d100      	bne.n	15ee <__aeabi_dadd+0x3a>
    15ec:	e0ae      	b.n	174c <__aeabi_dadd+0x198>
    15ee:	1a35      	subs	r5, r6, r0
    15f0:	2d00      	cmp	r5, #0
    15f2:	dc00      	bgt.n	15f6 <__aeabi_dadd+0x42>
    15f4:	e0f6      	b.n	17e4 <__aeabi_dadd+0x230>
    15f6:	2800      	cmp	r0, #0
    15f8:	d10f      	bne.n	161a <__aeabi_dadd+0x66>
    15fa:	4313      	orrs	r3, r2
    15fc:	d100      	bne.n	1600 <__aeabi_dadd+0x4c>
    15fe:	e0db      	b.n	17b8 <__aeabi_dadd+0x204>
    1600:	1e6b      	subs	r3, r5, #1
    1602:	2b00      	cmp	r3, #0
    1604:	d000      	beq.n	1608 <__aeabi_dadd+0x54>
    1606:	e137      	b.n	1878 <__aeabi_dadd+0x2c4>
    1608:	1aba      	subs	r2, r7, r2
    160a:	4297      	cmp	r7, r2
    160c:	41bf      	sbcs	r7, r7
    160e:	1a64      	subs	r4, r4, r1
    1610:	427f      	negs	r7, r7
    1612:	1be4      	subs	r4, r4, r7
    1614:	2601      	movs	r6, #1
    1616:	0017      	movs	r7, r2
    1618:	e024      	b.n	1664 <__aeabi_dadd+0xb0>
    161a:	4bc6      	ldr	r3, [pc, #792]	; (1934 <__aeabi_dadd+0x380>)
    161c:	429e      	cmp	r6, r3
    161e:	d04d      	beq.n	16bc <__aeabi_dadd+0x108>
    1620:	2380      	movs	r3, #128	; 0x80
    1622:	041b      	lsls	r3, r3, #16
    1624:	4319      	orrs	r1, r3
    1626:	2d38      	cmp	r5, #56	; 0x38
    1628:	dd00      	ble.n	162c <__aeabi_dadd+0x78>
    162a:	e107      	b.n	183c <__aeabi_dadd+0x288>
    162c:	2d1f      	cmp	r5, #31
    162e:	dd00      	ble.n	1632 <__aeabi_dadd+0x7e>
    1630:	e138      	b.n	18a4 <__aeabi_dadd+0x2f0>
    1632:	2020      	movs	r0, #32
    1634:	1b43      	subs	r3, r0, r5
    1636:	469a      	mov	sl, r3
    1638:	000b      	movs	r3, r1
    163a:	4650      	mov	r0, sl
    163c:	4083      	lsls	r3, r0
    163e:	4699      	mov	r9, r3
    1640:	0013      	movs	r3, r2
    1642:	4648      	mov	r0, r9
    1644:	40eb      	lsrs	r3, r5
    1646:	4318      	orrs	r0, r3
    1648:	0003      	movs	r3, r0
    164a:	4650      	mov	r0, sl
    164c:	4082      	lsls	r2, r0
    164e:	1e50      	subs	r0, r2, #1
    1650:	4182      	sbcs	r2, r0
    1652:	40e9      	lsrs	r1, r5
    1654:	431a      	orrs	r2, r3
    1656:	1aba      	subs	r2, r7, r2
    1658:	1a61      	subs	r1, r4, r1
    165a:	4297      	cmp	r7, r2
    165c:	41a4      	sbcs	r4, r4
    165e:	0017      	movs	r7, r2
    1660:	4264      	negs	r4, r4
    1662:	1b0c      	subs	r4, r1, r4
    1664:	0223      	lsls	r3, r4, #8
    1666:	d562      	bpl.n	172e <__aeabi_dadd+0x17a>
    1668:	0264      	lsls	r4, r4, #9
    166a:	0a65      	lsrs	r5, r4, #9
    166c:	2d00      	cmp	r5, #0
    166e:	d100      	bne.n	1672 <__aeabi_dadd+0xbe>
    1670:	e0df      	b.n	1832 <__aeabi_dadd+0x27e>
    1672:	0028      	movs	r0, r5
    1674:	f001 fbe4 	bl	2e40 <__clzsi2>
    1678:	0003      	movs	r3, r0
    167a:	3b08      	subs	r3, #8
    167c:	2b1f      	cmp	r3, #31
    167e:	dd00      	ble.n	1682 <__aeabi_dadd+0xce>
    1680:	e0d2      	b.n	1828 <__aeabi_dadd+0x274>
    1682:	2220      	movs	r2, #32
    1684:	003c      	movs	r4, r7
    1686:	1ad2      	subs	r2, r2, r3
    1688:	409d      	lsls	r5, r3
    168a:	40d4      	lsrs	r4, r2
    168c:	409f      	lsls	r7, r3
    168e:	4325      	orrs	r5, r4
    1690:	429e      	cmp	r6, r3
    1692:	dd00      	ble.n	1696 <__aeabi_dadd+0xe2>
    1694:	e0c4      	b.n	1820 <__aeabi_dadd+0x26c>
    1696:	1b9e      	subs	r6, r3, r6
    1698:	1c73      	adds	r3, r6, #1
    169a:	2b1f      	cmp	r3, #31
    169c:	dd00      	ble.n	16a0 <__aeabi_dadd+0xec>
    169e:	e0f1      	b.n	1884 <__aeabi_dadd+0x2d0>
    16a0:	2220      	movs	r2, #32
    16a2:	0038      	movs	r0, r7
    16a4:	0029      	movs	r1, r5
    16a6:	1ad2      	subs	r2, r2, r3
    16a8:	40d8      	lsrs	r0, r3
    16aa:	4091      	lsls	r1, r2
    16ac:	4097      	lsls	r7, r2
    16ae:	002c      	movs	r4, r5
    16b0:	4301      	orrs	r1, r0
    16b2:	1e78      	subs	r0, r7, #1
    16b4:	4187      	sbcs	r7, r0
    16b6:	40dc      	lsrs	r4, r3
    16b8:	2600      	movs	r6, #0
    16ba:	430f      	orrs	r7, r1
    16bc:	077b      	lsls	r3, r7, #29
    16be:	d009      	beq.n	16d4 <__aeabi_dadd+0x120>
    16c0:	230f      	movs	r3, #15
    16c2:	403b      	ands	r3, r7
    16c4:	2b04      	cmp	r3, #4
    16c6:	d005      	beq.n	16d4 <__aeabi_dadd+0x120>
    16c8:	1d3b      	adds	r3, r7, #4
    16ca:	42bb      	cmp	r3, r7
    16cc:	41bf      	sbcs	r7, r7
    16ce:	427f      	negs	r7, r7
    16d0:	19e4      	adds	r4, r4, r7
    16d2:	001f      	movs	r7, r3
    16d4:	0223      	lsls	r3, r4, #8
    16d6:	d52c      	bpl.n	1732 <__aeabi_dadd+0x17e>
    16d8:	4b96      	ldr	r3, [pc, #600]	; (1934 <__aeabi_dadd+0x380>)
    16da:	3601      	adds	r6, #1
    16dc:	429e      	cmp	r6, r3
    16de:	d100      	bne.n	16e2 <__aeabi_dadd+0x12e>
    16e0:	e09a      	b.n	1818 <__aeabi_dadd+0x264>
    16e2:	4645      	mov	r5, r8
    16e4:	4b94      	ldr	r3, [pc, #592]	; (1938 <__aeabi_dadd+0x384>)
    16e6:	08ff      	lsrs	r7, r7, #3
    16e8:	401c      	ands	r4, r3
    16ea:	0760      	lsls	r0, r4, #29
    16ec:	0576      	lsls	r6, r6, #21
    16ee:	0264      	lsls	r4, r4, #9
    16f0:	4307      	orrs	r7, r0
    16f2:	0b24      	lsrs	r4, r4, #12
    16f4:	0d76      	lsrs	r6, r6, #21
    16f6:	2100      	movs	r1, #0
    16f8:	0324      	lsls	r4, r4, #12
    16fa:	0b23      	lsrs	r3, r4, #12
    16fc:	0d0c      	lsrs	r4, r1, #20
    16fe:	4a8f      	ldr	r2, [pc, #572]	; (193c <__aeabi_dadd+0x388>)
    1700:	0524      	lsls	r4, r4, #20
    1702:	431c      	orrs	r4, r3
    1704:	4014      	ands	r4, r2
    1706:	0533      	lsls	r3, r6, #20
    1708:	4323      	orrs	r3, r4
    170a:	005b      	lsls	r3, r3, #1
    170c:	07ed      	lsls	r5, r5, #31
    170e:	085b      	lsrs	r3, r3, #1
    1710:	432b      	orrs	r3, r5
    1712:	0038      	movs	r0, r7
    1714:	0019      	movs	r1, r3
    1716:	bc3c      	pop	{r2, r3, r4, r5}
    1718:	4690      	mov	r8, r2
    171a:	4699      	mov	r9, r3
    171c:	46a2      	mov	sl, r4
    171e:	46ab      	mov	fp, r5
    1720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1722:	4664      	mov	r4, ip
    1724:	4304      	orrs	r4, r0
    1726:	d100      	bne.n	172a <__aeabi_dadd+0x176>
    1728:	e211      	b.n	1b4e <__aeabi_dadd+0x59a>
    172a:	0004      	movs	r4, r0
    172c:	4667      	mov	r7, ip
    172e:	077b      	lsls	r3, r7, #29
    1730:	d1c6      	bne.n	16c0 <__aeabi_dadd+0x10c>
    1732:	4645      	mov	r5, r8
    1734:	0760      	lsls	r0, r4, #29
    1736:	08ff      	lsrs	r7, r7, #3
    1738:	4307      	orrs	r7, r0
    173a:	08e4      	lsrs	r4, r4, #3
    173c:	4b7d      	ldr	r3, [pc, #500]	; (1934 <__aeabi_dadd+0x380>)
    173e:	429e      	cmp	r6, r3
    1740:	d030      	beq.n	17a4 <__aeabi_dadd+0x1f0>
    1742:	0324      	lsls	r4, r4, #12
    1744:	0576      	lsls	r6, r6, #21
    1746:	0b24      	lsrs	r4, r4, #12
    1748:	0d76      	lsrs	r6, r6, #21
    174a:	e7d4      	b.n	16f6 <__aeabi_dadd+0x142>
    174c:	1a33      	subs	r3, r6, r0
    174e:	469a      	mov	sl, r3
    1750:	2b00      	cmp	r3, #0
    1752:	dd78      	ble.n	1846 <__aeabi_dadd+0x292>
    1754:	2800      	cmp	r0, #0
    1756:	d031      	beq.n	17bc <__aeabi_dadd+0x208>
    1758:	4876      	ldr	r0, [pc, #472]	; (1934 <__aeabi_dadd+0x380>)
    175a:	4286      	cmp	r6, r0
    175c:	d0ae      	beq.n	16bc <__aeabi_dadd+0x108>
    175e:	2080      	movs	r0, #128	; 0x80
    1760:	0400      	lsls	r0, r0, #16
    1762:	4301      	orrs	r1, r0
    1764:	4653      	mov	r3, sl
    1766:	2b38      	cmp	r3, #56	; 0x38
    1768:	dc00      	bgt.n	176c <__aeabi_dadd+0x1b8>
    176a:	e0e9      	b.n	1940 <__aeabi_dadd+0x38c>
    176c:	430a      	orrs	r2, r1
    176e:	1e51      	subs	r1, r2, #1
    1770:	418a      	sbcs	r2, r1
    1772:	2100      	movs	r1, #0
    1774:	19d2      	adds	r2, r2, r7
    1776:	42ba      	cmp	r2, r7
    1778:	41bf      	sbcs	r7, r7
    177a:	1909      	adds	r1, r1, r4
    177c:	427c      	negs	r4, r7
    177e:	0017      	movs	r7, r2
    1780:	190c      	adds	r4, r1, r4
    1782:	0223      	lsls	r3, r4, #8
    1784:	d5d3      	bpl.n	172e <__aeabi_dadd+0x17a>
    1786:	4b6b      	ldr	r3, [pc, #428]	; (1934 <__aeabi_dadd+0x380>)
    1788:	3601      	adds	r6, #1
    178a:	429e      	cmp	r6, r3
    178c:	d100      	bne.n	1790 <__aeabi_dadd+0x1dc>
    178e:	e13a      	b.n	1a06 <__aeabi_dadd+0x452>
    1790:	2001      	movs	r0, #1
    1792:	4b69      	ldr	r3, [pc, #420]	; (1938 <__aeabi_dadd+0x384>)
    1794:	401c      	ands	r4, r3
    1796:	087b      	lsrs	r3, r7, #1
    1798:	4007      	ands	r7, r0
    179a:	431f      	orrs	r7, r3
    179c:	07e0      	lsls	r0, r4, #31
    179e:	4307      	orrs	r7, r0
    17a0:	0864      	lsrs	r4, r4, #1
    17a2:	e78b      	b.n	16bc <__aeabi_dadd+0x108>
    17a4:	0023      	movs	r3, r4
    17a6:	433b      	orrs	r3, r7
    17a8:	d100      	bne.n	17ac <__aeabi_dadd+0x1f8>
    17aa:	e1cb      	b.n	1b44 <__aeabi_dadd+0x590>
    17ac:	2280      	movs	r2, #128	; 0x80
    17ae:	0312      	lsls	r2, r2, #12
    17b0:	4314      	orrs	r4, r2
    17b2:	0324      	lsls	r4, r4, #12
    17b4:	0b24      	lsrs	r4, r4, #12
    17b6:	e79e      	b.n	16f6 <__aeabi_dadd+0x142>
    17b8:	002e      	movs	r6, r5
    17ba:	e77f      	b.n	16bc <__aeabi_dadd+0x108>
    17bc:	0008      	movs	r0, r1
    17be:	4310      	orrs	r0, r2
    17c0:	d100      	bne.n	17c4 <__aeabi_dadd+0x210>
    17c2:	e0b4      	b.n	192e <__aeabi_dadd+0x37a>
    17c4:	1e58      	subs	r0, r3, #1
    17c6:	2800      	cmp	r0, #0
    17c8:	d000      	beq.n	17cc <__aeabi_dadd+0x218>
    17ca:	e0de      	b.n	198a <__aeabi_dadd+0x3d6>
    17cc:	18ba      	adds	r2, r7, r2
    17ce:	42ba      	cmp	r2, r7
    17d0:	419b      	sbcs	r3, r3
    17d2:	1864      	adds	r4, r4, r1
    17d4:	425b      	negs	r3, r3
    17d6:	18e4      	adds	r4, r4, r3
    17d8:	0017      	movs	r7, r2
    17da:	2601      	movs	r6, #1
    17dc:	0223      	lsls	r3, r4, #8
    17de:	d5a6      	bpl.n	172e <__aeabi_dadd+0x17a>
    17e0:	2602      	movs	r6, #2
    17e2:	e7d5      	b.n	1790 <__aeabi_dadd+0x1dc>
    17e4:	2d00      	cmp	r5, #0
    17e6:	d16e      	bne.n	18c6 <__aeabi_dadd+0x312>
    17e8:	1c70      	adds	r0, r6, #1
    17ea:	0540      	lsls	r0, r0, #21
    17ec:	0d40      	lsrs	r0, r0, #21
    17ee:	2801      	cmp	r0, #1
    17f0:	dc00      	bgt.n	17f4 <__aeabi_dadd+0x240>
    17f2:	e0f9      	b.n	19e8 <__aeabi_dadd+0x434>
    17f4:	1ab8      	subs	r0, r7, r2
    17f6:	4684      	mov	ip, r0
    17f8:	4287      	cmp	r7, r0
    17fa:	4180      	sbcs	r0, r0
    17fc:	1ae5      	subs	r5, r4, r3
    17fe:	4240      	negs	r0, r0
    1800:	1a2d      	subs	r5, r5, r0
    1802:	0228      	lsls	r0, r5, #8
    1804:	d400      	bmi.n	1808 <__aeabi_dadd+0x254>
    1806:	e089      	b.n	191c <__aeabi_dadd+0x368>
    1808:	1bd7      	subs	r7, r2, r7
    180a:	42ba      	cmp	r2, r7
    180c:	4192      	sbcs	r2, r2
    180e:	1b1c      	subs	r4, r3, r4
    1810:	4252      	negs	r2, r2
    1812:	1aa5      	subs	r5, r4, r2
    1814:	46d8      	mov	r8, fp
    1816:	e729      	b.n	166c <__aeabi_dadd+0xb8>
    1818:	4645      	mov	r5, r8
    181a:	2400      	movs	r4, #0
    181c:	2700      	movs	r7, #0
    181e:	e76a      	b.n	16f6 <__aeabi_dadd+0x142>
    1820:	4c45      	ldr	r4, [pc, #276]	; (1938 <__aeabi_dadd+0x384>)
    1822:	1af6      	subs	r6, r6, r3
    1824:	402c      	ands	r4, r5
    1826:	e749      	b.n	16bc <__aeabi_dadd+0x108>
    1828:	003d      	movs	r5, r7
    182a:	3828      	subs	r0, #40	; 0x28
    182c:	4085      	lsls	r5, r0
    182e:	2700      	movs	r7, #0
    1830:	e72e      	b.n	1690 <__aeabi_dadd+0xdc>
    1832:	0038      	movs	r0, r7
    1834:	f001 fb04 	bl	2e40 <__clzsi2>
    1838:	3020      	adds	r0, #32
    183a:	e71d      	b.n	1678 <__aeabi_dadd+0xc4>
    183c:	430a      	orrs	r2, r1
    183e:	1e51      	subs	r1, r2, #1
    1840:	418a      	sbcs	r2, r1
    1842:	2100      	movs	r1, #0
    1844:	e707      	b.n	1656 <__aeabi_dadd+0xa2>
    1846:	2b00      	cmp	r3, #0
    1848:	d000      	beq.n	184c <__aeabi_dadd+0x298>
    184a:	e0f3      	b.n	1a34 <__aeabi_dadd+0x480>
    184c:	1c70      	adds	r0, r6, #1
    184e:	0543      	lsls	r3, r0, #21
    1850:	0d5b      	lsrs	r3, r3, #21
    1852:	2b01      	cmp	r3, #1
    1854:	dc00      	bgt.n	1858 <__aeabi_dadd+0x2a4>
    1856:	e0ad      	b.n	19b4 <__aeabi_dadd+0x400>
    1858:	4b36      	ldr	r3, [pc, #216]	; (1934 <__aeabi_dadd+0x380>)
    185a:	4298      	cmp	r0, r3
    185c:	d100      	bne.n	1860 <__aeabi_dadd+0x2ac>
    185e:	e0d1      	b.n	1a04 <__aeabi_dadd+0x450>
    1860:	18ba      	adds	r2, r7, r2
    1862:	42ba      	cmp	r2, r7
    1864:	41bf      	sbcs	r7, r7
    1866:	1864      	adds	r4, r4, r1
    1868:	427f      	negs	r7, r7
    186a:	19e4      	adds	r4, r4, r7
    186c:	07e7      	lsls	r7, r4, #31
    186e:	0852      	lsrs	r2, r2, #1
    1870:	4317      	orrs	r7, r2
    1872:	0864      	lsrs	r4, r4, #1
    1874:	0006      	movs	r6, r0
    1876:	e721      	b.n	16bc <__aeabi_dadd+0x108>
    1878:	482e      	ldr	r0, [pc, #184]	; (1934 <__aeabi_dadd+0x380>)
    187a:	4285      	cmp	r5, r0
    187c:	d100      	bne.n	1880 <__aeabi_dadd+0x2cc>
    187e:	e093      	b.n	19a8 <__aeabi_dadd+0x3f4>
    1880:	001d      	movs	r5, r3
    1882:	e6d0      	b.n	1626 <__aeabi_dadd+0x72>
    1884:	0029      	movs	r1, r5
    1886:	3e1f      	subs	r6, #31
    1888:	40f1      	lsrs	r1, r6
    188a:	2b20      	cmp	r3, #32
    188c:	d100      	bne.n	1890 <__aeabi_dadd+0x2dc>
    188e:	e08d      	b.n	19ac <__aeabi_dadd+0x3f8>
    1890:	2240      	movs	r2, #64	; 0x40
    1892:	1ad3      	subs	r3, r2, r3
    1894:	409d      	lsls	r5, r3
    1896:	432f      	orrs	r7, r5
    1898:	1e7d      	subs	r5, r7, #1
    189a:	41af      	sbcs	r7, r5
    189c:	2400      	movs	r4, #0
    189e:	430f      	orrs	r7, r1
    18a0:	2600      	movs	r6, #0
    18a2:	e744      	b.n	172e <__aeabi_dadd+0x17a>
    18a4:	002b      	movs	r3, r5
    18a6:	0008      	movs	r0, r1
    18a8:	3b20      	subs	r3, #32
    18aa:	40d8      	lsrs	r0, r3
    18ac:	0003      	movs	r3, r0
    18ae:	2d20      	cmp	r5, #32
    18b0:	d100      	bne.n	18b4 <__aeabi_dadd+0x300>
    18b2:	e07d      	b.n	19b0 <__aeabi_dadd+0x3fc>
    18b4:	2040      	movs	r0, #64	; 0x40
    18b6:	1b45      	subs	r5, r0, r5
    18b8:	40a9      	lsls	r1, r5
    18ba:	430a      	orrs	r2, r1
    18bc:	1e51      	subs	r1, r2, #1
    18be:	418a      	sbcs	r2, r1
    18c0:	2100      	movs	r1, #0
    18c2:	431a      	orrs	r2, r3
    18c4:	e6c7      	b.n	1656 <__aeabi_dadd+0xa2>
    18c6:	2e00      	cmp	r6, #0
    18c8:	d050      	beq.n	196c <__aeabi_dadd+0x3b8>
    18ca:	4e1a      	ldr	r6, [pc, #104]	; (1934 <__aeabi_dadd+0x380>)
    18cc:	42b0      	cmp	r0, r6
    18ce:	d057      	beq.n	1980 <__aeabi_dadd+0x3cc>
    18d0:	2680      	movs	r6, #128	; 0x80
    18d2:	426b      	negs	r3, r5
    18d4:	4699      	mov	r9, r3
    18d6:	0436      	lsls	r6, r6, #16
    18d8:	4334      	orrs	r4, r6
    18da:	464b      	mov	r3, r9
    18dc:	2b38      	cmp	r3, #56	; 0x38
    18de:	dd00      	ble.n	18e2 <__aeabi_dadd+0x32e>
    18e0:	e0d6      	b.n	1a90 <__aeabi_dadd+0x4dc>
    18e2:	2b1f      	cmp	r3, #31
    18e4:	dd00      	ble.n	18e8 <__aeabi_dadd+0x334>
    18e6:	e135      	b.n	1b54 <__aeabi_dadd+0x5a0>
    18e8:	2620      	movs	r6, #32
    18ea:	1af5      	subs	r5, r6, r3
    18ec:	0026      	movs	r6, r4
    18ee:	40ae      	lsls	r6, r5
    18f0:	46b2      	mov	sl, r6
    18f2:	003e      	movs	r6, r7
    18f4:	40de      	lsrs	r6, r3
    18f6:	46ac      	mov	ip, r5
    18f8:	0035      	movs	r5, r6
    18fa:	4656      	mov	r6, sl
    18fc:	432e      	orrs	r6, r5
    18fe:	4665      	mov	r5, ip
    1900:	40af      	lsls	r7, r5
    1902:	1e7d      	subs	r5, r7, #1
    1904:	41af      	sbcs	r7, r5
    1906:	40dc      	lsrs	r4, r3
    1908:	4337      	orrs	r7, r6
    190a:	1bd7      	subs	r7, r2, r7
    190c:	42ba      	cmp	r2, r7
    190e:	4192      	sbcs	r2, r2
    1910:	1b0c      	subs	r4, r1, r4
    1912:	4252      	negs	r2, r2
    1914:	1aa4      	subs	r4, r4, r2
    1916:	0006      	movs	r6, r0
    1918:	46d8      	mov	r8, fp
    191a:	e6a3      	b.n	1664 <__aeabi_dadd+0xb0>
    191c:	4664      	mov	r4, ip
    191e:	4667      	mov	r7, ip
    1920:	432c      	orrs	r4, r5
    1922:	d000      	beq.n	1926 <__aeabi_dadd+0x372>
    1924:	e6a2      	b.n	166c <__aeabi_dadd+0xb8>
    1926:	2500      	movs	r5, #0
    1928:	2600      	movs	r6, #0
    192a:	2700      	movs	r7, #0
    192c:	e706      	b.n	173c <__aeabi_dadd+0x188>
    192e:	001e      	movs	r6, r3
    1930:	e6c4      	b.n	16bc <__aeabi_dadd+0x108>
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	000007ff 	.word	0x000007ff
    1938:	ff7fffff 	.word	0xff7fffff
    193c:	800fffff 	.word	0x800fffff
    1940:	2b1f      	cmp	r3, #31
    1942:	dc63      	bgt.n	1a0c <__aeabi_dadd+0x458>
    1944:	2020      	movs	r0, #32
    1946:	1ac3      	subs	r3, r0, r3
    1948:	0008      	movs	r0, r1
    194a:	4098      	lsls	r0, r3
    194c:	469c      	mov	ip, r3
    194e:	4683      	mov	fp, r0
    1950:	4653      	mov	r3, sl
    1952:	0010      	movs	r0, r2
    1954:	40d8      	lsrs	r0, r3
    1956:	0003      	movs	r3, r0
    1958:	4658      	mov	r0, fp
    195a:	4318      	orrs	r0, r3
    195c:	4663      	mov	r3, ip
    195e:	409a      	lsls	r2, r3
    1960:	1e53      	subs	r3, r2, #1
    1962:	419a      	sbcs	r2, r3
    1964:	4653      	mov	r3, sl
    1966:	4302      	orrs	r2, r0
    1968:	40d9      	lsrs	r1, r3
    196a:	e703      	b.n	1774 <__aeabi_dadd+0x1c0>
    196c:	0026      	movs	r6, r4
    196e:	433e      	orrs	r6, r7
    1970:	d006      	beq.n	1980 <__aeabi_dadd+0x3cc>
    1972:	43eb      	mvns	r3, r5
    1974:	4699      	mov	r9, r3
    1976:	2b00      	cmp	r3, #0
    1978:	d0c7      	beq.n	190a <__aeabi_dadd+0x356>
    197a:	4e94      	ldr	r6, [pc, #592]	; (1bcc <__aeabi_dadd+0x618>)
    197c:	42b0      	cmp	r0, r6
    197e:	d1ac      	bne.n	18da <__aeabi_dadd+0x326>
    1980:	000c      	movs	r4, r1
    1982:	0017      	movs	r7, r2
    1984:	0006      	movs	r6, r0
    1986:	46d8      	mov	r8, fp
    1988:	e698      	b.n	16bc <__aeabi_dadd+0x108>
    198a:	4b90      	ldr	r3, [pc, #576]	; (1bcc <__aeabi_dadd+0x618>)
    198c:	459a      	cmp	sl, r3
    198e:	d00b      	beq.n	19a8 <__aeabi_dadd+0x3f4>
    1990:	4682      	mov	sl, r0
    1992:	e6e7      	b.n	1764 <__aeabi_dadd+0x1b0>
    1994:	2800      	cmp	r0, #0
    1996:	d000      	beq.n	199a <__aeabi_dadd+0x3e6>
    1998:	e09e      	b.n	1ad8 <__aeabi_dadd+0x524>
    199a:	0018      	movs	r0, r3
    199c:	4310      	orrs	r0, r2
    199e:	d100      	bne.n	19a2 <__aeabi_dadd+0x3ee>
    19a0:	e0e9      	b.n	1b76 <__aeabi_dadd+0x5c2>
    19a2:	001c      	movs	r4, r3
    19a4:	0017      	movs	r7, r2
    19a6:	46d8      	mov	r8, fp
    19a8:	4e88      	ldr	r6, [pc, #544]	; (1bcc <__aeabi_dadd+0x618>)
    19aa:	e687      	b.n	16bc <__aeabi_dadd+0x108>
    19ac:	2500      	movs	r5, #0
    19ae:	e772      	b.n	1896 <__aeabi_dadd+0x2e2>
    19b0:	2100      	movs	r1, #0
    19b2:	e782      	b.n	18ba <__aeabi_dadd+0x306>
    19b4:	0023      	movs	r3, r4
    19b6:	433b      	orrs	r3, r7
    19b8:	2e00      	cmp	r6, #0
    19ba:	d000      	beq.n	19be <__aeabi_dadd+0x40a>
    19bc:	e0ab      	b.n	1b16 <__aeabi_dadd+0x562>
    19be:	2b00      	cmp	r3, #0
    19c0:	d100      	bne.n	19c4 <__aeabi_dadd+0x410>
    19c2:	e0e7      	b.n	1b94 <__aeabi_dadd+0x5e0>
    19c4:	000b      	movs	r3, r1
    19c6:	4313      	orrs	r3, r2
    19c8:	d100      	bne.n	19cc <__aeabi_dadd+0x418>
    19ca:	e677      	b.n	16bc <__aeabi_dadd+0x108>
    19cc:	18ba      	adds	r2, r7, r2
    19ce:	42ba      	cmp	r2, r7
    19d0:	41bf      	sbcs	r7, r7
    19d2:	1864      	adds	r4, r4, r1
    19d4:	427f      	negs	r7, r7
    19d6:	19e4      	adds	r4, r4, r7
    19d8:	0223      	lsls	r3, r4, #8
    19da:	d400      	bmi.n	19de <__aeabi_dadd+0x42a>
    19dc:	e0f2      	b.n	1bc4 <__aeabi_dadd+0x610>
    19de:	4b7c      	ldr	r3, [pc, #496]	; (1bd0 <__aeabi_dadd+0x61c>)
    19e0:	0017      	movs	r7, r2
    19e2:	401c      	ands	r4, r3
    19e4:	0006      	movs	r6, r0
    19e6:	e669      	b.n	16bc <__aeabi_dadd+0x108>
    19e8:	0020      	movs	r0, r4
    19ea:	4338      	orrs	r0, r7
    19ec:	2e00      	cmp	r6, #0
    19ee:	d1d1      	bne.n	1994 <__aeabi_dadd+0x3e0>
    19f0:	2800      	cmp	r0, #0
    19f2:	d15b      	bne.n	1aac <__aeabi_dadd+0x4f8>
    19f4:	001c      	movs	r4, r3
    19f6:	4314      	orrs	r4, r2
    19f8:	d100      	bne.n	19fc <__aeabi_dadd+0x448>
    19fa:	e0a8      	b.n	1b4e <__aeabi_dadd+0x59a>
    19fc:	001c      	movs	r4, r3
    19fe:	0017      	movs	r7, r2
    1a00:	46d8      	mov	r8, fp
    1a02:	e65b      	b.n	16bc <__aeabi_dadd+0x108>
    1a04:	0006      	movs	r6, r0
    1a06:	2400      	movs	r4, #0
    1a08:	2700      	movs	r7, #0
    1a0a:	e697      	b.n	173c <__aeabi_dadd+0x188>
    1a0c:	4650      	mov	r0, sl
    1a0e:	000b      	movs	r3, r1
    1a10:	3820      	subs	r0, #32
    1a12:	40c3      	lsrs	r3, r0
    1a14:	4699      	mov	r9, r3
    1a16:	4653      	mov	r3, sl
    1a18:	2b20      	cmp	r3, #32
    1a1a:	d100      	bne.n	1a1e <__aeabi_dadd+0x46a>
    1a1c:	e095      	b.n	1b4a <__aeabi_dadd+0x596>
    1a1e:	2340      	movs	r3, #64	; 0x40
    1a20:	4650      	mov	r0, sl
    1a22:	1a1b      	subs	r3, r3, r0
    1a24:	4099      	lsls	r1, r3
    1a26:	430a      	orrs	r2, r1
    1a28:	1e51      	subs	r1, r2, #1
    1a2a:	418a      	sbcs	r2, r1
    1a2c:	464b      	mov	r3, r9
    1a2e:	2100      	movs	r1, #0
    1a30:	431a      	orrs	r2, r3
    1a32:	e69f      	b.n	1774 <__aeabi_dadd+0x1c0>
    1a34:	2e00      	cmp	r6, #0
    1a36:	d130      	bne.n	1a9a <__aeabi_dadd+0x4e6>
    1a38:	0026      	movs	r6, r4
    1a3a:	433e      	orrs	r6, r7
    1a3c:	d067      	beq.n	1b0e <__aeabi_dadd+0x55a>
    1a3e:	43db      	mvns	r3, r3
    1a40:	469a      	mov	sl, r3
    1a42:	2b00      	cmp	r3, #0
    1a44:	d01c      	beq.n	1a80 <__aeabi_dadd+0x4cc>
    1a46:	4e61      	ldr	r6, [pc, #388]	; (1bcc <__aeabi_dadd+0x618>)
    1a48:	42b0      	cmp	r0, r6
    1a4a:	d060      	beq.n	1b0e <__aeabi_dadd+0x55a>
    1a4c:	4653      	mov	r3, sl
    1a4e:	2b38      	cmp	r3, #56	; 0x38
    1a50:	dd00      	ble.n	1a54 <__aeabi_dadd+0x4a0>
    1a52:	e096      	b.n	1b82 <__aeabi_dadd+0x5ce>
    1a54:	2b1f      	cmp	r3, #31
    1a56:	dd00      	ble.n	1a5a <__aeabi_dadd+0x4a6>
    1a58:	e09f      	b.n	1b9a <__aeabi_dadd+0x5e6>
    1a5a:	2620      	movs	r6, #32
    1a5c:	1af3      	subs	r3, r6, r3
    1a5e:	0026      	movs	r6, r4
    1a60:	409e      	lsls	r6, r3
    1a62:	469c      	mov	ip, r3
    1a64:	46b3      	mov	fp, r6
    1a66:	4653      	mov	r3, sl
    1a68:	003e      	movs	r6, r7
    1a6a:	40de      	lsrs	r6, r3
    1a6c:	0033      	movs	r3, r6
    1a6e:	465e      	mov	r6, fp
    1a70:	431e      	orrs	r6, r3
    1a72:	4663      	mov	r3, ip
    1a74:	409f      	lsls	r7, r3
    1a76:	1e7b      	subs	r3, r7, #1
    1a78:	419f      	sbcs	r7, r3
    1a7a:	4653      	mov	r3, sl
    1a7c:	40dc      	lsrs	r4, r3
    1a7e:	4337      	orrs	r7, r6
    1a80:	18bf      	adds	r7, r7, r2
    1a82:	4297      	cmp	r7, r2
    1a84:	4192      	sbcs	r2, r2
    1a86:	1864      	adds	r4, r4, r1
    1a88:	4252      	negs	r2, r2
    1a8a:	18a4      	adds	r4, r4, r2
    1a8c:	0006      	movs	r6, r0
    1a8e:	e678      	b.n	1782 <__aeabi_dadd+0x1ce>
    1a90:	4327      	orrs	r7, r4
    1a92:	1e7c      	subs	r4, r7, #1
    1a94:	41a7      	sbcs	r7, r4
    1a96:	2400      	movs	r4, #0
    1a98:	e737      	b.n	190a <__aeabi_dadd+0x356>
    1a9a:	4e4c      	ldr	r6, [pc, #304]	; (1bcc <__aeabi_dadd+0x618>)
    1a9c:	42b0      	cmp	r0, r6
    1a9e:	d036      	beq.n	1b0e <__aeabi_dadd+0x55a>
    1aa0:	2680      	movs	r6, #128	; 0x80
    1aa2:	425b      	negs	r3, r3
    1aa4:	0436      	lsls	r6, r6, #16
    1aa6:	469a      	mov	sl, r3
    1aa8:	4334      	orrs	r4, r6
    1aaa:	e7cf      	b.n	1a4c <__aeabi_dadd+0x498>
    1aac:	0018      	movs	r0, r3
    1aae:	4310      	orrs	r0, r2
    1ab0:	d100      	bne.n	1ab4 <__aeabi_dadd+0x500>
    1ab2:	e603      	b.n	16bc <__aeabi_dadd+0x108>
    1ab4:	1ab8      	subs	r0, r7, r2
    1ab6:	4684      	mov	ip, r0
    1ab8:	4567      	cmp	r7, ip
    1aba:	41ad      	sbcs	r5, r5
    1abc:	1ae0      	subs	r0, r4, r3
    1abe:	426d      	negs	r5, r5
    1ac0:	1b40      	subs	r0, r0, r5
    1ac2:	0205      	lsls	r5, r0, #8
    1ac4:	d400      	bmi.n	1ac8 <__aeabi_dadd+0x514>
    1ac6:	e62c      	b.n	1722 <__aeabi_dadd+0x16e>
    1ac8:	1bd7      	subs	r7, r2, r7
    1aca:	42ba      	cmp	r2, r7
    1acc:	4192      	sbcs	r2, r2
    1ace:	1b1c      	subs	r4, r3, r4
    1ad0:	4252      	negs	r2, r2
    1ad2:	1aa4      	subs	r4, r4, r2
    1ad4:	46d8      	mov	r8, fp
    1ad6:	e5f1      	b.n	16bc <__aeabi_dadd+0x108>
    1ad8:	0018      	movs	r0, r3
    1ada:	4310      	orrs	r0, r2
    1adc:	d100      	bne.n	1ae0 <__aeabi_dadd+0x52c>
    1ade:	e763      	b.n	19a8 <__aeabi_dadd+0x3f4>
    1ae0:	08f8      	lsrs	r0, r7, #3
    1ae2:	0767      	lsls	r7, r4, #29
    1ae4:	4307      	orrs	r7, r0
    1ae6:	2080      	movs	r0, #128	; 0x80
    1ae8:	08e4      	lsrs	r4, r4, #3
    1aea:	0300      	lsls	r0, r0, #12
    1aec:	4204      	tst	r4, r0
    1aee:	d008      	beq.n	1b02 <__aeabi_dadd+0x54e>
    1af0:	08dd      	lsrs	r5, r3, #3
    1af2:	4205      	tst	r5, r0
    1af4:	d105      	bne.n	1b02 <__aeabi_dadd+0x54e>
    1af6:	08d2      	lsrs	r2, r2, #3
    1af8:	0759      	lsls	r1, r3, #29
    1afa:	4311      	orrs	r1, r2
    1afc:	000f      	movs	r7, r1
    1afe:	002c      	movs	r4, r5
    1b00:	46d8      	mov	r8, fp
    1b02:	0f7b      	lsrs	r3, r7, #29
    1b04:	00e4      	lsls	r4, r4, #3
    1b06:	431c      	orrs	r4, r3
    1b08:	00ff      	lsls	r7, r7, #3
    1b0a:	4e30      	ldr	r6, [pc, #192]	; (1bcc <__aeabi_dadd+0x618>)
    1b0c:	e5d6      	b.n	16bc <__aeabi_dadd+0x108>
    1b0e:	000c      	movs	r4, r1
    1b10:	0017      	movs	r7, r2
    1b12:	0006      	movs	r6, r0
    1b14:	e5d2      	b.n	16bc <__aeabi_dadd+0x108>
    1b16:	2b00      	cmp	r3, #0
    1b18:	d038      	beq.n	1b8c <__aeabi_dadd+0x5d8>
    1b1a:	000b      	movs	r3, r1
    1b1c:	4313      	orrs	r3, r2
    1b1e:	d100      	bne.n	1b22 <__aeabi_dadd+0x56e>
    1b20:	e742      	b.n	19a8 <__aeabi_dadd+0x3f4>
    1b22:	08f8      	lsrs	r0, r7, #3
    1b24:	0767      	lsls	r7, r4, #29
    1b26:	4307      	orrs	r7, r0
    1b28:	2080      	movs	r0, #128	; 0x80
    1b2a:	08e4      	lsrs	r4, r4, #3
    1b2c:	0300      	lsls	r0, r0, #12
    1b2e:	4204      	tst	r4, r0
    1b30:	d0e7      	beq.n	1b02 <__aeabi_dadd+0x54e>
    1b32:	08cb      	lsrs	r3, r1, #3
    1b34:	4203      	tst	r3, r0
    1b36:	d1e4      	bne.n	1b02 <__aeabi_dadd+0x54e>
    1b38:	08d2      	lsrs	r2, r2, #3
    1b3a:	0749      	lsls	r1, r1, #29
    1b3c:	4311      	orrs	r1, r2
    1b3e:	000f      	movs	r7, r1
    1b40:	001c      	movs	r4, r3
    1b42:	e7de      	b.n	1b02 <__aeabi_dadd+0x54e>
    1b44:	2700      	movs	r7, #0
    1b46:	2400      	movs	r4, #0
    1b48:	e5d5      	b.n	16f6 <__aeabi_dadd+0x142>
    1b4a:	2100      	movs	r1, #0
    1b4c:	e76b      	b.n	1a26 <__aeabi_dadd+0x472>
    1b4e:	2500      	movs	r5, #0
    1b50:	2700      	movs	r7, #0
    1b52:	e5f3      	b.n	173c <__aeabi_dadd+0x188>
    1b54:	464e      	mov	r6, r9
    1b56:	0025      	movs	r5, r4
    1b58:	3e20      	subs	r6, #32
    1b5a:	40f5      	lsrs	r5, r6
    1b5c:	464b      	mov	r3, r9
    1b5e:	002e      	movs	r6, r5
    1b60:	2b20      	cmp	r3, #32
    1b62:	d02d      	beq.n	1bc0 <__aeabi_dadd+0x60c>
    1b64:	2540      	movs	r5, #64	; 0x40
    1b66:	1aed      	subs	r5, r5, r3
    1b68:	40ac      	lsls	r4, r5
    1b6a:	4327      	orrs	r7, r4
    1b6c:	1e7c      	subs	r4, r7, #1
    1b6e:	41a7      	sbcs	r7, r4
    1b70:	2400      	movs	r4, #0
    1b72:	4337      	orrs	r7, r6
    1b74:	e6c9      	b.n	190a <__aeabi_dadd+0x356>
    1b76:	2480      	movs	r4, #128	; 0x80
    1b78:	2500      	movs	r5, #0
    1b7a:	0324      	lsls	r4, r4, #12
    1b7c:	4e13      	ldr	r6, [pc, #76]	; (1bcc <__aeabi_dadd+0x618>)
    1b7e:	2700      	movs	r7, #0
    1b80:	e5dc      	b.n	173c <__aeabi_dadd+0x188>
    1b82:	4327      	orrs	r7, r4
    1b84:	1e7c      	subs	r4, r7, #1
    1b86:	41a7      	sbcs	r7, r4
    1b88:	2400      	movs	r4, #0
    1b8a:	e779      	b.n	1a80 <__aeabi_dadd+0x4cc>
    1b8c:	000c      	movs	r4, r1
    1b8e:	0017      	movs	r7, r2
    1b90:	4e0e      	ldr	r6, [pc, #56]	; (1bcc <__aeabi_dadd+0x618>)
    1b92:	e593      	b.n	16bc <__aeabi_dadd+0x108>
    1b94:	000c      	movs	r4, r1
    1b96:	0017      	movs	r7, r2
    1b98:	e590      	b.n	16bc <__aeabi_dadd+0x108>
    1b9a:	4656      	mov	r6, sl
    1b9c:	0023      	movs	r3, r4
    1b9e:	3e20      	subs	r6, #32
    1ba0:	40f3      	lsrs	r3, r6
    1ba2:	4699      	mov	r9, r3
    1ba4:	4653      	mov	r3, sl
    1ba6:	2b20      	cmp	r3, #32
    1ba8:	d00e      	beq.n	1bc8 <__aeabi_dadd+0x614>
    1baa:	2340      	movs	r3, #64	; 0x40
    1bac:	4656      	mov	r6, sl
    1bae:	1b9b      	subs	r3, r3, r6
    1bb0:	409c      	lsls	r4, r3
    1bb2:	4327      	orrs	r7, r4
    1bb4:	1e7c      	subs	r4, r7, #1
    1bb6:	41a7      	sbcs	r7, r4
    1bb8:	464b      	mov	r3, r9
    1bba:	2400      	movs	r4, #0
    1bbc:	431f      	orrs	r7, r3
    1bbe:	e75f      	b.n	1a80 <__aeabi_dadd+0x4cc>
    1bc0:	2400      	movs	r4, #0
    1bc2:	e7d2      	b.n	1b6a <__aeabi_dadd+0x5b6>
    1bc4:	0017      	movs	r7, r2
    1bc6:	e5b2      	b.n	172e <__aeabi_dadd+0x17a>
    1bc8:	2400      	movs	r4, #0
    1bca:	e7f2      	b.n	1bb2 <__aeabi_dadd+0x5fe>
    1bcc:	000007ff 	.word	0x000007ff
    1bd0:	ff7fffff 	.word	0xff7fffff

00001bd4 <__aeabi_ddiv>:
    1bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bd6:	4657      	mov	r7, sl
    1bd8:	4645      	mov	r5, r8
    1bda:	46de      	mov	lr, fp
    1bdc:	464e      	mov	r6, r9
    1bde:	b5e0      	push	{r5, r6, r7, lr}
    1be0:	004c      	lsls	r4, r1, #1
    1be2:	030e      	lsls	r6, r1, #12
    1be4:	b087      	sub	sp, #28
    1be6:	4683      	mov	fp, r0
    1be8:	4692      	mov	sl, r2
    1bea:	001d      	movs	r5, r3
    1bec:	4680      	mov	r8, r0
    1bee:	0b36      	lsrs	r6, r6, #12
    1bf0:	0d64      	lsrs	r4, r4, #21
    1bf2:	0fcf      	lsrs	r7, r1, #31
    1bf4:	2c00      	cmp	r4, #0
    1bf6:	d04f      	beq.n	1c98 <__aeabi_ddiv+0xc4>
    1bf8:	4b6f      	ldr	r3, [pc, #444]	; (1db8 <__aeabi_ddiv+0x1e4>)
    1bfa:	429c      	cmp	r4, r3
    1bfc:	d035      	beq.n	1c6a <__aeabi_ddiv+0x96>
    1bfe:	2380      	movs	r3, #128	; 0x80
    1c00:	0f42      	lsrs	r2, r0, #29
    1c02:	041b      	lsls	r3, r3, #16
    1c04:	00f6      	lsls	r6, r6, #3
    1c06:	4313      	orrs	r3, r2
    1c08:	4333      	orrs	r3, r6
    1c0a:	4699      	mov	r9, r3
    1c0c:	00c3      	lsls	r3, r0, #3
    1c0e:	4698      	mov	r8, r3
    1c10:	4b6a      	ldr	r3, [pc, #424]	; (1dbc <__aeabi_ddiv+0x1e8>)
    1c12:	2600      	movs	r6, #0
    1c14:	469c      	mov	ip, r3
    1c16:	2300      	movs	r3, #0
    1c18:	4464      	add	r4, ip
    1c1a:	9303      	str	r3, [sp, #12]
    1c1c:	032b      	lsls	r3, r5, #12
    1c1e:	0b1b      	lsrs	r3, r3, #12
    1c20:	469b      	mov	fp, r3
    1c22:	006b      	lsls	r3, r5, #1
    1c24:	0fed      	lsrs	r5, r5, #31
    1c26:	4650      	mov	r0, sl
    1c28:	0d5b      	lsrs	r3, r3, #21
    1c2a:	9501      	str	r5, [sp, #4]
    1c2c:	d05e      	beq.n	1cec <__aeabi_ddiv+0x118>
    1c2e:	4a62      	ldr	r2, [pc, #392]	; (1db8 <__aeabi_ddiv+0x1e4>)
    1c30:	4293      	cmp	r3, r2
    1c32:	d053      	beq.n	1cdc <__aeabi_ddiv+0x108>
    1c34:	465a      	mov	r2, fp
    1c36:	00d1      	lsls	r1, r2, #3
    1c38:	2280      	movs	r2, #128	; 0x80
    1c3a:	0f40      	lsrs	r0, r0, #29
    1c3c:	0412      	lsls	r2, r2, #16
    1c3e:	4302      	orrs	r2, r0
    1c40:	430a      	orrs	r2, r1
    1c42:	4693      	mov	fp, r2
    1c44:	4652      	mov	r2, sl
    1c46:	00d1      	lsls	r1, r2, #3
    1c48:	4a5c      	ldr	r2, [pc, #368]	; (1dbc <__aeabi_ddiv+0x1e8>)
    1c4a:	4694      	mov	ip, r2
    1c4c:	2200      	movs	r2, #0
    1c4e:	4463      	add	r3, ip
    1c50:	0038      	movs	r0, r7
    1c52:	4068      	eors	r0, r5
    1c54:	4684      	mov	ip, r0
    1c56:	9002      	str	r0, [sp, #8]
    1c58:	1ae4      	subs	r4, r4, r3
    1c5a:	4316      	orrs	r6, r2
    1c5c:	2e0f      	cmp	r6, #15
    1c5e:	d900      	bls.n	1c62 <__aeabi_ddiv+0x8e>
    1c60:	e0b4      	b.n	1dcc <__aeabi_ddiv+0x1f8>
    1c62:	4b57      	ldr	r3, [pc, #348]	; (1dc0 <__aeabi_ddiv+0x1ec>)
    1c64:	00b6      	lsls	r6, r6, #2
    1c66:	599b      	ldr	r3, [r3, r6]
    1c68:	469f      	mov	pc, r3
    1c6a:	0003      	movs	r3, r0
    1c6c:	4333      	orrs	r3, r6
    1c6e:	4699      	mov	r9, r3
    1c70:	d16c      	bne.n	1d4c <__aeabi_ddiv+0x178>
    1c72:	2300      	movs	r3, #0
    1c74:	4698      	mov	r8, r3
    1c76:	3302      	adds	r3, #2
    1c78:	2608      	movs	r6, #8
    1c7a:	9303      	str	r3, [sp, #12]
    1c7c:	e7ce      	b.n	1c1c <__aeabi_ddiv+0x48>
    1c7e:	46cb      	mov	fp, r9
    1c80:	4641      	mov	r1, r8
    1c82:	9a03      	ldr	r2, [sp, #12]
    1c84:	9701      	str	r7, [sp, #4]
    1c86:	2a02      	cmp	r2, #2
    1c88:	d165      	bne.n	1d56 <__aeabi_ddiv+0x182>
    1c8a:	9b01      	ldr	r3, [sp, #4]
    1c8c:	4c4a      	ldr	r4, [pc, #296]	; (1db8 <__aeabi_ddiv+0x1e4>)
    1c8e:	469c      	mov	ip, r3
    1c90:	2300      	movs	r3, #0
    1c92:	2200      	movs	r2, #0
    1c94:	4698      	mov	r8, r3
    1c96:	e06b      	b.n	1d70 <__aeabi_ddiv+0x19c>
    1c98:	0003      	movs	r3, r0
    1c9a:	4333      	orrs	r3, r6
    1c9c:	4699      	mov	r9, r3
    1c9e:	d04e      	beq.n	1d3e <__aeabi_ddiv+0x16a>
    1ca0:	2e00      	cmp	r6, #0
    1ca2:	d100      	bne.n	1ca6 <__aeabi_ddiv+0xd2>
    1ca4:	e1bc      	b.n	2020 <STACK_SIZE+0x20>
    1ca6:	0030      	movs	r0, r6
    1ca8:	f001 f8ca 	bl	2e40 <__clzsi2>
    1cac:	0003      	movs	r3, r0
    1cae:	3b0b      	subs	r3, #11
    1cb0:	2b1c      	cmp	r3, #28
    1cb2:	dd00      	ble.n	1cb6 <__aeabi_ddiv+0xe2>
    1cb4:	e1ac      	b.n	2010 <STACK_SIZE+0x10>
    1cb6:	221d      	movs	r2, #29
    1cb8:	1ad3      	subs	r3, r2, r3
    1cba:	465a      	mov	r2, fp
    1cbc:	0001      	movs	r1, r0
    1cbe:	40da      	lsrs	r2, r3
    1cc0:	3908      	subs	r1, #8
    1cc2:	408e      	lsls	r6, r1
    1cc4:	0013      	movs	r3, r2
    1cc6:	4333      	orrs	r3, r6
    1cc8:	4699      	mov	r9, r3
    1cca:	465b      	mov	r3, fp
    1ccc:	408b      	lsls	r3, r1
    1cce:	4698      	mov	r8, r3
    1cd0:	2300      	movs	r3, #0
    1cd2:	4c3c      	ldr	r4, [pc, #240]	; (1dc4 <__aeabi_ddiv+0x1f0>)
    1cd4:	2600      	movs	r6, #0
    1cd6:	1a24      	subs	r4, r4, r0
    1cd8:	9303      	str	r3, [sp, #12]
    1cda:	e79f      	b.n	1c1c <__aeabi_ddiv+0x48>
    1cdc:	4651      	mov	r1, sl
    1cde:	465a      	mov	r2, fp
    1ce0:	4311      	orrs	r1, r2
    1ce2:	d129      	bne.n	1d38 <__aeabi_ddiv+0x164>
    1ce4:	2200      	movs	r2, #0
    1ce6:	4693      	mov	fp, r2
    1ce8:	3202      	adds	r2, #2
    1cea:	e7b1      	b.n	1c50 <__aeabi_ddiv+0x7c>
    1cec:	4659      	mov	r1, fp
    1cee:	4301      	orrs	r1, r0
    1cf0:	d01e      	beq.n	1d30 <__aeabi_ddiv+0x15c>
    1cf2:	465b      	mov	r3, fp
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d100      	bne.n	1cfa <__aeabi_ddiv+0x126>
    1cf8:	e19e      	b.n	2038 <STACK_SIZE+0x38>
    1cfa:	4658      	mov	r0, fp
    1cfc:	f001 f8a0 	bl	2e40 <__clzsi2>
    1d00:	0003      	movs	r3, r0
    1d02:	3b0b      	subs	r3, #11
    1d04:	2b1c      	cmp	r3, #28
    1d06:	dd00      	ble.n	1d0a <__aeabi_ddiv+0x136>
    1d08:	e18f      	b.n	202a <STACK_SIZE+0x2a>
    1d0a:	0002      	movs	r2, r0
    1d0c:	4659      	mov	r1, fp
    1d0e:	3a08      	subs	r2, #8
    1d10:	4091      	lsls	r1, r2
    1d12:	468b      	mov	fp, r1
    1d14:	211d      	movs	r1, #29
    1d16:	1acb      	subs	r3, r1, r3
    1d18:	4651      	mov	r1, sl
    1d1a:	40d9      	lsrs	r1, r3
    1d1c:	000b      	movs	r3, r1
    1d1e:	4659      	mov	r1, fp
    1d20:	430b      	orrs	r3, r1
    1d22:	4651      	mov	r1, sl
    1d24:	469b      	mov	fp, r3
    1d26:	4091      	lsls	r1, r2
    1d28:	4b26      	ldr	r3, [pc, #152]	; (1dc4 <__aeabi_ddiv+0x1f0>)
    1d2a:	2200      	movs	r2, #0
    1d2c:	1a1b      	subs	r3, r3, r0
    1d2e:	e78f      	b.n	1c50 <__aeabi_ddiv+0x7c>
    1d30:	2300      	movs	r3, #0
    1d32:	2201      	movs	r2, #1
    1d34:	469b      	mov	fp, r3
    1d36:	e78b      	b.n	1c50 <__aeabi_ddiv+0x7c>
    1d38:	4651      	mov	r1, sl
    1d3a:	2203      	movs	r2, #3
    1d3c:	e788      	b.n	1c50 <__aeabi_ddiv+0x7c>
    1d3e:	2300      	movs	r3, #0
    1d40:	4698      	mov	r8, r3
    1d42:	3301      	adds	r3, #1
    1d44:	2604      	movs	r6, #4
    1d46:	2400      	movs	r4, #0
    1d48:	9303      	str	r3, [sp, #12]
    1d4a:	e767      	b.n	1c1c <__aeabi_ddiv+0x48>
    1d4c:	2303      	movs	r3, #3
    1d4e:	46b1      	mov	r9, r6
    1d50:	9303      	str	r3, [sp, #12]
    1d52:	260c      	movs	r6, #12
    1d54:	e762      	b.n	1c1c <__aeabi_ddiv+0x48>
    1d56:	2a03      	cmp	r2, #3
    1d58:	d100      	bne.n	1d5c <__aeabi_ddiv+0x188>
    1d5a:	e25c      	b.n	2216 <STACK_SIZE+0x216>
    1d5c:	9b01      	ldr	r3, [sp, #4]
    1d5e:	2a01      	cmp	r2, #1
    1d60:	d000      	beq.n	1d64 <__aeabi_ddiv+0x190>
    1d62:	e1e4      	b.n	212e <STACK_SIZE+0x12e>
    1d64:	4013      	ands	r3, r2
    1d66:	469c      	mov	ip, r3
    1d68:	2300      	movs	r3, #0
    1d6a:	2400      	movs	r4, #0
    1d6c:	2200      	movs	r2, #0
    1d6e:	4698      	mov	r8, r3
    1d70:	2100      	movs	r1, #0
    1d72:	0312      	lsls	r2, r2, #12
    1d74:	0b13      	lsrs	r3, r2, #12
    1d76:	0d0a      	lsrs	r2, r1, #20
    1d78:	0512      	lsls	r2, r2, #20
    1d7a:	431a      	orrs	r2, r3
    1d7c:	0523      	lsls	r3, r4, #20
    1d7e:	4c12      	ldr	r4, [pc, #72]	; (1dc8 <__aeabi_ddiv+0x1f4>)
    1d80:	4640      	mov	r0, r8
    1d82:	4022      	ands	r2, r4
    1d84:	4313      	orrs	r3, r2
    1d86:	4662      	mov	r2, ip
    1d88:	005b      	lsls	r3, r3, #1
    1d8a:	07d2      	lsls	r2, r2, #31
    1d8c:	085b      	lsrs	r3, r3, #1
    1d8e:	4313      	orrs	r3, r2
    1d90:	0019      	movs	r1, r3
    1d92:	b007      	add	sp, #28
    1d94:	bc3c      	pop	{r2, r3, r4, r5}
    1d96:	4690      	mov	r8, r2
    1d98:	4699      	mov	r9, r3
    1d9a:	46a2      	mov	sl, r4
    1d9c:	46ab      	mov	fp, r5
    1d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1da0:	2300      	movs	r3, #0
    1da2:	2280      	movs	r2, #128	; 0x80
    1da4:	469c      	mov	ip, r3
    1da6:	0312      	lsls	r2, r2, #12
    1da8:	4698      	mov	r8, r3
    1daa:	4c03      	ldr	r4, [pc, #12]	; (1db8 <__aeabi_ddiv+0x1e4>)
    1dac:	e7e0      	b.n	1d70 <__aeabi_ddiv+0x19c>
    1dae:	2300      	movs	r3, #0
    1db0:	4c01      	ldr	r4, [pc, #4]	; (1db8 <__aeabi_ddiv+0x1e4>)
    1db2:	2200      	movs	r2, #0
    1db4:	4698      	mov	r8, r3
    1db6:	e7db      	b.n	1d70 <__aeabi_ddiv+0x19c>
    1db8:	000007ff 	.word	0x000007ff
    1dbc:	fffffc01 	.word	0xfffffc01
    1dc0:	00002f30 	.word	0x00002f30
    1dc4:	fffffc0d 	.word	0xfffffc0d
    1dc8:	800fffff 	.word	0x800fffff
    1dcc:	45d9      	cmp	r9, fp
    1dce:	d900      	bls.n	1dd2 <__aeabi_ddiv+0x1fe>
    1dd0:	e139      	b.n	2046 <STACK_SIZE+0x46>
    1dd2:	d100      	bne.n	1dd6 <__aeabi_ddiv+0x202>
    1dd4:	e134      	b.n	2040 <STACK_SIZE+0x40>
    1dd6:	2300      	movs	r3, #0
    1dd8:	4646      	mov	r6, r8
    1dda:	464d      	mov	r5, r9
    1ddc:	469a      	mov	sl, r3
    1dde:	3c01      	subs	r4, #1
    1de0:	465b      	mov	r3, fp
    1de2:	0e0a      	lsrs	r2, r1, #24
    1de4:	021b      	lsls	r3, r3, #8
    1de6:	431a      	orrs	r2, r3
    1de8:	020b      	lsls	r3, r1, #8
    1dea:	0c17      	lsrs	r7, r2, #16
    1dec:	9303      	str	r3, [sp, #12]
    1dee:	0413      	lsls	r3, r2, #16
    1df0:	0c1b      	lsrs	r3, r3, #16
    1df2:	0039      	movs	r1, r7
    1df4:	0028      	movs	r0, r5
    1df6:	4690      	mov	r8, r2
    1df8:	9301      	str	r3, [sp, #4]
    1dfa:	f7ff fb4f 	bl	149c <__udivsi3>
    1dfe:	0002      	movs	r2, r0
    1e00:	9b01      	ldr	r3, [sp, #4]
    1e02:	4683      	mov	fp, r0
    1e04:	435a      	muls	r2, r3
    1e06:	0028      	movs	r0, r5
    1e08:	0039      	movs	r1, r7
    1e0a:	4691      	mov	r9, r2
    1e0c:	f7ff fbcc 	bl	15a8 <__aeabi_uidivmod>
    1e10:	0c35      	lsrs	r5, r6, #16
    1e12:	0409      	lsls	r1, r1, #16
    1e14:	430d      	orrs	r5, r1
    1e16:	45a9      	cmp	r9, r5
    1e18:	d90d      	bls.n	1e36 <__aeabi_ddiv+0x262>
    1e1a:	465b      	mov	r3, fp
    1e1c:	4445      	add	r5, r8
    1e1e:	3b01      	subs	r3, #1
    1e20:	45a8      	cmp	r8, r5
    1e22:	d900      	bls.n	1e26 <__aeabi_ddiv+0x252>
    1e24:	e13a      	b.n	209c <STACK_SIZE+0x9c>
    1e26:	45a9      	cmp	r9, r5
    1e28:	d800      	bhi.n	1e2c <__aeabi_ddiv+0x258>
    1e2a:	e137      	b.n	209c <STACK_SIZE+0x9c>
    1e2c:	2302      	movs	r3, #2
    1e2e:	425b      	negs	r3, r3
    1e30:	469c      	mov	ip, r3
    1e32:	4445      	add	r5, r8
    1e34:	44e3      	add	fp, ip
    1e36:	464b      	mov	r3, r9
    1e38:	1aeb      	subs	r3, r5, r3
    1e3a:	0039      	movs	r1, r7
    1e3c:	0018      	movs	r0, r3
    1e3e:	9304      	str	r3, [sp, #16]
    1e40:	f7ff fb2c 	bl	149c <__udivsi3>
    1e44:	9b01      	ldr	r3, [sp, #4]
    1e46:	0005      	movs	r5, r0
    1e48:	4343      	muls	r3, r0
    1e4a:	0039      	movs	r1, r7
    1e4c:	9804      	ldr	r0, [sp, #16]
    1e4e:	4699      	mov	r9, r3
    1e50:	f7ff fbaa 	bl	15a8 <__aeabi_uidivmod>
    1e54:	0433      	lsls	r3, r6, #16
    1e56:	0409      	lsls	r1, r1, #16
    1e58:	0c1b      	lsrs	r3, r3, #16
    1e5a:	430b      	orrs	r3, r1
    1e5c:	4599      	cmp	r9, r3
    1e5e:	d909      	bls.n	1e74 <__aeabi_ddiv+0x2a0>
    1e60:	4443      	add	r3, r8
    1e62:	1e6a      	subs	r2, r5, #1
    1e64:	4598      	cmp	r8, r3
    1e66:	d900      	bls.n	1e6a <__aeabi_ddiv+0x296>
    1e68:	e11a      	b.n	20a0 <STACK_SIZE+0xa0>
    1e6a:	4599      	cmp	r9, r3
    1e6c:	d800      	bhi.n	1e70 <__aeabi_ddiv+0x29c>
    1e6e:	e117      	b.n	20a0 <STACK_SIZE+0xa0>
    1e70:	3d02      	subs	r5, #2
    1e72:	4443      	add	r3, r8
    1e74:	464a      	mov	r2, r9
    1e76:	1a9b      	subs	r3, r3, r2
    1e78:	465a      	mov	r2, fp
    1e7a:	0412      	lsls	r2, r2, #16
    1e7c:	432a      	orrs	r2, r5
    1e7e:	9903      	ldr	r1, [sp, #12]
    1e80:	4693      	mov	fp, r2
    1e82:	0c10      	lsrs	r0, r2, #16
    1e84:	0c0a      	lsrs	r2, r1, #16
    1e86:	4691      	mov	r9, r2
    1e88:	0409      	lsls	r1, r1, #16
    1e8a:	465a      	mov	r2, fp
    1e8c:	0c09      	lsrs	r1, r1, #16
    1e8e:	464e      	mov	r6, r9
    1e90:	000d      	movs	r5, r1
    1e92:	0412      	lsls	r2, r2, #16
    1e94:	0c12      	lsrs	r2, r2, #16
    1e96:	4345      	muls	r5, r0
    1e98:	9105      	str	r1, [sp, #20]
    1e9a:	4351      	muls	r1, r2
    1e9c:	4372      	muls	r2, r6
    1e9e:	4370      	muls	r0, r6
    1ea0:	1952      	adds	r2, r2, r5
    1ea2:	0c0e      	lsrs	r6, r1, #16
    1ea4:	18b2      	adds	r2, r6, r2
    1ea6:	4295      	cmp	r5, r2
    1ea8:	d903      	bls.n	1eb2 <__aeabi_ddiv+0x2de>
    1eaa:	2580      	movs	r5, #128	; 0x80
    1eac:	026d      	lsls	r5, r5, #9
    1eae:	46ac      	mov	ip, r5
    1eb0:	4460      	add	r0, ip
    1eb2:	0c15      	lsrs	r5, r2, #16
    1eb4:	0409      	lsls	r1, r1, #16
    1eb6:	0412      	lsls	r2, r2, #16
    1eb8:	0c09      	lsrs	r1, r1, #16
    1eba:	1828      	adds	r0, r5, r0
    1ebc:	1852      	adds	r2, r2, r1
    1ebe:	4283      	cmp	r3, r0
    1ec0:	d200      	bcs.n	1ec4 <__aeabi_ddiv+0x2f0>
    1ec2:	e0ce      	b.n	2062 <STACK_SIZE+0x62>
    1ec4:	d100      	bne.n	1ec8 <__aeabi_ddiv+0x2f4>
    1ec6:	e0c8      	b.n	205a <STACK_SIZE+0x5a>
    1ec8:	1a1d      	subs	r5, r3, r0
    1eca:	4653      	mov	r3, sl
    1ecc:	1a9e      	subs	r6, r3, r2
    1ece:	45b2      	cmp	sl, r6
    1ed0:	4192      	sbcs	r2, r2
    1ed2:	4252      	negs	r2, r2
    1ed4:	1aab      	subs	r3, r5, r2
    1ed6:	469a      	mov	sl, r3
    1ed8:	4598      	cmp	r8, r3
    1eda:	d100      	bne.n	1ede <__aeabi_ddiv+0x30a>
    1edc:	e117      	b.n	210e <STACK_SIZE+0x10e>
    1ede:	0039      	movs	r1, r7
    1ee0:	0018      	movs	r0, r3
    1ee2:	f7ff fadb 	bl	149c <__udivsi3>
    1ee6:	9b01      	ldr	r3, [sp, #4]
    1ee8:	0005      	movs	r5, r0
    1eea:	4343      	muls	r3, r0
    1eec:	0039      	movs	r1, r7
    1eee:	4650      	mov	r0, sl
    1ef0:	9304      	str	r3, [sp, #16]
    1ef2:	f7ff fb59 	bl	15a8 <__aeabi_uidivmod>
    1ef6:	9804      	ldr	r0, [sp, #16]
    1ef8:	040b      	lsls	r3, r1, #16
    1efa:	0c31      	lsrs	r1, r6, #16
    1efc:	4319      	orrs	r1, r3
    1efe:	4288      	cmp	r0, r1
    1f00:	d909      	bls.n	1f16 <__aeabi_ddiv+0x342>
    1f02:	4441      	add	r1, r8
    1f04:	1e6b      	subs	r3, r5, #1
    1f06:	4588      	cmp	r8, r1
    1f08:	d900      	bls.n	1f0c <__aeabi_ddiv+0x338>
    1f0a:	e107      	b.n	211c <STACK_SIZE+0x11c>
    1f0c:	4288      	cmp	r0, r1
    1f0e:	d800      	bhi.n	1f12 <__aeabi_ddiv+0x33e>
    1f10:	e104      	b.n	211c <STACK_SIZE+0x11c>
    1f12:	3d02      	subs	r5, #2
    1f14:	4441      	add	r1, r8
    1f16:	9b04      	ldr	r3, [sp, #16]
    1f18:	1acb      	subs	r3, r1, r3
    1f1a:	0018      	movs	r0, r3
    1f1c:	0039      	movs	r1, r7
    1f1e:	9304      	str	r3, [sp, #16]
    1f20:	f7ff fabc 	bl	149c <__udivsi3>
    1f24:	9b01      	ldr	r3, [sp, #4]
    1f26:	4682      	mov	sl, r0
    1f28:	4343      	muls	r3, r0
    1f2a:	0039      	movs	r1, r7
    1f2c:	9804      	ldr	r0, [sp, #16]
    1f2e:	9301      	str	r3, [sp, #4]
    1f30:	f7ff fb3a 	bl	15a8 <__aeabi_uidivmod>
    1f34:	9801      	ldr	r0, [sp, #4]
    1f36:	040b      	lsls	r3, r1, #16
    1f38:	0431      	lsls	r1, r6, #16
    1f3a:	0c09      	lsrs	r1, r1, #16
    1f3c:	4319      	orrs	r1, r3
    1f3e:	4288      	cmp	r0, r1
    1f40:	d90d      	bls.n	1f5e <__aeabi_ddiv+0x38a>
    1f42:	4653      	mov	r3, sl
    1f44:	4441      	add	r1, r8
    1f46:	3b01      	subs	r3, #1
    1f48:	4588      	cmp	r8, r1
    1f4a:	d900      	bls.n	1f4e <__aeabi_ddiv+0x37a>
    1f4c:	e0e8      	b.n	2120 <STACK_SIZE+0x120>
    1f4e:	4288      	cmp	r0, r1
    1f50:	d800      	bhi.n	1f54 <__aeabi_ddiv+0x380>
    1f52:	e0e5      	b.n	2120 <STACK_SIZE+0x120>
    1f54:	2302      	movs	r3, #2
    1f56:	425b      	negs	r3, r3
    1f58:	469c      	mov	ip, r3
    1f5a:	4441      	add	r1, r8
    1f5c:	44e2      	add	sl, ip
    1f5e:	9b01      	ldr	r3, [sp, #4]
    1f60:	042d      	lsls	r5, r5, #16
    1f62:	1ace      	subs	r6, r1, r3
    1f64:	4651      	mov	r1, sl
    1f66:	4329      	orrs	r1, r5
    1f68:	9d05      	ldr	r5, [sp, #20]
    1f6a:	464f      	mov	r7, r9
    1f6c:	002a      	movs	r2, r5
    1f6e:	040b      	lsls	r3, r1, #16
    1f70:	0c08      	lsrs	r0, r1, #16
    1f72:	0c1b      	lsrs	r3, r3, #16
    1f74:	435a      	muls	r2, r3
    1f76:	4345      	muls	r5, r0
    1f78:	437b      	muls	r3, r7
    1f7a:	4378      	muls	r0, r7
    1f7c:	195b      	adds	r3, r3, r5
    1f7e:	0c17      	lsrs	r7, r2, #16
    1f80:	18fb      	adds	r3, r7, r3
    1f82:	429d      	cmp	r5, r3
    1f84:	d903      	bls.n	1f8e <__aeabi_ddiv+0x3ba>
    1f86:	2580      	movs	r5, #128	; 0x80
    1f88:	026d      	lsls	r5, r5, #9
    1f8a:	46ac      	mov	ip, r5
    1f8c:	4460      	add	r0, ip
    1f8e:	0c1d      	lsrs	r5, r3, #16
    1f90:	0412      	lsls	r2, r2, #16
    1f92:	041b      	lsls	r3, r3, #16
    1f94:	0c12      	lsrs	r2, r2, #16
    1f96:	1828      	adds	r0, r5, r0
    1f98:	189b      	adds	r3, r3, r2
    1f9a:	4286      	cmp	r6, r0
    1f9c:	d200      	bcs.n	1fa0 <__aeabi_ddiv+0x3cc>
    1f9e:	e093      	b.n	20c8 <STACK_SIZE+0xc8>
    1fa0:	d100      	bne.n	1fa4 <__aeabi_ddiv+0x3d0>
    1fa2:	e08e      	b.n	20c2 <STACK_SIZE+0xc2>
    1fa4:	2301      	movs	r3, #1
    1fa6:	4319      	orrs	r1, r3
    1fa8:	4ba0      	ldr	r3, [pc, #640]	; (222c <STACK_SIZE+0x22c>)
    1faa:	18e3      	adds	r3, r4, r3
    1fac:	2b00      	cmp	r3, #0
    1fae:	dc00      	bgt.n	1fb2 <__aeabi_ddiv+0x3de>
    1fb0:	e099      	b.n	20e6 <STACK_SIZE+0xe6>
    1fb2:	074a      	lsls	r2, r1, #29
    1fb4:	d000      	beq.n	1fb8 <__aeabi_ddiv+0x3e4>
    1fb6:	e09e      	b.n	20f6 <STACK_SIZE+0xf6>
    1fb8:	465a      	mov	r2, fp
    1fba:	01d2      	lsls	r2, r2, #7
    1fbc:	d506      	bpl.n	1fcc <__aeabi_ddiv+0x3f8>
    1fbe:	465a      	mov	r2, fp
    1fc0:	4b9b      	ldr	r3, [pc, #620]	; (2230 <STACK_SIZE+0x230>)
    1fc2:	401a      	ands	r2, r3
    1fc4:	2380      	movs	r3, #128	; 0x80
    1fc6:	4693      	mov	fp, r2
    1fc8:	00db      	lsls	r3, r3, #3
    1fca:	18e3      	adds	r3, r4, r3
    1fcc:	4a99      	ldr	r2, [pc, #612]	; (2234 <STACK_SIZE+0x234>)
    1fce:	4293      	cmp	r3, r2
    1fd0:	dd68      	ble.n	20a4 <STACK_SIZE+0xa4>
    1fd2:	2301      	movs	r3, #1
    1fd4:	9a02      	ldr	r2, [sp, #8]
    1fd6:	4c98      	ldr	r4, [pc, #608]	; (2238 <STACK_SIZE+0x238>)
    1fd8:	401a      	ands	r2, r3
    1fda:	2300      	movs	r3, #0
    1fdc:	4694      	mov	ip, r2
    1fde:	4698      	mov	r8, r3
    1fe0:	2200      	movs	r2, #0
    1fe2:	e6c5      	b.n	1d70 <__aeabi_ddiv+0x19c>
    1fe4:	2280      	movs	r2, #128	; 0x80
    1fe6:	464b      	mov	r3, r9
    1fe8:	0312      	lsls	r2, r2, #12
    1fea:	4213      	tst	r3, r2
    1fec:	d00a      	beq.n	2004 <STACK_SIZE+0x4>
    1fee:	465b      	mov	r3, fp
    1ff0:	4213      	tst	r3, r2
    1ff2:	d106      	bne.n	2002 <STACK_SIZE+0x2>
    1ff4:	431a      	orrs	r2, r3
    1ff6:	0312      	lsls	r2, r2, #12
    1ff8:	0b12      	lsrs	r2, r2, #12
    1ffa:	46ac      	mov	ip, r5
    1ffc:	4688      	mov	r8, r1
    1ffe:	4c8e      	ldr	r4, [pc, #568]	; (2238 <STACK_SIZE+0x238>)
    2000:	e6b6      	b.n	1d70 <__aeabi_ddiv+0x19c>
    2002:	464b      	mov	r3, r9
    2004:	431a      	orrs	r2, r3
    2006:	0312      	lsls	r2, r2, #12
    2008:	0b12      	lsrs	r2, r2, #12
    200a:	46bc      	mov	ip, r7
    200c:	4c8a      	ldr	r4, [pc, #552]	; (2238 <STACK_SIZE+0x238>)
    200e:	e6af      	b.n	1d70 <__aeabi_ddiv+0x19c>
    2010:	0003      	movs	r3, r0
    2012:	465a      	mov	r2, fp
    2014:	3b28      	subs	r3, #40	; 0x28
    2016:	409a      	lsls	r2, r3
    2018:	2300      	movs	r3, #0
    201a:	4691      	mov	r9, r2
    201c:	4698      	mov	r8, r3
    201e:	e657      	b.n	1cd0 <__aeabi_ddiv+0xfc>
    2020:	4658      	mov	r0, fp
    2022:	f000 ff0d 	bl	2e40 <__clzsi2>
    2026:	3020      	adds	r0, #32
    2028:	e640      	b.n	1cac <__aeabi_ddiv+0xd8>
    202a:	0003      	movs	r3, r0
    202c:	4652      	mov	r2, sl
    202e:	3b28      	subs	r3, #40	; 0x28
    2030:	409a      	lsls	r2, r3
    2032:	2100      	movs	r1, #0
    2034:	4693      	mov	fp, r2
    2036:	e677      	b.n	1d28 <__aeabi_ddiv+0x154>
    2038:	f000 ff02 	bl	2e40 <__clzsi2>
    203c:	3020      	adds	r0, #32
    203e:	e65f      	b.n	1d00 <__aeabi_ddiv+0x12c>
    2040:	4588      	cmp	r8, r1
    2042:	d200      	bcs.n	2046 <STACK_SIZE+0x46>
    2044:	e6c7      	b.n	1dd6 <__aeabi_ddiv+0x202>
    2046:	464b      	mov	r3, r9
    2048:	07de      	lsls	r6, r3, #31
    204a:	085d      	lsrs	r5, r3, #1
    204c:	4643      	mov	r3, r8
    204e:	085b      	lsrs	r3, r3, #1
    2050:	431e      	orrs	r6, r3
    2052:	4643      	mov	r3, r8
    2054:	07db      	lsls	r3, r3, #31
    2056:	469a      	mov	sl, r3
    2058:	e6c2      	b.n	1de0 <__aeabi_ddiv+0x20c>
    205a:	2500      	movs	r5, #0
    205c:	4592      	cmp	sl, r2
    205e:	d300      	bcc.n	2062 <STACK_SIZE+0x62>
    2060:	e733      	b.n	1eca <__aeabi_ddiv+0x2f6>
    2062:	9e03      	ldr	r6, [sp, #12]
    2064:	4659      	mov	r1, fp
    2066:	46b4      	mov	ip, r6
    2068:	44e2      	add	sl, ip
    206a:	45b2      	cmp	sl, r6
    206c:	41ad      	sbcs	r5, r5
    206e:	426d      	negs	r5, r5
    2070:	4445      	add	r5, r8
    2072:	18eb      	adds	r3, r5, r3
    2074:	3901      	subs	r1, #1
    2076:	4598      	cmp	r8, r3
    2078:	d207      	bcs.n	208a <STACK_SIZE+0x8a>
    207a:	4298      	cmp	r0, r3
    207c:	d900      	bls.n	2080 <STACK_SIZE+0x80>
    207e:	e07f      	b.n	2180 <STACK_SIZE+0x180>
    2080:	d100      	bne.n	2084 <STACK_SIZE+0x84>
    2082:	e0bc      	b.n	21fe <STACK_SIZE+0x1fe>
    2084:	1a1d      	subs	r5, r3, r0
    2086:	468b      	mov	fp, r1
    2088:	e71f      	b.n	1eca <__aeabi_ddiv+0x2f6>
    208a:	4598      	cmp	r8, r3
    208c:	d1fa      	bne.n	2084 <STACK_SIZE+0x84>
    208e:	9d03      	ldr	r5, [sp, #12]
    2090:	4555      	cmp	r5, sl
    2092:	d9f2      	bls.n	207a <STACK_SIZE+0x7a>
    2094:	4643      	mov	r3, r8
    2096:	468b      	mov	fp, r1
    2098:	1a1d      	subs	r5, r3, r0
    209a:	e716      	b.n	1eca <__aeabi_ddiv+0x2f6>
    209c:	469b      	mov	fp, r3
    209e:	e6ca      	b.n	1e36 <__aeabi_ddiv+0x262>
    20a0:	0015      	movs	r5, r2
    20a2:	e6e7      	b.n	1e74 <__aeabi_ddiv+0x2a0>
    20a4:	465a      	mov	r2, fp
    20a6:	08c9      	lsrs	r1, r1, #3
    20a8:	0752      	lsls	r2, r2, #29
    20aa:	430a      	orrs	r2, r1
    20ac:	055b      	lsls	r3, r3, #21
    20ae:	4690      	mov	r8, r2
    20b0:	0d5c      	lsrs	r4, r3, #21
    20b2:	465a      	mov	r2, fp
    20b4:	2301      	movs	r3, #1
    20b6:	9902      	ldr	r1, [sp, #8]
    20b8:	0252      	lsls	r2, r2, #9
    20ba:	4019      	ands	r1, r3
    20bc:	0b12      	lsrs	r2, r2, #12
    20be:	468c      	mov	ip, r1
    20c0:	e656      	b.n	1d70 <__aeabi_ddiv+0x19c>
    20c2:	2b00      	cmp	r3, #0
    20c4:	d100      	bne.n	20c8 <STACK_SIZE+0xc8>
    20c6:	e76f      	b.n	1fa8 <__aeabi_ddiv+0x3d4>
    20c8:	4446      	add	r6, r8
    20ca:	1e4a      	subs	r2, r1, #1
    20cc:	45b0      	cmp	r8, r6
    20ce:	d929      	bls.n	2124 <STACK_SIZE+0x124>
    20d0:	0011      	movs	r1, r2
    20d2:	4286      	cmp	r6, r0
    20d4:	d000      	beq.n	20d8 <STACK_SIZE+0xd8>
    20d6:	e765      	b.n	1fa4 <__aeabi_ddiv+0x3d0>
    20d8:	9a03      	ldr	r2, [sp, #12]
    20da:	4293      	cmp	r3, r2
    20dc:	d000      	beq.n	20e0 <STACK_SIZE+0xe0>
    20de:	e761      	b.n	1fa4 <__aeabi_ddiv+0x3d0>
    20e0:	e762      	b.n	1fa8 <__aeabi_ddiv+0x3d4>
    20e2:	2101      	movs	r1, #1
    20e4:	4249      	negs	r1, r1
    20e6:	2001      	movs	r0, #1
    20e8:	1ac2      	subs	r2, r0, r3
    20ea:	2a38      	cmp	r2, #56	; 0x38
    20ec:	dd21      	ble.n	2132 <STACK_SIZE+0x132>
    20ee:	9b02      	ldr	r3, [sp, #8]
    20f0:	4003      	ands	r3, r0
    20f2:	469c      	mov	ip, r3
    20f4:	e638      	b.n	1d68 <__aeabi_ddiv+0x194>
    20f6:	220f      	movs	r2, #15
    20f8:	400a      	ands	r2, r1
    20fa:	2a04      	cmp	r2, #4
    20fc:	d100      	bne.n	2100 <STACK_SIZE+0x100>
    20fe:	e75b      	b.n	1fb8 <__aeabi_ddiv+0x3e4>
    2100:	000a      	movs	r2, r1
    2102:	1d11      	adds	r1, r2, #4
    2104:	4291      	cmp	r1, r2
    2106:	4192      	sbcs	r2, r2
    2108:	4252      	negs	r2, r2
    210a:	4493      	add	fp, r2
    210c:	e754      	b.n	1fb8 <__aeabi_ddiv+0x3e4>
    210e:	4b47      	ldr	r3, [pc, #284]	; (222c <STACK_SIZE+0x22c>)
    2110:	18e3      	adds	r3, r4, r3
    2112:	2b00      	cmp	r3, #0
    2114:	dde5      	ble.n	20e2 <STACK_SIZE+0xe2>
    2116:	2201      	movs	r2, #1
    2118:	4252      	negs	r2, r2
    211a:	e7f2      	b.n	2102 <STACK_SIZE+0x102>
    211c:	001d      	movs	r5, r3
    211e:	e6fa      	b.n	1f16 <__aeabi_ddiv+0x342>
    2120:	469a      	mov	sl, r3
    2122:	e71c      	b.n	1f5e <__aeabi_ddiv+0x38a>
    2124:	42b0      	cmp	r0, r6
    2126:	d839      	bhi.n	219c <STACK_SIZE+0x19c>
    2128:	d06e      	beq.n	2208 <STACK_SIZE+0x208>
    212a:	0011      	movs	r1, r2
    212c:	e73a      	b.n	1fa4 <__aeabi_ddiv+0x3d0>
    212e:	9302      	str	r3, [sp, #8]
    2130:	e73a      	b.n	1fa8 <__aeabi_ddiv+0x3d4>
    2132:	2a1f      	cmp	r2, #31
    2134:	dc3c      	bgt.n	21b0 <STACK_SIZE+0x1b0>
    2136:	2320      	movs	r3, #32
    2138:	1a9b      	subs	r3, r3, r2
    213a:	000c      	movs	r4, r1
    213c:	4658      	mov	r0, fp
    213e:	4099      	lsls	r1, r3
    2140:	4098      	lsls	r0, r3
    2142:	1e4b      	subs	r3, r1, #1
    2144:	4199      	sbcs	r1, r3
    2146:	465b      	mov	r3, fp
    2148:	40d4      	lsrs	r4, r2
    214a:	40d3      	lsrs	r3, r2
    214c:	4320      	orrs	r0, r4
    214e:	4308      	orrs	r0, r1
    2150:	001a      	movs	r2, r3
    2152:	0743      	lsls	r3, r0, #29
    2154:	d009      	beq.n	216a <STACK_SIZE+0x16a>
    2156:	230f      	movs	r3, #15
    2158:	4003      	ands	r3, r0
    215a:	2b04      	cmp	r3, #4
    215c:	d005      	beq.n	216a <STACK_SIZE+0x16a>
    215e:	0001      	movs	r1, r0
    2160:	1d08      	adds	r0, r1, #4
    2162:	4288      	cmp	r0, r1
    2164:	419b      	sbcs	r3, r3
    2166:	425b      	negs	r3, r3
    2168:	18d2      	adds	r2, r2, r3
    216a:	0213      	lsls	r3, r2, #8
    216c:	d53a      	bpl.n	21e4 <STACK_SIZE+0x1e4>
    216e:	2301      	movs	r3, #1
    2170:	9a02      	ldr	r2, [sp, #8]
    2172:	2401      	movs	r4, #1
    2174:	401a      	ands	r2, r3
    2176:	2300      	movs	r3, #0
    2178:	4694      	mov	ip, r2
    217a:	4698      	mov	r8, r3
    217c:	2200      	movs	r2, #0
    217e:	e5f7      	b.n	1d70 <__aeabi_ddiv+0x19c>
    2180:	2102      	movs	r1, #2
    2182:	4249      	negs	r1, r1
    2184:	468c      	mov	ip, r1
    2186:	9d03      	ldr	r5, [sp, #12]
    2188:	44e3      	add	fp, ip
    218a:	46ac      	mov	ip, r5
    218c:	44e2      	add	sl, ip
    218e:	45aa      	cmp	sl, r5
    2190:	41ad      	sbcs	r5, r5
    2192:	426d      	negs	r5, r5
    2194:	4445      	add	r5, r8
    2196:	18ed      	adds	r5, r5, r3
    2198:	1a2d      	subs	r5, r5, r0
    219a:	e696      	b.n	1eca <__aeabi_ddiv+0x2f6>
    219c:	1e8a      	subs	r2, r1, #2
    219e:	9903      	ldr	r1, [sp, #12]
    21a0:	004d      	lsls	r5, r1, #1
    21a2:	428d      	cmp	r5, r1
    21a4:	4189      	sbcs	r1, r1
    21a6:	4249      	negs	r1, r1
    21a8:	4441      	add	r1, r8
    21aa:	1876      	adds	r6, r6, r1
    21ac:	9503      	str	r5, [sp, #12]
    21ae:	e78f      	b.n	20d0 <STACK_SIZE+0xd0>
    21b0:	201f      	movs	r0, #31
    21b2:	4240      	negs	r0, r0
    21b4:	1ac3      	subs	r3, r0, r3
    21b6:	4658      	mov	r0, fp
    21b8:	40d8      	lsrs	r0, r3
    21ba:	0003      	movs	r3, r0
    21bc:	2a20      	cmp	r2, #32
    21be:	d028      	beq.n	2212 <STACK_SIZE+0x212>
    21c0:	2040      	movs	r0, #64	; 0x40
    21c2:	465d      	mov	r5, fp
    21c4:	1a82      	subs	r2, r0, r2
    21c6:	4095      	lsls	r5, r2
    21c8:	4329      	orrs	r1, r5
    21ca:	1e4a      	subs	r2, r1, #1
    21cc:	4191      	sbcs	r1, r2
    21ce:	4319      	orrs	r1, r3
    21d0:	2307      	movs	r3, #7
    21d2:	2200      	movs	r2, #0
    21d4:	400b      	ands	r3, r1
    21d6:	d009      	beq.n	21ec <STACK_SIZE+0x1ec>
    21d8:	230f      	movs	r3, #15
    21da:	2200      	movs	r2, #0
    21dc:	400b      	ands	r3, r1
    21de:	0008      	movs	r0, r1
    21e0:	2b04      	cmp	r3, #4
    21e2:	d1bd      	bne.n	2160 <STACK_SIZE+0x160>
    21e4:	0001      	movs	r1, r0
    21e6:	0753      	lsls	r3, r2, #29
    21e8:	0252      	lsls	r2, r2, #9
    21ea:	0b12      	lsrs	r2, r2, #12
    21ec:	08c9      	lsrs	r1, r1, #3
    21ee:	4319      	orrs	r1, r3
    21f0:	2301      	movs	r3, #1
    21f2:	4688      	mov	r8, r1
    21f4:	9902      	ldr	r1, [sp, #8]
    21f6:	2400      	movs	r4, #0
    21f8:	4019      	ands	r1, r3
    21fa:	468c      	mov	ip, r1
    21fc:	e5b8      	b.n	1d70 <__aeabi_ddiv+0x19c>
    21fe:	4552      	cmp	r2, sl
    2200:	d8be      	bhi.n	2180 <STACK_SIZE+0x180>
    2202:	468b      	mov	fp, r1
    2204:	2500      	movs	r5, #0
    2206:	e660      	b.n	1eca <__aeabi_ddiv+0x2f6>
    2208:	9d03      	ldr	r5, [sp, #12]
    220a:	429d      	cmp	r5, r3
    220c:	d3c6      	bcc.n	219c <STACK_SIZE+0x19c>
    220e:	0011      	movs	r1, r2
    2210:	e762      	b.n	20d8 <STACK_SIZE+0xd8>
    2212:	2500      	movs	r5, #0
    2214:	e7d8      	b.n	21c8 <STACK_SIZE+0x1c8>
    2216:	2280      	movs	r2, #128	; 0x80
    2218:	465b      	mov	r3, fp
    221a:	0312      	lsls	r2, r2, #12
    221c:	431a      	orrs	r2, r3
    221e:	9b01      	ldr	r3, [sp, #4]
    2220:	0312      	lsls	r2, r2, #12
    2222:	0b12      	lsrs	r2, r2, #12
    2224:	469c      	mov	ip, r3
    2226:	4688      	mov	r8, r1
    2228:	4c03      	ldr	r4, [pc, #12]	; (2238 <STACK_SIZE+0x238>)
    222a:	e5a1      	b.n	1d70 <__aeabi_ddiv+0x19c>
    222c:	000003ff 	.word	0x000003ff
    2230:	feffffff 	.word	0xfeffffff
    2234:	000007fe 	.word	0x000007fe
    2238:	000007ff 	.word	0x000007ff

0000223c <__aeabi_dmul>:
    223c:	b5f0      	push	{r4, r5, r6, r7, lr}
    223e:	4657      	mov	r7, sl
    2240:	4645      	mov	r5, r8
    2242:	46de      	mov	lr, fp
    2244:	464e      	mov	r6, r9
    2246:	b5e0      	push	{r5, r6, r7, lr}
    2248:	030c      	lsls	r4, r1, #12
    224a:	4698      	mov	r8, r3
    224c:	004e      	lsls	r6, r1, #1
    224e:	0b23      	lsrs	r3, r4, #12
    2250:	b087      	sub	sp, #28
    2252:	0007      	movs	r7, r0
    2254:	4692      	mov	sl, r2
    2256:	469b      	mov	fp, r3
    2258:	0d76      	lsrs	r6, r6, #21
    225a:	0fcd      	lsrs	r5, r1, #31
    225c:	2e00      	cmp	r6, #0
    225e:	d06b      	beq.n	2338 <__aeabi_dmul+0xfc>
    2260:	4b6d      	ldr	r3, [pc, #436]	; (2418 <__aeabi_dmul+0x1dc>)
    2262:	429e      	cmp	r6, r3
    2264:	d035      	beq.n	22d2 <__aeabi_dmul+0x96>
    2266:	2480      	movs	r4, #128	; 0x80
    2268:	465b      	mov	r3, fp
    226a:	0f42      	lsrs	r2, r0, #29
    226c:	0424      	lsls	r4, r4, #16
    226e:	00db      	lsls	r3, r3, #3
    2270:	4314      	orrs	r4, r2
    2272:	431c      	orrs	r4, r3
    2274:	00c3      	lsls	r3, r0, #3
    2276:	4699      	mov	r9, r3
    2278:	4b68      	ldr	r3, [pc, #416]	; (241c <__aeabi_dmul+0x1e0>)
    227a:	46a3      	mov	fp, r4
    227c:	469c      	mov	ip, r3
    227e:	2300      	movs	r3, #0
    2280:	2700      	movs	r7, #0
    2282:	4466      	add	r6, ip
    2284:	9302      	str	r3, [sp, #8]
    2286:	4643      	mov	r3, r8
    2288:	031c      	lsls	r4, r3, #12
    228a:	005a      	lsls	r2, r3, #1
    228c:	0fdb      	lsrs	r3, r3, #31
    228e:	4650      	mov	r0, sl
    2290:	0b24      	lsrs	r4, r4, #12
    2292:	0d52      	lsrs	r2, r2, #21
    2294:	4698      	mov	r8, r3
    2296:	d100      	bne.n	229a <__aeabi_dmul+0x5e>
    2298:	e076      	b.n	2388 <__aeabi_dmul+0x14c>
    229a:	4b5f      	ldr	r3, [pc, #380]	; (2418 <__aeabi_dmul+0x1dc>)
    229c:	429a      	cmp	r2, r3
    229e:	d06d      	beq.n	237c <__aeabi_dmul+0x140>
    22a0:	2380      	movs	r3, #128	; 0x80
    22a2:	0f41      	lsrs	r1, r0, #29
    22a4:	041b      	lsls	r3, r3, #16
    22a6:	430b      	orrs	r3, r1
    22a8:	495c      	ldr	r1, [pc, #368]	; (241c <__aeabi_dmul+0x1e0>)
    22aa:	00e4      	lsls	r4, r4, #3
    22ac:	468c      	mov	ip, r1
    22ae:	431c      	orrs	r4, r3
    22b0:	00c3      	lsls	r3, r0, #3
    22b2:	2000      	movs	r0, #0
    22b4:	4462      	add	r2, ip
    22b6:	4641      	mov	r1, r8
    22b8:	18b6      	adds	r6, r6, r2
    22ba:	4069      	eors	r1, r5
    22bc:	1c72      	adds	r2, r6, #1
    22be:	9101      	str	r1, [sp, #4]
    22c0:	4694      	mov	ip, r2
    22c2:	4307      	orrs	r7, r0
    22c4:	2f0f      	cmp	r7, #15
    22c6:	d900      	bls.n	22ca <__aeabi_dmul+0x8e>
    22c8:	e0b0      	b.n	242c <__aeabi_dmul+0x1f0>
    22ca:	4a55      	ldr	r2, [pc, #340]	; (2420 <__aeabi_dmul+0x1e4>)
    22cc:	00bf      	lsls	r7, r7, #2
    22ce:	59d2      	ldr	r2, [r2, r7]
    22d0:	4697      	mov	pc, r2
    22d2:	465b      	mov	r3, fp
    22d4:	4303      	orrs	r3, r0
    22d6:	4699      	mov	r9, r3
    22d8:	d000      	beq.n	22dc <__aeabi_dmul+0xa0>
    22da:	e087      	b.n	23ec <__aeabi_dmul+0x1b0>
    22dc:	2300      	movs	r3, #0
    22de:	469b      	mov	fp, r3
    22e0:	3302      	adds	r3, #2
    22e2:	2708      	movs	r7, #8
    22e4:	9302      	str	r3, [sp, #8]
    22e6:	e7ce      	b.n	2286 <__aeabi_dmul+0x4a>
    22e8:	4642      	mov	r2, r8
    22ea:	9201      	str	r2, [sp, #4]
    22ec:	2802      	cmp	r0, #2
    22ee:	d067      	beq.n	23c0 <__aeabi_dmul+0x184>
    22f0:	2803      	cmp	r0, #3
    22f2:	d100      	bne.n	22f6 <__aeabi_dmul+0xba>
    22f4:	e20e      	b.n	2714 <__aeabi_dmul+0x4d8>
    22f6:	2801      	cmp	r0, #1
    22f8:	d000      	beq.n	22fc <__aeabi_dmul+0xc0>
    22fa:	e162      	b.n	25c2 <__aeabi_dmul+0x386>
    22fc:	2300      	movs	r3, #0
    22fe:	2400      	movs	r4, #0
    2300:	2200      	movs	r2, #0
    2302:	4699      	mov	r9, r3
    2304:	9901      	ldr	r1, [sp, #4]
    2306:	4001      	ands	r1, r0
    2308:	b2cd      	uxtb	r5, r1
    230a:	2100      	movs	r1, #0
    230c:	0312      	lsls	r2, r2, #12
    230e:	0d0b      	lsrs	r3, r1, #20
    2310:	0b12      	lsrs	r2, r2, #12
    2312:	051b      	lsls	r3, r3, #20
    2314:	4313      	orrs	r3, r2
    2316:	4a43      	ldr	r2, [pc, #268]	; (2424 <__aeabi_dmul+0x1e8>)
    2318:	0524      	lsls	r4, r4, #20
    231a:	4013      	ands	r3, r2
    231c:	431c      	orrs	r4, r3
    231e:	0064      	lsls	r4, r4, #1
    2320:	07ed      	lsls	r5, r5, #31
    2322:	0864      	lsrs	r4, r4, #1
    2324:	432c      	orrs	r4, r5
    2326:	4648      	mov	r0, r9
    2328:	0021      	movs	r1, r4
    232a:	b007      	add	sp, #28
    232c:	bc3c      	pop	{r2, r3, r4, r5}
    232e:	4690      	mov	r8, r2
    2330:	4699      	mov	r9, r3
    2332:	46a2      	mov	sl, r4
    2334:	46ab      	mov	fp, r5
    2336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2338:	4303      	orrs	r3, r0
    233a:	4699      	mov	r9, r3
    233c:	d04f      	beq.n	23de <__aeabi_dmul+0x1a2>
    233e:	465b      	mov	r3, fp
    2340:	2b00      	cmp	r3, #0
    2342:	d100      	bne.n	2346 <__aeabi_dmul+0x10a>
    2344:	e189      	b.n	265a <__aeabi_dmul+0x41e>
    2346:	4658      	mov	r0, fp
    2348:	f000 fd7a 	bl	2e40 <__clzsi2>
    234c:	0003      	movs	r3, r0
    234e:	3b0b      	subs	r3, #11
    2350:	2b1c      	cmp	r3, #28
    2352:	dd00      	ble.n	2356 <__aeabi_dmul+0x11a>
    2354:	e17a      	b.n	264c <__aeabi_dmul+0x410>
    2356:	221d      	movs	r2, #29
    2358:	1ad3      	subs	r3, r2, r3
    235a:	003a      	movs	r2, r7
    235c:	0001      	movs	r1, r0
    235e:	465c      	mov	r4, fp
    2360:	40da      	lsrs	r2, r3
    2362:	3908      	subs	r1, #8
    2364:	408c      	lsls	r4, r1
    2366:	0013      	movs	r3, r2
    2368:	408f      	lsls	r7, r1
    236a:	4323      	orrs	r3, r4
    236c:	469b      	mov	fp, r3
    236e:	46b9      	mov	r9, r7
    2370:	2300      	movs	r3, #0
    2372:	4e2d      	ldr	r6, [pc, #180]	; (2428 <__aeabi_dmul+0x1ec>)
    2374:	2700      	movs	r7, #0
    2376:	1a36      	subs	r6, r6, r0
    2378:	9302      	str	r3, [sp, #8]
    237a:	e784      	b.n	2286 <__aeabi_dmul+0x4a>
    237c:	4653      	mov	r3, sl
    237e:	4323      	orrs	r3, r4
    2380:	d12a      	bne.n	23d8 <__aeabi_dmul+0x19c>
    2382:	2400      	movs	r4, #0
    2384:	2002      	movs	r0, #2
    2386:	e796      	b.n	22b6 <__aeabi_dmul+0x7a>
    2388:	4653      	mov	r3, sl
    238a:	4323      	orrs	r3, r4
    238c:	d020      	beq.n	23d0 <__aeabi_dmul+0x194>
    238e:	2c00      	cmp	r4, #0
    2390:	d100      	bne.n	2394 <__aeabi_dmul+0x158>
    2392:	e157      	b.n	2644 <__aeabi_dmul+0x408>
    2394:	0020      	movs	r0, r4
    2396:	f000 fd53 	bl	2e40 <__clzsi2>
    239a:	0003      	movs	r3, r0
    239c:	3b0b      	subs	r3, #11
    239e:	2b1c      	cmp	r3, #28
    23a0:	dd00      	ble.n	23a4 <__aeabi_dmul+0x168>
    23a2:	e149      	b.n	2638 <__aeabi_dmul+0x3fc>
    23a4:	211d      	movs	r1, #29
    23a6:	1acb      	subs	r3, r1, r3
    23a8:	4651      	mov	r1, sl
    23aa:	0002      	movs	r2, r0
    23ac:	40d9      	lsrs	r1, r3
    23ae:	4653      	mov	r3, sl
    23b0:	3a08      	subs	r2, #8
    23b2:	4094      	lsls	r4, r2
    23b4:	4093      	lsls	r3, r2
    23b6:	430c      	orrs	r4, r1
    23b8:	4a1b      	ldr	r2, [pc, #108]	; (2428 <__aeabi_dmul+0x1ec>)
    23ba:	1a12      	subs	r2, r2, r0
    23bc:	2000      	movs	r0, #0
    23be:	e77a      	b.n	22b6 <__aeabi_dmul+0x7a>
    23c0:	2501      	movs	r5, #1
    23c2:	9b01      	ldr	r3, [sp, #4]
    23c4:	4c14      	ldr	r4, [pc, #80]	; (2418 <__aeabi_dmul+0x1dc>)
    23c6:	401d      	ands	r5, r3
    23c8:	2300      	movs	r3, #0
    23ca:	2200      	movs	r2, #0
    23cc:	4699      	mov	r9, r3
    23ce:	e79c      	b.n	230a <__aeabi_dmul+0xce>
    23d0:	2400      	movs	r4, #0
    23d2:	2200      	movs	r2, #0
    23d4:	2001      	movs	r0, #1
    23d6:	e76e      	b.n	22b6 <__aeabi_dmul+0x7a>
    23d8:	4653      	mov	r3, sl
    23da:	2003      	movs	r0, #3
    23dc:	e76b      	b.n	22b6 <__aeabi_dmul+0x7a>
    23de:	2300      	movs	r3, #0
    23e0:	469b      	mov	fp, r3
    23e2:	3301      	adds	r3, #1
    23e4:	2704      	movs	r7, #4
    23e6:	2600      	movs	r6, #0
    23e8:	9302      	str	r3, [sp, #8]
    23ea:	e74c      	b.n	2286 <__aeabi_dmul+0x4a>
    23ec:	2303      	movs	r3, #3
    23ee:	4681      	mov	r9, r0
    23f0:	270c      	movs	r7, #12
    23f2:	9302      	str	r3, [sp, #8]
    23f4:	e747      	b.n	2286 <__aeabi_dmul+0x4a>
    23f6:	2280      	movs	r2, #128	; 0x80
    23f8:	2300      	movs	r3, #0
    23fa:	2500      	movs	r5, #0
    23fc:	0312      	lsls	r2, r2, #12
    23fe:	4699      	mov	r9, r3
    2400:	4c05      	ldr	r4, [pc, #20]	; (2418 <__aeabi_dmul+0x1dc>)
    2402:	e782      	b.n	230a <__aeabi_dmul+0xce>
    2404:	465c      	mov	r4, fp
    2406:	464b      	mov	r3, r9
    2408:	9802      	ldr	r0, [sp, #8]
    240a:	e76f      	b.n	22ec <__aeabi_dmul+0xb0>
    240c:	465c      	mov	r4, fp
    240e:	464b      	mov	r3, r9
    2410:	9501      	str	r5, [sp, #4]
    2412:	9802      	ldr	r0, [sp, #8]
    2414:	e76a      	b.n	22ec <__aeabi_dmul+0xb0>
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	000007ff 	.word	0x000007ff
    241c:	fffffc01 	.word	0xfffffc01
    2420:	00002f70 	.word	0x00002f70
    2424:	800fffff 	.word	0x800fffff
    2428:	fffffc0d 	.word	0xfffffc0d
    242c:	464a      	mov	r2, r9
    242e:	4649      	mov	r1, r9
    2430:	0c17      	lsrs	r7, r2, #16
    2432:	0c1a      	lsrs	r2, r3, #16
    2434:	041b      	lsls	r3, r3, #16
    2436:	0c1b      	lsrs	r3, r3, #16
    2438:	0408      	lsls	r0, r1, #16
    243a:	0019      	movs	r1, r3
    243c:	0c00      	lsrs	r0, r0, #16
    243e:	4341      	muls	r1, r0
    2440:	0015      	movs	r5, r2
    2442:	4688      	mov	r8, r1
    2444:	0019      	movs	r1, r3
    2446:	437d      	muls	r5, r7
    2448:	4379      	muls	r1, r7
    244a:	9503      	str	r5, [sp, #12]
    244c:	4689      	mov	r9, r1
    244e:	0029      	movs	r1, r5
    2450:	0015      	movs	r5, r2
    2452:	4345      	muls	r5, r0
    2454:	444d      	add	r5, r9
    2456:	9502      	str	r5, [sp, #8]
    2458:	4645      	mov	r5, r8
    245a:	0c2d      	lsrs	r5, r5, #16
    245c:	46aa      	mov	sl, r5
    245e:	9d02      	ldr	r5, [sp, #8]
    2460:	4455      	add	r5, sl
    2462:	45a9      	cmp	r9, r5
    2464:	d906      	bls.n	2474 <__aeabi_dmul+0x238>
    2466:	468a      	mov	sl, r1
    2468:	2180      	movs	r1, #128	; 0x80
    246a:	0249      	lsls	r1, r1, #9
    246c:	4689      	mov	r9, r1
    246e:	44ca      	add	sl, r9
    2470:	4651      	mov	r1, sl
    2472:	9103      	str	r1, [sp, #12]
    2474:	0c29      	lsrs	r1, r5, #16
    2476:	9104      	str	r1, [sp, #16]
    2478:	4641      	mov	r1, r8
    247a:	0409      	lsls	r1, r1, #16
    247c:	042d      	lsls	r5, r5, #16
    247e:	0c09      	lsrs	r1, r1, #16
    2480:	4688      	mov	r8, r1
    2482:	0029      	movs	r1, r5
    2484:	0c25      	lsrs	r5, r4, #16
    2486:	0424      	lsls	r4, r4, #16
    2488:	4441      	add	r1, r8
    248a:	0c24      	lsrs	r4, r4, #16
    248c:	9105      	str	r1, [sp, #20]
    248e:	0021      	movs	r1, r4
    2490:	4341      	muls	r1, r0
    2492:	4688      	mov	r8, r1
    2494:	0021      	movs	r1, r4
    2496:	4379      	muls	r1, r7
    2498:	468a      	mov	sl, r1
    249a:	4368      	muls	r0, r5
    249c:	4641      	mov	r1, r8
    249e:	4450      	add	r0, sl
    24a0:	4681      	mov	r9, r0
    24a2:	0c08      	lsrs	r0, r1, #16
    24a4:	4448      	add	r0, r9
    24a6:	436f      	muls	r7, r5
    24a8:	4582      	cmp	sl, r0
    24aa:	d903      	bls.n	24b4 <__aeabi_dmul+0x278>
    24ac:	2180      	movs	r1, #128	; 0x80
    24ae:	0249      	lsls	r1, r1, #9
    24b0:	4689      	mov	r9, r1
    24b2:	444f      	add	r7, r9
    24b4:	0c01      	lsrs	r1, r0, #16
    24b6:	4689      	mov	r9, r1
    24b8:	0039      	movs	r1, r7
    24ba:	4449      	add	r1, r9
    24bc:	9102      	str	r1, [sp, #8]
    24be:	4641      	mov	r1, r8
    24c0:	040f      	lsls	r7, r1, #16
    24c2:	9904      	ldr	r1, [sp, #16]
    24c4:	0c3f      	lsrs	r7, r7, #16
    24c6:	4688      	mov	r8, r1
    24c8:	0400      	lsls	r0, r0, #16
    24ca:	19c0      	adds	r0, r0, r7
    24cc:	4480      	add	r8, r0
    24ce:	4641      	mov	r1, r8
    24d0:	9104      	str	r1, [sp, #16]
    24d2:	4659      	mov	r1, fp
    24d4:	0c0f      	lsrs	r7, r1, #16
    24d6:	0409      	lsls	r1, r1, #16
    24d8:	0c09      	lsrs	r1, r1, #16
    24da:	4688      	mov	r8, r1
    24dc:	4359      	muls	r1, r3
    24de:	468a      	mov	sl, r1
    24e0:	0039      	movs	r1, r7
    24e2:	4351      	muls	r1, r2
    24e4:	4689      	mov	r9, r1
    24e6:	4641      	mov	r1, r8
    24e8:	434a      	muls	r2, r1
    24ea:	4651      	mov	r1, sl
    24ec:	0c09      	lsrs	r1, r1, #16
    24ee:	468b      	mov	fp, r1
    24f0:	437b      	muls	r3, r7
    24f2:	18d2      	adds	r2, r2, r3
    24f4:	445a      	add	r2, fp
    24f6:	4293      	cmp	r3, r2
    24f8:	d903      	bls.n	2502 <__aeabi_dmul+0x2c6>
    24fa:	2380      	movs	r3, #128	; 0x80
    24fc:	025b      	lsls	r3, r3, #9
    24fe:	469b      	mov	fp, r3
    2500:	44d9      	add	r9, fp
    2502:	4651      	mov	r1, sl
    2504:	0409      	lsls	r1, r1, #16
    2506:	0c09      	lsrs	r1, r1, #16
    2508:	468a      	mov	sl, r1
    250a:	4641      	mov	r1, r8
    250c:	4361      	muls	r1, r4
    250e:	437c      	muls	r4, r7
    2510:	0c13      	lsrs	r3, r2, #16
    2512:	0412      	lsls	r2, r2, #16
    2514:	444b      	add	r3, r9
    2516:	4452      	add	r2, sl
    2518:	46a1      	mov	r9, r4
    251a:	468a      	mov	sl, r1
    251c:	003c      	movs	r4, r7
    251e:	4641      	mov	r1, r8
    2520:	436c      	muls	r4, r5
    2522:	434d      	muls	r5, r1
    2524:	4651      	mov	r1, sl
    2526:	444d      	add	r5, r9
    2528:	0c0f      	lsrs	r7, r1, #16
    252a:	197d      	adds	r5, r7, r5
    252c:	45a9      	cmp	r9, r5
    252e:	d903      	bls.n	2538 <__aeabi_dmul+0x2fc>
    2530:	2180      	movs	r1, #128	; 0x80
    2532:	0249      	lsls	r1, r1, #9
    2534:	4688      	mov	r8, r1
    2536:	4444      	add	r4, r8
    2538:	9f04      	ldr	r7, [sp, #16]
    253a:	9903      	ldr	r1, [sp, #12]
    253c:	46b8      	mov	r8, r7
    253e:	4441      	add	r1, r8
    2540:	468b      	mov	fp, r1
    2542:	4583      	cmp	fp, r0
    2544:	4180      	sbcs	r0, r0
    2546:	4241      	negs	r1, r0
    2548:	4688      	mov	r8, r1
    254a:	4651      	mov	r1, sl
    254c:	0408      	lsls	r0, r1, #16
    254e:	042f      	lsls	r7, r5, #16
    2550:	0c00      	lsrs	r0, r0, #16
    2552:	183f      	adds	r7, r7, r0
    2554:	4658      	mov	r0, fp
    2556:	9902      	ldr	r1, [sp, #8]
    2558:	1810      	adds	r0, r2, r0
    255a:	4689      	mov	r9, r1
    255c:	4290      	cmp	r0, r2
    255e:	4192      	sbcs	r2, r2
    2560:	444f      	add	r7, r9
    2562:	46ba      	mov	sl, r7
    2564:	4252      	negs	r2, r2
    2566:	4699      	mov	r9, r3
    2568:	4693      	mov	fp, r2
    256a:	44c2      	add	sl, r8
    256c:	44d1      	add	r9, sl
    256e:	44cb      	add	fp, r9
    2570:	428f      	cmp	r7, r1
    2572:	41bf      	sbcs	r7, r7
    2574:	45c2      	cmp	sl, r8
    2576:	4189      	sbcs	r1, r1
    2578:	4599      	cmp	r9, r3
    257a:	419b      	sbcs	r3, r3
    257c:	4593      	cmp	fp, r2
    257e:	4192      	sbcs	r2, r2
    2580:	427f      	negs	r7, r7
    2582:	4249      	negs	r1, r1
    2584:	0c2d      	lsrs	r5, r5, #16
    2586:	4252      	negs	r2, r2
    2588:	430f      	orrs	r7, r1
    258a:	425b      	negs	r3, r3
    258c:	4313      	orrs	r3, r2
    258e:	197f      	adds	r7, r7, r5
    2590:	18ff      	adds	r7, r7, r3
    2592:	465b      	mov	r3, fp
    2594:	193c      	adds	r4, r7, r4
    2596:	0ddb      	lsrs	r3, r3, #23
    2598:	9a05      	ldr	r2, [sp, #20]
    259a:	0264      	lsls	r4, r4, #9
    259c:	431c      	orrs	r4, r3
    259e:	0243      	lsls	r3, r0, #9
    25a0:	4313      	orrs	r3, r2
    25a2:	1e5d      	subs	r5, r3, #1
    25a4:	41ab      	sbcs	r3, r5
    25a6:	465a      	mov	r2, fp
    25a8:	0dc0      	lsrs	r0, r0, #23
    25aa:	4303      	orrs	r3, r0
    25ac:	0252      	lsls	r2, r2, #9
    25ae:	4313      	orrs	r3, r2
    25b0:	01e2      	lsls	r2, r4, #7
    25b2:	d556      	bpl.n	2662 <__aeabi_dmul+0x426>
    25b4:	2001      	movs	r0, #1
    25b6:	085a      	lsrs	r2, r3, #1
    25b8:	4003      	ands	r3, r0
    25ba:	4313      	orrs	r3, r2
    25bc:	07e2      	lsls	r2, r4, #31
    25be:	4313      	orrs	r3, r2
    25c0:	0864      	lsrs	r4, r4, #1
    25c2:	485a      	ldr	r0, [pc, #360]	; (272c <__aeabi_dmul+0x4f0>)
    25c4:	4460      	add	r0, ip
    25c6:	2800      	cmp	r0, #0
    25c8:	dd4d      	ble.n	2666 <__aeabi_dmul+0x42a>
    25ca:	075a      	lsls	r2, r3, #29
    25cc:	d009      	beq.n	25e2 <__aeabi_dmul+0x3a6>
    25ce:	220f      	movs	r2, #15
    25d0:	401a      	ands	r2, r3
    25d2:	2a04      	cmp	r2, #4
    25d4:	d005      	beq.n	25e2 <__aeabi_dmul+0x3a6>
    25d6:	1d1a      	adds	r2, r3, #4
    25d8:	429a      	cmp	r2, r3
    25da:	419b      	sbcs	r3, r3
    25dc:	425b      	negs	r3, r3
    25de:	18e4      	adds	r4, r4, r3
    25e0:	0013      	movs	r3, r2
    25e2:	01e2      	lsls	r2, r4, #7
    25e4:	d504      	bpl.n	25f0 <__aeabi_dmul+0x3b4>
    25e6:	2080      	movs	r0, #128	; 0x80
    25e8:	4a51      	ldr	r2, [pc, #324]	; (2730 <__aeabi_dmul+0x4f4>)
    25ea:	00c0      	lsls	r0, r0, #3
    25ec:	4014      	ands	r4, r2
    25ee:	4460      	add	r0, ip
    25f0:	4a50      	ldr	r2, [pc, #320]	; (2734 <__aeabi_dmul+0x4f8>)
    25f2:	4290      	cmp	r0, r2
    25f4:	dd00      	ble.n	25f8 <__aeabi_dmul+0x3bc>
    25f6:	e6e3      	b.n	23c0 <__aeabi_dmul+0x184>
    25f8:	2501      	movs	r5, #1
    25fa:	08db      	lsrs	r3, r3, #3
    25fc:	0762      	lsls	r2, r4, #29
    25fe:	431a      	orrs	r2, r3
    2600:	0264      	lsls	r4, r4, #9
    2602:	9b01      	ldr	r3, [sp, #4]
    2604:	4691      	mov	r9, r2
    2606:	0b22      	lsrs	r2, r4, #12
    2608:	0544      	lsls	r4, r0, #21
    260a:	0d64      	lsrs	r4, r4, #21
    260c:	401d      	ands	r5, r3
    260e:	e67c      	b.n	230a <__aeabi_dmul+0xce>
    2610:	2280      	movs	r2, #128	; 0x80
    2612:	4659      	mov	r1, fp
    2614:	0312      	lsls	r2, r2, #12
    2616:	4211      	tst	r1, r2
    2618:	d008      	beq.n	262c <__aeabi_dmul+0x3f0>
    261a:	4214      	tst	r4, r2
    261c:	d106      	bne.n	262c <__aeabi_dmul+0x3f0>
    261e:	4322      	orrs	r2, r4
    2620:	0312      	lsls	r2, r2, #12
    2622:	0b12      	lsrs	r2, r2, #12
    2624:	4645      	mov	r5, r8
    2626:	4699      	mov	r9, r3
    2628:	4c43      	ldr	r4, [pc, #268]	; (2738 <__aeabi_dmul+0x4fc>)
    262a:	e66e      	b.n	230a <__aeabi_dmul+0xce>
    262c:	465b      	mov	r3, fp
    262e:	431a      	orrs	r2, r3
    2630:	0312      	lsls	r2, r2, #12
    2632:	0b12      	lsrs	r2, r2, #12
    2634:	4c40      	ldr	r4, [pc, #256]	; (2738 <__aeabi_dmul+0x4fc>)
    2636:	e668      	b.n	230a <__aeabi_dmul+0xce>
    2638:	0003      	movs	r3, r0
    263a:	4654      	mov	r4, sl
    263c:	3b28      	subs	r3, #40	; 0x28
    263e:	409c      	lsls	r4, r3
    2640:	2300      	movs	r3, #0
    2642:	e6b9      	b.n	23b8 <__aeabi_dmul+0x17c>
    2644:	f000 fbfc 	bl	2e40 <__clzsi2>
    2648:	3020      	adds	r0, #32
    264a:	e6a6      	b.n	239a <__aeabi_dmul+0x15e>
    264c:	0003      	movs	r3, r0
    264e:	3b28      	subs	r3, #40	; 0x28
    2650:	409f      	lsls	r7, r3
    2652:	2300      	movs	r3, #0
    2654:	46bb      	mov	fp, r7
    2656:	4699      	mov	r9, r3
    2658:	e68a      	b.n	2370 <__aeabi_dmul+0x134>
    265a:	f000 fbf1 	bl	2e40 <__clzsi2>
    265e:	3020      	adds	r0, #32
    2660:	e674      	b.n	234c <__aeabi_dmul+0x110>
    2662:	46b4      	mov	ip, r6
    2664:	e7ad      	b.n	25c2 <__aeabi_dmul+0x386>
    2666:	2501      	movs	r5, #1
    2668:	1a2a      	subs	r2, r5, r0
    266a:	2a38      	cmp	r2, #56	; 0x38
    266c:	dd06      	ble.n	267c <__aeabi_dmul+0x440>
    266e:	9b01      	ldr	r3, [sp, #4]
    2670:	2400      	movs	r4, #0
    2672:	401d      	ands	r5, r3
    2674:	2300      	movs	r3, #0
    2676:	2200      	movs	r2, #0
    2678:	4699      	mov	r9, r3
    267a:	e646      	b.n	230a <__aeabi_dmul+0xce>
    267c:	2a1f      	cmp	r2, #31
    267e:	dc21      	bgt.n	26c4 <__aeabi_dmul+0x488>
    2680:	2520      	movs	r5, #32
    2682:	0020      	movs	r0, r4
    2684:	1aad      	subs	r5, r5, r2
    2686:	001e      	movs	r6, r3
    2688:	40ab      	lsls	r3, r5
    268a:	40a8      	lsls	r0, r5
    268c:	40d6      	lsrs	r6, r2
    268e:	1e5d      	subs	r5, r3, #1
    2690:	41ab      	sbcs	r3, r5
    2692:	4330      	orrs	r0, r6
    2694:	4318      	orrs	r0, r3
    2696:	40d4      	lsrs	r4, r2
    2698:	0743      	lsls	r3, r0, #29
    269a:	d009      	beq.n	26b0 <__aeabi_dmul+0x474>
    269c:	230f      	movs	r3, #15
    269e:	4003      	ands	r3, r0
    26a0:	2b04      	cmp	r3, #4
    26a2:	d005      	beq.n	26b0 <__aeabi_dmul+0x474>
    26a4:	0003      	movs	r3, r0
    26a6:	1d18      	adds	r0, r3, #4
    26a8:	4298      	cmp	r0, r3
    26aa:	419b      	sbcs	r3, r3
    26ac:	425b      	negs	r3, r3
    26ae:	18e4      	adds	r4, r4, r3
    26b0:	0223      	lsls	r3, r4, #8
    26b2:	d521      	bpl.n	26f8 <__aeabi_dmul+0x4bc>
    26b4:	2501      	movs	r5, #1
    26b6:	9b01      	ldr	r3, [sp, #4]
    26b8:	2401      	movs	r4, #1
    26ba:	401d      	ands	r5, r3
    26bc:	2300      	movs	r3, #0
    26be:	2200      	movs	r2, #0
    26c0:	4699      	mov	r9, r3
    26c2:	e622      	b.n	230a <__aeabi_dmul+0xce>
    26c4:	251f      	movs	r5, #31
    26c6:	0021      	movs	r1, r4
    26c8:	426d      	negs	r5, r5
    26ca:	1a28      	subs	r0, r5, r0
    26cc:	40c1      	lsrs	r1, r0
    26ce:	0008      	movs	r0, r1
    26d0:	2a20      	cmp	r2, #32
    26d2:	d01d      	beq.n	2710 <__aeabi_dmul+0x4d4>
    26d4:	355f      	adds	r5, #95	; 0x5f
    26d6:	1aaa      	subs	r2, r5, r2
    26d8:	4094      	lsls	r4, r2
    26da:	4323      	orrs	r3, r4
    26dc:	1e5c      	subs	r4, r3, #1
    26de:	41a3      	sbcs	r3, r4
    26e0:	2507      	movs	r5, #7
    26e2:	4303      	orrs	r3, r0
    26e4:	401d      	ands	r5, r3
    26e6:	2200      	movs	r2, #0
    26e8:	2d00      	cmp	r5, #0
    26ea:	d009      	beq.n	2700 <__aeabi_dmul+0x4c4>
    26ec:	220f      	movs	r2, #15
    26ee:	2400      	movs	r4, #0
    26f0:	401a      	ands	r2, r3
    26f2:	0018      	movs	r0, r3
    26f4:	2a04      	cmp	r2, #4
    26f6:	d1d6      	bne.n	26a6 <__aeabi_dmul+0x46a>
    26f8:	0003      	movs	r3, r0
    26fa:	0765      	lsls	r5, r4, #29
    26fc:	0264      	lsls	r4, r4, #9
    26fe:	0b22      	lsrs	r2, r4, #12
    2700:	08db      	lsrs	r3, r3, #3
    2702:	432b      	orrs	r3, r5
    2704:	2501      	movs	r5, #1
    2706:	4699      	mov	r9, r3
    2708:	9b01      	ldr	r3, [sp, #4]
    270a:	2400      	movs	r4, #0
    270c:	401d      	ands	r5, r3
    270e:	e5fc      	b.n	230a <__aeabi_dmul+0xce>
    2710:	2400      	movs	r4, #0
    2712:	e7e2      	b.n	26da <__aeabi_dmul+0x49e>
    2714:	2280      	movs	r2, #128	; 0x80
    2716:	2501      	movs	r5, #1
    2718:	0312      	lsls	r2, r2, #12
    271a:	4322      	orrs	r2, r4
    271c:	9901      	ldr	r1, [sp, #4]
    271e:	0312      	lsls	r2, r2, #12
    2720:	0b12      	lsrs	r2, r2, #12
    2722:	400d      	ands	r5, r1
    2724:	4699      	mov	r9, r3
    2726:	4c04      	ldr	r4, [pc, #16]	; (2738 <__aeabi_dmul+0x4fc>)
    2728:	e5ef      	b.n	230a <__aeabi_dmul+0xce>
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	000003ff 	.word	0x000003ff
    2730:	feffffff 	.word	0xfeffffff
    2734:	000007fe 	.word	0x000007fe
    2738:	000007ff 	.word	0x000007ff

0000273c <__aeabi_dsub>:
    273c:	b5f0      	push	{r4, r5, r6, r7, lr}
    273e:	4646      	mov	r6, r8
    2740:	46d6      	mov	lr, sl
    2742:	464f      	mov	r7, r9
    2744:	030c      	lsls	r4, r1, #12
    2746:	b5c0      	push	{r6, r7, lr}
    2748:	0fcd      	lsrs	r5, r1, #31
    274a:	004e      	lsls	r6, r1, #1
    274c:	0a61      	lsrs	r1, r4, #9
    274e:	0f44      	lsrs	r4, r0, #29
    2750:	430c      	orrs	r4, r1
    2752:	00c1      	lsls	r1, r0, #3
    2754:	0058      	lsls	r0, r3, #1
    2756:	0d40      	lsrs	r0, r0, #21
    2758:	4684      	mov	ip, r0
    275a:	468a      	mov	sl, r1
    275c:	000f      	movs	r7, r1
    275e:	0319      	lsls	r1, r3, #12
    2760:	0f50      	lsrs	r0, r2, #29
    2762:	0a49      	lsrs	r1, r1, #9
    2764:	4301      	orrs	r1, r0
    2766:	48c6      	ldr	r0, [pc, #792]	; (2a80 <__aeabi_dsub+0x344>)
    2768:	0d76      	lsrs	r6, r6, #21
    276a:	46a8      	mov	r8, r5
    276c:	0fdb      	lsrs	r3, r3, #31
    276e:	00d2      	lsls	r2, r2, #3
    2770:	4584      	cmp	ip, r0
    2772:	d100      	bne.n	2776 <__aeabi_dsub+0x3a>
    2774:	e0d8      	b.n	2928 <__aeabi_dsub+0x1ec>
    2776:	2001      	movs	r0, #1
    2778:	4043      	eors	r3, r0
    277a:	42ab      	cmp	r3, r5
    277c:	d100      	bne.n	2780 <__aeabi_dsub+0x44>
    277e:	e0a6      	b.n	28ce <__aeabi_dsub+0x192>
    2780:	4660      	mov	r0, ip
    2782:	1a35      	subs	r5, r6, r0
    2784:	2d00      	cmp	r5, #0
    2786:	dc00      	bgt.n	278a <__aeabi_dsub+0x4e>
    2788:	e105      	b.n	2996 <__aeabi_dsub+0x25a>
    278a:	2800      	cmp	r0, #0
    278c:	d110      	bne.n	27b0 <__aeabi_dsub+0x74>
    278e:	000b      	movs	r3, r1
    2790:	4313      	orrs	r3, r2
    2792:	d100      	bne.n	2796 <__aeabi_dsub+0x5a>
    2794:	e0d7      	b.n	2946 <__aeabi_dsub+0x20a>
    2796:	1e6b      	subs	r3, r5, #1
    2798:	2b00      	cmp	r3, #0
    279a:	d000      	beq.n	279e <__aeabi_dsub+0x62>
    279c:	e14b      	b.n	2a36 <__aeabi_dsub+0x2fa>
    279e:	4653      	mov	r3, sl
    27a0:	1a9f      	subs	r7, r3, r2
    27a2:	45ba      	cmp	sl, r7
    27a4:	4180      	sbcs	r0, r0
    27a6:	1a64      	subs	r4, r4, r1
    27a8:	4240      	negs	r0, r0
    27aa:	1a24      	subs	r4, r4, r0
    27ac:	2601      	movs	r6, #1
    27ae:	e01e      	b.n	27ee <__aeabi_dsub+0xb2>
    27b0:	4bb3      	ldr	r3, [pc, #716]	; (2a80 <__aeabi_dsub+0x344>)
    27b2:	429e      	cmp	r6, r3
    27b4:	d048      	beq.n	2848 <__aeabi_dsub+0x10c>
    27b6:	2380      	movs	r3, #128	; 0x80
    27b8:	041b      	lsls	r3, r3, #16
    27ba:	4319      	orrs	r1, r3
    27bc:	2d38      	cmp	r5, #56	; 0x38
    27be:	dd00      	ble.n	27c2 <__aeabi_dsub+0x86>
    27c0:	e119      	b.n	29f6 <__aeabi_dsub+0x2ba>
    27c2:	2d1f      	cmp	r5, #31
    27c4:	dd00      	ble.n	27c8 <__aeabi_dsub+0x8c>
    27c6:	e14c      	b.n	2a62 <__aeabi_dsub+0x326>
    27c8:	2320      	movs	r3, #32
    27ca:	000f      	movs	r7, r1
    27cc:	1b5b      	subs	r3, r3, r5
    27ce:	0010      	movs	r0, r2
    27d0:	409a      	lsls	r2, r3
    27d2:	409f      	lsls	r7, r3
    27d4:	40e8      	lsrs	r0, r5
    27d6:	1e53      	subs	r3, r2, #1
    27d8:	419a      	sbcs	r2, r3
    27da:	40e9      	lsrs	r1, r5
    27dc:	4307      	orrs	r7, r0
    27de:	4317      	orrs	r7, r2
    27e0:	4653      	mov	r3, sl
    27e2:	1bdf      	subs	r7, r3, r7
    27e4:	1a61      	subs	r1, r4, r1
    27e6:	45ba      	cmp	sl, r7
    27e8:	41a4      	sbcs	r4, r4
    27ea:	4264      	negs	r4, r4
    27ec:	1b0c      	subs	r4, r1, r4
    27ee:	0223      	lsls	r3, r4, #8
    27f0:	d400      	bmi.n	27f4 <__aeabi_dsub+0xb8>
    27f2:	e0c5      	b.n	2980 <__aeabi_dsub+0x244>
    27f4:	0264      	lsls	r4, r4, #9
    27f6:	0a65      	lsrs	r5, r4, #9
    27f8:	2d00      	cmp	r5, #0
    27fa:	d100      	bne.n	27fe <__aeabi_dsub+0xc2>
    27fc:	e0f6      	b.n	29ec <__aeabi_dsub+0x2b0>
    27fe:	0028      	movs	r0, r5
    2800:	f000 fb1e 	bl	2e40 <__clzsi2>
    2804:	0003      	movs	r3, r0
    2806:	3b08      	subs	r3, #8
    2808:	2b1f      	cmp	r3, #31
    280a:	dd00      	ble.n	280e <__aeabi_dsub+0xd2>
    280c:	e0e9      	b.n	29e2 <__aeabi_dsub+0x2a6>
    280e:	2220      	movs	r2, #32
    2810:	003c      	movs	r4, r7
    2812:	1ad2      	subs	r2, r2, r3
    2814:	409d      	lsls	r5, r3
    2816:	40d4      	lsrs	r4, r2
    2818:	409f      	lsls	r7, r3
    281a:	4325      	orrs	r5, r4
    281c:	429e      	cmp	r6, r3
    281e:	dd00      	ble.n	2822 <__aeabi_dsub+0xe6>
    2820:	e0db      	b.n	29da <__aeabi_dsub+0x29e>
    2822:	1b9e      	subs	r6, r3, r6
    2824:	1c73      	adds	r3, r6, #1
    2826:	2b1f      	cmp	r3, #31
    2828:	dd00      	ble.n	282c <__aeabi_dsub+0xf0>
    282a:	e10a      	b.n	2a42 <__aeabi_dsub+0x306>
    282c:	2220      	movs	r2, #32
    282e:	0038      	movs	r0, r7
    2830:	1ad2      	subs	r2, r2, r3
    2832:	0029      	movs	r1, r5
    2834:	4097      	lsls	r7, r2
    2836:	002c      	movs	r4, r5
    2838:	4091      	lsls	r1, r2
    283a:	40d8      	lsrs	r0, r3
    283c:	1e7a      	subs	r2, r7, #1
    283e:	4197      	sbcs	r7, r2
    2840:	40dc      	lsrs	r4, r3
    2842:	2600      	movs	r6, #0
    2844:	4301      	orrs	r1, r0
    2846:	430f      	orrs	r7, r1
    2848:	077b      	lsls	r3, r7, #29
    284a:	d009      	beq.n	2860 <__aeabi_dsub+0x124>
    284c:	230f      	movs	r3, #15
    284e:	403b      	ands	r3, r7
    2850:	2b04      	cmp	r3, #4
    2852:	d005      	beq.n	2860 <__aeabi_dsub+0x124>
    2854:	1d3b      	adds	r3, r7, #4
    2856:	42bb      	cmp	r3, r7
    2858:	41bf      	sbcs	r7, r7
    285a:	427f      	negs	r7, r7
    285c:	19e4      	adds	r4, r4, r7
    285e:	001f      	movs	r7, r3
    2860:	0223      	lsls	r3, r4, #8
    2862:	d525      	bpl.n	28b0 <__aeabi_dsub+0x174>
    2864:	4b86      	ldr	r3, [pc, #536]	; (2a80 <__aeabi_dsub+0x344>)
    2866:	3601      	adds	r6, #1
    2868:	429e      	cmp	r6, r3
    286a:	d100      	bne.n	286e <__aeabi_dsub+0x132>
    286c:	e0af      	b.n	29ce <__aeabi_dsub+0x292>
    286e:	4b85      	ldr	r3, [pc, #532]	; (2a84 <__aeabi_dsub+0x348>)
    2870:	2501      	movs	r5, #1
    2872:	401c      	ands	r4, r3
    2874:	4643      	mov	r3, r8
    2876:	0762      	lsls	r2, r4, #29
    2878:	08ff      	lsrs	r7, r7, #3
    287a:	0264      	lsls	r4, r4, #9
    287c:	0576      	lsls	r6, r6, #21
    287e:	4317      	orrs	r7, r2
    2880:	0b24      	lsrs	r4, r4, #12
    2882:	0d76      	lsrs	r6, r6, #21
    2884:	401d      	ands	r5, r3
    2886:	2100      	movs	r1, #0
    2888:	0324      	lsls	r4, r4, #12
    288a:	0b23      	lsrs	r3, r4, #12
    288c:	0d0c      	lsrs	r4, r1, #20
    288e:	4a7e      	ldr	r2, [pc, #504]	; (2a88 <__aeabi_dsub+0x34c>)
    2890:	0524      	lsls	r4, r4, #20
    2892:	431c      	orrs	r4, r3
    2894:	4014      	ands	r4, r2
    2896:	0533      	lsls	r3, r6, #20
    2898:	4323      	orrs	r3, r4
    289a:	005b      	lsls	r3, r3, #1
    289c:	07ed      	lsls	r5, r5, #31
    289e:	085b      	lsrs	r3, r3, #1
    28a0:	432b      	orrs	r3, r5
    28a2:	0038      	movs	r0, r7
    28a4:	0019      	movs	r1, r3
    28a6:	bc1c      	pop	{r2, r3, r4}
    28a8:	4690      	mov	r8, r2
    28aa:	4699      	mov	r9, r3
    28ac:	46a2      	mov	sl, r4
    28ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28b0:	2501      	movs	r5, #1
    28b2:	4643      	mov	r3, r8
    28b4:	0762      	lsls	r2, r4, #29
    28b6:	08ff      	lsrs	r7, r7, #3
    28b8:	4317      	orrs	r7, r2
    28ba:	08e4      	lsrs	r4, r4, #3
    28bc:	401d      	ands	r5, r3
    28be:	4b70      	ldr	r3, [pc, #448]	; (2a80 <__aeabi_dsub+0x344>)
    28c0:	429e      	cmp	r6, r3
    28c2:	d036      	beq.n	2932 <__aeabi_dsub+0x1f6>
    28c4:	0324      	lsls	r4, r4, #12
    28c6:	0576      	lsls	r6, r6, #21
    28c8:	0b24      	lsrs	r4, r4, #12
    28ca:	0d76      	lsrs	r6, r6, #21
    28cc:	e7db      	b.n	2886 <__aeabi_dsub+0x14a>
    28ce:	4663      	mov	r3, ip
    28d0:	1af3      	subs	r3, r6, r3
    28d2:	2b00      	cmp	r3, #0
    28d4:	dc00      	bgt.n	28d8 <__aeabi_dsub+0x19c>
    28d6:	e094      	b.n	2a02 <__aeabi_dsub+0x2c6>
    28d8:	4660      	mov	r0, ip
    28da:	2800      	cmp	r0, #0
    28dc:	d035      	beq.n	294a <__aeabi_dsub+0x20e>
    28de:	4868      	ldr	r0, [pc, #416]	; (2a80 <__aeabi_dsub+0x344>)
    28e0:	4286      	cmp	r6, r0
    28e2:	d0b1      	beq.n	2848 <__aeabi_dsub+0x10c>
    28e4:	2780      	movs	r7, #128	; 0x80
    28e6:	043f      	lsls	r7, r7, #16
    28e8:	4339      	orrs	r1, r7
    28ea:	2b38      	cmp	r3, #56	; 0x38
    28ec:	dc00      	bgt.n	28f0 <__aeabi_dsub+0x1b4>
    28ee:	e0fd      	b.n	2aec <__aeabi_dsub+0x3b0>
    28f0:	430a      	orrs	r2, r1
    28f2:	0017      	movs	r7, r2
    28f4:	2100      	movs	r1, #0
    28f6:	1e7a      	subs	r2, r7, #1
    28f8:	4197      	sbcs	r7, r2
    28fa:	4457      	add	r7, sl
    28fc:	4557      	cmp	r7, sl
    28fe:	4180      	sbcs	r0, r0
    2900:	1909      	adds	r1, r1, r4
    2902:	4244      	negs	r4, r0
    2904:	190c      	adds	r4, r1, r4
    2906:	0223      	lsls	r3, r4, #8
    2908:	d53a      	bpl.n	2980 <__aeabi_dsub+0x244>
    290a:	4b5d      	ldr	r3, [pc, #372]	; (2a80 <__aeabi_dsub+0x344>)
    290c:	3601      	adds	r6, #1
    290e:	429e      	cmp	r6, r3
    2910:	d100      	bne.n	2914 <__aeabi_dsub+0x1d8>
    2912:	e14b      	b.n	2bac <__aeabi_dsub+0x470>
    2914:	2201      	movs	r2, #1
    2916:	4b5b      	ldr	r3, [pc, #364]	; (2a84 <__aeabi_dsub+0x348>)
    2918:	401c      	ands	r4, r3
    291a:	087b      	lsrs	r3, r7, #1
    291c:	4017      	ands	r7, r2
    291e:	431f      	orrs	r7, r3
    2920:	07e2      	lsls	r2, r4, #31
    2922:	4317      	orrs	r7, r2
    2924:	0864      	lsrs	r4, r4, #1
    2926:	e78f      	b.n	2848 <__aeabi_dsub+0x10c>
    2928:	0008      	movs	r0, r1
    292a:	4310      	orrs	r0, r2
    292c:	d000      	beq.n	2930 <__aeabi_dsub+0x1f4>
    292e:	e724      	b.n	277a <__aeabi_dsub+0x3e>
    2930:	e721      	b.n	2776 <__aeabi_dsub+0x3a>
    2932:	0023      	movs	r3, r4
    2934:	433b      	orrs	r3, r7
    2936:	d100      	bne.n	293a <__aeabi_dsub+0x1fe>
    2938:	e1b9      	b.n	2cae <__aeabi_dsub+0x572>
    293a:	2280      	movs	r2, #128	; 0x80
    293c:	0312      	lsls	r2, r2, #12
    293e:	4314      	orrs	r4, r2
    2940:	0324      	lsls	r4, r4, #12
    2942:	0b24      	lsrs	r4, r4, #12
    2944:	e79f      	b.n	2886 <__aeabi_dsub+0x14a>
    2946:	002e      	movs	r6, r5
    2948:	e77e      	b.n	2848 <__aeabi_dsub+0x10c>
    294a:	0008      	movs	r0, r1
    294c:	4310      	orrs	r0, r2
    294e:	d100      	bne.n	2952 <__aeabi_dsub+0x216>
    2950:	e0ca      	b.n	2ae8 <__aeabi_dsub+0x3ac>
    2952:	1e58      	subs	r0, r3, #1
    2954:	4684      	mov	ip, r0
    2956:	2800      	cmp	r0, #0
    2958:	d000      	beq.n	295c <__aeabi_dsub+0x220>
    295a:	e0e7      	b.n	2b2c <__aeabi_dsub+0x3f0>
    295c:	4452      	add	r2, sl
    295e:	4552      	cmp	r2, sl
    2960:	4180      	sbcs	r0, r0
    2962:	1864      	adds	r4, r4, r1
    2964:	4240      	negs	r0, r0
    2966:	1824      	adds	r4, r4, r0
    2968:	0017      	movs	r7, r2
    296a:	2601      	movs	r6, #1
    296c:	0223      	lsls	r3, r4, #8
    296e:	d507      	bpl.n	2980 <__aeabi_dsub+0x244>
    2970:	2602      	movs	r6, #2
    2972:	e7cf      	b.n	2914 <__aeabi_dsub+0x1d8>
    2974:	4664      	mov	r4, ip
    2976:	432c      	orrs	r4, r5
    2978:	d100      	bne.n	297c <__aeabi_dsub+0x240>
    297a:	e1b3      	b.n	2ce4 <__aeabi_dsub+0x5a8>
    297c:	002c      	movs	r4, r5
    297e:	4667      	mov	r7, ip
    2980:	077b      	lsls	r3, r7, #29
    2982:	d000      	beq.n	2986 <__aeabi_dsub+0x24a>
    2984:	e762      	b.n	284c <__aeabi_dsub+0x110>
    2986:	0763      	lsls	r3, r4, #29
    2988:	08ff      	lsrs	r7, r7, #3
    298a:	431f      	orrs	r7, r3
    298c:	2501      	movs	r5, #1
    298e:	4643      	mov	r3, r8
    2990:	08e4      	lsrs	r4, r4, #3
    2992:	401d      	ands	r5, r3
    2994:	e793      	b.n	28be <__aeabi_dsub+0x182>
    2996:	2d00      	cmp	r5, #0
    2998:	d178      	bne.n	2a8c <__aeabi_dsub+0x350>
    299a:	1c75      	adds	r5, r6, #1
    299c:	056d      	lsls	r5, r5, #21
    299e:	0d6d      	lsrs	r5, r5, #21
    29a0:	2d01      	cmp	r5, #1
    29a2:	dc00      	bgt.n	29a6 <__aeabi_dsub+0x26a>
    29a4:	e0f2      	b.n	2b8c <__aeabi_dsub+0x450>
    29a6:	4650      	mov	r0, sl
    29a8:	1a80      	subs	r0, r0, r2
    29aa:	4582      	cmp	sl, r0
    29ac:	41bf      	sbcs	r7, r7
    29ae:	1a65      	subs	r5, r4, r1
    29b0:	427f      	negs	r7, r7
    29b2:	1bed      	subs	r5, r5, r7
    29b4:	4684      	mov	ip, r0
    29b6:	0228      	lsls	r0, r5, #8
    29b8:	d400      	bmi.n	29bc <__aeabi_dsub+0x280>
    29ba:	e08c      	b.n	2ad6 <__aeabi_dsub+0x39a>
    29bc:	4650      	mov	r0, sl
    29be:	1a17      	subs	r7, r2, r0
    29c0:	42ba      	cmp	r2, r7
    29c2:	4192      	sbcs	r2, r2
    29c4:	1b0c      	subs	r4, r1, r4
    29c6:	4255      	negs	r5, r2
    29c8:	1b65      	subs	r5, r4, r5
    29ca:	4698      	mov	r8, r3
    29cc:	e714      	b.n	27f8 <__aeabi_dsub+0xbc>
    29ce:	2501      	movs	r5, #1
    29d0:	4643      	mov	r3, r8
    29d2:	2400      	movs	r4, #0
    29d4:	401d      	ands	r5, r3
    29d6:	2700      	movs	r7, #0
    29d8:	e755      	b.n	2886 <__aeabi_dsub+0x14a>
    29da:	4c2a      	ldr	r4, [pc, #168]	; (2a84 <__aeabi_dsub+0x348>)
    29dc:	1af6      	subs	r6, r6, r3
    29de:	402c      	ands	r4, r5
    29e0:	e732      	b.n	2848 <__aeabi_dsub+0x10c>
    29e2:	003d      	movs	r5, r7
    29e4:	3828      	subs	r0, #40	; 0x28
    29e6:	4085      	lsls	r5, r0
    29e8:	2700      	movs	r7, #0
    29ea:	e717      	b.n	281c <__aeabi_dsub+0xe0>
    29ec:	0038      	movs	r0, r7
    29ee:	f000 fa27 	bl	2e40 <__clzsi2>
    29f2:	3020      	adds	r0, #32
    29f4:	e706      	b.n	2804 <__aeabi_dsub+0xc8>
    29f6:	430a      	orrs	r2, r1
    29f8:	0017      	movs	r7, r2
    29fa:	2100      	movs	r1, #0
    29fc:	1e7a      	subs	r2, r7, #1
    29fe:	4197      	sbcs	r7, r2
    2a00:	e6ee      	b.n	27e0 <__aeabi_dsub+0xa4>
    2a02:	2b00      	cmp	r3, #0
    2a04:	d000      	beq.n	2a08 <__aeabi_dsub+0x2cc>
    2a06:	e0e5      	b.n	2bd4 <__aeabi_dsub+0x498>
    2a08:	1c73      	adds	r3, r6, #1
    2a0a:	469c      	mov	ip, r3
    2a0c:	055b      	lsls	r3, r3, #21
    2a0e:	0d5b      	lsrs	r3, r3, #21
    2a10:	2b01      	cmp	r3, #1
    2a12:	dc00      	bgt.n	2a16 <__aeabi_dsub+0x2da>
    2a14:	e09f      	b.n	2b56 <__aeabi_dsub+0x41a>
    2a16:	4b1a      	ldr	r3, [pc, #104]	; (2a80 <__aeabi_dsub+0x344>)
    2a18:	459c      	cmp	ip, r3
    2a1a:	d100      	bne.n	2a1e <__aeabi_dsub+0x2e2>
    2a1c:	e0c5      	b.n	2baa <__aeabi_dsub+0x46e>
    2a1e:	4452      	add	r2, sl
    2a20:	4552      	cmp	r2, sl
    2a22:	4180      	sbcs	r0, r0
    2a24:	1864      	adds	r4, r4, r1
    2a26:	4240      	negs	r0, r0
    2a28:	1824      	adds	r4, r4, r0
    2a2a:	07e7      	lsls	r7, r4, #31
    2a2c:	0852      	lsrs	r2, r2, #1
    2a2e:	4317      	orrs	r7, r2
    2a30:	0864      	lsrs	r4, r4, #1
    2a32:	4666      	mov	r6, ip
    2a34:	e708      	b.n	2848 <__aeabi_dsub+0x10c>
    2a36:	4812      	ldr	r0, [pc, #72]	; (2a80 <__aeabi_dsub+0x344>)
    2a38:	4285      	cmp	r5, r0
    2a3a:	d100      	bne.n	2a3e <__aeabi_dsub+0x302>
    2a3c:	e085      	b.n	2b4a <__aeabi_dsub+0x40e>
    2a3e:	001d      	movs	r5, r3
    2a40:	e6bc      	b.n	27bc <__aeabi_dsub+0x80>
    2a42:	0029      	movs	r1, r5
    2a44:	3e1f      	subs	r6, #31
    2a46:	40f1      	lsrs	r1, r6
    2a48:	2b20      	cmp	r3, #32
    2a4a:	d100      	bne.n	2a4e <__aeabi_dsub+0x312>
    2a4c:	e07f      	b.n	2b4e <__aeabi_dsub+0x412>
    2a4e:	2240      	movs	r2, #64	; 0x40
    2a50:	1ad3      	subs	r3, r2, r3
    2a52:	409d      	lsls	r5, r3
    2a54:	432f      	orrs	r7, r5
    2a56:	1e7d      	subs	r5, r7, #1
    2a58:	41af      	sbcs	r7, r5
    2a5a:	2400      	movs	r4, #0
    2a5c:	430f      	orrs	r7, r1
    2a5e:	2600      	movs	r6, #0
    2a60:	e78e      	b.n	2980 <__aeabi_dsub+0x244>
    2a62:	002b      	movs	r3, r5
    2a64:	000f      	movs	r7, r1
    2a66:	3b20      	subs	r3, #32
    2a68:	40df      	lsrs	r7, r3
    2a6a:	2d20      	cmp	r5, #32
    2a6c:	d071      	beq.n	2b52 <__aeabi_dsub+0x416>
    2a6e:	2340      	movs	r3, #64	; 0x40
    2a70:	1b5d      	subs	r5, r3, r5
    2a72:	40a9      	lsls	r1, r5
    2a74:	430a      	orrs	r2, r1
    2a76:	1e51      	subs	r1, r2, #1
    2a78:	418a      	sbcs	r2, r1
    2a7a:	2100      	movs	r1, #0
    2a7c:	4317      	orrs	r7, r2
    2a7e:	e6af      	b.n	27e0 <__aeabi_dsub+0xa4>
    2a80:	000007ff 	.word	0x000007ff
    2a84:	ff7fffff 	.word	0xff7fffff
    2a88:	800fffff 	.word	0x800fffff
    2a8c:	2e00      	cmp	r6, #0
    2a8e:	d03e      	beq.n	2b0e <__aeabi_dsub+0x3d2>
    2a90:	4eb3      	ldr	r6, [pc, #716]	; (2d60 <__aeabi_dsub+0x624>)
    2a92:	45b4      	cmp	ip, r6
    2a94:	d045      	beq.n	2b22 <__aeabi_dsub+0x3e6>
    2a96:	2680      	movs	r6, #128	; 0x80
    2a98:	0436      	lsls	r6, r6, #16
    2a9a:	426d      	negs	r5, r5
    2a9c:	4334      	orrs	r4, r6
    2a9e:	2d38      	cmp	r5, #56	; 0x38
    2aa0:	dd00      	ble.n	2aa4 <__aeabi_dsub+0x368>
    2aa2:	e0a8      	b.n	2bf6 <__aeabi_dsub+0x4ba>
    2aa4:	2d1f      	cmp	r5, #31
    2aa6:	dd00      	ble.n	2aaa <__aeabi_dsub+0x36e>
    2aa8:	e11f      	b.n	2cea <__aeabi_dsub+0x5ae>
    2aaa:	2620      	movs	r6, #32
    2aac:	0027      	movs	r7, r4
    2aae:	4650      	mov	r0, sl
    2ab0:	1b76      	subs	r6, r6, r5
    2ab2:	40b7      	lsls	r7, r6
    2ab4:	40e8      	lsrs	r0, r5
    2ab6:	4307      	orrs	r7, r0
    2ab8:	4650      	mov	r0, sl
    2aba:	40b0      	lsls	r0, r6
    2abc:	1e46      	subs	r6, r0, #1
    2abe:	41b0      	sbcs	r0, r6
    2ac0:	40ec      	lsrs	r4, r5
    2ac2:	4338      	orrs	r0, r7
    2ac4:	1a17      	subs	r7, r2, r0
    2ac6:	42ba      	cmp	r2, r7
    2ac8:	4192      	sbcs	r2, r2
    2aca:	1b0c      	subs	r4, r1, r4
    2acc:	4252      	negs	r2, r2
    2ace:	1aa4      	subs	r4, r4, r2
    2ad0:	4666      	mov	r6, ip
    2ad2:	4698      	mov	r8, r3
    2ad4:	e68b      	b.n	27ee <__aeabi_dsub+0xb2>
    2ad6:	4664      	mov	r4, ip
    2ad8:	4667      	mov	r7, ip
    2ada:	432c      	orrs	r4, r5
    2adc:	d000      	beq.n	2ae0 <__aeabi_dsub+0x3a4>
    2ade:	e68b      	b.n	27f8 <__aeabi_dsub+0xbc>
    2ae0:	2500      	movs	r5, #0
    2ae2:	2600      	movs	r6, #0
    2ae4:	2700      	movs	r7, #0
    2ae6:	e6ea      	b.n	28be <__aeabi_dsub+0x182>
    2ae8:	001e      	movs	r6, r3
    2aea:	e6ad      	b.n	2848 <__aeabi_dsub+0x10c>
    2aec:	2b1f      	cmp	r3, #31
    2aee:	dc60      	bgt.n	2bb2 <__aeabi_dsub+0x476>
    2af0:	2720      	movs	r7, #32
    2af2:	1af8      	subs	r0, r7, r3
    2af4:	000f      	movs	r7, r1
    2af6:	4684      	mov	ip, r0
    2af8:	4087      	lsls	r7, r0
    2afa:	0010      	movs	r0, r2
    2afc:	40d8      	lsrs	r0, r3
    2afe:	4307      	orrs	r7, r0
    2b00:	4660      	mov	r0, ip
    2b02:	4082      	lsls	r2, r0
    2b04:	1e50      	subs	r0, r2, #1
    2b06:	4182      	sbcs	r2, r0
    2b08:	40d9      	lsrs	r1, r3
    2b0a:	4317      	orrs	r7, r2
    2b0c:	e6f5      	b.n	28fa <__aeabi_dsub+0x1be>
    2b0e:	0026      	movs	r6, r4
    2b10:	4650      	mov	r0, sl
    2b12:	4306      	orrs	r6, r0
    2b14:	d005      	beq.n	2b22 <__aeabi_dsub+0x3e6>
    2b16:	43ed      	mvns	r5, r5
    2b18:	2d00      	cmp	r5, #0
    2b1a:	d0d3      	beq.n	2ac4 <__aeabi_dsub+0x388>
    2b1c:	4e90      	ldr	r6, [pc, #576]	; (2d60 <__aeabi_dsub+0x624>)
    2b1e:	45b4      	cmp	ip, r6
    2b20:	d1bd      	bne.n	2a9e <__aeabi_dsub+0x362>
    2b22:	000c      	movs	r4, r1
    2b24:	0017      	movs	r7, r2
    2b26:	4666      	mov	r6, ip
    2b28:	4698      	mov	r8, r3
    2b2a:	e68d      	b.n	2848 <__aeabi_dsub+0x10c>
    2b2c:	488c      	ldr	r0, [pc, #560]	; (2d60 <__aeabi_dsub+0x624>)
    2b2e:	4283      	cmp	r3, r0
    2b30:	d00b      	beq.n	2b4a <__aeabi_dsub+0x40e>
    2b32:	4663      	mov	r3, ip
    2b34:	e6d9      	b.n	28ea <__aeabi_dsub+0x1ae>
    2b36:	2d00      	cmp	r5, #0
    2b38:	d000      	beq.n	2b3c <__aeabi_dsub+0x400>
    2b3a:	e096      	b.n	2c6a <__aeabi_dsub+0x52e>
    2b3c:	0008      	movs	r0, r1
    2b3e:	4310      	orrs	r0, r2
    2b40:	d100      	bne.n	2b44 <__aeabi_dsub+0x408>
    2b42:	e0e2      	b.n	2d0a <__aeabi_dsub+0x5ce>
    2b44:	000c      	movs	r4, r1
    2b46:	0017      	movs	r7, r2
    2b48:	4698      	mov	r8, r3
    2b4a:	4e85      	ldr	r6, [pc, #532]	; (2d60 <__aeabi_dsub+0x624>)
    2b4c:	e67c      	b.n	2848 <__aeabi_dsub+0x10c>
    2b4e:	2500      	movs	r5, #0
    2b50:	e780      	b.n	2a54 <__aeabi_dsub+0x318>
    2b52:	2100      	movs	r1, #0
    2b54:	e78e      	b.n	2a74 <__aeabi_dsub+0x338>
    2b56:	0023      	movs	r3, r4
    2b58:	4650      	mov	r0, sl
    2b5a:	4303      	orrs	r3, r0
    2b5c:	2e00      	cmp	r6, #0
    2b5e:	d000      	beq.n	2b62 <__aeabi_dsub+0x426>
    2b60:	e0a8      	b.n	2cb4 <__aeabi_dsub+0x578>
    2b62:	2b00      	cmp	r3, #0
    2b64:	d100      	bne.n	2b68 <__aeabi_dsub+0x42c>
    2b66:	e0de      	b.n	2d26 <__aeabi_dsub+0x5ea>
    2b68:	000b      	movs	r3, r1
    2b6a:	4313      	orrs	r3, r2
    2b6c:	d100      	bne.n	2b70 <__aeabi_dsub+0x434>
    2b6e:	e66b      	b.n	2848 <__aeabi_dsub+0x10c>
    2b70:	4452      	add	r2, sl
    2b72:	4552      	cmp	r2, sl
    2b74:	4180      	sbcs	r0, r0
    2b76:	1864      	adds	r4, r4, r1
    2b78:	4240      	negs	r0, r0
    2b7a:	1824      	adds	r4, r4, r0
    2b7c:	0017      	movs	r7, r2
    2b7e:	0223      	lsls	r3, r4, #8
    2b80:	d400      	bmi.n	2b84 <__aeabi_dsub+0x448>
    2b82:	e6fd      	b.n	2980 <__aeabi_dsub+0x244>
    2b84:	4b77      	ldr	r3, [pc, #476]	; (2d64 <__aeabi_dsub+0x628>)
    2b86:	4666      	mov	r6, ip
    2b88:	401c      	ands	r4, r3
    2b8a:	e65d      	b.n	2848 <__aeabi_dsub+0x10c>
    2b8c:	0025      	movs	r5, r4
    2b8e:	4650      	mov	r0, sl
    2b90:	4305      	orrs	r5, r0
    2b92:	2e00      	cmp	r6, #0
    2b94:	d1cf      	bne.n	2b36 <__aeabi_dsub+0x3fa>
    2b96:	2d00      	cmp	r5, #0
    2b98:	d14f      	bne.n	2c3a <__aeabi_dsub+0x4fe>
    2b9a:	000c      	movs	r4, r1
    2b9c:	4314      	orrs	r4, r2
    2b9e:	d100      	bne.n	2ba2 <__aeabi_dsub+0x466>
    2ba0:	e0a0      	b.n	2ce4 <__aeabi_dsub+0x5a8>
    2ba2:	000c      	movs	r4, r1
    2ba4:	0017      	movs	r7, r2
    2ba6:	4698      	mov	r8, r3
    2ba8:	e64e      	b.n	2848 <__aeabi_dsub+0x10c>
    2baa:	4666      	mov	r6, ip
    2bac:	2400      	movs	r4, #0
    2bae:	2700      	movs	r7, #0
    2bb0:	e685      	b.n	28be <__aeabi_dsub+0x182>
    2bb2:	001f      	movs	r7, r3
    2bb4:	0008      	movs	r0, r1
    2bb6:	3f20      	subs	r7, #32
    2bb8:	40f8      	lsrs	r0, r7
    2bba:	0007      	movs	r7, r0
    2bbc:	2b20      	cmp	r3, #32
    2bbe:	d100      	bne.n	2bc2 <__aeabi_dsub+0x486>
    2bc0:	e08e      	b.n	2ce0 <__aeabi_dsub+0x5a4>
    2bc2:	2040      	movs	r0, #64	; 0x40
    2bc4:	1ac3      	subs	r3, r0, r3
    2bc6:	4099      	lsls	r1, r3
    2bc8:	430a      	orrs	r2, r1
    2bca:	1e51      	subs	r1, r2, #1
    2bcc:	418a      	sbcs	r2, r1
    2bce:	2100      	movs	r1, #0
    2bd0:	4317      	orrs	r7, r2
    2bd2:	e692      	b.n	28fa <__aeabi_dsub+0x1be>
    2bd4:	2e00      	cmp	r6, #0
    2bd6:	d114      	bne.n	2c02 <__aeabi_dsub+0x4c6>
    2bd8:	0026      	movs	r6, r4
    2bda:	4650      	mov	r0, sl
    2bdc:	4306      	orrs	r6, r0
    2bde:	d062      	beq.n	2ca6 <__aeabi_dsub+0x56a>
    2be0:	43db      	mvns	r3, r3
    2be2:	2b00      	cmp	r3, #0
    2be4:	d15c      	bne.n	2ca0 <__aeabi_dsub+0x564>
    2be6:	1887      	adds	r7, r0, r2
    2be8:	4297      	cmp	r7, r2
    2bea:	4192      	sbcs	r2, r2
    2bec:	1864      	adds	r4, r4, r1
    2bee:	4252      	negs	r2, r2
    2bf0:	18a4      	adds	r4, r4, r2
    2bf2:	4666      	mov	r6, ip
    2bf4:	e687      	b.n	2906 <__aeabi_dsub+0x1ca>
    2bf6:	4650      	mov	r0, sl
    2bf8:	4320      	orrs	r0, r4
    2bfa:	1e44      	subs	r4, r0, #1
    2bfc:	41a0      	sbcs	r0, r4
    2bfe:	2400      	movs	r4, #0
    2c00:	e760      	b.n	2ac4 <__aeabi_dsub+0x388>
    2c02:	4e57      	ldr	r6, [pc, #348]	; (2d60 <__aeabi_dsub+0x624>)
    2c04:	45b4      	cmp	ip, r6
    2c06:	d04e      	beq.n	2ca6 <__aeabi_dsub+0x56a>
    2c08:	2680      	movs	r6, #128	; 0x80
    2c0a:	0436      	lsls	r6, r6, #16
    2c0c:	425b      	negs	r3, r3
    2c0e:	4334      	orrs	r4, r6
    2c10:	2b38      	cmp	r3, #56	; 0x38
    2c12:	dd00      	ble.n	2c16 <__aeabi_dsub+0x4da>
    2c14:	e07f      	b.n	2d16 <__aeabi_dsub+0x5da>
    2c16:	2b1f      	cmp	r3, #31
    2c18:	dd00      	ble.n	2c1c <__aeabi_dsub+0x4e0>
    2c1a:	e08b      	b.n	2d34 <__aeabi_dsub+0x5f8>
    2c1c:	2620      	movs	r6, #32
    2c1e:	0027      	movs	r7, r4
    2c20:	4650      	mov	r0, sl
    2c22:	1af6      	subs	r6, r6, r3
    2c24:	40b7      	lsls	r7, r6
    2c26:	40d8      	lsrs	r0, r3
    2c28:	4307      	orrs	r7, r0
    2c2a:	4650      	mov	r0, sl
    2c2c:	40b0      	lsls	r0, r6
    2c2e:	1e46      	subs	r6, r0, #1
    2c30:	41b0      	sbcs	r0, r6
    2c32:	4307      	orrs	r7, r0
    2c34:	40dc      	lsrs	r4, r3
    2c36:	18bf      	adds	r7, r7, r2
    2c38:	e7d6      	b.n	2be8 <__aeabi_dsub+0x4ac>
    2c3a:	000d      	movs	r5, r1
    2c3c:	4315      	orrs	r5, r2
    2c3e:	d100      	bne.n	2c42 <__aeabi_dsub+0x506>
    2c40:	e602      	b.n	2848 <__aeabi_dsub+0x10c>
    2c42:	4650      	mov	r0, sl
    2c44:	1a80      	subs	r0, r0, r2
    2c46:	4582      	cmp	sl, r0
    2c48:	41bf      	sbcs	r7, r7
    2c4a:	1a65      	subs	r5, r4, r1
    2c4c:	427f      	negs	r7, r7
    2c4e:	1bed      	subs	r5, r5, r7
    2c50:	4684      	mov	ip, r0
    2c52:	0228      	lsls	r0, r5, #8
    2c54:	d400      	bmi.n	2c58 <__aeabi_dsub+0x51c>
    2c56:	e68d      	b.n	2974 <__aeabi_dsub+0x238>
    2c58:	4650      	mov	r0, sl
    2c5a:	1a17      	subs	r7, r2, r0
    2c5c:	42ba      	cmp	r2, r7
    2c5e:	4192      	sbcs	r2, r2
    2c60:	1b0c      	subs	r4, r1, r4
    2c62:	4252      	negs	r2, r2
    2c64:	1aa4      	subs	r4, r4, r2
    2c66:	4698      	mov	r8, r3
    2c68:	e5ee      	b.n	2848 <__aeabi_dsub+0x10c>
    2c6a:	000d      	movs	r5, r1
    2c6c:	4315      	orrs	r5, r2
    2c6e:	d100      	bne.n	2c72 <__aeabi_dsub+0x536>
    2c70:	e76b      	b.n	2b4a <__aeabi_dsub+0x40e>
    2c72:	4650      	mov	r0, sl
    2c74:	0767      	lsls	r7, r4, #29
    2c76:	08c0      	lsrs	r0, r0, #3
    2c78:	4307      	orrs	r7, r0
    2c7a:	2080      	movs	r0, #128	; 0x80
    2c7c:	08e4      	lsrs	r4, r4, #3
    2c7e:	0300      	lsls	r0, r0, #12
    2c80:	4204      	tst	r4, r0
    2c82:	d007      	beq.n	2c94 <__aeabi_dsub+0x558>
    2c84:	08cd      	lsrs	r5, r1, #3
    2c86:	4205      	tst	r5, r0
    2c88:	d104      	bne.n	2c94 <__aeabi_dsub+0x558>
    2c8a:	002c      	movs	r4, r5
    2c8c:	4698      	mov	r8, r3
    2c8e:	08d7      	lsrs	r7, r2, #3
    2c90:	0749      	lsls	r1, r1, #29
    2c92:	430f      	orrs	r7, r1
    2c94:	0f7b      	lsrs	r3, r7, #29
    2c96:	00e4      	lsls	r4, r4, #3
    2c98:	431c      	orrs	r4, r3
    2c9a:	00ff      	lsls	r7, r7, #3
    2c9c:	4e30      	ldr	r6, [pc, #192]	; (2d60 <__aeabi_dsub+0x624>)
    2c9e:	e5d3      	b.n	2848 <__aeabi_dsub+0x10c>
    2ca0:	4e2f      	ldr	r6, [pc, #188]	; (2d60 <__aeabi_dsub+0x624>)
    2ca2:	45b4      	cmp	ip, r6
    2ca4:	d1b4      	bne.n	2c10 <__aeabi_dsub+0x4d4>
    2ca6:	000c      	movs	r4, r1
    2ca8:	0017      	movs	r7, r2
    2caa:	4666      	mov	r6, ip
    2cac:	e5cc      	b.n	2848 <__aeabi_dsub+0x10c>
    2cae:	2700      	movs	r7, #0
    2cb0:	2400      	movs	r4, #0
    2cb2:	e5e8      	b.n	2886 <__aeabi_dsub+0x14a>
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d039      	beq.n	2d2c <__aeabi_dsub+0x5f0>
    2cb8:	000b      	movs	r3, r1
    2cba:	4313      	orrs	r3, r2
    2cbc:	d100      	bne.n	2cc0 <__aeabi_dsub+0x584>
    2cbe:	e744      	b.n	2b4a <__aeabi_dsub+0x40e>
    2cc0:	08c0      	lsrs	r0, r0, #3
    2cc2:	0767      	lsls	r7, r4, #29
    2cc4:	4307      	orrs	r7, r0
    2cc6:	2080      	movs	r0, #128	; 0x80
    2cc8:	08e4      	lsrs	r4, r4, #3
    2cca:	0300      	lsls	r0, r0, #12
    2ccc:	4204      	tst	r4, r0
    2cce:	d0e1      	beq.n	2c94 <__aeabi_dsub+0x558>
    2cd0:	08cb      	lsrs	r3, r1, #3
    2cd2:	4203      	tst	r3, r0
    2cd4:	d1de      	bne.n	2c94 <__aeabi_dsub+0x558>
    2cd6:	08d7      	lsrs	r7, r2, #3
    2cd8:	0749      	lsls	r1, r1, #29
    2cda:	430f      	orrs	r7, r1
    2cdc:	001c      	movs	r4, r3
    2cde:	e7d9      	b.n	2c94 <__aeabi_dsub+0x558>
    2ce0:	2100      	movs	r1, #0
    2ce2:	e771      	b.n	2bc8 <__aeabi_dsub+0x48c>
    2ce4:	2500      	movs	r5, #0
    2ce6:	2700      	movs	r7, #0
    2ce8:	e5e9      	b.n	28be <__aeabi_dsub+0x182>
    2cea:	002e      	movs	r6, r5
    2cec:	0027      	movs	r7, r4
    2cee:	3e20      	subs	r6, #32
    2cf0:	40f7      	lsrs	r7, r6
    2cf2:	2d20      	cmp	r5, #32
    2cf4:	d02f      	beq.n	2d56 <__aeabi_dsub+0x61a>
    2cf6:	2640      	movs	r6, #64	; 0x40
    2cf8:	1b75      	subs	r5, r6, r5
    2cfa:	40ac      	lsls	r4, r5
    2cfc:	4650      	mov	r0, sl
    2cfe:	4320      	orrs	r0, r4
    2d00:	1e44      	subs	r4, r0, #1
    2d02:	41a0      	sbcs	r0, r4
    2d04:	2400      	movs	r4, #0
    2d06:	4338      	orrs	r0, r7
    2d08:	e6dc      	b.n	2ac4 <__aeabi_dsub+0x388>
    2d0a:	2480      	movs	r4, #128	; 0x80
    2d0c:	2500      	movs	r5, #0
    2d0e:	0324      	lsls	r4, r4, #12
    2d10:	4e13      	ldr	r6, [pc, #76]	; (2d60 <__aeabi_dsub+0x624>)
    2d12:	2700      	movs	r7, #0
    2d14:	e5d3      	b.n	28be <__aeabi_dsub+0x182>
    2d16:	4650      	mov	r0, sl
    2d18:	4320      	orrs	r0, r4
    2d1a:	0007      	movs	r7, r0
    2d1c:	1e78      	subs	r0, r7, #1
    2d1e:	4187      	sbcs	r7, r0
    2d20:	2400      	movs	r4, #0
    2d22:	18bf      	adds	r7, r7, r2
    2d24:	e760      	b.n	2be8 <__aeabi_dsub+0x4ac>
    2d26:	000c      	movs	r4, r1
    2d28:	0017      	movs	r7, r2
    2d2a:	e58d      	b.n	2848 <__aeabi_dsub+0x10c>
    2d2c:	000c      	movs	r4, r1
    2d2e:	0017      	movs	r7, r2
    2d30:	4e0b      	ldr	r6, [pc, #44]	; (2d60 <__aeabi_dsub+0x624>)
    2d32:	e589      	b.n	2848 <__aeabi_dsub+0x10c>
    2d34:	001e      	movs	r6, r3
    2d36:	0027      	movs	r7, r4
    2d38:	3e20      	subs	r6, #32
    2d3a:	40f7      	lsrs	r7, r6
    2d3c:	2b20      	cmp	r3, #32
    2d3e:	d00c      	beq.n	2d5a <__aeabi_dsub+0x61e>
    2d40:	2640      	movs	r6, #64	; 0x40
    2d42:	1af3      	subs	r3, r6, r3
    2d44:	409c      	lsls	r4, r3
    2d46:	4650      	mov	r0, sl
    2d48:	4320      	orrs	r0, r4
    2d4a:	1e44      	subs	r4, r0, #1
    2d4c:	41a0      	sbcs	r0, r4
    2d4e:	4307      	orrs	r7, r0
    2d50:	2400      	movs	r4, #0
    2d52:	18bf      	adds	r7, r7, r2
    2d54:	e748      	b.n	2be8 <__aeabi_dsub+0x4ac>
    2d56:	2400      	movs	r4, #0
    2d58:	e7d0      	b.n	2cfc <__aeabi_dsub+0x5c0>
    2d5a:	2400      	movs	r4, #0
    2d5c:	e7f3      	b.n	2d46 <__aeabi_dsub+0x60a>
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	000007ff 	.word	0x000007ff
    2d64:	ff7fffff 	.word	0xff7fffff

00002d68 <__aeabi_d2iz>:
    2d68:	b530      	push	{r4, r5, lr}
    2d6a:	4d13      	ldr	r5, [pc, #76]	; (2db8 <__aeabi_d2iz+0x50>)
    2d6c:	030a      	lsls	r2, r1, #12
    2d6e:	004b      	lsls	r3, r1, #1
    2d70:	0b12      	lsrs	r2, r2, #12
    2d72:	0d5b      	lsrs	r3, r3, #21
    2d74:	0fc9      	lsrs	r1, r1, #31
    2d76:	2400      	movs	r4, #0
    2d78:	42ab      	cmp	r3, r5
    2d7a:	dd10      	ble.n	2d9e <__aeabi_d2iz+0x36>
    2d7c:	4c0f      	ldr	r4, [pc, #60]	; (2dbc <__aeabi_d2iz+0x54>)
    2d7e:	42a3      	cmp	r3, r4
    2d80:	dc0f      	bgt.n	2da2 <__aeabi_d2iz+0x3a>
    2d82:	2480      	movs	r4, #128	; 0x80
    2d84:	4d0e      	ldr	r5, [pc, #56]	; (2dc0 <__aeabi_d2iz+0x58>)
    2d86:	0364      	lsls	r4, r4, #13
    2d88:	4322      	orrs	r2, r4
    2d8a:	1aed      	subs	r5, r5, r3
    2d8c:	2d1f      	cmp	r5, #31
    2d8e:	dd0b      	ble.n	2da8 <__aeabi_d2iz+0x40>
    2d90:	480c      	ldr	r0, [pc, #48]	; (2dc4 <__aeabi_d2iz+0x5c>)
    2d92:	1ac3      	subs	r3, r0, r3
    2d94:	40da      	lsrs	r2, r3
    2d96:	4254      	negs	r4, r2
    2d98:	2900      	cmp	r1, #0
    2d9a:	d100      	bne.n	2d9e <__aeabi_d2iz+0x36>
    2d9c:	0014      	movs	r4, r2
    2d9e:	0020      	movs	r0, r4
    2da0:	bd30      	pop	{r4, r5, pc}
    2da2:	4b09      	ldr	r3, [pc, #36]	; (2dc8 <__aeabi_d2iz+0x60>)
    2da4:	18cc      	adds	r4, r1, r3
    2da6:	e7fa      	b.n	2d9e <__aeabi_d2iz+0x36>
    2da8:	4c08      	ldr	r4, [pc, #32]	; (2dcc <__aeabi_d2iz+0x64>)
    2daa:	40e8      	lsrs	r0, r5
    2dac:	46a4      	mov	ip, r4
    2dae:	4463      	add	r3, ip
    2db0:	409a      	lsls	r2, r3
    2db2:	4302      	orrs	r2, r0
    2db4:	e7ef      	b.n	2d96 <__aeabi_d2iz+0x2e>
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	000003fe 	.word	0x000003fe
    2dbc:	0000041d 	.word	0x0000041d
    2dc0:	00000433 	.word	0x00000433
    2dc4:	00000413 	.word	0x00000413
    2dc8:	7fffffff 	.word	0x7fffffff
    2dcc:	fffffbed 	.word	0xfffffbed

00002dd0 <__aeabi_ui2d>:
    2dd0:	b510      	push	{r4, lr}
    2dd2:	1e04      	subs	r4, r0, #0
    2dd4:	d028      	beq.n	2e28 <__aeabi_ui2d+0x58>
    2dd6:	f000 f833 	bl	2e40 <__clzsi2>
    2dda:	4b15      	ldr	r3, [pc, #84]	; (2e30 <__aeabi_ui2d+0x60>)
    2ddc:	4a15      	ldr	r2, [pc, #84]	; (2e34 <__aeabi_ui2d+0x64>)
    2dde:	1a1b      	subs	r3, r3, r0
    2de0:	1ad2      	subs	r2, r2, r3
    2de2:	2a1f      	cmp	r2, #31
    2de4:	dd15      	ble.n	2e12 <__aeabi_ui2d+0x42>
    2de6:	4a14      	ldr	r2, [pc, #80]	; (2e38 <__aeabi_ui2d+0x68>)
    2de8:	1ad2      	subs	r2, r2, r3
    2dea:	4094      	lsls	r4, r2
    2dec:	2200      	movs	r2, #0
    2dee:	0324      	lsls	r4, r4, #12
    2df0:	055b      	lsls	r3, r3, #21
    2df2:	0b24      	lsrs	r4, r4, #12
    2df4:	0d5b      	lsrs	r3, r3, #21
    2df6:	2100      	movs	r1, #0
    2df8:	0010      	movs	r0, r2
    2dfa:	0324      	lsls	r4, r4, #12
    2dfc:	0d0a      	lsrs	r2, r1, #20
    2dfe:	0b24      	lsrs	r4, r4, #12
    2e00:	0512      	lsls	r2, r2, #20
    2e02:	4322      	orrs	r2, r4
    2e04:	4c0d      	ldr	r4, [pc, #52]	; (2e3c <__aeabi_ui2d+0x6c>)
    2e06:	051b      	lsls	r3, r3, #20
    2e08:	4022      	ands	r2, r4
    2e0a:	4313      	orrs	r3, r2
    2e0c:	005b      	lsls	r3, r3, #1
    2e0e:	0859      	lsrs	r1, r3, #1
    2e10:	bd10      	pop	{r4, pc}
    2e12:	0021      	movs	r1, r4
    2e14:	4091      	lsls	r1, r2
    2e16:	000a      	movs	r2, r1
    2e18:	210b      	movs	r1, #11
    2e1a:	1a08      	subs	r0, r1, r0
    2e1c:	40c4      	lsrs	r4, r0
    2e1e:	055b      	lsls	r3, r3, #21
    2e20:	0324      	lsls	r4, r4, #12
    2e22:	0b24      	lsrs	r4, r4, #12
    2e24:	0d5b      	lsrs	r3, r3, #21
    2e26:	e7e6      	b.n	2df6 <__aeabi_ui2d+0x26>
    2e28:	2300      	movs	r3, #0
    2e2a:	2400      	movs	r4, #0
    2e2c:	2200      	movs	r2, #0
    2e2e:	e7e2      	b.n	2df6 <__aeabi_ui2d+0x26>
    2e30:	0000041e 	.word	0x0000041e
    2e34:	00000433 	.word	0x00000433
    2e38:	00000413 	.word	0x00000413
    2e3c:	800fffff 	.word	0x800fffff

00002e40 <__clzsi2>:
    2e40:	211c      	movs	r1, #28
    2e42:	2301      	movs	r3, #1
    2e44:	041b      	lsls	r3, r3, #16
    2e46:	4298      	cmp	r0, r3
    2e48:	d301      	bcc.n	2e4e <__clzsi2+0xe>
    2e4a:	0c00      	lsrs	r0, r0, #16
    2e4c:	3910      	subs	r1, #16
    2e4e:	0a1b      	lsrs	r3, r3, #8
    2e50:	4298      	cmp	r0, r3
    2e52:	d301      	bcc.n	2e58 <__clzsi2+0x18>
    2e54:	0a00      	lsrs	r0, r0, #8
    2e56:	3908      	subs	r1, #8
    2e58:	091b      	lsrs	r3, r3, #4
    2e5a:	4298      	cmp	r0, r3
    2e5c:	d301      	bcc.n	2e62 <__clzsi2+0x22>
    2e5e:	0900      	lsrs	r0, r0, #4
    2e60:	3904      	subs	r1, #4
    2e62:	a202      	add	r2, pc, #8	; (adr r2, 2e6c <__clzsi2+0x2c>)
    2e64:	5c10      	ldrb	r0, [r2, r0]
    2e66:	1840      	adds	r0, r0, r1
    2e68:	4770      	bx	lr
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	02020304 	.word	0x02020304
    2e70:	01010101 	.word	0x01010101
	...

00002e7c <__libc_init_array>:
    2e7c:	b570      	push	{r4, r5, r6, lr}
    2e7e:	2600      	movs	r6, #0
    2e80:	4d0c      	ldr	r5, [pc, #48]	; (2eb4 <__libc_init_array+0x38>)
    2e82:	4c0d      	ldr	r4, [pc, #52]	; (2eb8 <__libc_init_array+0x3c>)
    2e84:	1b64      	subs	r4, r4, r5
    2e86:	10a4      	asrs	r4, r4, #2
    2e88:	42a6      	cmp	r6, r4
    2e8a:	d109      	bne.n	2ea0 <__libc_init_array+0x24>
    2e8c:	2600      	movs	r6, #0
    2e8e:	f000 f88f 	bl	2fb0 <_init>
    2e92:	4d0a      	ldr	r5, [pc, #40]	; (2ebc <__libc_init_array+0x40>)
    2e94:	4c0a      	ldr	r4, [pc, #40]	; (2ec0 <__libc_init_array+0x44>)
    2e96:	1b64      	subs	r4, r4, r5
    2e98:	10a4      	asrs	r4, r4, #2
    2e9a:	42a6      	cmp	r6, r4
    2e9c:	d105      	bne.n	2eaa <__libc_init_array+0x2e>
    2e9e:	bd70      	pop	{r4, r5, r6, pc}
    2ea0:	00b3      	lsls	r3, r6, #2
    2ea2:	58eb      	ldr	r3, [r5, r3]
    2ea4:	4798      	blx	r3
    2ea6:	3601      	adds	r6, #1
    2ea8:	e7ee      	b.n	2e88 <__libc_init_array+0xc>
    2eaa:	00b3      	lsls	r3, r6, #2
    2eac:	58eb      	ldr	r3, [r5, r3]
    2eae:	4798      	blx	r3
    2eb0:	3601      	adds	r6, #1
    2eb2:	e7f2      	b.n	2e9a <__libc_init_array+0x1e>
    2eb4:	00002fbc 	.word	0x00002fbc
    2eb8:	00002fbc 	.word	0x00002fbc
    2ebc:	00002fbc 	.word	0x00002fbc
    2ec0:	00002fc0 	.word	0x00002fc0
    2ec4:	42000800 	.word	0x42000800
    2ec8:	42000c00 	.word	0x42000c00
    2ecc:	42001000 	.word	0x42001000
    2ed0:	42001400 	.word	0x42001400
    2ed4:	42001800 	.word	0x42001800
    2ed8:	42001c00 	.word	0x42001c00
    2edc:	00000c7e 	.word	0x00000c7e
    2ee0:	00000c7a 	.word	0x00000c7a
    2ee4:	00000c7a 	.word	0x00000c7a
    2ee8:	00000ce0 	.word	0x00000ce0
    2eec:	00000ce0 	.word	0x00000ce0
    2ef0:	00000c92 	.word	0x00000c92
    2ef4:	00000c84 	.word	0x00000c84
    2ef8:	00000c98 	.word	0x00000c98
    2efc:	00000cce 	.word	0x00000cce
    2f00:	00000de4 	.word	0x00000de4
    2f04:	00000dc4 	.word	0x00000dc4
    2f08:	00000dc4 	.word	0x00000dc4
    2f0c:	00000e50 	.word	0x00000e50
    2f10:	00000dd6 	.word	0x00000dd6
    2f14:	00000df2 	.word	0x00000df2
    2f18:	00000dc8 	.word	0x00000dc8
    2f1c:	00000e00 	.word	0x00000e00
    2f20:	00000e40 	.word	0x00000e40
    2f24:	00020001 	.word	0x00020001
    2f28:	20000020 	.word	0x20000020
    2f2c:	00000000 	.word	0x00000000
    2f30:	00001dcc 	.word	0x00001dcc
    2f34:	00001dae 	.word	0x00001dae
    2f38:	00001d68 	.word	0x00001d68
    2f3c:	00001c86 	.word	0x00001c86
    2f40:	00001d68 	.word	0x00001d68
    2f44:	00001da0 	.word	0x00001da0
    2f48:	00001d68 	.word	0x00001d68
    2f4c:	00001c86 	.word	0x00001c86
    2f50:	00001dae 	.word	0x00001dae
    2f54:	00001dae 	.word	0x00001dae
    2f58:	00001da0 	.word	0x00001da0
    2f5c:	00001c86 	.word	0x00001c86
    2f60:	00001c7e 	.word	0x00001c7e
    2f64:	00001c7e 	.word	0x00001c7e
    2f68:	00001c7e 	.word	0x00001c7e
    2f6c:	00001fe4 	.word	0x00001fe4
    2f70:	0000242c 	.word	0x0000242c
    2f74:	000022ec 	.word	0x000022ec
    2f78:	000022ec 	.word	0x000022ec
    2f7c:	000022e8 	.word	0x000022e8
    2f80:	00002404 	.word	0x00002404
    2f84:	00002404 	.word	0x00002404
    2f88:	000023f6 	.word	0x000023f6
    2f8c:	000022e8 	.word	0x000022e8
    2f90:	00002404 	.word	0x00002404
    2f94:	000023f6 	.word	0x000023f6
    2f98:	00002404 	.word	0x00002404
    2f9c:	000022e8 	.word	0x000022e8
    2fa0:	0000240c 	.word	0x0000240c
    2fa4:	0000240c 	.word	0x0000240c
    2fa8:	0000240c 	.word	0x0000240c
    2fac:	00002610 	.word	0x00002610

00002fb0 <_init>:
    2fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fb6:	bc08      	pop	{r3}
    2fb8:	469e      	mov	lr, r3
    2fba:	4770      	bx	lr

00002fbc <__init_array_start>:
    2fbc:	000000dd 	.word	0x000000dd

00002fc0 <_fini>:
    2fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fc2:	46c0      	nop			; (mov r8, r8)
    2fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fc6:	bc08      	pop	{r3}
    2fc8:	469e      	mov	lr, r3
    2fca:	4770      	bx	lr

00002fcc <__fini_array_start>:
    2fcc:	000000b5 	.word	0x000000b5
